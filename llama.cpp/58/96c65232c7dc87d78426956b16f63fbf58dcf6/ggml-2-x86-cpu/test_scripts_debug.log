+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.654 I build: 4402 (5896c652) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.000.872 I main: load the model and apply lora adapter, if any
0.00.022.898 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.909 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.995 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.006 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.008 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.013 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.017 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.019 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.020 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.021 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.022 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.036 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.037 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.039 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.040 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.042 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.317 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.242 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.268 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.276 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.278 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.279 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.280 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.282 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.283 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.287 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.288 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.290 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.291 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.351.293 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.302 I llama_model_loader: - type  f32:   37 tensors
0.00.351.305 I llama_model_loader: - type q8_0:  127 tensors
0.00.572.546 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.644.384 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.645.392 I llm_load_vocab: special tokens cache size = 5
0.00.858.636 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.858.709 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.858.710 I llm_load_print_meta: arch             = gemma
0.00.858.711 I llm_load_print_meta: vocab type       = SPM
0.00.858.712 I llm_load_print_meta: n_vocab          = 256000
0.00.858.714 I llm_load_print_meta: n_merges         = 0
0.00.858.715 I llm_load_print_meta: vocab_only       = 0
0.00.858.715 I llm_load_print_meta: n_ctx_train      = 8192
0.00.858.716 I llm_load_print_meta: n_embd           = 2048
0.00.858.716 I llm_load_print_meta: n_layer          = 18
0.00.858.780 I llm_load_print_meta: n_head           = 8
0.00.858.788 I llm_load_print_meta: n_head_kv        = 1
0.00.858.790 I llm_load_print_meta: n_rot            = 256
0.00.858.790 I llm_load_print_meta: n_swa            = 0
0.00.858.791 I llm_load_print_meta: n_embd_head_k    = 256
0.00.858.791 I llm_load_print_meta: n_embd_head_v    = 256
0.00.858.796 I llm_load_print_meta: n_gqa            = 8
0.00.858.801 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.858.807 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.858.809 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.858.810 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.858.810 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.858.810 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.858.811 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.858.816 I llm_load_print_meta: n_ff             = 16384
0.00.858.817 I llm_load_print_meta: n_expert         = 0
0.00.858.818 I llm_load_print_meta: n_expert_used    = 0
0.00.858.818 I llm_load_print_meta: causal attn      = 1
0.00.858.820 I llm_load_print_meta: pooling type     = 0
0.00.858.820 I llm_load_print_meta: rope type        = 2
0.00.858.820 I llm_load_print_meta: rope scaling     = linear
0.00.858.822 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.858.824 I llm_load_print_meta: freq_scale_train = 1
0.00.858.824 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.858.825 I llm_load_print_meta: rope_finetuned   = unknown
0.00.858.826 I llm_load_print_meta: ssm_d_conv       = 0
0.00.858.826 I llm_load_print_meta: ssm_d_inner      = 0
0.00.858.827 I llm_load_print_meta: ssm_d_state      = 0
0.00.858.827 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.858.828 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.858.829 I llm_load_print_meta: model type       = 2B
0.00.858.830 I llm_load_print_meta: model ftype      = Q8_0
0.00.858.831 I llm_load_print_meta: model params     = 2.51 B
0.00.858.832 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.858.833 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.858.833 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.858.834 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.858.835 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.858.835 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.858.835 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.858.836 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.858.842 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.858.844 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.858.845 I llm_load_print_meta: max token length = 93
0.00.961.834 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.961.844 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.961.846 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.961.847 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.961.848 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.961.849 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.968.092 I llama_new_context_with_model: n_seq_max     = 1
0.00.968.100 I llama_new_context_with_model: n_ctx         = 4096
0.00.968.100 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.968.101 I llama_new_context_with_model: n_batch       = 2048
0.00.968.101 I llama_new_context_with_model: n_ubatch      = 512
0.00.968.102 I llama_new_context_with_model: flash_attn    = 0
0.00.968.104 I llama_new_context_with_model: freq_base     = 10000.0
0.00.968.105 I llama_new_context_with_model: freq_scale    = 1
0.00.968.106 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.968.190 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.982.411 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.982.451 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.982.575 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.985.265 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.985.270 I llama_new_context_with_model: graph nodes  = 601
0.00.985.270 I llama_new_context_with_model: graph splits = 1
0.00.985.293 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.985.296 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.596.122 I main: llama threadpool init, n_threads = 4
0.01.596.139 I 
0.01.596.263 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.596.267 I 
0.01.596.514 I sampler seed: 4280028852
0.01.596.527 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.596.537 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.596.540 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.596.541 I 
 increasements, and use the following vocabulary words:

**Replicate**
**Simulate**
**Analogous**
**Authentic**
**Artificial

0.15.064.415 I llama_perf_sampler_print:    sampling time =      49.43 ms /    33 runs   (    1.50 ms per token,   667.60 tokens per second)
0.15.064.418 I llama_perf_context_print:        load time =    1595.16 ms
0.15.064.444 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.064.446 I llama_perf_context_print:        eval time =   13378.85 ms /    32 runs   (  418.09 ms per token,     2.39 tokens per second)
0.15.064.446 I llama_perf_context_print:       total time =   13468.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 4402 (5896c652) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.000.836 I main: load the model and apply lora adapter, if any
0.00.023.409 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.500 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.514 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.517 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.520 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.523 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.524 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.525 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.527 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.528 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.534 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.536 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.537 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.538 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.540 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.626 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.593 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.678 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.687 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.689 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.690 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.691 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.693 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.694 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.698 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.699 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.701 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.702 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.351.703 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.712 I llama_model_loader: - type  f32:   37 tensors
0.00.351.714 I llama_model_loader: - type q8_0:  127 tensors
0.00.589.785 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.652.876 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.653.806 I llm_load_vocab: special tokens cache size = 5
0.00.858.777 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.858.851 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.858.852 I llm_load_print_meta: arch             = gemma
0.00.858.853 I llm_load_print_meta: vocab type       = SPM
0.00.858.854 I llm_load_print_meta: n_vocab          = 256000
0.00.858.856 I llm_load_print_meta: n_merges         = 0
0.00.858.857 I llm_load_print_meta: vocab_only       = 0
0.00.858.857 I llm_load_print_meta: n_ctx_train      = 8192
0.00.858.858 I llm_load_print_meta: n_embd           = 2048
0.00.858.858 I llm_load_print_meta: n_layer          = 18
0.00.858.927 I llm_load_print_meta: n_head           = 8
0.00.858.934 I llm_load_print_meta: n_head_kv        = 1
0.00.858.935 I llm_load_print_meta: n_rot            = 256
0.00.858.935 I llm_load_print_meta: n_swa            = 0
0.00.858.935 I llm_load_print_meta: n_embd_head_k    = 256
0.00.858.936 I llm_load_print_meta: n_embd_head_v    = 256
0.00.858.940 I llm_load_print_meta: n_gqa            = 8
0.00.858.945 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.858.950 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.858.951 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.858.953 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.858.953 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.858.954 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.858.954 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.858.959 I llm_load_print_meta: n_ff             = 16384
0.00.858.959 I llm_load_print_meta: n_expert         = 0
0.00.858.960 I llm_load_print_meta: n_expert_used    = 0
0.00.858.960 I llm_load_print_meta: causal attn      = 1
0.00.858.961 I llm_load_print_meta: pooling type     = 0
0.00.858.961 I llm_load_print_meta: rope type        = 2
0.00.858.962 I llm_load_print_meta: rope scaling     = linear
0.00.858.963 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.858.964 I llm_load_print_meta: freq_scale_train = 1
0.00.858.964 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.858.964 I llm_load_print_meta: rope_finetuned   = unknown
0.00.858.965 I llm_load_print_meta: ssm_d_conv       = 0
0.00.858.965 I llm_load_print_meta: ssm_d_inner      = 0
0.00.858.965 I llm_load_print_meta: ssm_d_state      = 0
0.00.858.965 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.858.966 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.858.966 I llm_load_print_meta: model type       = 2B
0.00.858.967 I llm_load_print_meta: model ftype      = Q8_0
0.00.858.968 I llm_load_print_meta: model params     = 2.51 B
0.00.858.969 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.858.969 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.858.970 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.858.970 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.858.971 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.858.971 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.858.992 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.858.993 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.858.999 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.859.001 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.859.001 I llm_load_print_meta: max token length = 93
0.00.955.261 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.961.382 I llama_new_context_with_model: n_seq_max     = 1
0.00.961.389 I llama_new_context_with_model: n_ctx         = 4096
0.00.961.390 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.961.390 I llama_new_context_with_model: n_batch       = 2048
0.00.961.390 I llama_new_context_with_model: n_ubatch      = 512
0.00.961.391 I llama_new_context_with_model: flash_attn    = 0
0.00.961.393 I llama_new_context_with_model: freq_base     = 10000.0
0.00.961.394 I llama_new_context_with_model: freq_scale    = 1
0.00.961.395 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.961.480 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.976.306 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.976.345 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.976.457 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.979.007 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.979.011 I llama_new_context_with_model: graph nodes  = 601
0.00.979.011 I llama_new_context_with_model: graph splits = 1
0.00.979.034 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.979.036 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.588.874 I main: llama threadpool init, n_threads = 4
0.01.588.890 I 
0.01.589.010 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.589.014 I 
0.01.589.244 I sampler seed: 2363672458
0.01.589.259 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.589.271 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.589.272 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.589.272 I 
 increasities with the rhythm of a drum solo. 

This is a description of a song. It sounds like it could be a description of a psychedelic or

0.15.099.069 I llama_perf_sampler_print:    sampling time =      49.54 ms /    33 runs   (    1.50 ms per token,   666.07 tokens per second)
0.15.099.073 I llama_perf_context_print:        load time =    1587.95 ms
0.15.099.075 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.099.077 I llama_perf_context_print:        eval time =   13420.63 ms /    32 runs   (  419.39 ms per token,     2.38 tokens per second)
0.15.099.078 I llama_perf_context_print:       total time =   13510.20 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 4402 (5896c652) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.877 I main: llama backend init
0.00.000.885 I main: load the model and apply lora adapter, if any
0.00.025.570 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.578 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.677 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.689 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.691 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.696 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.702 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.704 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.706 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.709 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.711 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.718 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.721 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.724 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.727 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.729 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.239.145 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.341.480 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.365.658 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.365.673 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.365.676 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.365.678 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.365.680 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.365.682 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.365.684 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.365.690 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.365.691 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.365.694 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.365.706 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.365.709 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.365.718 I llama_model_loader: - type  f32:   37 tensors
0.00.365.728 I llama_model_loader: - type q8_0:  127 tensors
0.00.594.052 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.653.172 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.654.091 I llm_load_vocab: special tokens cache size = 5
0.00.874.781 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.874.871 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.874.877 I llm_load_print_meta: arch             = gemma
0.00.874.878 I llm_load_print_meta: vocab type       = SPM
0.00.874.879 I llm_load_print_meta: n_vocab          = 256000
0.00.874.881 I llm_load_print_meta: n_merges         = 0
0.00.874.882 I llm_load_print_meta: vocab_only       = 0
0.00.874.882 I llm_load_print_meta: n_ctx_train      = 8192
0.00.874.883 I llm_load_print_meta: n_embd           = 2048
0.00.874.883 I llm_load_print_meta: n_layer          = 18
0.00.874.960 I llm_load_print_meta: n_head           = 8
0.00.874.971 I llm_load_print_meta: n_head_kv        = 1
0.00.874.978 I llm_load_print_meta: n_rot            = 256
0.00.874.979 I llm_load_print_meta: n_swa            = 0
0.00.874.980 I llm_load_print_meta: n_embd_head_k    = 256
0.00.874.980 I llm_load_print_meta: n_embd_head_v    = 256
0.00.874.985 I llm_load_print_meta: n_gqa            = 8
0.00.874.990 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.874.997 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.875.000 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.875.005 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.875.005 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.875.006 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.875.007 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.875.015 I llm_load_print_meta: n_ff             = 16384
0.00.875.016 I llm_load_print_meta: n_expert         = 0
0.00.875.018 I llm_load_print_meta: n_expert_used    = 0
0.00.875.019 I llm_load_print_meta: causal attn      = 1
0.00.875.019 I llm_load_print_meta: pooling type     = 0
0.00.875.030 I llm_load_print_meta: rope type        = 2
0.00.875.031 I llm_load_print_meta: rope scaling     = linear
0.00.875.033 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.875.034 I llm_load_print_meta: freq_scale_train = 1
0.00.875.034 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.875.035 I llm_load_print_meta: rope_finetuned   = unknown
0.00.875.036 I llm_load_print_meta: ssm_d_conv       = 0
0.00.875.037 I llm_load_print_meta: ssm_d_inner      = 0
0.00.875.038 I llm_load_print_meta: ssm_d_state      = 0
0.00.875.038 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.875.039 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.875.040 I llm_load_print_meta: model type       = 2B
0.00.875.041 I llm_load_print_meta: model ftype      = Q8_0
0.00.875.043 I llm_load_print_meta: model params     = 2.51 B
0.00.875.045 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.875.046 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.875.047 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.875.048 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.875.050 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.875.050 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.875.051 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.875.052 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.875.059 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.875.061 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.875.062 I llm_load_print_meta: max token length = 93
0.00.954.367 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.954.375 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.954.376 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.954.377 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.954.377 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.954.378 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.960.527 I llama_new_context_with_model: n_seq_max     = 1
0.00.960.534 I llama_new_context_with_model: n_ctx         = 4096
0.00.960.534 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.960.535 I llama_new_context_with_model: n_batch       = 2048
0.00.960.535 I llama_new_context_with_model: n_ubatch      = 512
0.00.960.536 I llama_new_context_with_model: flash_attn    = 0
0.00.960.538 I llama_new_context_with_model: freq_base     = 10000.0
0.00.960.538 I llama_new_context_with_model: freq_scale    = 1
0.00.960.539 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.960.629 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.975.160 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.975.198 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.975.316 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.977.935 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.977.939 I llama_new_context_with_model: graph nodes  = 601
0.00.977.940 I llama_new_context_with_model: graph splits = 1
0.00.977.965 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.977.968 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.623.563 I main: llama threadpool init, n_threads = 4
0.01.623.579 I 
0.01.623.712 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.623.716 I 
0.01.623.954 I sampler seed: 2493135920
0.01.623.968 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.623.982 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.623.983 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.623.984 I 
 increasities to the question of why some individuals experience severe cognitive impairment (SCI) following head injury.

**Background:**

- SCI is a common and debilitating

0.15.085.177 I llama_perf_sampler_print:    sampling time =      49.65 ms /    33 runs   (    1.50 ms per token,   664.72 tokens per second)
0.15.085.192 I llama_perf_context_print:        load time =    1622.58 ms
0.15.085.194 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.085.195 I llama_perf_context_print:        eval time =   13371.63 ms /    32 runs   (  417.86 ms per token,     2.39 tokens per second)
0.15.085.196 I llama_perf_context_print:       total time =   13461.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.672 I build: 4402 (5896c652) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.875 I main: llama backend init
0.00.000.884 I main: load the model and apply lora adapter, if any
0.00.023.550 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.563 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.664 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.677 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.679 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.684 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.688 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.690 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.692 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.694 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.697 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.705 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.711 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.713 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.716 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.718 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.240.722 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.343.018 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.367.210 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.367.224 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.367.225 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.367.226 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.367.227 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.367.229 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.367.230 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.367.234 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.367.236 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.367.237 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.367.255 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.367.260 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.367.270 I llama_model_loader: - type  f32:   37 tensors
0.00.367.273 I llama_model_loader: - type q8_0:  127 tensors
0.00.594.331 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.653.308 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.654.252 I llm_load_vocab: special tokens cache size = 5
0.00.880.057 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.880.128 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.880.133 I llm_load_print_meta: arch             = gemma
0.00.880.134 I llm_load_print_meta: vocab type       = SPM
0.00.880.136 I llm_load_print_meta: n_vocab          = 256000
0.00.880.138 I llm_load_print_meta: n_merges         = 0
0.00.880.139 I llm_load_print_meta: vocab_only       = 0
0.00.880.141 I llm_load_print_meta: n_ctx_train      = 8192
0.00.880.142 I llm_load_print_meta: n_embd           = 2048
0.00.880.142 I llm_load_print_meta: n_layer          = 18
0.00.880.226 I llm_load_print_meta: n_head           = 8
0.00.880.237 I llm_load_print_meta: n_head_kv        = 1
0.00.880.237 I llm_load_print_meta: n_rot            = 256
0.00.880.238 I llm_load_print_meta: n_swa            = 0
0.00.880.238 I llm_load_print_meta: n_embd_head_k    = 256
0.00.880.238 I llm_load_print_meta: n_embd_head_v    = 256
0.00.880.243 I llm_load_print_meta: n_gqa            = 8
0.00.880.248 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.880.255 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.880.260 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.880.262 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.880.263 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.880.264 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.880.265 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.880.279 I llm_load_print_meta: n_ff             = 16384
0.00.880.281 I llm_load_print_meta: n_expert         = 0
0.00.880.282 I llm_load_print_meta: n_expert_used    = 0
0.00.880.283 I llm_load_print_meta: causal attn      = 1
0.00.880.283 I llm_load_print_meta: pooling type     = 0
0.00.880.284 I llm_load_print_meta: rope type        = 2
0.00.880.285 I llm_load_print_meta: rope scaling     = linear
0.00.880.295 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.880.296 I llm_load_print_meta: freq_scale_train = 1
0.00.880.297 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.880.300 I llm_load_print_meta: rope_finetuned   = unknown
0.00.880.301 I llm_load_print_meta: ssm_d_conv       = 0
0.00.880.301 I llm_load_print_meta: ssm_d_inner      = 0
0.00.880.302 I llm_load_print_meta: ssm_d_state      = 0
0.00.880.303 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.880.303 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.880.304 I llm_load_print_meta: model type       = 2B
0.00.880.306 I llm_load_print_meta: model ftype      = Q8_0
0.00.880.307 I llm_load_print_meta: model params     = 2.51 B
0.00.880.308 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.880.309 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.880.311 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.880.312 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.880.312 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.880.313 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.880.314 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.880.315 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.880.322 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.880.324 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.880.325 I llm_load_print_meta: max token length = 93
0.00.953.635 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.953.644 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.959.862 I llama_new_context_with_model: n_seq_max     = 1
0.00.959.869 I llama_new_context_with_model: n_ctx         = 4096
0.00.959.869 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.959.870 I llama_new_context_with_model: n_batch       = 2048
0.00.959.870 I llama_new_context_with_model: n_ubatch      = 512
0.00.959.870 I llama_new_context_with_model: flash_attn    = 0
0.00.959.874 I llama_new_context_with_model: freq_base     = 10000.0
0.00.959.874 I llama_new_context_with_model: freq_scale    = 1
0.00.959.875 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.959.973 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.974.910 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.974.949 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.975.068 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.977.669 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.977.673 I llama_new_context_with_model: graph nodes  = 601
0.00.977.674 I llama_new_context_with_model: graph splits = 1
0.00.977.697 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.977.700 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.586.511 I main: llama threadpool init, n_threads = 4
0.01.586.527 I 
0.01.586.660 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.586.665 I 
0.01.586.910 I sampler seed: 2766016151
0.01.586.924 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.586.936 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.586.939 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.586.939 I 
 increasities. 

I cannot find the requested information in the provided context. [end of text]


0.08.732.782 I llama_perf_sampler_print:    sampling time =      26.39 ms /    18 runs   (    1.47 ms per token,   681.95 tokens per second)
0.08.732.785 I llama_perf_context_print:        load time =    1585.52 ms
0.08.732.787 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.732.800 I llama_perf_context_print:        eval time =    7097.84 ms /    17 runs   (  417.52 ms per token,     2.40 tokens per second)
0.08.732.801 I llama_perf_context_print:       total time =    7146.28 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m3.668s
user	3m24.184s
sys	0m9.394s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4402 (5896c652)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185707.99 ms
main:    total time = 185707.99 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.674 I build: 4402 (5896c652) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.877 I main: llama backend init
0.00.000.886 I main: load the model and apply lora adapter, if any
0.00.023.634 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.646 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.745 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.759 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.761 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.765 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.769 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.771 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.772 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.773 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.774 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.782 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.792 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.794 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.795 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.797 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.497 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.849 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.874 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.882 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.883 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.885 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.886 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.888 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.889 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.893 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.894 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.896 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.897 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.351.898 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.906 I llama_model_loader: - type  f32:   37 tensors
0.00.351.908 I llama_model_loader: - type q4_K:  108 tensors
0.00.351.909 I llama_model_loader: - type q6_K:   19 tensors
0.00.565.006 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.624.831 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.625.727 I llm_load_vocab: special tokens cache size = 5
0.00.828.407 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.828.480 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.828.481 I llm_load_print_meta: arch             = gemma
0.00.828.482 I llm_load_print_meta: vocab type       = SPM
0.00.828.482 I llm_load_print_meta: n_vocab          = 256000
0.00.828.485 I llm_load_print_meta: n_merges         = 0
0.00.828.486 I llm_load_print_meta: vocab_only       = 0
0.00.828.486 I llm_load_print_meta: n_ctx_train      = 8192
0.00.828.486 I llm_load_print_meta: n_embd           = 2048
0.00.828.487 I llm_load_print_meta: n_layer          = 18
0.00.828.554 I llm_load_print_meta: n_head           = 8
0.00.828.561 I llm_load_print_meta: n_head_kv        = 1
0.00.828.562 I llm_load_print_meta: n_rot            = 256
0.00.828.562 I llm_load_print_meta: n_swa            = 0
0.00.828.562 I llm_load_print_meta: n_embd_head_k    = 256
0.00.828.563 I llm_load_print_meta: n_embd_head_v    = 256
0.00.828.568 I llm_load_print_meta: n_gqa            = 8
0.00.828.572 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.828.577 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.828.579 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.828.580 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.828.581 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.828.581 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.828.582 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.828.587 I llm_load_print_meta: n_ff             = 16384
0.00.828.588 I llm_load_print_meta: n_expert         = 0
0.00.828.588 I llm_load_print_meta: n_expert_used    = 0
0.00.828.589 I llm_load_print_meta: causal attn      = 1
0.00.828.589 I llm_load_print_meta: pooling type     = 0
0.00.828.590 I llm_load_print_meta: rope type        = 2
0.00.828.590 I llm_load_print_meta: rope scaling     = linear
0.00.828.592 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.828.592 I llm_load_print_meta: freq_scale_train = 1
0.00.828.593 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.828.593 I llm_load_print_meta: rope_finetuned   = unknown
0.00.828.594 I llm_load_print_meta: ssm_d_conv       = 0
0.00.828.594 I llm_load_print_meta: ssm_d_inner      = 0
0.00.828.595 I llm_load_print_meta: ssm_d_state      = 0
0.00.828.596 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.828.596 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.828.597 I llm_load_print_meta: model type       = 2B
0.00.828.598 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.828.598 I llm_load_print_meta: model params     = 2.51 B
0.00.828.599 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.828.599 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.828.600 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.828.601 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.828.601 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.828.602 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.828.603 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.828.603 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.828.609 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.828.610 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.828.611 I llm_load_print_meta: max token length = 93
0.00.891.797 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.891.806 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.891.807 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.891.808 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.891.808 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.891.809 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.897.616 I llama_new_context_with_model: n_seq_max     = 1
0.00.897.623 I llama_new_context_with_model: n_ctx         = 4096
0.00.897.623 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.897.624 I llama_new_context_with_model: n_batch       = 2048
0.00.897.624 I llama_new_context_with_model: n_ubatch      = 512
0.00.897.625 I llama_new_context_with_model: flash_attn    = 0
0.00.897.628 I llama_new_context_with_model: freq_base     = 10000.0
0.00.897.629 I llama_new_context_with_model: freq_scale    = 1
0.00.897.629 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.897.715 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.911.986 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.912.026 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.912.142 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.914.793 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.914.796 I llama_new_context_with_model: graph nodes  = 601
0.00.914.796 I llama_new_context_with_model: graph splits = 1
0.00.914.820 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.914.823 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.494.259 I main: llama threadpool init, n_threads = 4
0.01.494.276 I 
0.01.494.398 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.494.402 I 
0.01.494.636 I sampler seed: 2670904044
0.01.494.650 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.494.659 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.494.662 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.494.662 I 
 increamically, seeking to engulf the entire world in his insatiable thirst for power.

This individual is a powerful example of the potential consequences of unchecked ambition and unchecked

0.12.609.313 I llama_perf_sampler_print:    sampling time =      49.69 ms /    33 runs   (    1.51 ms per token,   664.18 tokens per second)
0.12.609.317 I llama_perf_context_print:        load time =    1493.27 ms
0.12.609.319 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.609.321 I llama_perf_context_print:        eval time =   11025.19 ms /    32 runs   (  344.54 ms per token,     2.90 tokens per second)
0.12.609.322 I llama_perf_context_print:       total time =   11115.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4402 (5896c652)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185612.73 ms
main:    total time = 185612.73 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.670 I build: 4402 (5896c652) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.890 I main: llama backend init
0.00.000.899 I main: load the model and apply lora adapter, if any
0.00.023.079 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.191 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.210 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.214 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.219 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.221 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.222 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.223 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.225 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.229 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.237 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.238 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.239 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.241 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.242 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.251.079 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.354.246 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.378.304 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.378.314 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.378.315 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.378.316 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.378.318 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.378.319 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.378.320 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.378.324 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.378.326 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.378.334 I llama_model_loader: - type  f32:   37 tensors
0.00.378.336 I llama_model_loader: - type q4_K:  108 tensors
0.00.378.337 I llama_model_loader: - type q6_K:   19 tensors
0.00.594.811 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.654.117 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.655.008 I llm_load_vocab: special tokens cache size = 5
0.00.875.350 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.875.421 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.875.422 I llm_load_print_meta: arch             = gemma
0.00.875.423 I llm_load_print_meta: vocab type       = SPM
0.00.875.424 I llm_load_print_meta: n_vocab          = 256000
0.00.875.427 I llm_load_print_meta: n_merges         = 0
0.00.875.427 I llm_load_print_meta: vocab_only       = 0
0.00.875.428 I llm_load_print_meta: n_ctx_train      = 8192
0.00.875.428 I llm_load_print_meta: n_embd           = 2048
0.00.875.428 I llm_load_print_meta: n_layer          = 18
0.00.875.494 I llm_load_print_meta: n_head           = 8
0.00.875.502 I llm_load_print_meta: n_head_kv        = 1
0.00.875.502 I llm_load_print_meta: n_rot            = 256
0.00.875.503 I llm_load_print_meta: n_swa            = 0
0.00.875.504 I llm_load_print_meta: n_embd_head_k    = 256
0.00.875.504 I llm_load_print_meta: n_embd_head_v    = 256
0.00.875.509 I llm_load_print_meta: n_gqa            = 8
0.00.875.519 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.875.525 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.875.526 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.875.528 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.875.529 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.875.530 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.875.530 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.875.536 I llm_load_print_meta: n_ff             = 16384
0.00.875.536 I llm_load_print_meta: n_expert         = 0
0.00.875.537 I llm_load_print_meta: n_expert_used    = 0
0.00.875.541 I llm_load_print_meta: causal attn      = 1
0.00.875.541 I llm_load_print_meta: pooling type     = 0
0.00.875.541 I llm_load_print_meta: rope type        = 2
0.00.875.542 I llm_load_print_meta: rope scaling     = linear
0.00.875.543 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.875.544 I llm_load_print_meta: freq_scale_train = 1
0.00.875.544 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.875.545 I llm_load_print_meta: rope_finetuned   = unknown
0.00.875.545 I llm_load_print_meta: ssm_d_conv       = 0
0.00.875.545 I llm_load_print_meta: ssm_d_inner      = 0
0.00.875.546 I llm_load_print_meta: ssm_d_state      = 0
0.00.875.546 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.875.546 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.875.548 I llm_load_print_meta: model type       = 2B
0.00.875.559 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.875.561 I llm_load_print_meta: model params     = 2.51 B
0.00.875.562 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.875.562 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.875.563 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.875.564 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.875.564 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.875.565 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.875.565 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.875.565 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.875.572 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.875.575 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.875.576 I llm_load_print_meta: max token length = 93
0.00.935.441 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.941.143 I llama_new_context_with_model: n_seq_max     = 1
0.00.941.149 I llama_new_context_with_model: n_ctx         = 4096
0.00.941.150 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.941.150 I llama_new_context_with_model: n_batch       = 2048
0.00.941.151 I llama_new_context_with_model: n_ubatch      = 512
0.00.941.151 I llama_new_context_with_model: flash_attn    = 0
0.00.941.154 I llama_new_context_with_model: freq_base     = 10000.0
0.00.941.155 I llama_new_context_with_model: freq_scale    = 1
0.00.941.156 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.941.251 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.956.802 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.956.846 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.956.968 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.959.546 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.959.550 I llama_new_context_with_model: graph nodes  = 601
0.00.959.550 I llama_new_context_with_model: graph splits = 1
0.00.959.574 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.959.577 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.539.651 I main: llama threadpool init, n_threads = 4
0.01.539.666 I 
0.01.539.814 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.539.818 I 
0.01.540.053 I sampler seed: 1926966284
0.01.540.067 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.540.077 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.540.080 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.540.080 I 
 seconally to the question.

**Question:** Explain the difference between the concepts of agency and voluntarism.

**Agency** refers to the power and

0.12.741.582 I llama_perf_sampler_print:    sampling time =      49.46 ms /    33 runs   (    1.50 ms per token,   667.15 tokens per second)
0.12.741.586 I llama_perf_context_print:        load time =    1538.65 ms
0.12.741.587 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.741.589 I llama_perf_context_print:        eval time =   11113.28 ms /    32 runs   (  347.29 ms per token,     2.88 tokens per second)
0.12.741.590 I llama_perf_context_print:       total time =   11201.94 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.540s
user	46m42.087s
sys	0m6.318s
