+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.627 I build: 3839 (589b48d4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.002.780 I main: load the model and apply lora adapter, if any
0.00.024.706 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.893 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.980 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.991 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.993 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.997 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.998 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.998 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.999 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.000 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.001 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.008 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.009 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.010 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.011 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.012 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.093.108 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.180.793 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.192.926 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.192.934 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.192.935 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.192.936 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.192.937 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.192.938 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.192.940 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.192.944 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.192.944 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.192.945 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.192.946 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.192.947 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.192.955 I llama_model_loader: - type  f32:   37 tensors
0.00.192.959 I llama_model_loader: - type q8_0:  127 tensors
0.00.344.976 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.369.150 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.370.183 I llm_load_vocab: special tokens cache size = 5
0.00.428.387 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.428.449 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.428.450 I llm_load_print_meta: arch             = gemma
0.00.428.451 I llm_load_print_meta: vocab type       = SPM
0.00.428.451 I llm_load_print_meta: n_vocab          = 256000
0.00.428.454 I llm_load_print_meta: n_merges         = 0
0.00.428.455 I llm_load_print_meta: vocab_only       = 0
0.00.428.455 I llm_load_print_meta: n_ctx_train      = 8192
0.00.428.456 I llm_load_print_meta: n_embd           = 2048
0.00.428.456 I llm_load_print_meta: n_layer          = 18
0.00.428.517 I llm_load_print_meta: n_head           = 8
0.00.428.523 I llm_load_print_meta: n_head_kv        = 1
0.00.428.524 I llm_load_print_meta: n_rot            = 256
0.00.428.525 I llm_load_print_meta: n_swa            = 0
0.00.428.526 I llm_load_print_meta: n_embd_head_k    = 256
0.00.428.526 I llm_load_print_meta: n_embd_head_v    = 256
0.00.428.530 I llm_load_print_meta: n_gqa            = 8
0.00.428.535 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.428.540 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.428.541 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.428.543 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.428.543 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.428.543 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.428.544 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.428.549 I llm_load_print_meta: n_ff             = 16384
0.00.428.551 I llm_load_print_meta: n_expert         = 0
0.00.428.551 I llm_load_print_meta: n_expert_used    = 0
0.00.428.552 I llm_load_print_meta: causal attn      = 1
0.00.428.552 I llm_load_print_meta: pooling type     = 0
0.00.428.553 I llm_load_print_meta: rope type        = 2
0.00.428.554 I llm_load_print_meta: rope scaling     = linear
0.00.428.556 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.428.556 I llm_load_print_meta: freq_scale_train = 1
0.00.428.557 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.428.557 I llm_load_print_meta: rope_finetuned   = unknown
0.00.428.558 I llm_load_print_meta: ssm_d_conv       = 0
0.00.428.558 I llm_load_print_meta: ssm_d_inner      = 0
0.00.428.558 I llm_load_print_meta: ssm_d_state      = 0
0.00.428.559 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.428.563 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.428.564 I llm_load_print_meta: model type       = 2B
0.00.428.587 I llm_load_print_meta: model ftype      = Q8_0
0.00.428.588 I llm_load_print_meta: model params     = 2.51 B
0.00.428.592 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.428.593 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.428.593 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.428.594 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.428.594 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.428.595 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.428.596 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.428.596 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.428.603 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.428.604 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.428.604 I llm_load_print_meta: max token length = 93
0.00.428.784 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.528.312 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.528.322 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.528.323 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.528.324 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.528.324 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.528.325 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.533.981 I llama_new_context_with_model: n_ctx      = 8192
0.00.533.987 I llama_new_context_with_model: n_batch    = 2048
0.00.533.988 I llama_new_context_with_model: n_ubatch   = 512
0.00.533.988 I llama_new_context_with_model: flash_attn = 0
0.00.533.990 I llama_new_context_with_model: freq_base  = 10000.0
0.00.533.991 I llama_new_context_with_model: freq_scale = 1
0.00.562.834 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.562.877 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.562.996 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.564.413 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.564.419 I llama_new_context_with_model: graph nodes  = 601
0.00.564.419 I llama_new_context_with_model: graph splits = 1
0.00.564.436 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.185.126 I main: llama threadpool init, n_threads = 4
0.01.185.138 I 
0.01.185.233 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.185.234 I 
0.01.185.432 I sampler seed: 1461665100
0.01.185.444 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.185.449 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.185.450 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.185.450 I 
 increasities, the pinnacle of human evolution.

This is absurd.

Evolution is a slow and gradual process, driven by natural selection. There is no such

0.14.638.197 I llama_perf_sampler_print:    sampling time =      49.28 ms /    33 runs   (    1.49 ms per token,   669.64 tokens per second)
0.14.638.200 I llama_perf_context_print:        load time =    1182.27 ms
0.14.638.201 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.638.213 I llama_perf_context_print:        eval time =   13371.07 ms /    32 runs   (  417.85 ms per token,     2.39 tokens per second)
0.14.638.215 I llama_perf_context_print:       total time =   13453.08 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.623 I build: 3839 (589b48d4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.812 I main: load the model and apply lora adapter, if any
0.00.024.855 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.966 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.983 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.988 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.992 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.994 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.995 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.997 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.998 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.000 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.009 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.013 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.014 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.015 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.018 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.092.840 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.180.890 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.192.949 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.192.956 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.192.957 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.192.958 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.192.959 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.192.960 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.192.961 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.192.964 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.192.965 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.192.966 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.192.967 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.192.968 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.192.975 I llama_model_loader: - type  f32:   37 tensors
0.00.192.979 I llama_model_loader: - type q8_0:  127 tensors
0.00.340.374 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.365.245 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.366.300 I llm_load_vocab: special tokens cache size = 5
0.00.425.598 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.425.663 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.425.664 I llm_load_print_meta: arch             = gemma
0.00.425.665 I llm_load_print_meta: vocab type       = SPM
0.00.425.666 I llm_load_print_meta: n_vocab          = 256000
0.00.425.668 I llm_load_print_meta: n_merges         = 0
0.00.425.669 I llm_load_print_meta: vocab_only       = 0
0.00.425.669 I llm_load_print_meta: n_ctx_train      = 8192
0.00.425.669 I llm_load_print_meta: n_embd           = 2048
0.00.425.670 I llm_load_print_meta: n_layer          = 18
0.00.425.734 I llm_load_print_meta: n_head           = 8
0.00.425.741 I llm_load_print_meta: n_head_kv        = 1
0.00.425.743 I llm_load_print_meta: n_rot            = 256
0.00.425.744 I llm_load_print_meta: n_swa            = 0
0.00.425.744 I llm_load_print_meta: n_embd_head_k    = 256
0.00.425.745 I llm_load_print_meta: n_embd_head_v    = 256
0.00.425.750 I llm_load_print_meta: n_gqa            = 8
0.00.425.754 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.425.760 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.425.761 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.425.763 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.425.764 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.425.764 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.425.765 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.425.771 I llm_load_print_meta: n_ff             = 16384
0.00.425.771 I llm_load_print_meta: n_expert         = 0
0.00.425.771 I llm_load_print_meta: n_expert_used    = 0
0.00.425.772 I llm_load_print_meta: causal attn      = 1
0.00.425.779 I llm_load_print_meta: pooling type     = 0
0.00.425.779 I llm_load_print_meta: rope type        = 2
0.00.425.780 I llm_load_print_meta: rope scaling     = linear
0.00.425.781 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.425.782 I llm_load_print_meta: freq_scale_train = 1
0.00.425.782 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.425.783 I llm_load_print_meta: rope_finetuned   = unknown
0.00.425.783 I llm_load_print_meta: ssm_d_conv       = 0
0.00.425.784 I llm_load_print_meta: ssm_d_inner      = 0
0.00.425.784 I llm_load_print_meta: ssm_d_state      = 0
0.00.425.784 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.425.785 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.425.785 I llm_load_print_meta: model type       = 2B
0.00.425.786 I llm_load_print_meta: model ftype      = Q8_0
0.00.425.787 I llm_load_print_meta: model params     = 2.51 B
0.00.425.787 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.425.788 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.425.788 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.425.789 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.425.789 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.425.790 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.425.790 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.425.792 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.425.799 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.425.800 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.425.801 I llm_load_print_meta: max token length = 93
0.00.425.992 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.518.736 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.524.661 I llama_new_context_with_model: n_ctx      = 8192
0.00.524.669 I llama_new_context_with_model: n_batch    = 2048
0.00.524.669 I llama_new_context_with_model: n_ubatch   = 512
0.00.524.670 I llama_new_context_with_model: flash_attn = 0
0.00.524.673 I llama_new_context_with_model: freq_base  = 10000.0
0.00.524.674 I llama_new_context_with_model: freq_scale = 1
0.00.555.597 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.555.645 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.555.771 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.557.185 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.557.193 I llama_new_context_with_model: graph nodes  = 601
0.00.557.193 I llama_new_context_with_model: graph splits = 1
0.00.557.212 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.172.502 I main: llama threadpool init, n_threads = 4
0.01.172.514 I 
0.01.172.609 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.172.610 I 
0.01.172.802 I sampler seed: 1141894955
0.01.172.816 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.172.822 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.172.823 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.172.826 I 
 increably,
I am the one you seek, the one who fulfills your need,
But you must not forget, my love, my heart is your

0.14.886.209 I llama_perf_sampler_print:    sampling time =      49.24 ms /    33 runs   (    1.49 ms per token,   670.23 tokens per second)
0.14.886.225 I llama_perf_context_print:        load time =    1169.61 ms
0.14.886.227 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.886.229 I llama_perf_context_print:        eval time =   13631.86 ms /    32 runs   (  426.00 ms per token,     2.35 tokens per second)
0.14.886.231 I llama_perf_context_print:       total time =   13713.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.624 I build: 3839 (589b48d4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.814 I main: llama backend init
0.00.002.744 I main: load the model and apply lora adapter, if any
0.00.024.833 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.016 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.107 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.119 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.120 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.125 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.129 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.130 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.131 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.132 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.132 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.139 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.140 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.142 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.143 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.144 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.093.082 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.180.843 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.192.959 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.192.966 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.192.967 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.192.968 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.192.968 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.192.969 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.192.970 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.192.973 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.192.974 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.192.975 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.192.975 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.192.976 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.192.984 I llama_model_loader: - type  f32:   37 tensors
0.00.192.988 I llama_model_loader: - type q8_0:  127 tensors
0.00.338.795 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.363.159 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.364.182 I llm_load_vocab: special tokens cache size = 5
0.00.421.817 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.421.871 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.421.872 I llm_load_print_meta: arch             = gemma
0.00.421.873 I llm_load_print_meta: vocab type       = SPM
0.00.421.873 I llm_load_print_meta: n_vocab          = 256000
0.00.421.876 I llm_load_print_meta: n_merges         = 0
0.00.421.876 I llm_load_print_meta: vocab_only       = 0
0.00.421.877 I llm_load_print_meta: n_ctx_train      = 8192
0.00.421.877 I llm_load_print_meta: n_embd           = 2048
0.00.421.877 I llm_load_print_meta: n_layer          = 18
0.00.421.942 I llm_load_print_meta: n_head           = 8
0.00.421.949 I llm_load_print_meta: n_head_kv        = 1
0.00.421.949 I llm_load_print_meta: n_rot            = 256
0.00.421.950 I llm_load_print_meta: n_swa            = 0
0.00.421.950 I llm_load_print_meta: n_embd_head_k    = 256
0.00.421.950 I llm_load_print_meta: n_embd_head_v    = 256
0.00.421.955 I llm_load_print_meta: n_gqa            = 8
0.00.421.959 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.421.964 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.421.966 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.421.967 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.421.968 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.421.969 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.421.969 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.421.974 I llm_load_print_meta: n_ff             = 16384
0.00.421.975 I llm_load_print_meta: n_expert         = 0
0.00.421.975 I llm_load_print_meta: n_expert_used    = 0
0.00.421.976 I llm_load_print_meta: causal attn      = 1
0.00.421.977 I llm_load_print_meta: pooling type     = 0
0.00.421.977 I llm_load_print_meta: rope type        = 2
0.00.421.978 I llm_load_print_meta: rope scaling     = linear
0.00.421.979 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.421.980 I llm_load_print_meta: freq_scale_train = 1
0.00.421.981 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.421.981 I llm_load_print_meta: rope_finetuned   = unknown
0.00.421.982 I llm_load_print_meta: ssm_d_conv       = 0
0.00.421.982 I llm_load_print_meta: ssm_d_inner      = 0
0.00.421.982 I llm_load_print_meta: ssm_d_state      = 0
0.00.421.987 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.421.987 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.421.988 I llm_load_print_meta: model type       = 2B
0.00.421.997 I llm_load_print_meta: model ftype      = Q8_0
0.00.421.999 I llm_load_print_meta: model params     = 2.51 B
0.00.422.000 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.422.014 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.422.015 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.422.016 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.422.016 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.422.017 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.422.018 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.422.019 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.422.024 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.422.026 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.422.026 I llm_load_print_meta: max token length = 93
0.00.422.202 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.498.988 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.498.999 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.498.999 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.499.000 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.499.001 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.499.002 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.504.704 I llama_new_context_with_model: n_ctx      = 8192
0.00.504.712 I llama_new_context_with_model: n_batch    = 2048
0.00.504.712 I llama_new_context_with_model: n_ubatch   = 512
0.00.504.713 I llama_new_context_with_model: flash_attn = 0
0.00.504.717 I llama_new_context_with_model: freq_base  = 10000.0
0.00.504.718 I llama_new_context_with_model: freq_scale = 1
0.00.535.841 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.535.884 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.535.991 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.537.350 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.537.356 I llama_new_context_with_model: graph nodes  = 601
0.00.537.356 I llama_new_context_with_model: graph splits = 1
0.00.537.372 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.150.355 I main: llama threadpool init, n_threads = 4
0.01.150.367 I 
0.01.150.467 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.150.471 I 
0.01.150.647 I sampler seed: 2340069162
0.01.150.660 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.150.665 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.150.665 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.150.668 I 
 increably.

I cannot provide a response as requested as it involves potentially harmful or inappropriate content. [end of text]


0.09.966.649 I llama_perf_sampler_print:    sampling time =      32.31 ms /    22 runs   (    1.47 ms per token,   680.88 tokens per second)
0.09.966.652 I llama_perf_context_print:        load time =    1147.53 ms
0.09.966.654 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.966.656 I llama_perf_context_print:        eval time =    8762.21 ms /    21 runs   (  417.25 ms per token,     2.40 tokens per second)
0.09.966.657 I llama_perf_context_print:       total time =    8816.31 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.644 I build: 3839 (589b48d4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.798 I main: load the model and apply lora adapter, if any
0.00.024.394 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.578 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.669 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.680 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.682 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.686 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.690 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.691 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.692 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.693 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.693 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.701 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.703 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.704 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.704 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.705 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.093.076 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.181.063 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.193.175 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.193.184 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.193.185 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.193.185 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.193.187 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.193.188 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.193.189 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.193.193 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.193.193 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.193.194 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.193.195 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.193.196 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.193.204 I llama_model_loader: - type  f32:   37 tensors
0.00.193.208 I llama_model_loader: - type q8_0:  127 tensors
0.00.338.473 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.362.987 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.363.991 I llm_load_vocab: special tokens cache size = 5
0.00.421.613 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.421.673 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.421.675 I llm_load_print_meta: arch             = gemma
0.00.421.676 I llm_load_print_meta: vocab type       = SPM
0.00.421.677 I llm_load_print_meta: n_vocab          = 256000
0.00.421.679 I llm_load_print_meta: n_merges         = 0
0.00.421.683 I llm_load_print_meta: vocab_only       = 0
0.00.421.683 I llm_load_print_meta: n_ctx_train      = 8192
0.00.421.684 I llm_load_print_meta: n_embd           = 2048
0.00.421.684 I llm_load_print_meta: n_layer          = 18
0.00.421.755 I llm_load_print_meta: n_head           = 8
0.00.421.765 I llm_load_print_meta: n_head_kv        = 1
0.00.421.765 I llm_load_print_meta: n_rot            = 256
0.00.421.767 I llm_load_print_meta: n_swa            = 0
0.00.421.767 I llm_load_print_meta: n_embd_head_k    = 256
0.00.421.768 I llm_load_print_meta: n_embd_head_v    = 256
0.00.421.772 I llm_load_print_meta: n_gqa            = 8
0.00.421.777 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.421.781 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.421.783 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.421.785 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.421.785 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.421.786 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.421.786 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.421.792 I llm_load_print_meta: n_ff             = 16384
0.00.421.792 I llm_load_print_meta: n_expert         = 0
0.00.421.794 I llm_load_print_meta: n_expert_used    = 0
0.00.421.794 I llm_load_print_meta: causal attn      = 1
0.00.421.794 I llm_load_print_meta: pooling type     = 0
0.00.421.795 I llm_load_print_meta: rope type        = 2
0.00.421.795 I llm_load_print_meta: rope scaling     = linear
0.00.421.797 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.421.798 I llm_load_print_meta: freq_scale_train = 1
0.00.421.800 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.421.801 I llm_load_print_meta: rope_finetuned   = unknown
0.00.421.801 I llm_load_print_meta: ssm_d_conv       = 0
0.00.421.802 I llm_load_print_meta: ssm_d_inner      = 0
0.00.421.802 I llm_load_print_meta: ssm_d_state      = 0
0.00.421.802 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.421.803 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.421.803 I llm_load_print_meta: model type       = 2B
0.00.421.805 I llm_load_print_meta: model ftype      = Q8_0
0.00.421.805 I llm_load_print_meta: model params     = 2.51 B
0.00.421.806 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.421.816 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.421.817 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.421.817 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.421.820 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.421.820 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.421.821 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.421.822 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.421.828 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.421.830 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.421.830 I llm_load_print_meta: max token length = 93
0.00.422.006 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.492.879 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.492.891 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.499.234 I llama_new_context_with_model: n_ctx      = 8192
0.00.499.241 I llama_new_context_with_model: n_batch    = 2048
0.00.499.241 I llama_new_context_with_model: n_ubatch   = 512
0.00.499.242 I llama_new_context_with_model: flash_attn = 0
0.00.499.244 I llama_new_context_with_model: freq_base  = 10000.0
0.00.499.245 I llama_new_context_with_model: freq_scale = 1
0.00.527.964 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.528.006 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.528.120 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.529.511 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.529.518 I llama_new_context_with_model: graph nodes  = 601
0.00.529.518 I llama_new_context_with_model: graph splits = 1
0.00.529.534 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.143.854 I main: llama threadpool init, n_threads = 4
0.01.143.867 I 
0.01.143.961 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.143.967 I 
0.01.144.141 I sampler seed: 1831973360
0.01.144.152 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.144.156 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.144.167 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.144.168 I 
 seconary effects of cognitive load during learning have been investigated, including memory consolidation and transfer.

**Memory consolidation** refers to the strengthening of memory traces through repeated

0.14.568.778 I llama_perf_sampler_print:    sampling time =      49.15 ms /    33 runs   (    1.49 ms per token,   671.46 tokens per second)
0.14.568.784 I llama_perf_context_print:        load time =    1140.98 ms
0.14.568.786 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.568.787 I llama_perf_context_print:        eval time =   13343.22 ms /    32 runs   (  416.98 ms per token,     2.40 tokens per second)
0.14.568.798 I llama_perf_context_print:       total time =   13424.94 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m3.844s
user	3m29.540s
sys	0m9.472s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3839 (589b48d4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200103.66 ms
main:    total time = 200103.66 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.646 I build: 3839 (589b48d4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.002.780 I main: load the model and apply lora adapter, if any
0.00.024.558 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.731 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.820 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.832 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.834 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.838 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.840 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.848 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.852 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.852 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.853 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.859 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.860 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.860 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.861 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.862 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.092.684 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.180.306 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.192.334 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.192.341 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.192.342 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.192.343 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.192.344 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.192.345 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.192.346 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.192.349 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.192.349 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.192.350 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.192.351 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.192.352 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.192.359 I llama_model_loader: - type  f32:   37 tensors
0.00.192.363 I llama_model_loader: - type q4_K:  108 tensors
0.00.192.364 I llama_model_loader: - type q6_K:   19 tensors
0.00.343.082 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.365.220 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.366.211 I llm_load_vocab: special tokens cache size = 5
0.00.424.342 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.424.404 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.424.405 I llm_load_print_meta: arch             = gemma
0.00.424.406 I llm_load_print_meta: vocab type       = SPM
0.00.424.407 I llm_load_print_meta: n_vocab          = 256000
0.00.424.409 I llm_load_print_meta: n_merges         = 0
0.00.424.410 I llm_load_print_meta: vocab_only       = 0
0.00.424.410 I llm_load_print_meta: n_ctx_train      = 8192
0.00.424.410 I llm_load_print_meta: n_embd           = 2048
0.00.424.411 I llm_load_print_meta: n_layer          = 18
0.00.424.473 I llm_load_print_meta: n_head           = 8
0.00.424.480 I llm_load_print_meta: n_head_kv        = 1
0.00.424.481 I llm_load_print_meta: n_rot            = 256
0.00.424.481 I llm_load_print_meta: n_swa            = 0
0.00.424.481 I llm_load_print_meta: n_embd_head_k    = 256
0.00.424.483 I llm_load_print_meta: n_embd_head_v    = 256
0.00.424.487 I llm_load_print_meta: n_gqa            = 8
0.00.424.491 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.424.501 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.424.502 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.424.503 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.424.503 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.424.504 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.424.507 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.424.512 I llm_load_print_meta: n_ff             = 16384
0.00.424.513 I llm_load_print_meta: n_expert         = 0
0.00.424.513 I llm_load_print_meta: n_expert_used    = 0
0.00.424.513 I llm_load_print_meta: causal attn      = 1
0.00.424.514 I llm_load_print_meta: pooling type     = 0
0.00.424.514 I llm_load_print_meta: rope type        = 2
0.00.424.514 I llm_load_print_meta: rope scaling     = linear
0.00.424.516 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.424.516 I llm_load_print_meta: freq_scale_train = 1
0.00.424.517 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.424.517 I llm_load_print_meta: rope_finetuned   = unknown
0.00.424.518 I llm_load_print_meta: ssm_d_conv       = 0
0.00.424.518 I llm_load_print_meta: ssm_d_inner      = 0
0.00.424.519 I llm_load_print_meta: ssm_d_state      = 0
0.00.424.520 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.424.521 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.424.521 I llm_load_print_meta: model type       = 2B
0.00.424.523 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.424.523 I llm_load_print_meta: model params     = 2.51 B
0.00.424.532 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.424.532 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.424.544 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.424.545 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.424.545 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.424.554 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.424.555 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.424.555 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.424.561 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.424.563 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.424.563 I llm_load_print_meta: max token length = 93
0.00.424.734 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.484.498 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.484.506 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.484.507 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.484.508 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.484.508 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.484.509 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.489.959 I llama_new_context_with_model: n_ctx      = 8192
0.00.489.966 I llama_new_context_with_model: n_batch    = 2048
0.00.489.966 I llama_new_context_with_model: n_ubatch   = 512
0.00.489.967 I llama_new_context_with_model: flash_attn = 0
0.00.489.970 I llama_new_context_with_model: freq_base  = 10000.0
0.00.489.970 I llama_new_context_with_model: freq_scale = 1
0.00.519.919 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.519.957 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.520.070 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.521.466 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.521.472 I llama_new_context_with_model: graph nodes  = 601
0.00.521.473 I llama_new_context_with_model: graph splits = 1
0.00.521.488 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.102.773 I main: llama threadpool init, n_threads = 4
0.01.102.784 I 
0.01.102.876 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.102.880 I 
0.01.103.046 I sampler seed: 3141802299
0.01.103.057 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.103.063 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.103.064 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.103.065 I 
 encompating the vast expanse of the cosmos.

**Verse 1:**
In realms of twilight, where stars ignite,
A tapestry woven with cosmic might

0.12.045.241 I llama_perf_sampler_print:    sampling time =      49.22 ms /    33 runs   (    1.49 ms per token,   670.47 tokens per second)
0.12.045.244 I llama_perf_context_print:        load time =    1099.91 ms
0.12.045.257 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.045.260 I llama_perf_context_print:        eval time =   10860.87 ms /    32 runs   (  339.40 ms per token,     2.95 tokens per second)
0.12.045.261 I llama_perf_context_print:       total time =   10942.48 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3839 (589b48d4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200010.64 ms
main:    total time = 200010.64 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.606 I build: 3839 (589b48d4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.799 I main: llama backend init
0.00.002.758 I main: load the model and apply lora adapter, if any
0.00.024.656 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.756 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.770 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.771 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.775 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.776 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.777 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.778 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.779 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.780 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.785 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.785 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.786 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.787 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.788 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.092.570 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.236 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.207 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.194.214 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.194.215 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.194.216 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.194.217 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.194.218 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.194.219 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.222 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.223 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.231 I llama_model_loader: - type  f32:   37 tensors
0.00.194.235 I llama_model_loader: - type q4_K:  108 tensors
0.00.194.236 I llama_model_loader: - type q6_K:   19 tensors
0.00.329.175 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.353.036 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.354.098 I llm_load_vocab: special tokens cache size = 5
0.00.412.917 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.412.977 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.412.979 I llm_load_print_meta: arch             = gemma
0.00.412.979 I llm_load_print_meta: vocab type       = SPM
0.00.412.980 I llm_load_print_meta: n_vocab          = 256000
0.00.412.983 I llm_load_print_meta: n_merges         = 0
0.00.412.983 I llm_load_print_meta: vocab_only       = 0
0.00.412.984 I llm_load_print_meta: n_ctx_train      = 8192
0.00.412.984 I llm_load_print_meta: n_embd           = 2048
0.00.412.984 I llm_load_print_meta: n_layer          = 18
0.00.413.046 I llm_load_print_meta: n_head           = 8
0.00.413.053 I llm_load_print_meta: n_head_kv        = 1
0.00.413.054 I llm_load_print_meta: n_rot            = 256
0.00.413.054 I llm_load_print_meta: n_swa            = 0
0.00.413.055 I llm_load_print_meta: n_embd_head_k    = 256
0.00.413.055 I llm_load_print_meta: n_embd_head_v    = 256
0.00.413.059 I llm_load_print_meta: n_gqa            = 8
0.00.413.064 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.413.068 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.413.070 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.413.071 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.413.071 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.413.072 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.413.072 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.413.077 I llm_load_print_meta: n_ff             = 16384
0.00.413.078 I llm_load_print_meta: n_expert         = 0
0.00.413.078 I llm_load_print_meta: n_expert_used    = 0
0.00.413.079 I llm_load_print_meta: causal attn      = 1
0.00.413.080 I llm_load_print_meta: pooling type     = 0
0.00.413.080 I llm_load_print_meta: rope type        = 2
0.00.413.081 I llm_load_print_meta: rope scaling     = linear
0.00.413.082 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.413.083 I llm_load_print_meta: freq_scale_train = 1
0.00.413.083 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.413.084 I llm_load_print_meta: rope_finetuned   = unknown
0.00.413.085 I llm_load_print_meta: ssm_d_conv       = 0
0.00.413.085 I llm_load_print_meta: ssm_d_inner      = 0
0.00.413.085 I llm_load_print_meta: ssm_d_state      = 0
0.00.413.086 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.413.087 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.413.088 I llm_load_print_meta: model type       = 2B
0.00.413.089 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.413.089 I llm_load_print_meta: model params     = 2.51 B
0.00.413.090 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.413.091 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.413.091 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.413.092 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.413.093 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.413.093 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.413.094 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.413.095 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.413.101 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.413.103 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.413.104 I llm_load_print_meta: max token length = 93
0.00.413.278 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.470.475 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.476.060 I llama_new_context_with_model: n_ctx      = 8192
0.00.476.067 I llama_new_context_with_model: n_batch    = 2048
0.00.476.068 I llama_new_context_with_model: n_ubatch   = 512
0.00.476.069 I llama_new_context_with_model: flash_attn = 0
0.00.476.071 I llama_new_context_with_model: freq_base  = 10000.0
0.00.476.072 I llama_new_context_with_model: freq_scale = 1
0.00.505.142 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.505.193 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.505.305 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.506.666 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.506.672 I llama_new_context_with_model: graph nodes  = 601
0.00.506.673 I llama_new_context_with_model: graph splits = 1
0.00.506.689 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.087.895 I main: llama threadpool init, n_threads = 4
0.01.087.908 I 
0.01.088.005 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.088.006 I 
0.01.088.186 I sampler seed: 984529896
0.01.088.199 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.088.205 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.088.206 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.088.206 I 
 guaranteing the health and safety of employees.

**Answer:**

**1. Establish Clear Health and Safety Policies and Procedures:**

* Define specific safety standards

0.12.130.979 I llama_perf_sampler_print:    sampling time =      49.13 ms /    33 runs   (    1.49 ms per token,   671.69 tokens per second)
0.12.130.982 I llama_perf_context_print:        load time =    1085.06 ms
0.12.130.984 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.130.986 I llama_perf_context_print:        eval time =   10961.51 ms /    32 runs   (  342.55 ms per token,     2.92 tokens per second)
0.12.130.987 I llama_perf_context_print:       total time =   11043.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m7.184s
user	50m17.507s
sys	0m6.330s
