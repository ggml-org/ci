+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.628 I build: 4329 (89d604f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.000.835 I main: load the model and apply lora adapter, if any
0.00.023.229 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.237 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.322 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.333 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.335 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.341 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.342 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.344 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.346 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.347 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.350 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.355 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.357 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.359 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.360 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.362 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.759 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.087 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.073 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.082 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.083 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.085 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.086 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.088 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.089 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.093 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.094 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.096 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.097 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.350.099 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.106 I llama_model_loader: - type  f32:   37 tensors
0.00.350.108 I llama_model_loader: - type q8_0:  127 tensors
0.00.579.368 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.645.452 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.646.494 I llm_load_vocab: special tokens cache size = 5
0.00.834.436 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.834.510 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.834.512 I llm_load_print_meta: arch             = gemma
0.00.834.513 I llm_load_print_meta: vocab type       = SPM
0.00.834.514 I llm_load_print_meta: n_vocab          = 256000
0.00.834.516 I llm_load_print_meta: n_merges         = 0
0.00.834.516 I llm_load_print_meta: vocab_only       = 0
0.00.834.517 I llm_load_print_meta: n_ctx_train      = 8192
0.00.834.517 I llm_load_print_meta: n_embd           = 2048
0.00.834.517 I llm_load_print_meta: n_layer          = 18
0.00.834.581 I llm_load_print_meta: n_head           = 8
0.00.834.588 I llm_load_print_meta: n_head_kv        = 1
0.00.834.588 I llm_load_print_meta: n_rot            = 256
0.00.834.588 I llm_load_print_meta: n_swa            = 0
0.00.834.589 I llm_load_print_meta: n_embd_head_k    = 256
0.00.834.589 I llm_load_print_meta: n_embd_head_v    = 256
0.00.834.594 I llm_load_print_meta: n_gqa            = 8
0.00.834.599 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.834.604 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.834.605 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.834.606 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.834.608 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.834.608 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.834.609 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.834.614 I llm_load_print_meta: n_ff             = 16384
0.00.834.614 I llm_load_print_meta: n_expert         = 0
0.00.834.614 I llm_load_print_meta: n_expert_used    = 0
0.00.834.615 I llm_load_print_meta: causal attn      = 1
0.00.834.619 I llm_load_print_meta: pooling type     = 0
0.00.834.620 I llm_load_print_meta: rope type        = 2
0.00.834.620 I llm_load_print_meta: rope scaling     = linear
0.00.834.621 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.834.622 I llm_load_print_meta: freq_scale_train = 1
0.00.834.622 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.834.622 I llm_load_print_meta: rope_finetuned   = unknown
0.00.834.624 I llm_load_print_meta: ssm_d_conv       = 0
0.00.834.624 I llm_load_print_meta: ssm_d_inner      = 0
0.00.834.625 I llm_load_print_meta: ssm_d_state      = 0
0.00.834.637 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.834.638 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.834.639 I llm_load_print_meta: model type       = 2B
0.00.834.640 I llm_load_print_meta: model ftype      = Q8_0
0.00.834.641 I llm_load_print_meta: model params     = 2.51 B
0.00.834.642 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.834.643 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.834.643 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.834.656 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.834.657 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.834.658 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.834.659 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.834.660 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.834.667 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.834.669 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.834.670 I llm_load_print_meta: max token length = 93
0.00.940.618 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.940.626 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.940.627 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.940.628 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.940.629 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.940.630 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.946.593 I llama_new_context_with_model: n_seq_max     = 1
0.00.946.600 I llama_new_context_with_model: n_ctx         = 4096
0.00.946.601 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.946.601 I llama_new_context_with_model: n_batch       = 2048
0.00.946.602 I llama_new_context_with_model: n_ubatch      = 512
0.00.946.602 I llama_new_context_with_model: flash_attn    = 0
0.00.946.605 I llama_new_context_with_model: freq_base     = 10000.0
0.00.946.606 I llama_new_context_with_model: freq_scale    = 1
0.00.946.606 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.961.776 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.961.817 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.961.937 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.964.576 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.964.580 I llama_new_context_with_model: graph nodes  = 601
0.00.964.581 I llama_new_context_with_model: graph splits = 1
0.00.964.603 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.574.692 I main: llama threadpool init, n_threads = 4
0.01.574.710 I 
0.01.574.827 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.574.831 I 
0.01.575.075 I sampler seed: 244924857
0.01.575.089 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.575.098 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.575.101 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.575.102 I 
 increasities and anxieties with the idea of an embodied experience.

**Embodied experience** refers to the subjective feeling of being present in one's body and

0.15.084.766 I llama_perf_sampler_print:    sampling time =      49.35 ms /    33 runs   (    1.50 ms per token,   668.72 tokens per second)
0.15.084.770 I llama_perf_context_print:        load time =    1573.77 ms
0.15.084.771 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.084.773 I llama_perf_context_print:        eval time =   13420.52 ms /    32 runs   (  419.39 ms per token,     2.38 tokens per second)
0.15.084.783 I llama_perf_context_print:       total time =   13510.08 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.659 I build: 4329 (89d604f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.888 I main: llama backend init
0.00.000.896 I main: load the model and apply lora adapter, if any
0.00.023.521 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.635 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.651 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.653 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.660 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.662 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.665 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.667 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.670 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.672 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.680 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.686 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.688 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.690 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.692 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.662 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.642 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.783 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.795 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.797 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.798 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.800 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.801 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.803 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.807 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.808 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.810 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.811 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.350.813 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.821 I llama_model_loader: - type  f32:   37 tensors
0.00.350.823 I llama_model_loader: - type q8_0:  127 tensors
0.00.585.880 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.648.697 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.649.648 I llm_load_vocab: special tokens cache size = 5
0.00.839.182 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.839.259 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.839.260 I llm_load_print_meta: arch             = gemma
0.00.839.260 I llm_load_print_meta: vocab type       = SPM
0.00.839.261 I llm_load_print_meta: n_vocab          = 256000
0.00.839.263 I llm_load_print_meta: n_merges         = 0
0.00.839.264 I llm_load_print_meta: vocab_only       = 0
0.00.839.264 I llm_load_print_meta: n_ctx_train      = 8192
0.00.839.265 I llm_load_print_meta: n_embd           = 2048
0.00.839.265 I llm_load_print_meta: n_layer          = 18
0.00.839.326 I llm_load_print_meta: n_head           = 8
0.00.839.335 I llm_load_print_meta: n_head_kv        = 1
0.00.839.336 I llm_load_print_meta: n_rot            = 256
0.00.839.336 I llm_load_print_meta: n_swa            = 0
0.00.839.336 I llm_load_print_meta: n_embd_head_k    = 256
0.00.839.337 I llm_load_print_meta: n_embd_head_v    = 256
0.00.839.341 I llm_load_print_meta: n_gqa            = 8
0.00.839.346 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.839.351 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.839.352 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.839.353 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.839.354 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.839.355 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.839.355 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.839.371 I llm_load_print_meta: n_ff             = 16384
0.00.839.372 I llm_load_print_meta: n_expert         = 0
0.00.839.372 I llm_load_print_meta: n_expert_used    = 0
0.00.839.373 I llm_load_print_meta: causal attn      = 1
0.00.839.373 I llm_load_print_meta: pooling type     = 0
0.00.839.374 I llm_load_print_meta: rope type        = 2
0.00.839.389 I llm_load_print_meta: rope scaling     = linear
0.00.839.392 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.839.399 I llm_load_print_meta: freq_scale_train = 1
0.00.839.401 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.839.402 I llm_load_print_meta: rope_finetuned   = unknown
0.00.839.403 I llm_load_print_meta: ssm_d_conv       = 0
0.00.839.404 I llm_load_print_meta: ssm_d_inner      = 0
0.00.839.405 I llm_load_print_meta: ssm_d_state      = 0
0.00.839.405 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.839.415 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.839.424 I llm_load_print_meta: model type       = 2B
0.00.839.427 I llm_load_print_meta: model ftype      = Q8_0
0.00.839.428 I llm_load_print_meta: model params     = 2.51 B
0.00.839.430 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.839.440 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.839.441 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.839.442 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.839.443 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.839.444 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.839.446 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.839.447 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.839.455 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.839.458 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.839.459 I llm_load_print_meta: max token length = 93
0.00.937.387 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.943.650 I llama_new_context_with_model: n_seq_max     = 1
0.00.943.658 I llama_new_context_with_model: n_ctx         = 4096
0.00.943.658 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.943.659 I llama_new_context_with_model: n_batch       = 2048
0.00.943.659 I llama_new_context_with_model: n_ubatch      = 512
0.00.943.660 I llama_new_context_with_model: flash_attn    = 0
0.00.943.662 I llama_new_context_with_model: freq_base     = 10000.0
0.00.943.662 I llama_new_context_with_model: freq_scale    = 1
0.00.943.663 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.958.982 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.959.025 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.959.141 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.961.786 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.961.791 I llama_new_context_with_model: graph nodes  = 601
0.00.961.791 I llama_new_context_with_model: graph splits = 1
0.00.961.814 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.570.657 I main: llama threadpool init, n_threads = 4
0.01.570.673 I 
0.01.570.791 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.570.792 I 
0.01.571.049 I sampler seed: 4269615889
0.01.571.064 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.571.074 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.571.078 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.571.079 I 
 increasities. [end of text]


0.03.251.746 I llama_perf_sampler_print:    sampling time =       6.23 ms /     5 runs   (    1.25 ms per token,   802.95 tokens per second)
0.03.251.749 I llama_perf_context_print:        load time =    1569.66 ms
0.03.251.763 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.251.765 I llama_perf_context_print:        eval time =    1668.07 ms /     4 runs   (  417.02 ms per token,     2.40 tokens per second)
0.03.251.766 I llama_perf_context_print:       total time =    1681.10 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.643 I build: 4329 (89d604f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.000.860 I main: load the model and apply lora adapter, if any
0.00.023.336 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.346 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.439 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.451 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.456 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.461 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.463 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.464 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.466 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.467 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.468 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.475 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.477 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.478 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.479 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.481 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.915 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.594 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.496 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.510 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.511 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.513 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.514 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.515 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.517 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.522 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.523 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.525 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.526 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.352.528 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.538 I llama_model_loader: - type  f32:   37 tensors
0.00.352.541 I llama_model_loader: - type q8_0:  127 tensors
0.00.579.875 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.643.292 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.644.253 I llm_load_vocab: special tokens cache size = 5
0.00.831.564 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.831.637 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.831.638 I llm_load_print_meta: arch             = gemma
0.00.831.639 I llm_load_print_meta: vocab type       = SPM
0.00.831.640 I llm_load_print_meta: n_vocab          = 256000
0.00.831.643 I llm_load_print_meta: n_merges         = 0
0.00.831.643 I llm_load_print_meta: vocab_only       = 0
0.00.831.644 I llm_load_print_meta: n_ctx_train      = 8192
0.00.831.644 I llm_load_print_meta: n_embd           = 2048
0.00.831.645 I llm_load_print_meta: n_layer          = 18
0.00.831.710 I llm_load_print_meta: n_head           = 8
0.00.831.717 I llm_load_print_meta: n_head_kv        = 1
0.00.831.718 I llm_load_print_meta: n_rot            = 256
0.00.831.718 I llm_load_print_meta: n_swa            = 0
0.00.831.719 I llm_load_print_meta: n_embd_head_k    = 256
0.00.831.719 I llm_load_print_meta: n_embd_head_v    = 256
0.00.831.724 I llm_load_print_meta: n_gqa            = 8
0.00.831.729 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.831.733 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.831.735 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.831.736 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.831.736 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.831.738 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.831.739 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.831.744 I llm_load_print_meta: n_ff             = 16384
0.00.831.749 I llm_load_print_meta: n_expert         = 0
0.00.831.749 I llm_load_print_meta: n_expert_used    = 0
0.00.831.749 I llm_load_print_meta: causal attn      = 1
0.00.831.750 I llm_load_print_meta: pooling type     = 0
0.00.831.750 I llm_load_print_meta: rope type        = 2
0.00.831.773 I llm_load_print_meta: rope scaling     = linear
0.00.831.778 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.831.778 I llm_load_print_meta: freq_scale_train = 1
0.00.831.779 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.831.779 I llm_load_print_meta: rope_finetuned   = unknown
0.00.831.780 I llm_load_print_meta: ssm_d_conv       = 0
0.00.831.780 I llm_load_print_meta: ssm_d_inner      = 0
0.00.831.781 I llm_load_print_meta: ssm_d_state      = 0
0.00.831.781 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.831.781 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.831.782 I llm_load_print_meta: model type       = 2B
0.00.831.783 I llm_load_print_meta: model ftype      = Q8_0
0.00.831.784 I llm_load_print_meta: model params     = 2.51 B
0.00.831.785 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.831.785 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.831.786 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.831.786 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.831.787 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.831.787 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.831.788 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.831.789 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.831.795 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.831.797 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.831.797 I llm_load_print_meta: max token length = 93
0.00.910.105 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.910.116 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.910.117 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.910.118 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.910.118 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.910.119 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.916.271 I llama_new_context_with_model: n_seq_max     = 1
0.00.916.278 I llama_new_context_with_model: n_ctx         = 4096
0.00.916.279 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.916.279 I llama_new_context_with_model: n_batch       = 2048
0.00.916.280 I llama_new_context_with_model: n_ubatch      = 512
0.00.916.280 I llama_new_context_with_model: flash_attn    = 0
0.00.916.283 I llama_new_context_with_model: freq_base     = 10000.0
0.00.916.284 I llama_new_context_with_model: freq_scale    = 1
0.00.916.284 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.931.554 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.931.598 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.931.719 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.934.351 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.934.356 I llama_new_context_with_model: graph nodes  = 601
0.00.934.356 I llama_new_context_with_model: graph splits = 1
0.00.934.381 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.543.843 I main: llama threadpool init, n_threads = 4
0.01.543.859 I 
0.01.543.993 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.543.998 I 
0.01.544.240 I sampler seed: 1167957375
0.01.544.253 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.544.264 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.544.265 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.544.265 I 
 increably, but the journey was arduous.

**Meaning:**

The passage tells the story of an arduous journey, where the speaker encountered unforeseen challenges and overcame

0.15.176.815 I llama_perf_sampler_print:    sampling time =      49.28 ms /    33 runs   (    1.49 ms per token,   669.66 tokens per second)
0.15.176.817 I llama_perf_context_print:        load time =    1542.88 ms
0.15.176.819 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.176.820 I llama_perf_context_print:        eval time =   13543.70 ms /    32 runs   (  423.24 ms per token,     2.36 tokens per second)
0.15.176.836 I llama_perf_context_print:       total time =   13632.98 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 4329 (89d604f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.852 I main: llama backend init
0.00.000.860 I main: load the model and apply lora adapter, if any
0.00.023.262 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.273 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.356 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.368 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.370 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.375 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.377 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.379 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.380 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.383 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.384 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.390 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.392 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.393 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.394 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.395 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.131 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.165 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.220 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.230 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.231 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.233 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.234 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.236 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.237 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.241 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.242 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.244 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.245 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.350.247 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.255 I llama_model_loader: - type  f32:   37 tensors
0.00.350.258 I llama_model_loader: - type q8_0:  127 tensors
0.00.564.936 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.622.107 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.623.029 I llm_load_vocab: special tokens cache size = 5
0.00.811.088 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.811.159 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.811.163 I llm_load_print_meta: arch             = gemma
0.00.811.163 I llm_load_print_meta: vocab type       = SPM
0.00.811.164 I llm_load_print_meta: n_vocab          = 256000
0.00.811.167 I llm_load_print_meta: n_merges         = 0
0.00.811.168 I llm_load_print_meta: vocab_only       = 0
0.00.811.168 I llm_load_print_meta: n_ctx_train      = 8192
0.00.811.168 I llm_load_print_meta: n_embd           = 2048
0.00.811.169 I llm_load_print_meta: n_layer          = 18
0.00.811.231 I llm_load_print_meta: n_head           = 8
0.00.811.241 I llm_load_print_meta: n_head_kv        = 1
0.00.811.242 I llm_load_print_meta: n_rot            = 256
0.00.811.243 I llm_load_print_meta: n_swa            = 0
0.00.811.244 I llm_load_print_meta: n_embd_head_k    = 256
0.00.811.244 I llm_load_print_meta: n_embd_head_v    = 256
0.00.811.249 I llm_load_print_meta: n_gqa            = 8
0.00.811.254 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.811.260 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.811.264 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.811.265 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.811.265 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.811.266 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.811.266 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.811.271 I llm_load_print_meta: n_ff             = 16384
0.00.811.272 I llm_load_print_meta: n_expert         = 0
0.00.811.272 I llm_load_print_meta: n_expert_used    = 0
0.00.811.273 I llm_load_print_meta: causal attn      = 1
0.00.811.273 I llm_load_print_meta: pooling type     = 0
0.00.811.274 I llm_load_print_meta: rope type        = 2
0.00.811.275 I llm_load_print_meta: rope scaling     = linear
0.00.811.276 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.811.277 I llm_load_print_meta: freq_scale_train = 1
0.00.811.278 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.811.278 I llm_load_print_meta: rope_finetuned   = unknown
0.00.811.279 I llm_load_print_meta: ssm_d_conv       = 0
0.00.811.279 I llm_load_print_meta: ssm_d_inner      = 0
0.00.811.280 I llm_load_print_meta: ssm_d_state      = 0
0.00.811.281 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.811.281 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.811.282 I llm_load_print_meta: model type       = 2B
0.00.811.284 I llm_load_print_meta: model ftype      = Q8_0
0.00.811.285 I llm_load_print_meta: model params     = 2.51 B
0.00.811.286 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.811.287 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.811.287 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.811.287 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.811.288 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.811.289 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.811.289 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.811.290 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.811.295 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.811.297 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.811.297 I llm_load_print_meta: max token length = 93
0.00.884.770 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.884.780 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.890.588 I llama_new_context_with_model: n_seq_max     = 1
0.00.890.596 I llama_new_context_with_model: n_ctx         = 4096
0.00.890.596 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.890.596 I llama_new_context_with_model: n_batch       = 2048
0.00.890.597 I llama_new_context_with_model: n_ubatch      = 512
0.00.890.597 I llama_new_context_with_model: flash_attn    = 0
0.00.890.600 I llama_new_context_with_model: freq_base     = 10000.0
0.00.890.601 I llama_new_context_with_model: freq_scale    = 1
0.00.890.602 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.904.989 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.905.030 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.905.150 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.907.783 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.907.787 I llama_new_context_with_model: graph nodes  = 601
0.00.907.788 I llama_new_context_with_model: graph splits = 1
0.00.907.812 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.520.238 I main: llama threadpool init, n_threads = 4
0.01.520.254 I 
0.01.520.376 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.520.380 I 
0.01.520.615 I sampler seed: 2170212988
0.01.520.629 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.520.640 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.520.641 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.520.641 I 
 increasities, and societal pressures to conform. [end of text]


0.05.741.116 I llama_perf_sampler_print:    sampling time =      15.50 ms /    11 runs   (    1.41 ms per token,   709.68 tokens per second)
0.05.741.119 I llama_perf_context_print:        load time =    1519.28 ms
0.05.741.121 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.741.136 I llama_perf_context_print:        eval time =    4191.60 ms /    10 runs   (  419.16 ms per token,     2.39 tokens per second)
0.05.741.137 I llama_perf_context_print:       total time =    4220.89 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m48.893s
user	2m25.773s
sys	0m9.374s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4329 (89d604f2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186776.93 ms
main:    total time = 186776.93 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 4329 (89d604f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.845 I main: llama backend init
0.00.000.853 I main: load the model and apply lora adapter, if any
0.00.023.409 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.420 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.508 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.519 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.521 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.526 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.528 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.530 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.531 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.533 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.535 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.540 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.544 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.546 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.547 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.548 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.501 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.366 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.349 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.357 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.358 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.359 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.361 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.363 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.364 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.385 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.390 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.392 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.393 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.349.395 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.404 I llama_model_loader: - type  f32:   37 tensors
0.00.349.407 I llama_model_loader: - type q4_K:  108 tensors
0.00.349.408 I llama_model_loader: - type q6_K:   19 tensors
0.00.562.762 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.620.738 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.621.619 I llm_load_vocab: special tokens cache size = 5
0.00.817.276 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.817.351 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.817.352 I llm_load_print_meta: arch             = gemma
0.00.817.353 I llm_load_print_meta: vocab type       = SPM
0.00.817.354 I llm_load_print_meta: n_vocab          = 256000
0.00.817.357 I llm_load_print_meta: n_merges         = 0
0.00.817.357 I llm_load_print_meta: vocab_only       = 0
0.00.817.358 I llm_load_print_meta: n_ctx_train      = 8192
0.00.817.358 I llm_load_print_meta: n_embd           = 2048
0.00.817.358 I llm_load_print_meta: n_layer          = 18
0.00.817.420 I llm_load_print_meta: n_head           = 8
0.00.817.427 I llm_load_print_meta: n_head_kv        = 1
0.00.817.428 I llm_load_print_meta: n_rot            = 256
0.00.817.428 I llm_load_print_meta: n_swa            = 0
0.00.817.429 I llm_load_print_meta: n_embd_head_k    = 256
0.00.817.430 I llm_load_print_meta: n_embd_head_v    = 256
0.00.817.450 I llm_load_print_meta: n_gqa            = 8
0.00.817.455 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.817.460 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.817.461 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.817.463 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.817.464 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.817.465 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.817.466 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.817.471 I llm_load_print_meta: n_ff             = 16384
0.00.817.472 I llm_load_print_meta: n_expert         = 0
0.00.817.472 I llm_load_print_meta: n_expert_used    = 0
0.00.817.476 I llm_load_print_meta: causal attn      = 1
0.00.817.477 I llm_load_print_meta: pooling type     = 0
0.00.817.477 I llm_load_print_meta: rope type        = 2
0.00.817.477 I llm_load_print_meta: rope scaling     = linear
0.00.817.479 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.817.480 I llm_load_print_meta: freq_scale_train = 1
0.00.817.480 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.817.480 I llm_load_print_meta: rope_finetuned   = unknown
0.00.817.481 I llm_load_print_meta: ssm_d_conv       = 0
0.00.817.481 I llm_load_print_meta: ssm_d_inner      = 0
0.00.817.482 I llm_load_print_meta: ssm_d_state      = 0
0.00.817.482 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.817.482 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.817.483 I llm_load_print_meta: model type       = 2B
0.00.817.484 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.817.485 I llm_load_print_meta: model params     = 2.51 B
0.00.817.486 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.817.486 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.817.487 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.817.488 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.817.488 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.817.489 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.817.489 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.817.490 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.817.511 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.817.513 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.817.513 I llm_load_print_meta: max token length = 93
0.00.880.986 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.880.995 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.880.996 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.880.996 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.880.997 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.880.998 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.886.803 I llama_new_context_with_model: n_seq_max     = 1
0.00.886.810 I llama_new_context_with_model: n_ctx         = 4096
0.00.886.810 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.886.811 I llama_new_context_with_model: n_batch       = 2048
0.00.886.811 I llama_new_context_with_model: n_ubatch      = 512
0.00.886.812 I llama_new_context_with_model: flash_attn    = 0
0.00.886.814 I llama_new_context_with_model: freq_base     = 10000.0
0.00.886.815 I llama_new_context_with_model: freq_scale    = 1
0.00.886.816 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.901.204 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.901.242 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.901.357 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.903.935 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.903.939 I llama_new_context_with_model: graph nodes  = 601
0.00.903.939 I llama_new_context_with_model: graph splits = 1
0.00.903.962 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.481.033 I main: llama threadpool init, n_threads = 4
0.01.481.050 I 
0.01.481.166 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.481.170 I 
0.01.481.409 I sampler seed: 3060535381
0.01.481.423 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.481.432 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.481.435 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.481.436 I 
 squaRED.

I am unable to access the requested resource.

I am unable to access the requested resource.

Please try again later.

I am

0.12.599.572 I llama_perf_sampler_print:    sampling time =      49.09 ms /    33 runs   (    1.49 ms per token,   672.29 tokens per second)
0.12.599.588 I llama_perf_context_print:        load time =    1480.09 ms
0.12.599.590 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.599.591 I llama_perf_context_print:        eval time =   11029.35 ms /    32 runs   (  344.67 ms per token,     2.90 tokens per second)
0.12.599.592 I llama_perf_context_print:       total time =   11118.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4329 (89d604f2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186855.81 ms
main:    total time = 186855.81 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.629 I build: 4329 (89d604f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.829 I main: llama backend init
0.00.000.837 I main: load the model and apply lora adapter, if any
0.00.029.325 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.029.427 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.441 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.444 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.450 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.454 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.455 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.456 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.458 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.459 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.464 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.466 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.476 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.478 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.029.479 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.536 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.332.987 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.356.961 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.356.971 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.356.973 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.356.974 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.356.975 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.356.977 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.356.978 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.356.983 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.356.985 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.356.994 I llama_model_loader: - type  f32:   37 tensors
0.00.356.997 I llama_model_loader: - type q4_K:  108 tensors
0.00.356.997 I llama_model_loader: - type q6_K:   19 tensors
0.00.577.894 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.638.961 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.639.921 I llm_load_vocab: special tokens cache size = 5
0.00.828.467 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.828.539 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.828.540 I llm_load_print_meta: arch             = gemma
0.00.828.540 I llm_load_print_meta: vocab type       = SPM
0.00.828.541 I llm_load_print_meta: n_vocab          = 256000
0.00.828.544 I llm_load_print_meta: n_merges         = 0
0.00.828.544 I llm_load_print_meta: vocab_only       = 0
0.00.828.544 I llm_load_print_meta: n_ctx_train      = 8192
0.00.828.545 I llm_load_print_meta: n_embd           = 2048
0.00.828.545 I llm_load_print_meta: n_layer          = 18
0.00.828.607 I llm_load_print_meta: n_head           = 8
0.00.828.635 I llm_load_print_meta: n_head_kv        = 1
0.00.828.636 I llm_load_print_meta: n_rot            = 256
0.00.828.636 I llm_load_print_meta: n_swa            = 0
0.00.828.637 I llm_load_print_meta: n_embd_head_k    = 256
0.00.828.637 I llm_load_print_meta: n_embd_head_v    = 256
0.00.828.642 I llm_load_print_meta: n_gqa            = 8
0.00.828.646 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.828.651 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.828.653 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.828.655 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.828.655 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.828.656 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.828.657 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.828.661 I llm_load_print_meta: n_ff             = 16384
0.00.828.662 I llm_load_print_meta: n_expert         = 0
0.00.828.667 I llm_load_print_meta: n_expert_used    = 0
0.00.828.668 I llm_load_print_meta: causal attn      = 1
0.00.828.669 I llm_load_print_meta: pooling type     = 0
0.00.828.673 I llm_load_print_meta: rope type        = 2
0.00.828.677 I llm_load_print_meta: rope scaling     = linear
0.00.828.679 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.828.680 I llm_load_print_meta: freq_scale_train = 1
0.00.828.680 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.828.681 I llm_load_print_meta: rope_finetuned   = unknown
0.00.828.681 I llm_load_print_meta: ssm_d_conv       = 0
0.00.828.681 I llm_load_print_meta: ssm_d_inner      = 0
0.00.828.682 I llm_load_print_meta: ssm_d_state      = 0
0.00.828.682 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.828.683 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.828.684 I llm_load_print_meta: model type       = 2B
0.00.828.686 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.828.687 I llm_load_print_meta: model params     = 2.51 B
0.00.828.688 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.828.688 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.828.689 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.828.689 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.828.690 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.828.691 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.828.691 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.828.691 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.828.697 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.828.699 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.828.699 I llm_load_print_meta: max token length = 93
0.00.888.907 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.894.638 I llama_new_context_with_model: n_seq_max     = 1
0.00.894.645 I llama_new_context_with_model: n_ctx         = 4096
0.00.894.646 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.894.646 I llama_new_context_with_model: n_batch       = 2048
0.00.894.647 I llama_new_context_with_model: n_ubatch      = 512
0.00.894.648 I llama_new_context_with_model: flash_attn    = 0
0.00.894.650 I llama_new_context_with_model: freq_base     = 10000.0
0.00.894.651 I llama_new_context_with_model: freq_scale    = 1
0.00.894.652 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.909.691 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.909.733 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.909.854 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.912.444 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.912.447 I llama_new_context_with_model: graph nodes  = 601
0.00.912.448 I llama_new_context_with_model: graph splits = 1
0.00.912.471 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.489.587 I main: llama threadpool init, n_threads = 4
0.01.489.602 I 
0.01.489.724 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.489.725 I 
0.01.489.975 I sampler seed: 3598261661
0.01.489.992 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.490.013 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.490.017 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.490.017 I 
 effe of the following sentences:

"It is important to have a balanced view of the world, and to be mindful of the different perspectives that exist."



0.12.605.624 I llama_perf_sampler_print:    sampling time =      49.19 ms /    33 runs   (    1.49 ms per token,   670.81 tokens per second)
0.12.605.639 I llama_perf_context_print:        load time =    1488.65 ms
0.12.605.641 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.605.643 I llama_perf_context_print:        eval time =   11026.38 ms /    32 runs   (  344.57 ms per token,     2.90 tokens per second)
0.12.605.644 I llama_perf_context_print:       total time =   11116.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m41.737s
user	46m45.217s
sys	0m6.380s
