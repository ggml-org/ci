+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 3939 (8901755b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.840 I main: llama backend init
0.00.002.799 I main: load the model and apply lora adapter, if any
0.00.024.668 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.881 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.971 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.982 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.984 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.988 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.997 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.001 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.002 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.003 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.004 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.011 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.012 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.013 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.014 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.015 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.673 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.260 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.568 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.576 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.577 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.578 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.579 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.580 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.581 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.585 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.586 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.587 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.588 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.589 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.597 I llama_model_loader: - type  f32:   37 tensors
0.00.266.602 I llama_model_loader: - type q8_0:  127 tensors
0.00.438.949 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.591 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.514 I llm_load_vocab: special tokens cache size = 5
0.00.602.526 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.602.599 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.602.600 I llm_load_print_meta: arch             = gemma
0.00.602.601 I llm_load_print_meta: vocab type       = SPM
0.00.602.601 I llm_load_print_meta: n_vocab          = 256000
0.00.602.604 I llm_load_print_meta: n_merges         = 0
0.00.602.604 I llm_load_print_meta: vocab_only       = 0
0.00.602.604 I llm_load_print_meta: n_ctx_train      = 8192
0.00.602.605 I llm_load_print_meta: n_embd           = 2048
0.00.602.605 I llm_load_print_meta: n_layer          = 18
0.00.602.668 I llm_load_print_meta: n_head           = 8
0.00.602.675 I llm_load_print_meta: n_head_kv        = 1
0.00.602.676 I llm_load_print_meta: n_rot            = 256
0.00.602.676 I llm_load_print_meta: n_swa            = 0
0.00.602.676 I llm_load_print_meta: n_embd_head_k    = 256
0.00.602.677 I llm_load_print_meta: n_embd_head_v    = 256
0.00.602.681 I llm_load_print_meta: n_gqa            = 8
0.00.602.686 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.602.691 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.602.692 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.602.693 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.602.694 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.602.694 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.602.695 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.602.700 I llm_load_print_meta: n_ff             = 16384
0.00.602.700 I llm_load_print_meta: n_expert         = 0
0.00.602.701 I llm_load_print_meta: n_expert_used    = 0
0.00.602.701 I llm_load_print_meta: causal attn      = 1
0.00.602.702 I llm_load_print_meta: pooling type     = 0
0.00.602.702 I llm_load_print_meta: rope type        = 2
0.00.602.702 I llm_load_print_meta: rope scaling     = linear
0.00.602.704 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.602.705 I llm_load_print_meta: freq_scale_train = 1
0.00.602.705 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.602.705 I llm_load_print_meta: rope_finetuned   = unknown
0.00.602.706 I llm_load_print_meta: ssm_d_conv       = 0
0.00.602.706 I llm_load_print_meta: ssm_d_inner      = 0
0.00.602.706 I llm_load_print_meta: ssm_d_state      = 0
0.00.602.706 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.602.707 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.602.708 I llm_load_print_meta: model type       = 2B
0.00.602.709 I llm_load_print_meta: model ftype      = Q8_0
0.00.602.709 I llm_load_print_meta: model params     = 2.51 B
0.00.602.710 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.602.710 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.602.735 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.602.736 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.602.737 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.602.737 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.602.738 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.602.739 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.602.744 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.602.746 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.602.751 I llm_load_print_meta: max token length = 93
0.00.602.917 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.702.967 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.702.979 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.702.980 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.702.981 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.702.981 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.702.982 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.708.719 I llama_new_context_with_model: n_ctx      = 8192
0.00.708.727 I llama_new_context_with_model: n_batch    = 2048
0.00.708.727 I llama_new_context_with_model: n_ubatch   = 512
0.00.708.728 I llama_new_context_with_model: flash_attn = 0
0.00.708.731 I llama_new_context_with_model: freq_base  = 10000.0
0.00.708.731 I llama_new_context_with_model: freq_scale = 1
0.00.738.058 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.738.100 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.738.220 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.739.619 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.739.624 I llama_new_context_with_model: graph nodes  = 601
0.00.739.624 I llama_new_context_with_model: graph splits = 1
0.00.739.639 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.348.941 I main: llama threadpool init, n_threads = 4
0.01.348.954 I 
0.01.349.057 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.349.061 I 
0.01.349.238 I sampler seed: 2106733203
0.01.349.250 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.349.257 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.349.258 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.349.259 I 
 increasements, and the challenges of working with them.

**Answer:**

**1. Understanding and Defining Crescendos and Decrescendos**

- Cresc

0.14.750.742 I llama_perf_sampler_print:    sampling time =      49.31 ms /    33 runs   (    1.49 ms per token,   669.22 tokens per second)
0.14.750.746 I llama_perf_context_print:        load time =    1346.06 ms
0.14.750.756 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.750.759 I llama_perf_context_print:        eval time =   13319.21 ms /    32 runs   (  416.23 ms per token,     2.40 tokens per second)
0.14.750.760 I llama_perf_context_print:       total time =   13401.81 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.700 I build: 3939 (8901755b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.897 I main: llama backend init
0.00.002.832 I main: load the model and apply lora adapter, if any
0.00.024.777 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.863 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.876 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.878 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.881 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.884 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.885 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.886 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.887 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.888 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.896 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.897 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.898 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.899 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.900 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.502 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.772 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.117 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.127 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.128 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.129 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.130 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.131 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.132 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.135 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.136 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.138 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.139 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.266.140 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.148 I llama_model_loader: - type  f32:   37 tensors
0.00.266.152 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.314 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.501.395 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.502.363 I llm_load_vocab: special tokens cache size = 5
0.00.601.947 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.602.020 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.602.021 I llm_load_print_meta: arch             = gemma
0.00.602.022 I llm_load_print_meta: vocab type       = SPM
0.00.602.023 I llm_load_print_meta: n_vocab          = 256000
0.00.602.025 I llm_load_print_meta: n_merges         = 0
0.00.602.026 I llm_load_print_meta: vocab_only       = 0
0.00.602.026 I llm_load_print_meta: n_ctx_train      = 8192
0.00.602.026 I llm_load_print_meta: n_embd           = 2048
0.00.602.027 I llm_load_print_meta: n_layer          = 18
0.00.602.089 I llm_load_print_meta: n_head           = 8
0.00.602.096 I llm_load_print_meta: n_head_kv        = 1
0.00.602.097 I llm_load_print_meta: n_rot            = 256
0.00.602.098 I llm_load_print_meta: n_swa            = 0
0.00.602.098 I llm_load_print_meta: n_embd_head_k    = 256
0.00.602.099 I llm_load_print_meta: n_embd_head_v    = 256
0.00.602.103 I llm_load_print_meta: n_gqa            = 8
0.00.602.108 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.602.113 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.602.114 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.602.115 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.602.116 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.602.117 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.602.117 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.602.123 I llm_load_print_meta: n_ff             = 16384
0.00.602.123 I llm_load_print_meta: n_expert         = 0
0.00.602.123 I llm_load_print_meta: n_expert_used    = 0
0.00.602.124 I llm_load_print_meta: causal attn      = 1
0.00.602.125 I llm_load_print_meta: pooling type     = 0
0.00.602.125 I llm_load_print_meta: rope type        = 2
0.00.602.126 I llm_load_print_meta: rope scaling     = linear
0.00.602.127 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.602.128 I llm_load_print_meta: freq_scale_train = 1
0.00.602.128 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.602.128 I llm_load_print_meta: rope_finetuned   = unknown
0.00.602.129 I llm_load_print_meta: ssm_d_conv       = 0
0.00.602.130 I llm_load_print_meta: ssm_d_inner      = 0
0.00.602.130 I llm_load_print_meta: ssm_d_state      = 0
0.00.602.130 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.602.130 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.602.132 I llm_load_print_meta: model type       = 2B
0.00.602.133 I llm_load_print_meta: model ftype      = Q8_0
0.00.602.133 I llm_load_print_meta: model params     = 2.51 B
0.00.602.134 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.602.134 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.602.135 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.602.136 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.602.137 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.602.137 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.602.137 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.602.137 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.602.143 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.602.144 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.602.145 I llm_load_print_meta: max token length = 93
0.00.602.311 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.696.834 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.702.469 I llama_new_context_with_model: n_ctx      = 8192
0.00.702.476 I llama_new_context_with_model: n_batch    = 2048
0.00.702.476 I llama_new_context_with_model: n_ubatch   = 512
0.00.702.477 I llama_new_context_with_model: flash_attn = 0
0.00.702.480 I llama_new_context_with_model: freq_base  = 10000.0
0.00.702.481 I llama_new_context_with_model: freq_scale = 1
0.00.732.291 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.732.338 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.732.460 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.733.832 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.733.837 I llama_new_context_with_model: graph nodes  = 601
0.00.733.837 I llama_new_context_with_model: graph splits = 1
0.00.733.853 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.345.311 I main: llama threadpool init, n_threads = 4
0.01.345.323 I 
0.01.345.425 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.345.430 I 
0.01.345.608 I sampler seed: 3924440888
0.01.345.620 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.345.628 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.345.629 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.345.629 I 
 seconary data generated by a recommender system.

**Purpose:**

- To provide insights into user behavior and preferences.
- To personalize recommendations for other

0.14.868.492 I llama_perf_sampler_print:    sampling time =      49.74 ms /    33 runs   (    1.51 ms per token,   663.46 tokens per second)
0.14.868.497 I llama_perf_context_print:        load time =    1342.39 ms
0.14.868.498 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.868.500 I llama_perf_context_print:        eval time =   13440.02 ms /    32 runs   (  420.00 ms per token,     2.38 tokens per second)
0.14.868.502 I llama_perf_context_print:       total time =   13523.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.631 I build: 3939 (8901755b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.820 I main: llama backend init
0.00.002.756 I main: load the model and apply lora adapter, if any
0.00.024.418 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.625 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.712 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.723 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.725 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.729 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.733 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.734 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.736 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.737 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.738 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.746 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.747 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.748 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.749 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.750 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.715 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.099 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.277 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.286 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.287 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.288 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.289 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.290 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.291 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.295 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.296 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.297 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.298 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.266.299 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.307 I llama_model_loader: - type  f32:   37 tensors
0.00.266.311 I llama_model_loader: - type q8_0:  127 tensors
0.00.436.909 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.496.335 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.497.298 I llm_load_vocab: special tokens cache size = 5
0.00.592.109 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.592.174 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.592.175 I llm_load_print_meta: arch             = gemma
0.00.592.176 I llm_load_print_meta: vocab type       = SPM
0.00.592.177 I llm_load_print_meta: n_vocab          = 256000
0.00.592.179 I llm_load_print_meta: n_merges         = 0
0.00.592.180 I llm_load_print_meta: vocab_only       = 0
0.00.592.180 I llm_load_print_meta: n_ctx_train      = 8192
0.00.592.180 I llm_load_print_meta: n_embd           = 2048
0.00.592.181 I llm_load_print_meta: n_layer          = 18
0.00.592.244 I llm_load_print_meta: n_head           = 8
0.00.592.251 I llm_load_print_meta: n_head_kv        = 1
0.00.592.252 I llm_load_print_meta: n_rot            = 256
0.00.592.252 I llm_load_print_meta: n_swa            = 0
0.00.592.253 I llm_load_print_meta: n_embd_head_k    = 256
0.00.592.253 I llm_load_print_meta: n_embd_head_v    = 256
0.00.592.258 I llm_load_print_meta: n_gqa            = 8
0.00.592.262 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.592.267 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.592.268 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.592.270 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.592.270 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.592.271 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.592.292 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.592.299 I llm_load_print_meta: n_ff             = 16384
0.00.592.300 I llm_load_print_meta: n_expert         = 0
0.00.592.308 I llm_load_print_meta: n_expert_used    = 0
0.00.592.309 I llm_load_print_meta: causal attn      = 1
0.00.592.310 I llm_load_print_meta: pooling type     = 0
0.00.592.311 I llm_load_print_meta: rope type        = 2
0.00.592.311 I llm_load_print_meta: rope scaling     = linear
0.00.592.313 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.592.313 I llm_load_print_meta: freq_scale_train = 1
0.00.592.314 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.592.318 I llm_load_print_meta: rope_finetuned   = unknown
0.00.592.318 I llm_load_print_meta: ssm_d_conv       = 0
0.00.592.318 I llm_load_print_meta: ssm_d_inner      = 0
0.00.592.319 I llm_load_print_meta: ssm_d_state      = 0
0.00.592.319 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.592.319 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.592.328 I llm_load_print_meta: model type       = 2B
0.00.592.330 I llm_load_print_meta: model ftype      = Q8_0
0.00.592.330 I llm_load_print_meta: model params     = 2.51 B
0.00.592.331 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.592.332 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.592.332 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.592.333 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.592.333 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.592.333 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.592.334 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.592.334 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.592.341 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.592.343 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.592.344 I llm_load_print_meta: max token length = 93
0.00.592.512 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.668.530 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.668.539 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.668.540 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.668.540 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.668.541 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.668.542 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.674.205 I llama_new_context_with_model: n_ctx      = 8192
0.00.674.212 I llama_new_context_with_model: n_batch    = 2048
0.00.674.213 I llama_new_context_with_model: n_ubatch   = 512
0.00.674.213 I llama_new_context_with_model: flash_attn = 0
0.00.674.215 I llama_new_context_with_model: freq_base  = 10000.0
0.00.674.216 I llama_new_context_with_model: freq_scale = 1
0.00.703.477 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.703.519 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.703.631 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.705.045 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.705.050 I llama_new_context_with_model: graph nodes  = 601
0.00.705.051 I llama_new_context_with_model: graph splits = 1
0.00.705.065 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.314.564 I main: llama threadpool init, n_threads = 4
0.01.314.576 I 
0.01.314.678 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.314.682 I 
0.01.314.861 I sampler seed: 497854456
0.01.314.872 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.314.880 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.314.881 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.314.881 I 
 increably!

I am unable to generate text that contains sexually suggestive or explicit content. My purpose is to assist with tasks and provide information within the boundaries of

0.14.791.609 I llama_perf_sampler_print:    sampling time =      49.20 ms /    33 runs   (    1.49 ms per token,   670.70 tokens per second)
0.14.791.633 I llama_perf_context_print:        load time =    1311.73 ms
0.14.791.635 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.791.636 I llama_perf_context_print:        eval time =   13393.91 ms /    32 runs   (  418.56 ms per token,     2.39 tokens per second)
0.14.791.645 I llama_perf_context_print:       total time =   13477.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 3939 (8901755b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.002.772 I main: load the model and apply lora adapter, if any
0.00.024.405 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.605 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.686 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.696 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.697 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.702 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.703 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.705 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.707 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.708 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.709 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.715 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.719 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.720 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.721 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.722 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.266 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.343 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.605 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.612 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.614 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.615 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.616 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.617 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.618 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.621 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.622 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.623 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.624 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.266.626 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.634 I llama_model_loader: - type  f32:   37 tensors
0.00.266.638 I llama_model_loader: - type q8_0:  127 tensors
0.00.439.256 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.159 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.102 I llm_load_vocab: special tokens cache size = 5
0.00.597.797 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.597.870 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.597.871 I llm_load_print_meta: arch             = gemma
0.00.597.872 I llm_load_print_meta: vocab type       = SPM
0.00.597.873 I llm_load_print_meta: n_vocab          = 256000
0.00.597.876 I llm_load_print_meta: n_merges         = 0
0.00.597.876 I llm_load_print_meta: vocab_only       = 0
0.00.597.876 I llm_load_print_meta: n_ctx_train      = 8192
0.00.597.877 I llm_load_print_meta: n_embd           = 2048
0.00.597.877 I llm_load_print_meta: n_layer          = 18
0.00.597.938 I llm_load_print_meta: n_head           = 8
0.00.597.945 I llm_load_print_meta: n_head_kv        = 1
0.00.597.946 I llm_load_print_meta: n_rot            = 256
0.00.597.946 I llm_load_print_meta: n_swa            = 0
0.00.597.947 I llm_load_print_meta: n_embd_head_k    = 256
0.00.597.947 I llm_load_print_meta: n_embd_head_v    = 256
0.00.597.952 I llm_load_print_meta: n_gqa            = 8
0.00.597.957 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.597.962 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.597.964 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.597.965 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.597.965 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.597.966 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.597.966 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.597.971 I llm_load_print_meta: n_ff             = 16384
0.00.597.972 I llm_load_print_meta: n_expert         = 0
0.00.597.972 I llm_load_print_meta: n_expert_used    = 0
0.00.597.972 I llm_load_print_meta: causal attn      = 1
0.00.597.973 I llm_load_print_meta: pooling type     = 0
0.00.597.973 I llm_load_print_meta: rope type        = 2
0.00.597.974 I llm_load_print_meta: rope scaling     = linear
0.00.597.976 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.597.976 I llm_load_print_meta: freq_scale_train = 1
0.00.597.977 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.597.977 I llm_load_print_meta: rope_finetuned   = unknown
0.00.597.977 I llm_load_print_meta: ssm_d_conv       = 0
0.00.597.977 I llm_load_print_meta: ssm_d_inner      = 0
0.00.597.978 I llm_load_print_meta: ssm_d_state      = 0
0.00.597.979 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.597.979 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.597.980 I llm_load_print_meta: model type       = 2B
0.00.597.981 I llm_load_print_meta: model ftype      = Q8_0
0.00.597.982 I llm_load_print_meta: model params     = 2.51 B
0.00.597.983 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.597.983 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.597.984 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.597.985 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.597.986 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.597.986 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.597.996 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.598.001 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.598.007 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.598.008 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.598.009 I llm_load_print_meta: max token length = 93
0.00.598.171 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.669.592 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.669.602 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.675.263 I llama_new_context_with_model: n_ctx      = 8192
0.00.675.269 I llama_new_context_with_model: n_batch    = 2048
0.00.675.269 I llama_new_context_with_model: n_ubatch   = 512
0.00.675.270 I llama_new_context_with_model: flash_attn = 0
0.00.675.272 I llama_new_context_with_model: freq_base  = 10000.0
0.00.675.273 I llama_new_context_with_model: freq_scale = 1
0.00.703.939 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.703.981 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.704.096 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.705.451 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.705.456 I llama_new_context_with_model: graph nodes  = 601
0.00.705.456 I llama_new_context_with_model: graph splits = 1
0.00.705.472 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.314.041 I main: llama threadpool init, n_threads = 4
0.01.314.053 I 
0.01.314.158 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.314.162 I 
0.01.314.337 I sampler seed: 4291326525
0.01.314.348 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.314.354 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.314.355 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.314.355 I 
 seconally, following the format:

**Headline:** [Headline of the article]

**Body:** [Body of the article]

**Conclusion:** [

0.14.738.538 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.79 tokens per second)
0.14.738.542 I llama_perf_context_print:        load time =    1311.18 ms
0.14.738.544 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.738.546 I llama_perf_context_print:        eval time =   13341.90 ms /    32 runs   (  416.93 ms per token,     2.40 tokens per second)
0.14.738.547 I llama_perf_context_print:       total time =   13424.51 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.658s
user	3m47.926s
sys	0m9.368s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3939 (8901755b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 197977.30 ms
main:    total time = 197977.30 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.668 I build: 3939 (8901755b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.002.817 I main: load the model and apply lora adapter, if any
0.00.024.654 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.866 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.953 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.964 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.966 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.970 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.971 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.973 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.975 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.976 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.977 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.984 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.987 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.989 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.990 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.991 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.368 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.941 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.502 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.511 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.512 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.513 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.514 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.515 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.516 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.520 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.521 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.522 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.522 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.524 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.533 I llama_model_loader: - type  f32:   37 tensors
0.00.266.537 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.538 I llama_model_loader: - type q6_K:   19 tensors
0.00.436.066 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.502.499 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.503.570 I llm_load_vocab: special tokens cache size = 5
0.00.614.273 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.614.340 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.614.341 I llm_load_print_meta: arch             = gemma
0.00.614.342 I llm_load_print_meta: vocab type       = SPM
0.00.614.342 I llm_load_print_meta: n_vocab          = 256000
0.00.614.345 I llm_load_print_meta: n_merges         = 0
0.00.614.345 I llm_load_print_meta: vocab_only       = 0
0.00.614.346 I llm_load_print_meta: n_ctx_train      = 8192
0.00.614.346 I llm_load_print_meta: n_embd           = 2048
0.00.614.346 I llm_load_print_meta: n_layer          = 18
0.00.614.411 I llm_load_print_meta: n_head           = 8
0.00.614.418 I llm_load_print_meta: n_head_kv        = 1
0.00.614.419 I llm_load_print_meta: n_rot            = 256
0.00.614.419 I llm_load_print_meta: n_swa            = 0
0.00.614.420 I llm_load_print_meta: n_embd_head_k    = 256
0.00.614.421 I llm_load_print_meta: n_embd_head_v    = 256
0.00.614.425 I llm_load_print_meta: n_gqa            = 8
0.00.614.430 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.614.435 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.614.436 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.614.438 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.614.438 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.614.438 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.614.439 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.614.444 I llm_load_print_meta: n_ff             = 16384
0.00.614.445 I llm_load_print_meta: n_expert         = 0
0.00.614.446 I llm_load_print_meta: n_expert_used    = 0
0.00.614.446 I llm_load_print_meta: causal attn      = 1
0.00.614.446 I llm_load_print_meta: pooling type     = 0
0.00.614.447 I llm_load_print_meta: rope type        = 2
0.00.614.448 I llm_load_print_meta: rope scaling     = linear
0.00.614.450 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.614.450 I llm_load_print_meta: freq_scale_train = 1
0.00.614.460 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.614.461 I llm_load_print_meta: rope_finetuned   = unknown
0.00.614.461 I llm_load_print_meta: ssm_d_conv       = 0
0.00.614.462 I llm_load_print_meta: ssm_d_inner      = 0
0.00.614.462 I llm_load_print_meta: ssm_d_state      = 0
0.00.614.462 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.614.476 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.614.477 I llm_load_print_meta: model type       = 2B
0.00.614.478 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.614.479 I llm_load_print_meta: model params     = 2.51 B
0.00.614.480 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.614.480 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.614.480 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.614.481 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.614.482 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.614.482 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.614.482 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.614.483 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.614.488 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.614.490 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.614.491 I llm_load_print_meta: max token length = 93
0.00.614.672 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.674.775 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.674.786 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.674.787 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.674.788 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.674.788 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.674.789 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.680.356 I llama_new_context_with_model: n_ctx      = 8192
0.00.680.363 I llama_new_context_with_model: n_batch    = 2048
0.00.680.363 I llama_new_context_with_model: n_ubatch   = 512
0.00.680.364 I llama_new_context_with_model: flash_attn = 0
0.00.680.366 I llama_new_context_with_model: freq_base  = 10000.0
0.00.680.367 I llama_new_context_with_model: freq_scale = 1
0.00.709.231 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.709.274 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.709.395 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.710.830 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.710.835 I llama_new_context_with_model: graph nodes  = 601
0.00.710.836 I llama_new_context_with_model: graph splits = 1
0.00.710.853 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.289.341 I main: llama threadpool init, n_threads = 4
0.01.289.355 I 
0.01.289.464 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.289.464 I 
0.01.289.643 I sampler seed: 137485181
0.01.289.655 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.289.662 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.289.664 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.289.664 I 
 guarante by the way.

I am not sure why I am experiencing this issue. I have never experienced anything like this before. I have been experiencing this for

0.12.166.531 I llama_perf_sampler_print:    sampling time =      49.24 ms /    33 runs   (    1.49 ms per token,   670.24 tokens per second)
0.12.166.535 I llama_perf_context_print:        load time =    1286.44 ms
0.12.166.537 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.166.542 I llama_perf_context_print:        eval time =   10795.19 ms /    32 runs   (  337.35 ms per token,     2.96 tokens per second)
0.12.166.543 I llama_perf_context_print:       total time =   10877.20 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3939 (8901755b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 197921.09 ms
main:    total time = 197921.09 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 3939 (8901755b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.002.778 I main: load the model and apply lora adapter, if any
0.00.025.270 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.399 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.417 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.420 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.426 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.431 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.432 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.434 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.436 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.437 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.445 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.447 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.449 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.451 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.453 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.154 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.849 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.238 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.248 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.249 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.250 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.251 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.253 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.254 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.257 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.258 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.267 I llama_model_loader: - type  f32:   37 tensors
0.00.269.271 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.272 I llama_model_loader: - type q6_K:   19 tensors
0.00.447.450 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.202 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.050 I llm_load_vocab: special tokens cache size = 5
0.00.606.561 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.606.634 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.606.635 I llm_load_print_meta: arch             = gemma
0.00.606.636 I llm_load_print_meta: vocab type       = SPM
0.00.606.636 I llm_load_print_meta: n_vocab          = 256000
0.00.606.639 I llm_load_print_meta: n_merges         = 0
0.00.606.639 I llm_load_print_meta: vocab_only       = 0
0.00.606.640 I llm_load_print_meta: n_ctx_train      = 8192
0.00.606.640 I llm_load_print_meta: n_embd           = 2048
0.00.606.640 I llm_load_print_meta: n_layer          = 18
0.00.606.707 I llm_load_print_meta: n_head           = 8
0.00.606.716 I llm_load_print_meta: n_head_kv        = 1
0.00.606.718 I llm_load_print_meta: n_rot            = 256
0.00.606.719 I llm_load_print_meta: n_swa            = 0
0.00.606.720 I llm_load_print_meta: n_embd_head_k    = 256
0.00.606.720 I llm_load_print_meta: n_embd_head_v    = 256
0.00.606.730 I llm_load_print_meta: n_gqa            = 8
0.00.606.735 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.606.740 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.606.741 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.606.754 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.606.756 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.606.756 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.606.756 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.606.763 I llm_load_print_meta: n_ff             = 16384
0.00.606.764 I llm_load_print_meta: n_expert         = 0
0.00.606.765 I llm_load_print_meta: n_expert_used    = 0
0.00.606.765 I llm_load_print_meta: causal attn      = 1
0.00.606.766 I llm_load_print_meta: pooling type     = 0
0.00.606.769 I llm_load_print_meta: rope type        = 2
0.00.606.770 I llm_load_print_meta: rope scaling     = linear
0.00.606.771 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.606.772 I llm_load_print_meta: freq_scale_train = 1
0.00.606.772 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.606.773 I llm_load_print_meta: rope_finetuned   = unknown
0.00.606.773 I llm_load_print_meta: ssm_d_conv       = 0
0.00.606.773 I llm_load_print_meta: ssm_d_inner      = 0
0.00.606.773 I llm_load_print_meta: ssm_d_state      = 0
0.00.606.774 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.606.774 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.606.789 I llm_load_print_meta: model type       = 2B
0.00.606.791 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.606.792 I llm_load_print_meta: model params     = 2.51 B
0.00.606.792 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.606.793 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.606.802 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.606.803 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.606.804 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.606.804 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.606.812 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.606.813 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.606.818 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.606.820 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.606.820 I llm_load_print_meta: max token length = 93
0.00.606.987 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.664.005 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.669.480 I llama_new_context_with_model: n_ctx      = 8192
0.00.669.487 I llama_new_context_with_model: n_batch    = 2048
0.00.669.487 I llama_new_context_with_model: n_ubatch   = 512
0.00.669.488 I llama_new_context_with_model: flash_attn = 0
0.00.669.491 I llama_new_context_with_model: freq_base  = 10000.0
0.00.669.491 I llama_new_context_with_model: freq_scale = 1
0.00.698.520 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.698.565 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.698.676 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.700.029 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.700.034 I llama_new_context_with_model: graph nodes  = 601
0.00.700.034 I llama_new_context_with_model: graph splits = 1
0.00.700.051 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.280.921 I main: llama threadpool init, n_threads = 4
0.01.280.935 I 
0.01.281.039 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.281.044 I 
0.01.281.221 I sampler seed: 1842330958
0.01.281.232 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.281.241 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.281.241 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.281.242 I 
 squaRE

## Squatre: A Versatile Open-Source Framework for Building and Deploying Web Applications

**Squatre** is an open-source framework designed

0.12.203.094 I llama_perf_sampler_print:    sampling time =      49.39 ms /    33 runs   (    1.50 ms per token,   668.19 tokens per second)
0.12.203.106 I llama_perf_context_print:        load time =    1278.06 ms
0.12.203.110 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.203.112 I llama_perf_context_print:        eval time =   10839.94 ms /    32 runs   (  338.75 ms per token,     2.95 tokens per second)
0.12.203.113 I llama_perf_context_print:       total time =   10922.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m3.132s
user	49m53.202s
sys	0m6.328s
