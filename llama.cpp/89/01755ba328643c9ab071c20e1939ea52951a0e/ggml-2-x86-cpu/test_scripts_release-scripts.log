+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.529 I build: 3939 (8901755b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.727 I main: llama backend init
0.00.001.867 I main: load the model and apply lora adapter, if any
0.00.022.198 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.247 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.252 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.264 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.265 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.269 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.269 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.270 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.271 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.271 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.272 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.276 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.277 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.277 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.278 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.278 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.077 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.940 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.189 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.194 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.194 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.195 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.196 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.196 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.197 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.200 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.200 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.201 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.201 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.202 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.205 I llama_model_loader: - type  f32:   37 tensors
0.00.133.208 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.538 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.208 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.668 I llm_load_vocab: special tokens cache size = 5
0.00.261.642 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.658 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.659 I llm_load_print_meta: arch             = gemma
0.00.261.659 I llm_load_print_meta: vocab type       = SPM
0.00.261.660 I llm_load_print_meta: n_vocab          = 256000
0.00.261.660 I llm_load_print_meta: n_merges         = 0
0.00.261.661 I llm_load_print_meta: vocab_only       = 0
0.00.261.661 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.661 I llm_load_print_meta: n_embd           = 2048
0.00.261.661 I llm_load_print_meta: n_layer          = 18
0.00.261.672 I llm_load_print_meta: n_head           = 8
0.00.261.673 I llm_load_print_meta: n_head_kv        = 1
0.00.261.674 I llm_load_print_meta: n_rot            = 256
0.00.261.674 I llm_load_print_meta: n_swa            = 0
0.00.261.674 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.675 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.676 I llm_load_print_meta: n_gqa            = 8
0.00.261.677 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.677 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.678 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.680 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.680 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.680 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.680 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.681 I llm_load_print_meta: n_ff             = 16384
0.00.261.682 I llm_load_print_meta: n_expert         = 0
0.00.261.682 I llm_load_print_meta: n_expert_used    = 0
0.00.261.682 I llm_load_print_meta: causal attn      = 1
0.00.261.683 I llm_load_print_meta: pooling type     = 0
0.00.261.683 I llm_load_print_meta: rope type        = 2
0.00.261.683 I llm_load_print_meta: rope scaling     = linear
0.00.261.685 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.685 I llm_load_print_meta: freq_scale_train = 1
0.00.261.685 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.686 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.686 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.686 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.686 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.687 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.687 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.688 I llm_load_print_meta: model type       = 2B
0.00.261.688 I llm_load_print_meta: model ftype      = Q8_0
0.00.261.689 I llm_load_print_meta: model params     = 2.51 B
0.00.261.690 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.261.690 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.691 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.691 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.692 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.692 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.692 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.693 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.693 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.693 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.694 I llm_load_print_meta: max token length = 93
0.00.261.712 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.360.483 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.360.490 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.360.491 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.360.491 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.360.492 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.360.493 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.365.549 I llama_new_context_with_model: n_ctx      = 8192
0.00.365.554 I llama_new_context_with_model: n_batch    = 2048
0.00.365.554 I llama_new_context_with_model: n_ubatch   = 512
0.00.365.555 I llama_new_context_with_model: flash_attn = 0
0.00.365.557 I llama_new_context_with_model: freq_base  = 10000.0
0.00.365.558 I llama_new_context_with_model: freq_scale = 1
0.00.394.021 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.394.037 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.394.124 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.394.989 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.394.997 I llama_new_context_with_model: graph nodes  = 601
0.00.394.997 I llama_new_context_with_model: graph splits = 1
0.00.394.998 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.486.191 I main: llama threadpool init, n_threads = 4
0.00.486.205 I 
0.00.486.278 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.486.281 I 
0.00.486.318 I sampler seed: 2046371505
0.00.486.328 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.486.331 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.486.331 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.486.331 I 
 increasities are a complex issue that has been debated for many years.

**Arguments in favor of normalization of such practices:**

- Allow cultural exchange and understanding

0.02.721.801 I llama_perf_sampler_print:    sampling time =       4.66 ms /    33 runs   (    0.14 ms per token,  7075.47 tokens per second)
0.02.721.803 I llama_perf_context_print:        load time =     484.30 ms
0.02.721.804 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.721.806 I llama_perf_context_print:        eval time =    2217.29 ms /    32 runs   (   69.29 ms per token,    14.43 tokens per second)
0.02.721.807 I llama_perf_context_print:       total time =    2235.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.553 I build: 3939 (8901755b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.754 I main: llama backend init
0.00.001.880 I main: load the model and apply lora adapter, if any
0.00.021.861 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.875 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.882 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.883 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.887 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.890 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.890 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.891 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.891 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.892 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.896 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.896 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.897 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.898 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.898 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.678 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.176 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.999 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.005 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.006 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.006 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.007 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.008 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.008 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.011 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.011 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.012 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.012 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.013 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.016 I llama_model_loader: - type  f32:   37 tensors
0.00.132.019 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.483 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.213 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.831 I llm_load_vocab: special tokens cache size = 5
0.00.274.993 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.012 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.013 I llm_load_print_meta: arch             = gemma
0.00.275.013 I llm_load_print_meta: vocab type       = SPM
0.00.275.014 I llm_load_print_meta: n_vocab          = 256000
0.00.275.015 I llm_load_print_meta: n_merges         = 0
0.00.275.015 I llm_load_print_meta: vocab_only       = 0
0.00.275.015 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.016 I llm_load_print_meta: n_embd           = 2048
0.00.275.016 I llm_load_print_meta: n_layer          = 18
0.00.275.028 I llm_load_print_meta: n_head           = 8
0.00.275.029 I llm_load_print_meta: n_head_kv        = 1
0.00.275.029 I llm_load_print_meta: n_rot            = 256
0.00.275.030 I llm_load_print_meta: n_swa            = 0
0.00.275.030 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.030 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.031 I llm_load_print_meta: n_gqa            = 8
0.00.275.032 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.033 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.034 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.036 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.036 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.036 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.036 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.037 I llm_load_print_meta: n_ff             = 16384
0.00.275.038 I llm_load_print_meta: n_expert         = 0
0.00.275.038 I llm_load_print_meta: n_expert_used    = 0
0.00.275.038 I llm_load_print_meta: causal attn      = 1
0.00.275.038 I llm_load_print_meta: pooling type     = 0
0.00.275.039 I llm_load_print_meta: rope type        = 2
0.00.275.039 I llm_load_print_meta: rope scaling     = linear
0.00.275.040 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.041 I llm_load_print_meta: freq_scale_train = 1
0.00.275.041 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.042 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.042 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.042 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.042 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.042 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.043 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.043 I llm_load_print_meta: model type       = 2B
0.00.275.044 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.045 I llm_load_print_meta: model params     = 2.51 B
0.00.275.046 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.046 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.047 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.047 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.047 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.048 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.048 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.048 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.049 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.049 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.049 I llm_load_print_meta: max token length = 93
0.00.275.071 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.368.367 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.373.416 I llama_new_context_with_model: n_ctx      = 8192
0.00.373.423 I llama_new_context_with_model: n_batch    = 2048
0.00.373.423 I llama_new_context_with_model: n_ubatch   = 512
0.00.373.424 I llama_new_context_with_model: flash_attn = 0
0.00.373.426 I llama_new_context_with_model: freq_base  = 10000.0
0.00.373.427 I llama_new_context_with_model: freq_scale = 1
0.00.403.092 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.403.107 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.403.199 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.404.075 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.404.083 I llama_new_context_with_model: graph nodes  = 601
0.00.404.083 I llama_new_context_with_model: graph splits = 1
0.00.404.085 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.491.829 I main: llama threadpool init, n_threads = 4
0.00.491.843 I 
0.00.491.920 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.491.923 I 
0.00.491.964 I sampler seed: 3861421157
0.00.491.974 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.491.976 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.491.977 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.491.977 I 
 increasities and their broader implications for the future of work.

**Introduction:**

The rise of precarious work, gig economy models, and the increasing use of

0.02.657.191 I llama_perf_sampler_print:    sampling time =       4.77 ms /    33 runs   (    0.14 ms per token,  6913.89 tokens per second)
0.02.657.193 I llama_perf_context_print:        load time =     489.92 ms
0.02.657.195 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.657.197 I llama_perf_context_print:        eval time =    2147.66 ms /    32 runs   (   67.11 ms per token,    14.90 tokens per second)
0.02.657.198 I llama_perf_context_print:       total time =    2165.37 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.554 I build: 3939 (8901755b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.758 I main: llama backend init
0.00.001.899 I main: load the model and apply lora adapter, if any
0.00.023.137 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.200 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.214 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.219 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.224 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.229 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.230 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.232 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.233 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.234 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.235 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.241 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.242 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.244 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.244 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.246 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.052.437 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.544 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.139.455 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.139.462 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.139.463 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.139.464 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.139.465 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.139.466 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.139.467 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.139.470 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.139.471 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.139.472 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.139.473 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.139.474 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.139.477 I llama_model_loader: - type  f32:   37 tensors
0.00.139.480 I llama_model_loader: - type q8_0:  127 tensors
0.00.220.621 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.269.044 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.269.573 I llm_load_vocab: special tokens cache size = 5
0.00.290.943 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.290.964 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.290.965 I llm_load_print_meta: arch             = gemma
0.00.290.966 I llm_load_print_meta: vocab type       = SPM
0.00.290.967 I llm_load_print_meta: n_vocab          = 256000
0.00.290.967 I llm_load_print_meta: n_merges         = 0
0.00.290.968 I llm_load_print_meta: vocab_only       = 0
0.00.290.968 I llm_load_print_meta: n_ctx_train      = 8192
0.00.290.969 I llm_load_print_meta: n_embd           = 2048
0.00.290.970 I llm_load_print_meta: n_layer          = 18
0.00.290.983 I llm_load_print_meta: n_head           = 8
0.00.290.985 I llm_load_print_meta: n_head_kv        = 1
0.00.290.986 I llm_load_print_meta: n_rot            = 256
0.00.290.986 I llm_load_print_meta: n_swa            = 0
0.00.290.987 I llm_load_print_meta: n_embd_head_k    = 256
0.00.290.987 I llm_load_print_meta: n_embd_head_v    = 256
0.00.290.989 I llm_load_print_meta: n_gqa            = 8
0.00.290.990 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.290.992 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.290.993 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.290.995 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.290.995 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.290.996 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.290.996 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.290.998 I llm_load_print_meta: n_ff             = 16384
0.00.290.998 I llm_load_print_meta: n_expert         = 0
0.00.290.999 I llm_load_print_meta: n_expert_used    = 0
0.00.290.999 I llm_load_print_meta: causal attn      = 1
0.00.291.000 I llm_load_print_meta: pooling type     = 0
0.00.291.000 I llm_load_print_meta: rope type        = 2
0.00.291.001 I llm_load_print_meta: rope scaling     = linear
0.00.291.003 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.291.004 I llm_load_print_meta: freq_scale_train = 1
0.00.291.004 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.291.005 I llm_load_print_meta: rope_finetuned   = unknown
0.00.291.005 I llm_load_print_meta: ssm_d_conv       = 0
0.00.291.005 I llm_load_print_meta: ssm_d_inner      = 0
0.00.291.006 I llm_load_print_meta: ssm_d_state      = 0
0.00.291.006 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.291.007 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.291.007 I llm_load_print_meta: model type       = 2B
0.00.291.008 I llm_load_print_meta: model ftype      = Q8_0
0.00.291.009 I llm_load_print_meta: model params     = 2.51 B
0.00.291.011 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.291.011 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.291.012 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.291.012 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.291.013 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.291.013 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.291.014 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.291.014 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.291.014 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.291.015 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.291.015 I llm_load_print_meta: max token length = 93
0.00.291.045 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.368.926 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.368.935 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.368.936 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.368.937 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.368.937 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.368.938 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.373.981 I llama_new_context_with_model: n_ctx      = 8192
0.00.373.986 I llama_new_context_with_model: n_batch    = 2048
0.00.373.986 I llama_new_context_with_model: n_ubatch   = 512
0.00.373.987 I llama_new_context_with_model: flash_attn = 0
0.00.373.989 I llama_new_context_with_model: freq_base  = 10000.0
0.00.373.990 I llama_new_context_with_model: freq_scale = 1
0.00.403.401 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.403.418 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.403.515 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.404.392 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.404.400 I llama_new_context_with_model: graph nodes  = 601
0.00.404.400 I llama_new_context_with_model: graph splits = 1
0.00.404.402 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.495.195 I main: llama threadpool init, n_threads = 4
0.00.495.209 I 
0.00.495.283 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.495.287 I 
0.00.495.326 I sampler seed: 4215359686
0.00.495.336 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.495.344 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.495.346 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.495.346 I 
 increasities and other inappropriate sexual activity. [end of text]


0.01.138.996 I llama_perf_sampler_print:    sampling time =       1.38 ms /    10 runs   (    0.14 ms per token,  7225.43 tokens per second)
0.01.138.998 I llama_perf_context_print:        load time =     493.27 ms
0.01.138.999 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.139.001 I llama_perf_context_print:        eval time =     638.16 ms /     9 runs   (   70.91 ms per token,    14.10 tokens per second)
0.01.139.001 I llama_perf_context_print:       total time =     643.81 ms /    10 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.392 I build: 3939 (8901755b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.578 I main: llama backend init
0.00.001.703 I main: load the model and apply lora adapter, if any
0.00.021.845 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.893 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.899 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.908 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.912 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.915 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.915 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.916 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.917 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.918 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.918 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.921 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.922 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.922 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.923 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.923 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.050 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.057 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.987 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.993 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.994 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.994 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.995 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.996 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.996 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.999 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.999 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.000 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.001 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.002 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.006 I llama_model_loader: - type  f32:   37 tensors
0.00.132.008 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.586 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.826 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.422 I llm_load_vocab: special tokens cache size = 5
0.00.265.584 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.600 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.600 I llm_load_print_meta: arch             = gemma
0.00.265.601 I llm_load_print_meta: vocab type       = SPM
0.00.265.601 I llm_load_print_meta: n_vocab          = 256000
0.00.265.602 I llm_load_print_meta: n_merges         = 0
0.00.265.602 I llm_load_print_meta: vocab_only       = 0
0.00.265.602 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.603 I llm_load_print_meta: n_embd           = 2048
0.00.265.603 I llm_load_print_meta: n_layer          = 18
0.00.265.615 I llm_load_print_meta: n_head           = 8
0.00.265.616 I llm_load_print_meta: n_head_kv        = 1
0.00.265.616 I llm_load_print_meta: n_rot            = 256
0.00.265.617 I llm_load_print_meta: n_swa            = 0
0.00.265.617 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.617 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.618 I llm_load_print_meta: n_gqa            = 8
0.00.265.619 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.620 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.621 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.622 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.623 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.623 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.623 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.624 I llm_load_print_meta: n_ff             = 16384
0.00.265.624 I llm_load_print_meta: n_expert         = 0
0.00.265.625 I llm_load_print_meta: n_expert_used    = 0
0.00.265.625 I llm_load_print_meta: causal attn      = 1
0.00.265.625 I llm_load_print_meta: pooling type     = 0
0.00.265.626 I llm_load_print_meta: rope type        = 2
0.00.265.626 I llm_load_print_meta: rope scaling     = linear
0.00.265.627 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.628 I llm_load_print_meta: freq_scale_train = 1
0.00.265.628 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.628 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.629 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.629 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.629 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.629 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.629 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.630 I llm_load_print_meta: model type       = 2B
0.00.265.631 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.631 I llm_load_print_meta: model params     = 2.51 B
0.00.265.632 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.632 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.633 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.633 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.634 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.634 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.634 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.635 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.635 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.635 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.636 I llm_load_print_meta: max token length = 93
0.00.265.656 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.336.095 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.336.101 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.341.043 I llama_new_context_with_model: n_ctx      = 8192
0.00.341.050 I llama_new_context_with_model: n_batch    = 2048
0.00.341.050 I llama_new_context_with_model: n_ubatch   = 512
0.00.341.051 I llama_new_context_with_model: flash_attn = 0
0.00.341.053 I llama_new_context_with_model: freq_base  = 10000.0
0.00.341.054 I llama_new_context_with_model: freq_scale = 1
0.00.370.438 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.370.455 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.370.552 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.371.424 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.371.432 I llama_new_context_with_model: graph nodes  = 601
0.00.371.432 I llama_new_context_with_model: graph splits = 1
0.00.371.434 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.828 I main: llama threadpool init, n_threads = 4
0.00.464.841 I 
0.00.464.919 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.464.922 I 
0.00.464.961 I sampler seed: 3224540154
0.00.464.972 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.976 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.464.976 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.976 I 
 increasities, and other types of misconduct by officials.

**Purpose:**

- To promote accountability and transparency in government.
- To uphold the rule of

0.02.861.606 I llama_perf_sampler_print:    sampling time =       5.01 ms /    33 runs   (    0.15 ms per token,  6588.14 tokens per second)
0.02.861.608 I llama_perf_context_print:        load time =     463.10 ms
0.02.861.609 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.861.610 I llama_perf_context_print:        eval time =    2378.30 ms /    32 runs   (   74.32 ms per token,    13.45 tokens per second)
0.02.861.611 I llama_perf_context_print:       total time =    2396.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.768s
user	0m32.622s
sys	0m9.370s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3939 (8901755b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32071.64 ms
main:    total time = 32071.64 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.584 I build: 3939 (8901755b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.789 I main: llama backend init
0.00.001.889 I main: load the model and apply lora adapter, if any
0.00.022.083 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.131 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.143 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.148 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.152 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.156 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.156 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.157 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.158 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.158 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.159 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.162 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.163 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.163 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.164 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.164 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.205 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.067 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.931 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.937 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.938 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.938 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.939 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.939 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.940 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.942 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.944 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.944 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.945 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.946 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.949 I llama_model_loader: - type  f32:   37 tensors
0.00.131.953 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.954 I llama_model_loader: - type q6_K:   19 tensors
0.00.214.685 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.888 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.413 I llm_load_vocab: special tokens cache size = 5
0.00.280.368 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.385 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.386 I llm_load_print_meta: arch             = gemma
0.00.280.386 I llm_load_print_meta: vocab type       = SPM
0.00.280.387 I llm_load_print_meta: n_vocab          = 256000
0.00.280.387 I llm_load_print_meta: n_merges         = 0
0.00.280.388 I llm_load_print_meta: vocab_only       = 0
0.00.280.388 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.388 I llm_load_print_meta: n_embd           = 2048
0.00.280.389 I llm_load_print_meta: n_layer          = 18
0.00.280.402 I llm_load_print_meta: n_head           = 8
0.00.280.403 I llm_load_print_meta: n_head_kv        = 1
0.00.280.404 I llm_load_print_meta: n_rot            = 256
0.00.280.404 I llm_load_print_meta: n_swa            = 0
0.00.280.404 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.404 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.405 I llm_load_print_meta: n_gqa            = 8
0.00.280.407 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.407 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.408 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.409 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.410 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.410 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.411 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.411 I llm_load_print_meta: n_ff             = 16384
0.00.280.412 I llm_load_print_meta: n_expert         = 0
0.00.280.412 I llm_load_print_meta: n_expert_used    = 0
0.00.280.413 I llm_load_print_meta: causal attn      = 1
0.00.280.414 I llm_load_print_meta: pooling type     = 0
0.00.280.414 I llm_load_print_meta: rope type        = 2
0.00.280.415 I llm_load_print_meta: rope scaling     = linear
0.00.280.416 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.418 I llm_load_print_meta: freq_scale_train = 1
0.00.280.418 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.419 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.420 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.420 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.420 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.420 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.421 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.421 I llm_load_print_meta: model type       = 2B
0.00.280.424 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.280.425 I llm_load_print_meta: model params     = 2.51 B
0.00.280.426 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.280.426 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.427 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.427 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.427 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.427 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.428 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.428 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.428 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.429 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.429 I llm_load_print_meta: max token length = 93
0.00.280.450 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.339.221 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.339.227 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.339.227 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.339.228 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.339.228 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.339.229 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.344.204 I llama_new_context_with_model: n_ctx      = 8192
0.00.344.209 I llama_new_context_with_model: n_batch    = 2048
0.00.344.210 I llama_new_context_with_model: n_ubatch   = 512
0.00.344.210 I llama_new_context_with_model: flash_attn = 0
0.00.344.213 I llama_new_context_with_model: freq_base  = 10000.0
0.00.344.213 I llama_new_context_with_model: freq_scale = 1
0.00.372.656 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.372.669 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.372.761 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.373.613 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.373.621 I llama_new_context_with_model: graph nodes  = 601
0.00.373.622 I llama_new_context_with_model: graph splits = 1
0.00.373.624 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.456.164 I main: llama threadpool init, n_threads = 4
0.00.456.178 I 
0.00.456.260 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.456.263 I 
0.00.456.304 I sampler seed: 816914186
0.00.456.316 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.456.324 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.456.327 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.456.328 I 
 increasities of the human papillomavirus (HPV) and their association with cervical neoplasia and HPV-positive women.

**Objective:**

To review and

0.02.059.518 I llama_perf_sampler_print:    sampling time =       4.81 ms /    33 runs   (    0.15 ms per token,  6856.43 tokens per second)
0.02.059.520 I llama_perf_context_print:        load time =     454.25 ms
0.02.059.522 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.059.524 I llama_perf_context_print:        eval time =    1585.00 ms /    32 runs   (   49.53 ms per token,    20.19 tokens per second)
0.02.059.525 I llama_perf_context_print:       total time =    1603.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3939 (8901755b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32116.98 ms
main:    total time = 32116.98 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.543 I build: 3939 (8901755b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.764 I main: llama backend init
0.00.001.925 I main: load the model and apply lora adapter, if any
0.00.022.087 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.100 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.107 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.108 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.112 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.115 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.116 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.117 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.118 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.118 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.123 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.124 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.125 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.126 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.127 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.505 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.126 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.971 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.978 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.979 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.980 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.981 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.982 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.983 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.986 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.987 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.992 I llama_model_loader: - type  f32:   37 tensors
0.00.131.994 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.995 I llama_model_loader: - type q6_K:   19 tensors
0.00.215.522 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.371 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.872 I llm_load_vocab: special tokens cache size = 5
0.00.282.105 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.120 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.120 I llm_load_print_meta: arch             = gemma
0.00.282.121 I llm_load_print_meta: vocab type       = SPM
0.00.282.122 I llm_load_print_meta: n_vocab          = 256000
0.00.282.122 I llm_load_print_meta: n_merges         = 0
0.00.282.122 I llm_load_print_meta: vocab_only       = 0
0.00.282.123 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.123 I llm_load_print_meta: n_embd           = 2048
0.00.282.123 I llm_load_print_meta: n_layer          = 18
0.00.282.134 I llm_load_print_meta: n_head           = 8
0.00.282.135 I llm_load_print_meta: n_head_kv        = 1
0.00.282.136 I llm_load_print_meta: n_rot            = 256
0.00.282.136 I llm_load_print_meta: n_swa            = 0
0.00.282.136 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.136 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.137 I llm_load_print_meta: n_gqa            = 8
0.00.282.138 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.139 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.140 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.141 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.142 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.142 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.142 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.143 I llm_load_print_meta: n_ff             = 16384
0.00.282.143 I llm_load_print_meta: n_expert         = 0
0.00.282.144 I llm_load_print_meta: n_expert_used    = 0
0.00.282.144 I llm_load_print_meta: causal attn      = 1
0.00.282.144 I llm_load_print_meta: pooling type     = 0
0.00.282.144 I llm_load_print_meta: rope type        = 2
0.00.282.145 I llm_load_print_meta: rope scaling     = linear
0.00.282.146 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.147 I llm_load_print_meta: freq_scale_train = 1
0.00.282.147 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.148 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.148 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.148 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.149 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.149 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.149 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.149 I llm_load_print_meta: model type       = 2B
0.00.282.150 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.282.151 I llm_load_print_meta: model params     = 2.51 B
0.00.282.152 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.282.152 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.153 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.153 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.153 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.154 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.154 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.154 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.154 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.155 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.155 I llm_load_print_meta: max token length = 93
0.00.282.175 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.337.803 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.342.800 I llama_new_context_with_model: n_ctx      = 8192
0.00.342.806 I llama_new_context_with_model: n_batch    = 2048
0.00.342.807 I llama_new_context_with_model: n_ubatch   = 512
0.00.342.807 I llama_new_context_with_model: flash_attn = 0
0.00.342.810 I llama_new_context_with_model: freq_base  = 10000.0
0.00.342.811 I llama_new_context_with_model: freq_scale = 1
0.00.371.717 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.371.734 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.371.824 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.372.668 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.372.677 I llama_new_context_with_model: graph nodes  = 601
0.00.372.677 I llama_new_context_with_model: graph splits = 1
0.00.372.679 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.036 I main: llama threadpool init, n_threads = 4
0.00.453.050 I 
0.00.453.136 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.453.140 I 
0.00.453.183 I sampler seed: 1928352564
0.00.453.195 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.204 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.453.205 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.453.205 I 
 squared and wrinkled, etched with the faintest whispers of time.

... This book is an heirloom, a testament to the passage of time, a tapestry

0.01.998.631 I llama_perf_sampler_print:    sampling time =       4.79 ms /    33 runs   (    0.15 ms per token,  6890.79 tokens per second)
0.01.998.633 I llama_perf_context_print:        load time =     451.09 ms
0.01.998.634 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.998.636 I llama_perf_context_print:        eval time =    1528.46 ms /    32 runs   (   47.76 ms per token,    20.94 tokens per second)
0.01.998.636 I llama_perf_context_print:       total time =    1545.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.012s
user	8m14.522s
sys	0m6.865s
