+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.550 I build: 4095 (89e4caaa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.767 I main: llama backend init
0.00.000.775 I main: load the model and apply lora adapter, if any
0.00.021.527 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.535 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.543 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.548 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.549 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.552 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.553 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.554 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.555 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.555 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.556 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.560 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.560 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.561 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.562 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.562 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.573 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.668 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.497 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.503 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.504 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.504 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.505 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.506 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.506 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.509 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.509 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.510 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.510 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.511 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.514 I llama_model_loader: - type  f32:   37 tensors
0.00.131.515 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.957 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.517 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.093 I llm_load_vocab: special tokens cache size = 5
0.00.264.011 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.027 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.027 I llm_load_print_meta: arch             = gemma
0.00.264.028 I llm_load_print_meta: vocab type       = SPM
0.00.264.028 I llm_load_print_meta: n_vocab          = 256000
0.00.264.029 I llm_load_print_meta: n_merges         = 0
0.00.264.029 I llm_load_print_meta: vocab_only       = 0
0.00.264.029 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.029 I llm_load_print_meta: n_embd           = 2048
0.00.264.030 I llm_load_print_meta: n_layer          = 18
0.00.264.041 I llm_load_print_meta: n_head           = 8
0.00.264.042 I llm_load_print_meta: n_head_kv        = 1
0.00.264.042 I llm_load_print_meta: n_rot            = 256
0.00.264.043 I llm_load_print_meta: n_swa            = 0
0.00.264.043 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.043 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.044 I llm_load_print_meta: n_gqa            = 8
0.00.264.045 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.046 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.047 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.049 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.049 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.050 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.050 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.051 I llm_load_print_meta: n_ff             = 16384
0.00.264.051 I llm_load_print_meta: n_expert         = 0
0.00.264.051 I llm_load_print_meta: n_expert_used    = 0
0.00.264.052 I llm_load_print_meta: causal attn      = 1
0.00.264.052 I llm_load_print_meta: pooling type     = 0
0.00.264.052 I llm_load_print_meta: rope type        = 2
0.00.264.053 I llm_load_print_meta: rope scaling     = linear
0.00.264.054 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.055 I llm_load_print_meta: freq_scale_train = 1
0.00.264.055 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.056 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.056 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.056 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.056 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.056 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.057 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.057 I llm_load_print_meta: model type       = 2B
0.00.264.058 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.058 I llm_load_print_meta: model params     = 2.51 B
0.00.264.059 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.060 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.060 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.060 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.061 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.061 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.061 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.062 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.062 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.062 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.063 I llm_load_print_meta: max token length = 93
0.00.365.635 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.365.639 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.365.640 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.365.641 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.365.642 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.365.642 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.371.000 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.006 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.007 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.007 I llama_new_context_with_model: n_batch       = 2048
0.00.371.007 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.008 I llama_new_context_with_model: flash_attn    = 0
0.00.371.010 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.012 I llama_new_context_with_model: freq_scale    = 1
0.00.371.013 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.385.380 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.394 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.485 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.818 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.386.824 I llama_new_context_with_model: graph nodes  = 601
0.00.386.824 I llama_new_context_with_model: graph splits = 1
0.00.386.826 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.307 I main: llama threadpool init, n_threads = 4
0.00.472.322 I 
0.00.472.397 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.472.400 I 
0.00.472.446 I sampler seed: 2923601815
0.00.472.458 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.461 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.472.462 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.472.462 I 
 increasities, a flamboyant man, and a beautiful woman.

What is the story?

The story is about a flamboyant man, a beautiful woman, and

0.02.727.431 I llama_perf_sampler_print:    sampling time =       5.03 ms /    33 runs   (    0.15 ms per token,  6561.94 tokens per second)
0.02.727.434 I llama_perf_context_print:        load time =     471.51 ms
0.02.727.435 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.727.437 I llama_perf_context_print:        eval time =    2236.34 ms /    32 runs   (   69.89 ms per token,    14.31 tokens per second)
0.02.727.438 I llama_perf_context_print:       total time =    2255.13 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.580 I build: 4095 (89e4caaa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.766 I main: llama backend init
0.00.000.773 I main: load the model and apply lora adapter, if any
0.00.020.944 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.957 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.963 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.965 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.969 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.972 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.973 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.973 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.974 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.974 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.979 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.979 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.980 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.980 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.981 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.039 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.287 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.157 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.164 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.165 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.165 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.166 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.167 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.168 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.170 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.171 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.172 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.173 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.174 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.177 I llama_model_loader: - type  f32:   37 tensors
0.00.130.178 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.420 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.688 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.286 I llm_load_vocab: special tokens cache size = 5
0.00.264.102 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.118 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.119 I llm_load_print_meta: arch             = gemma
0.00.264.119 I llm_load_print_meta: vocab type       = SPM
0.00.264.120 I llm_load_print_meta: n_vocab          = 256000
0.00.264.121 I llm_load_print_meta: n_merges         = 0
0.00.264.121 I llm_load_print_meta: vocab_only       = 0
0.00.264.121 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.121 I llm_load_print_meta: n_embd           = 2048
0.00.264.122 I llm_load_print_meta: n_layer          = 18
0.00.264.132 I llm_load_print_meta: n_head           = 8
0.00.264.133 I llm_load_print_meta: n_head_kv        = 1
0.00.264.134 I llm_load_print_meta: n_rot            = 256
0.00.264.134 I llm_load_print_meta: n_swa            = 0
0.00.264.135 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.135 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.136 I llm_load_print_meta: n_gqa            = 8
0.00.264.137 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.138 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.138 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.140 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.140 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.140 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.141 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.141 I llm_load_print_meta: n_ff             = 16384
0.00.264.143 I llm_load_print_meta: n_expert         = 0
0.00.264.143 I llm_load_print_meta: n_expert_used    = 0
0.00.264.143 I llm_load_print_meta: causal attn      = 1
0.00.264.144 I llm_load_print_meta: pooling type     = 0
0.00.264.144 I llm_load_print_meta: rope type        = 2
0.00.264.145 I llm_load_print_meta: rope scaling     = linear
0.00.264.147 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.148 I llm_load_print_meta: freq_scale_train = 1
0.00.264.148 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.148 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.149 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.149 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.152 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.152 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.153 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.153 I llm_load_print_meta: model type       = 2B
0.00.264.154 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.154 I llm_load_print_meta: model params     = 2.51 B
0.00.264.155 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.156 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.156 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.156 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.157 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.157 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.157 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.159 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.159 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.160 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.161 I llm_load_print_meta: max token length = 93
0.00.359.520 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.364.784 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.790 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.791 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.791 I llama_new_context_with_model: n_batch       = 2048
0.00.364.792 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.792 I llama_new_context_with_model: flash_attn    = 0
0.00.364.795 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.795 I llama_new_context_with_model: freq_scale    = 1
0.00.364.796 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.379.620 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.379.635 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.379.726 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.031 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.381.038 I llama_new_context_with_model: graph nodes  = 601
0.00.381.038 I llama_new_context_with_model: graph splits = 1
0.00.381.040 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.462.215 I main: llama threadpool init, n_threads = 4
0.00.462.229 I 
0.00.462.301 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.462.304 I 
0.00.462.346 I sampler seed: 300542234
0.00.462.358 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.361 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.462.361 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.362 I 
 increasels and their offspring.

The word "rescour" means to provide aid, assistance, or support.

**Question:**
What is the relationship

0.02.637.110 I llama_perf_sampler_print:    sampling time =       4.79 ms /    33 runs   (    0.15 ms per token,  6895.11 tokens per second)
0.02.637.113 I llama_perf_context_print:        load time =     461.42 ms
0.02.637.114 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.637.115 I llama_perf_context_print:        eval time =    2155.58 ms /    32 runs   (   67.36 ms per token,    14.85 tokens per second)
0.02.637.116 I llama_perf_context_print:       total time =    2174.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.542 I build: 4095 (89e4caaa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.741 I main: llama backend init
0.00.000.747 I main: load the model and apply lora adapter, if any
0.00.021.059 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.068 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.076 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.085 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.086 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.089 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.090 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.090 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.091 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.091 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.092 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.095 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.096 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.096 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.097 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.097 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.953 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.257 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.180 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.188 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.188 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.189 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.189 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.190 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.191 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.193 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.193 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.194 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.194 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.195 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.199 I llama_model_loader: - type  f32:   37 tensors
0.00.131.200 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.618 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.492 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.156 I llm_load_vocab: special tokens cache size = 5
0.00.280.010 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.027 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.027 I llm_load_print_meta: arch             = gemma
0.00.280.028 I llm_load_print_meta: vocab type       = SPM
0.00.280.028 I llm_load_print_meta: n_vocab          = 256000
0.00.280.028 I llm_load_print_meta: n_merges         = 0
0.00.280.029 I llm_load_print_meta: vocab_only       = 0
0.00.280.029 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.030 I llm_load_print_meta: n_embd           = 2048
0.00.280.030 I llm_load_print_meta: n_layer          = 18
0.00.280.042 I llm_load_print_meta: n_head           = 8
0.00.280.043 I llm_load_print_meta: n_head_kv        = 1
0.00.280.044 I llm_load_print_meta: n_rot            = 256
0.00.280.044 I llm_load_print_meta: n_swa            = 0
0.00.280.044 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.044 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.045 I llm_load_print_meta: n_gqa            = 8
0.00.280.046 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.047 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.048 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.049 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.050 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.050 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.050 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.051 I llm_load_print_meta: n_ff             = 16384
0.00.280.051 I llm_load_print_meta: n_expert         = 0
0.00.280.052 I llm_load_print_meta: n_expert_used    = 0
0.00.280.052 I llm_load_print_meta: causal attn      = 1
0.00.280.052 I llm_load_print_meta: pooling type     = 0
0.00.280.052 I llm_load_print_meta: rope type        = 2
0.00.280.053 I llm_load_print_meta: rope scaling     = linear
0.00.280.055 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.055 I llm_load_print_meta: freq_scale_train = 1
0.00.280.056 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.056 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.056 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.056 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.056 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.057 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.057 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.057 I llm_load_print_meta: model type       = 2B
0.00.280.058 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.059 I llm_load_print_meta: model params     = 2.51 B
0.00.280.060 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.060 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.061 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.061 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.061 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.062 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.062 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.062 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.062 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.063 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.063 I llm_load_print_meta: max token length = 93
0.00.357.858 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.357.865 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.357.866 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.357.867 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.357.867 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.357.868 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.363.020 I llama_new_context_with_model: n_seq_max     = 1
0.00.363.026 I llama_new_context_with_model: n_ctx         = 4096
0.00.363.026 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.363.026 I llama_new_context_with_model: n_batch       = 2048
0.00.363.027 I llama_new_context_with_model: n_ubatch      = 512
0.00.363.027 I llama_new_context_with_model: flash_attn    = 0
0.00.363.029 I llama_new_context_with_model: freq_base     = 10000.0
0.00.363.030 I llama_new_context_with_model: freq_scale    = 1
0.00.363.031 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.377.337 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.377.350 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.377.442 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.378.668 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.378.674 I llama_new_context_with_model: graph nodes  = 601
0.00.378.675 I llama_new_context_with_model: graph splits = 1
0.00.378.677 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.465.781 I main: llama threadpool init, n_threads = 4
0.00.465.796 I 
0.00.465.871 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.465.874 I 
0.00.465.917 I sampler seed: 978498591
0.00.465.927 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.465.935 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.465.937 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.465.937 I 
 increasities.

I'm so sorry, but I cannot generate sexually suggestive or inappropriate responses. My purpose is to assist with tasks and questions within the boundaries

0.02.687.278 I llama_perf_sampler_print:    sampling time =       4.64 ms /    33 runs   (    0.14 ms per token,  7116.67 tokens per second)
0.02.687.281 I llama_perf_context_print:        load time =     465.01 ms
0.02.687.282 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.687.284 I llama_perf_context_print:        eval time =    2203.01 ms /    32 runs   (   68.84 ms per token,    14.53 tokens per second)
0.02.687.284 I llama_perf_context_print:       total time =    2221.51 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.529 I build: 4095 (89e4caaa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.746 I main: llama backend init
0.00.000.754 I main: load the model and apply lora adapter, if any
0.00.021.620 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.628 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.636 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.641 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.645 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.654 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.655 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.656 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.657 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.658 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.659 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.664 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.666 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.667 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.668 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.669 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.139 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.446 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.135.856 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.135.864 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.135.865 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.135.866 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.135.867 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.135.868 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.135.869 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.135.873 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.135.874 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.135.875 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.135.876 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.135.877 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.135.882 I llama_model_loader: - type  f32:   37 tensors
0.00.135.883 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.765 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.842 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.429 I llm_load_vocab: special tokens cache size = 5
0.00.275.497 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.517 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.517 I llm_load_print_meta: arch             = gemma
0.00.275.518 I llm_load_print_meta: vocab type       = SPM
0.00.275.519 I llm_load_print_meta: n_vocab          = 256000
0.00.275.519 I llm_load_print_meta: n_merges         = 0
0.00.275.520 I llm_load_print_meta: vocab_only       = 0
0.00.275.520 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.520 I llm_load_print_meta: n_embd           = 2048
0.00.275.521 I llm_load_print_meta: n_layer          = 18
0.00.275.533 I llm_load_print_meta: n_head           = 8
0.00.275.534 I llm_load_print_meta: n_head_kv        = 1
0.00.275.534 I llm_load_print_meta: n_rot            = 256
0.00.275.534 I llm_load_print_meta: n_swa            = 0
0.00.275.535 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.535 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.536 I llm_load_print_meta: n_gqa            = 8
0.00.275.537 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.538 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.539 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.540 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.540 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.541 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.541 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.542 I llm_load_print_meta: n_ff             = 16384
0.00.275.542 I llm_load_print_meta: n_expert         = 0
0.00.275.543 I llm_load_print_meta: n_expert_used    = 0
0.00.275.543 I llm_load_print_meta: causal attn      = 1
0.00.275.544 I llm_load_print_meta: pooling type     = 0
0.00.275.546 I llm_load_print_meta: rope type        = 2
0.00.275.546 I llm_load_print_meta: rope scaling     = linear
0.00.275.548 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.549 I llm_load_print_meta: freq_scale_train = 1
0.00.275.549 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.549 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.550 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.551 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.551 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.552 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.552 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.553 I llm_load_print_meta: model type       = 2B
0.00.275.553 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.554 I llm_load_print_meta: model params     = 2.51 B
0.00.275.555 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.555 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.556 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.557 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.557 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.558 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.559 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.559 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.560 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.561 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.561 I llm_load_print_meta: max token length = 93
0.00.347.263 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.347.271 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.352.380 I llama_new_context_with_model: n_seq_max     = 1
0.00.352.386 I llama_new_context_with_model: n_ctx         = 4096
0.00.352.386 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.352.386 I llama_new_context_with_model: n_batch       = 2048
0.00.352.387 I llama_new_context_with_model: n_ubatch      = 512
0.00.352.387 I llama_new_context_with_model: flash_attn    = 0
0.00.352.389 I llama_new_context_with_model: freq_base     = 10000.0
0.00.352.390 I llama_new_context_with_model: freq_scale    = 1
0.00.352.391 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.366.681 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.366.694 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.366.786 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.368.036 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.368.042 I llama_new_context_with_model: graph nodes  = 601
0.00.368.043 I llama_new_context_with_model: graph splits = 1
0.00.368.044 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.454.849 I main: llama threadpool init, n_threads = 4
0.00.454.862 I 
0.00.454.940 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.454.943 I 
0.00.454.985 I sampler seed: 304390300
0.00.454.995 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.455.002 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.455.004 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.455.004 I 
 increasities with a strong, consistent rhythm and catchy melodies.

**Characteristics:**

* **Strong, consistent rhythm:** The music has a driving, infectious rhythm

0.02.887.895 I llama_perf_sampler_print:    sampling time =       5.20 ms /    33 runs   (    0.16 ms per token,  6341.28 tokens per second)
0.02.887.898 I llama_perf_context_print:        load time =     454.08 ms
0.02.887.899 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.887.901 I llama_perf_context_print:        eval time =    2413.63 ms /    32 runs   (   75.43 ms per token,    13.26 tokens per second)
0.02.887.902 I llama_perf_context_print:       total time =    2433.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.329s
user	0m39.207s
sys	0m9.268s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4095 (89e4caaa)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40170.87 ms
main:    total time = 40170.87 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.558 I build: 4095 (89e4caaa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.761 I main: llama backend init
0.00.000.768 I main: load the model and apply lora adapter, if any
0.00.021.175 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.185 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.193 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.198 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.199 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.204 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.205 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.206 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.207 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.208 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.208 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.212 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.212 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.213 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.214 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.214 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.438 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.242 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.093 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.100 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.100 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.101 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.101 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.102 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.103 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.105 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.106 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.116 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.116 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.117 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.121 I llama_model_loader: - type  f32:   37 tensors
0.00.131.122 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.123 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.667 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.602 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.112 I llm_load_vocab: special tokens cache size = 5
0.00.265.943 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.958 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.959 I llm_load_print_meta: arch             = gemma
0.00.265.959 I llm_load_print_meta: vocab type       = SPM
0.00.265.959 I llm_load_print_meta: n_vocab          = 256000
0.00.265.960 I llm_load_print_meta: n_merges         = 0
0.00.265.960 I llm_load_print_meta: vocab_only       = 0
0.00.265.960 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.961 I llm_load_print_meta: n_embd           = 2048
0.00.265.961 I llm_load_print_meta: n_layer          = 18
0.00.265.973 I llm_load_print_meta: n_head           = 8
0.00.265.974 I llm_load_print_meta: n_head_kv        = 1
0.00.265.974 I llm_load_print_meta: n_rot            = 256
0.00.265.975 I llm_load_print_meta: n_swa            = 0
0.00.265.975 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.975 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.976 I llm_load_print_meta: n_gqa            = 8
0.00.265.977 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.978 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.979 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.980 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.981 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.981 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.981 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.982 I llm_load_print_meta: n_ff             = 16384
0.00.265.983 I llm_load_print_meta: n_expert         = 0
0.00.265.983 I llm_load_print_meta: n_expert_used    = 0
0.00.265.983 I llm_load_print_meta: causal attn      = 1
0.00.265.984 I llm_load_print_meta: pooling type     = 0
0.00.265.984 I llm_load_print_meta: rope type        = 2
0.00.265.984 I llm_load_print_meta: rope scaling     = linear
0.00.265.985 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.986 I llm_load_print_meta: freq_scale_train = 1
0.00.265.986 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.987 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.987 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.987 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.987 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.988 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.988 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.989 I llm_load_print_meta: model type       = 2B
0.00.265.990 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.990 I llm_load_print_meta: model params     = 2.51 B
0.00.265.991 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.991 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.992 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.992 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.992 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.993 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.993 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.993 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.994 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.994 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.994 I llm_load_print_meta: max token length = 93
0.00.327.223 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.327.228 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.327.228 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.327.229 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.327.230 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.327.230 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.332.328 I llama_new_context_with_model: n_seq_max     = 1
0.00.332.334 I llama_new_context_with_model: n_ctx         = 4096
0.00.332.334 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.332.335 I llama_new_context_with_model: n_batch       = 2048
0.00.332.335 I llama_new_context_with_model: n_ubatch      = 512
0.00.332.335 I llama_new_context_with_model: flash_attn    = 0
0.00.332.338 I llama_new_context_with_model: freq_base     = 10000.0
0.00.332.338 I llama_new_context_with_model: freq_scale    = 1
0.00.332.339 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.346.609 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.346.621 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.346.707 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.348.058 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.348.064 I llama_new_context_with_model: graph nodes  = 601
0.00.348.065 I llama_new_context_with_model: graph splits = 1
0.00.348.066 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.424.114 I main: llama threadpool init, n_threads = 4
0.00.424.129 I 
0.00.424.207 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.424.211 I 
0.00.424.257 I sampler seed: 448685064
0.00.424.270 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.424.279 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.424.280 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.424.280 I 
 increasities. [end of text]


0.00.628.163 I llama_perf_sampler_print:    sampling time =       0.65 ms /     5 runs   (    0.13 ms per token,  7656.97 tokens per second)
0.00.628.165 I llama_perf_context_print:        load time =     423.33 ms
0.00.628.166 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.628.167 I llama_perf_context_print:        eval time =     200.86 ms /     4 runs   (   50.22 ms per token,    19.91 tokens per second)
0.00.628.168 I llama_perf_context_print:       total time =     204.06 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4095 (89e4caaa)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40148.43 ms
main:    total time = 40148.43 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.553 I build: 4095 (89e4caaa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.760 I main: llama backend init
0.00.000.767 I main: load the model and apply lora adapter, if any
0.00.021.366 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.382 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.392 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.396 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.401 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.402 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.403 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.404 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.404 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.405 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.410 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.410 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.411 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.411 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.412 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.580 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.497 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.313 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.319 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.319 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.320 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.321 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.322 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.323 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.326 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.327 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.331 I llama_model_loader: - type  f32:   37 tensors
0.00.130.332 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.333 I llama_model_loader: - type q6_K:   19 tensors
0.00.198.718 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.412 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.238.939 I llm_load_vocab: special tokens cache size = 5
0.00.259.732 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.259.748 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.259.748 I llm_load_print_meta: arch             = gemma
0.00.259.749 I llm_load_print_meta: vocab type       = SPM
0.00.259.749 I llm_load_print_meta: n_vocab          = 256000
0.00.259.750 I llm_load_print_meta: n_merges         = 0
0.00.259.750 I llm_load_print_meta: vocab_only       = 0
0.00.259.750 I llm_load_print_meta: n_ctx_train      = 8192
0.00.259.751 I llm_load_print_meta: n_embd           = 2048
0.00.259.751 I llm_load_print_meta: n_layer          = 18
0.00.259.762 I llm_load_print_meta: n_head           = 8
0.00.259.763 I llm_load_print_meta: n_head_kv        = 1
0.00.259.764 I llm_load_print_meta: n_rot            = 256
0.00.259.764 I llm_load_print_meta: n_swa            = 0
0.00.259.764 I llm_load_print_meta: n_embd_head_k    = 256
0.00.259.765 I llm_load_print_meta: n_embd_head_v    = 256
0.00.259.766 I llm_load_print_meta: n_gqa            = 8
0.00.259.767 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.259.768 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.259.769 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.259.770 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.259.770 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.259.771 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.259.771 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.259.772 I llm_load_print_meta: n_ff             = 16384
0.00.259.772 I llm_load_print_meta: n_expert         = 0
0.00.259.772 I llm_load_print_meta: n_expert_used    = 0
0.00.259.773 I llm_load_print_meta: causal attn      = 1
0.00.259.773 I llm_load_print_meta: pooling type     = 0
0.00.259.773 I llm_load_print_meta: rope type        = 2
0.00.259.774 I llm_load_print_meta: rope scaling     = linear
0.00.259.775 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.259.776 I llm_load_print_meta: freq_scale_train = 1
0.00.259.776 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.259.777 I llm_load_print_meta: rope_finetuned   = unknown
0.00.259.777 I llm_load_print_meta: ssm_d_conv       = 0
0.00.259.777 I llm_load_print_meta: ssm_d_inner      = 0
0.00.259.777 I llm_load_print_meta: ssm_d_state      = 0
0.00.259.778 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.259.778 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.259.778 I llm_load_print_meta: model type       = 2B
0.00.259.779 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.259.780 I llm_load_print_meta: model params     = 2.51 B
0.00.259.780 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.259.781 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.259.781 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.259.782 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.259.782 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.259.783 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.259.783 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.259.784 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.259.784 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.259.784 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.259.785 I llm_load_print_meta: max token length = 93
0.00.318.332 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.323.382 I llama_new_context_with_model: n_seq_max     = 1
0.00.323.388 I llama_new_context_with_model: n_ctx         = 4096
0.00.323.388 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.323.389 I llama_new_context_with_model: n_batch       = 2048
0.00.323.389 I llama_new_context_with_model: n_ubatch      = 512
0.00.323.390 I llama_new_context_with_model: flash_attn    = 0
0.00.323.392 I llama_new_context_with_model: freq_base     = 10000.0
0.00.323.392 I llama_new_context_with_model: freq_scale    = 1
0.00.323.393 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.338.695 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.338.709 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.338.808 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.340.060 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.340.066 I llama_new_context_with_model: graph nodes  = 601
0.00.340.067 I llama_new_context_with_model: graph splits = 1
0.00.340.068 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.414.674 I main: llama threadpool init, n_threads = 4
0.00.414.687 I 
0.00.414.764 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.414.767 I 
0.00.414.809 I sampler seed: 1556327912
0.00.414.820 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.414.823 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.414.823 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.414.824 I 
 maneutables in the following paragraph:

"The dog chased the ball and the ball chased the dog back."

The answer is circular.

The answer is

0.01.975.502 I llama_perf_sampler_print:    sampling time =       4.94 ms /    33 runs   (    0.15 ms per token,  6677.46 tokens per second)
0.01.975.505 I llama_perf_context_print:        load time =     413.89 ms
0.01.975.507 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.975.508 I llama_perf_context_print:        eval time =    1541.75 ms /    32 runs   (   48.18 ms per token,    20.76 tokens per second)
0.01.975.509 I llama_perf_context_print:       total time =    1560.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m25.794s
user	10m18.286s
sys	0m6.872s
