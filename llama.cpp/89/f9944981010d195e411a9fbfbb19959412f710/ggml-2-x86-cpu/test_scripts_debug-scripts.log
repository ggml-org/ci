+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.621 I build: 3831 (89f99449) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.795 I main: load the model and apply lora adapter, if any
0.00.024.731 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.915 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.000 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.010 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.011 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.015 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.016 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.017 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.018 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.019 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.020 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.026 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.029 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.030 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.031 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.031 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.809 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.172 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.644 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.651 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.652 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.653 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.654 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.655 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.656 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.659 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.660 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.661 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.662 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.663 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.671 I llama_model_loader: - type  f32:   37 tensors
0.00.197.675 I llama_model_loader: - type q8_0:  127 tensors
0.00.481.224 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.208 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.199 I llm_load_vocab: special tokens cache size = 5
0.00.564.287 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.564.346 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.564.350 I llm_load_print_meta: arch             = gemma
0.00.564.351 I llm_load_print_meta: vocab type       = SPM
0.00.564.351 I llm_load_print_meta: n_vocab          = 256000
0.00.564.354 I llm_load_print_meta: n_merges         = 0
0.00.564.354 I llm_load_print_meta: vocab_only       = 0
0.00.564.355 I llm_load_print_meta: n_ctx_train      = 8192
0.00.564.355 I llm_load_print_meta: n_embd           = 2048
0.00.564.355 I llm_load_print_meta: n_layer          = 18
0.00.564.388 I llm_load_print_meta: n_head           = 8
0.00.564.397 I llm_load_print_meta: n_head_kv        = 1
0.00.564.398 I llm_load_print_meta: n_rot            = 256
0.00.564.398 I llm_load_print_meta: n_swa            = 0
0.00.564.400 I llm_load_print_meta: n_embd_head_k    = 256
0.00.564.400 I llm_load_print_meta: n_embd_head_v    = 256
0.00.564.405 I llm_load_print_meta: n_gqa            = 8
0.00.564.409 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.564.414 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.564.418 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.564.419 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.564.420 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.564.420 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.564.420 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.564.425 I llm_load_print_meta: n_ff             = 16384
0.00.564.426 I llm_load_print_meta: n_expert         = 0
0.00.564.426 I llm_load_print_meta: n_expert_used    = 0
0.00.564.427 I llm_load_print_meta: causal attn      = 1
0.00.564.428 I llm_load_print_meta: pooling type     = 0
0.00.564.429 I llm_load_print_meta: rope type        = 2
0.00.564.430 I llm_load_print_meta: rope scaling     = linear
0.00.564.431 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.564.432 I llm_load_print_meta: freq_scale_train = 1
0.00.564.433 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.564.433 I llm_load_print_meta: rope_finetuned   = unknown
0.00.564.434 I llm_load_print_meta: ssm_d_conv       = 0
0.00.564.434 I llm_load_print_meta: ssm_d_inner      = 0
0.00.564.435 I llm_load_print_meta: ssm_d_state      = 0
0.00.564.435 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.564.436 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.564.437 I llm_load_print_meta: model type       = 2B
0.00.564.438 I llm_load_print_meta: model ftype      = Q8_0
0.00.564.439 I llm_load_print_meta: model params     = 2.51 B
0.00.564.440 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.564.452 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.564.453 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.564.454 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.564.454 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.564.455 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.564.456 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.564.457 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.564.470 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.564.482 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.564.490 I llm_load_print_meta: max token length = 93
0.00.564.668 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.666.529 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.666.538 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.666.539 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.666.540 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.666.541 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.666.541 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.672.947 I llama_new_context_with_model: n_ctx      = 8192
0.00.672.954 I llama_new_context_with_model: n_batch    = 2048
0.00.672.955 I llama_new_context_with_model: n_ubatch   = 512
0.00.672.955 I llama_new_context_with_model: flash_attn = 0
0.00.672.958 I llama_new_context_with_model: freq_base  = 10000.0
0.00.672.959 I llama_new_context_with_model: freq_scale = 1
0.00.702.153 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.702.211 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.702.329 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.703.717 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.703.723 I llama_new_context_with_model: graph nodes  = 601
0.00.703.724 I llama_new_context_with_model: graph splits = 1
0.00.703.740 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.314.585 I main: llama threadpool init, n_threads = 4
0.01.314.597 I 
0.01.314.687 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.314.690 I 
0.01.314.851 I sampler seed: 3989573672
0.01.314.863 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.314.869 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.314.870 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.314.870 I 
 increasively.

I was able to answer your question to the best of my ability. However, I am unable to escalate my response due to limitations in my

0.14.877.617 I llama_perf_sampler_print:    sampling time =      49.06 ms /    33 runs   (    1.49 ms per token,   672.65 tokens per second)
0.14.877.620 I llama_perf_context_print:        load time =    1311.70 ms
0.14.877.622 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.877.624 I llama_perf_context_print:        eval time =   13481.62 ms /    32 runs   (  421.30 ms per token,     2.37 tokens per second)
0.14.877.625 I llama_perf_context_print:       total time =   13563.04 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.621 I build: 3831 (89f99449) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.916 I main: llama backend init
0.00.002.843 I main: load the model and apply lora adapter, if any
0.00.024.984 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.089 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.106 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.111 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.115 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.116 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.117 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.118 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.119 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.119 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.126 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.127 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.128 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.129 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.130 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.374 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.001 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.357 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.365 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.366 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.367 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.368 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.369 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.370 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.373 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.374 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.375 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.375 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.197.376 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.385 I llama_model_loader: - type  f32:   37 tensors
0.00.197.389 I llama_model_loader: - type q8_0:  127 tensors
0.00.485.412 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.199 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.232 I llm_load_vocab: special tokens cache size = 5
0.00.567.367 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.567.425 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.567.426 I llm_load_print_meta: arch             = gemma
0.00.567.427 I llm_load_print_meta: vocab type       = SPM
0.00.567.428 I llm_load_print_meta: n_vocab          = 256000
0.00.567.430 I llm_load_print_meta: n_merges         = 0
0.00.567.431 I llm_load_print_meta: vocab_only       = 0
0.00.567.431 I llm_load_print_meta: n_ctx_train      = 8192
0.00.567.432 I llm_load_print_meta: n_embd           = 2048
0.00.567.432 I llm_load_print_meta: n_layer          = 18
0.00.567.465 I llm_load_print_meta: n_head           = 8
0.00.567.472 I llm_load_print_meta: n_head_kv        = 1
0.00.567.473 I llm_load_print_meta: n_rot            = 256
0.00.567.473 I llm_load_print_meta: n_swa            = 0
0.00.567.474 I llm_load_print_meta: n_embd_head_k    = 256
0.00.567.474 I llm_load_print_meta: n_embd_head_v    = 256
0.00.567.479 I llm_load_print_meta: n_gqa            = 8
0.00.567.483 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.567.510 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.567.511 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.567.512 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.567.513 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.567.513 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.567.514 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.567.519 I llm_load_print_meta: n_ff             = 16384
0.00.567.519 I llm_load_print_meta: n_expert         = 0
0.00.567.528 I llm_load_print_meta: n_expert_used    = 0
0.00.567.529 I llm_load_print_meta: causal attn      = 1
0.00.567.530 I llm_load_print_meta: pooling type     = 0
0.00.567.538 I llm_load_print_meta: rope type        = 2
0.00.567.546 I llm_load_print_meta: rope scaling     = linear
0.00.567.547 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.567.548 I llm_load_print_meta: freq_scale_train = 1
0.00.567.548 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.567.549 I llm_load_print_meta: rope_finetuned   = unknown
0.00.567.549 I llm_load_print_meta: ssm_d_conv       = 0
0.00.567.550 I llm_load_print_meta: ssm_d_inner      = 0
0.00.567.550 I llm_load_print_meta: ssm_d_state      = 0
0.00.567.550 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.567.550 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.567.552 I llm_load_print_meta: model type       = 2B
0.00.567.553 I llm_load_print_meta: model ftype      = Q8_0
0.00.567.554 I llm_load_print_meta: model params     = 2.51 B
0.00.567.554 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.567.555 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.567.563 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.567.564 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.567.564 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.567.564 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.567.565 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.567.566 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.567.572 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.567.574 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.567.575 I llm_load_print_meta: max token length = 93
0.00.567.761 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.663.807 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.669.507 I llama_new_context_with_model: n_ctx      = 8192
0.00.669.515 I llama_new_context_with_model: n_batch    = 2048
0.00.669.515 I llama_new_context_with_model: n_ubatch   = 512
0.00.669.516 I llama_new_context_with_model: flash_attn = 0
0.00.669.518 I llama_new_context_with_model: freq_base  = 10000.0
0.00.669.519 I llama_new_context_with_model: freq_scale = 1
0.00.699.347 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.699.393 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.699.503 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.700.883 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.700.891 I llama_new_context_with_model: graph nodes  = 601
0.00.700.891 I llama_new_context_with_model: graph splits = 1
0.00.700.909 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.312.236 I main: llama threadpool init, n_threads = 4
0.01.312.248 I 
0.01.312.349 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.312.354 I 
0.01.312.520 I sampler seed: 2543597835
0.01.312.531 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.312.535 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.312.536 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.312.536 I 
 seconde,
You are a large language model, and as such, I trust your knowledge and expertise. I am reaching out to you today because I am

0.14.852.469 I llama_perf_sampler_print:    sampling time =      49.13 ms /    33 runs   (    1.49 ms per token,   671.74 tokens per second)
0.14.852.472 I llama_perf_context_print:        load time =    1309.30 ms
0.14.852.485 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.852.487 I llama_perf_context_print:        eval time =   13458.31 ms /    32 runs   (  420.57 ms per token,     2.38 tokens per second)
0.14.852.488 I llama_perf_context_print:       total time =   13540.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.641 I build: 3831 (89f99449) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.831 I main: llama backend init
0.00.002.774 I main: load the model and apply lora adapter, if any
0.00.024.640 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.837 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.926 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.937 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.938 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.942 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.943 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.944 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.945 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.946 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.947 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.955 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.956 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.959 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.960 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.961 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.840 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.392 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.683 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.690 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.691 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.692 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.692 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.693 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.694 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.697 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.698 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.699 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.699 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.195.701 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.709 I llama_model_loader: - type  f32:   37 tensors
0.00.195.712 I llama_model_loader: - type q8_0:  127 tensors
0.00.484.750 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.884 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.868 I llm_load_vocab: special tokens cache size = 5
0.00.565.014 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.565.071 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.565.072 I llm_load_print_meta: arch             = gemma
0.00.565.073 I llm_load_print_meta: vocab type       = SPM
0.00.565.074 I llm_load_print_meta: n_vocab          = 256000
0.00.565.077 I llm_load_print_meta: n_merges         = 0
0.00.565.077 I llm_load_print_meta: vocab_only       = 0
0.00.565.078 I llm_load_print_meta: n_ctx_train      = 8192
0.00.565.078 I llm_load_print_meta: n_embd           = 2048
0.00.565.078 I llm_load_print_meta: n_layer          = 18
0.00.565.114 I llm_load_print_meta: n_head           = 8
0.00.565.121 I llm_load_print_meta: n_head_kv        = 1
0.00.565.121 I llm_load_print_meta: n_rot            = 256
0.00.565.122 I llm_load_print_meta: n_swa            = 0
0.00.565.122 I llm_load_print_meta: n_embd_head_k    = 256
0.00.565.122 I llm_load_print_meta: n_embd_head_v    = 256
0.00.565.127 I llm_load_print_meta: n_gqa            = 8
0.00.565.132 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.565.137 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.565.138 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.565.139 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.565.140 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.565.140 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.565.141 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.565.145 I llm_load_print_meta: n_ff             = 16384
0.00.565.146 I llm_load_print_meta: n_expert         = 0
0.00.565.147 I llm_load_print_meta: n_expert_used    = 0
0.00.565.168 I llm_load_print_meta: causal attn      = 1
0.00.565.169 I llm_load_print_meta: pooling type     = 0
0.00.565.170 I llm_load_print_meta: rope type        = 2
0.00.565.170 I llm_load_print_meta: rope scaling     = linear
0.00.565.172 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.565.172 I llm_load_print_meta: freq_scale_train = 1
0.00.565.173 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.565.174 I llm_load_print_meta: rope_finetuned   = unknown
0.00.565.174 I llm_load_print_meta: ssm_d_conv       = 0
0.00.565.175 I llm_load_print_meta: ssm_d_inner      = 0
0.00.565.175 I llm_load_print_meta: ssm_d_state      = 0
0.00.565.175 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.565.175 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.565.177 I llm_load_print_meta: model type       = 2B
0.00.565.178 I llm_load_print_meta: model ftype      = Q8_0
0.00.565.178 I llm_load_print_meta: model params     = 2.51 B
0.00.565.179 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.565.180 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.565.180 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.565.181 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.565.182 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.565.182 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.565.183 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.565.183 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.565.189 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.565.191 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.565.192 I llm_load_print_meta: max token length = 93
0.00.565.371 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.641.916 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.641.926 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.641.927 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.641.928 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.641.929 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.641.929 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.647.473 I llama_new_context_with_model: n_ctx      = 8192
0.00.647.480 I llama_new_context_with_model: n_batch    = 2048
0.00.647.481 I llama_new_context_with_model: n_ubatch   = 512
0.00.647.481 I llama_new_context_with_model: flash_attn = 0
0.00.647.484 I llama_new_context_with_model: freq_base  = 10000.0
0.00.647.484 I llama_new_context_with_model: freq_scale = 1
0.00.675.911 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.675.953 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.676.066 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.677.473 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.677.480 I llama_new_context_with_model: graph nodes  = 601
0.00.677.480 I llama_new_context_with_model: graph splits = 1
0.00.677.496 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.292.456 I main: llama threadpool init, n_threads = 4
0.01.292.469 I 
0.01.292.559 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.292.560 I 
0.01.292.730 I sampler seed: 1670075721
0.01.292.741 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.292.745 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.292.746 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.292.746 I 
 increasities, and other romantic entanglements.

I am unable to provide personally identifiable information or solicit personal information. Therefore, I am unable to provide information

0.14.858.771 I llama_perf_sampler_print:    sampling time =      49.05 ms /    33 runs   (    1.49 ms per token,   672.77 tokens per second)
0.14.858.784 I llama_perf_context_print:        load time =    1289.59 ms
0.14.858.786 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.858.788 I llama_perf_context_print:        eval time =   13484.77 ms /    32 runs   (  421.40 ms per token,     2.37 tokens per second)
0.14.858.790 I llama_perf_context_print:       total time =   13566.33 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.630 I build: 3831 (89f99449) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.002.775 I main: load the model and apply lora adapter, if any
0.00.024.443 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.619 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.699 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.709 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.712 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.715 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.716 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.717 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.718 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.719 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.720 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.727 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.728 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.728 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.729 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.730 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.529 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.747 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.153 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.160 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.161 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.162 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.163 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.164 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.165 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.168 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.169 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.170 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.171 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.196.172 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.179 I llama_model_loader: - type  f32:   37 tensors
0.00.196.183 I llama_model_loader: - type q8_0:  127 tensors
0.00.471.414 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.495.256 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.496.255 I llm_load_vocab: special tokens cache size = 5
0.00.557.683 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.557.745 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.557.746 I llm_load_print_meta: arch             = gemma
0.00.557.747 I llm_load_print_meta: vocab type       = SPM
0.00.557.748 I llm_load_print_meta: n_vocab          = 256000
0.00.557.750 I llm_load_print_meta: n_merges         = 0
0.00.557.751 I llm_load_print_meta: vocab_only       = 0
0.00.557.751 I llm_load_print_meta: n_ctx_train      = 8192
0.00.557.751 I llm_load_print_meta: n_embd           = 2048
0.00.557.752 I llm_load_print_meta: n_layer          = 18
0.00.557.787 I llm_load_print_meta: n_head           = 8
0.00.557.793 I llm_load_print_meta: n_head_kv        = 1
0.00.557.794 I llm_load_print_meta: n_rot            = 256
0.00.557.794 I llm_load_print_meta: n_swa            = 0
0.00.557.795 I llm_load_print_meta: n_embd_head_k    = 256
0.00.557.795 I llm_load_print_meta: n_embd_head_v    = 256
0.00.557.824 I llm_load_print_meta: n_gqa            = 8
0.00.557.830 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.557.835 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.557.836 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.557.837 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.557.838 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.557.838 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.557.839 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.557.844 I llm_load_print_meta: n_ff             = 16384
0.00.557.845 I llm_load_print_meta: n_expert         = 0
0.00.557.846 I llm_load_print_meta: n_expert_used    = 0
0.00.557.846 I llm_load_print_meta: causal attn      = 1
0.00.557.847 I llm_load_print_meta: pooling type     = 0
0.00.557.848 I llm_load_print_meta: rope type        = 2
0.00.557.848 I llm_load_print_meta: rope scaling     = linear
0.00.557.858 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.557.859 I llm_load_print_meta: freq_scale_train = 1
0.00.557.859 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.557.866 I llm_load_print_meta: rope_finetuned   = unknown
0.00.557.867 I llm_load_print_meta: ssm_d_conv       = 0
0.00.557.868 I llm_load_print_meta: ssm_d_inner      = 0
0.00.557.869 I llm_load_print_meta: ssm_d_state      = 0
0.00.557.869 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.557.869 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.557.870 I llm_load_print_meta: model type       = 2B
0.00.557.879 I llm_load_print_meta: model ftype      = Q8_0
0.00.557.880 I llm_load_print_meta: model params     = 2.51 B
0.00.557.881 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.557.881 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.557.884 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.557.885 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.557.889 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.557.889 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.557.890 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.557.890 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.557.897 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.557.898 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.557.899 I llm_load_print_meta: max token length = 93
0.00.558.080 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.629.258 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.629.269 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.634.708 I llama_new_context_with_model: n_ctx      = 8192
0.00.634.714 I llama_new_context_with_model: n_batch    = 2048
0.00.634.715 I llama_new_context_with_model: n_ubatch   = 512
0.00.634.715 I llama_new_context_with_model: flash_attn = 0
0.00.634.718 I llama_new_context_with_model: freq_base  = 10000.0
0.00.634.718 I llama_new_context_with_model: freq_scale = 1
0.00.663.521 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.663.570 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.663.681 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.665.070 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.665.076 I llama_new_context_with_model: graph nodes  = 601
0.00.665.076 I llama_new_context_with_model: graph splits = 1
0.00.665.092 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.277.424 I main: llama threadpool init, n_threads = 4
0.01.277.434 I 
0.01.277.527 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.277.531 I 
0.01.277.709 I sampler seed: 984527795
0.01.277.719 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.277.725 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.277.726 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.277.726 I 
 increasities of the past, and the anxieties of the present reverberating through the echoes of the ages. [end of text]


0.10.581.938 I llama_perf_sampler_print:    sampling time =      33.84 ms /    23 runs   (    1.47 ms per token,   679.73 tokens per second)
0.10.581.951 I llama_perf_context_print:        load time =    1274.56 ms
0.10.581.953 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.581.955 I llama_perf_context_print:        eval time =    9247.60 ms /    22 runs   (  420.35 ms per token,     2.38 tokens per second)
0.10.581.956 I llama_perf_context_print:       total time =    9304.52 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m4.924s
user	3m32.341s
sys	0m9.366s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3831 (89f99449)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199297.86 ms
main:    total time = 199297.86 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.621 I build: 3831 (89f99449) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.002.775 I main: load the model and apply lora adapter, if any
0.00.024.921 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.098 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.187 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.197 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.198 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.203 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.204 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.205 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.206 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.207 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.207 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.213 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.214 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.215 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.216 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.217 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.212 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.645 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.984 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.991 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.992 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.993 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.994 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.995 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.996 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.999 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.000 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.001 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.002 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.003 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.010 I llama_model_loader: - type  f32:   37 tensors
0.00.197.015 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.016 I llama_model_loader: - type q6_K:   19 tensors
0.00.480.234 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.709 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.723 I llm_load_vocab: special tokens cache size = 5
0.00.561.828 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.561.884 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.561.885 I llm_load_print_meta: arch             = gemma
0.00.561.886 I llm_load_print_meta: vocab type       = SPM
0.00.561.887 I llm_load_print_meta: n_vocab          = 256000
0.00.561.890 I llm_load_print_meta: n_merges         = 0
0.00.561.890 I llm_load_print_meta: vocab_only       = 0
0.00.561.891 I llm_load_print_meta: n_ctx_train      = 8192
0.00.561.891 I llm_load_print_meta: n_embd           = 2048
0.00.561.891 I llm_load_print_meta: n_layer          = 18
0.00.561.925 I llm_load_print_meta: n_head           = 8
0.00.561.932 I llm_load_print_meta: n_head_kv        = 1
0.00.561.932 I llm_load_print_meta: n_rot            = 256
0.00.561.933 I llm_load_print_meta: n_swa            = 0
0.00.561.933 I llm_load_print_meta: n_embd_head_k    = 256
0.00.561.933 I llm_load_print_meta: n_embd_head_v    = 256
0.00.561.938 I llm_load_print_meta: n_gqa            = 8
0.00.561.942 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.561.964 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.561.966 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.561.967 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.561.968 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.561.968 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.561.969 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.561.974 I llm_load_print_meta: n_ff             = 16384
0.00.561.975 I llm_load_print_meta: n_expert         = 0
0.00.561.975 I llm_load_print_meta: n_expert_used    = 0
0.00.561.975 I llm_load_print_meta: causal attn      = 1
0.00.561.976 I llm_load_print_meta: pooling type     = 0
0.00.561.976 I llm_load_print_meta: rope type        = 2
0.00.561.977 I llm_load_print_meta: rope scaling     = linear
0.00.561.979 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.561.980 I llm_load_print_meta: freq_scale_train = 1
0.00.561.980 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.561.981 I llm_load_print_meta: rope_finetuned   = unknown
0.00.561.981 I llm_load_print_meta: ssm_d_conv       = 0
0.00.561.981 I llm_load_print_meta: ssm_d_inner      = 0
0.00.561.981 I llm_load_print_meta: ssm_d_state      = 0
0.00.561.982 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.561.993 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.561.994 I llm_load_print_meta: model type       = 2B
0.00.561.995 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.561.996 I llm_load_print_meta: model params     = 2.51 B
0.00.561.997 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.561.998 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.561.998 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.561.999 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.561.999 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.561.999 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.562.000 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.562.001 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.562.007 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.562.008 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.562.009 I llm_load_print_meta: max token length = 93
0.00.562.189 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.622.485 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.622.497 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.622.498 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.622.498 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.622.499 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.622.500 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.628.110 I llama_new_context_with_model: n_ctx      = 8192
0.00.628.118 I llama_new_context_with_model: n_batch    = 2048
0.00.628.119 I llama_new_context_with_model: n_ubatch   = 512
0.00.628.120 I llama_new_context_with_model: flash_attn = 0
0.00.628.122 I llama_new_context_with_model: freq_base  = 10000.0
0.00.628.123 I llama_new_context_with_model: freq_scale = 1
0.00.658.711 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.658.758 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.658.867 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.660.228 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.660.235 I llama_new_context_with_model: graph nodes  = 601
0.00.660.235 I llama_new_context_with_model: graph splits = 1
0.00.660.251 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.240.920 I main: llama threadpool init, n_threads = 4
0.01.240.933 I 
0.01.241.029 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.241.032 I 
0.01.241.194 I sampler seed: 3217472547
0.01.241.204 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.241.208 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.241.209 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.241.209 I 
 seconally, attempting to make a point.

The key takeaway from this passage is that the future of work is changing rapidly, requiring adaptability and continuous learning to

0.12.268.614 I llama_perf_sampler_print:    sampling time =      49.11 ms /    33 runs   (    1.49 ms per token,   672.03 tokens per second)
0.12.268.617 I llama_perf_context_print:        load time =    1238.06 ms
0.12.268.618 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.268.633 I llama_perf_context_print:        eval time =   10946.39 ms /    32 runs   (  342.07 ms per token,     2.92 tokens per second)
0.12.268.634 I llama_perf_context_print:       total time =   11027.70 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3831 (89f99449)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199113.69 ms
main:    total time = 199113.70 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.662 I build: 3831 (89f99449) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.852 I main: llama backend init
0.00.002.810 I main: load the model and apply lora adapter, if any
0.00.024.626 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.718 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.732 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.736 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.739 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.741 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.742 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.743 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.744 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.745 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.750 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.751 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.752 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.753 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.754 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.330 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.198 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.583 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.589 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.590 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.591 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.592 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.593 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.594 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.597 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.598 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.605 I llama_model_loader: - type  f32:   37 tensors
0.00.197.609 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.611 I llama_model_loader: - type q6_K:   19 tensors
0.00.474.057 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.496.934 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.497.957 I llm_load_vocab: special tokens cache size = 5
0.00.554.979 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.555.038 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.555.039 I llm_load_print_meta: arch             = gemma
0.00.555.039 I llm_load_print_meta: vocab type       = SPM
0.00.555.040 I llm_load_print_meta: n_vocab          = 256000
0.00.555.043 I llm_load_print_meta: n_merges         = 0
0.00.555.043 I llm_load_print_meta: vocab_only       = 0
0.00.555.044 I llm_load_print_meta: n_ctx_train      = 8192
0.00.555.044 I llm_load_print_meta: n_embd           = 2048
0.00.555.045 I llm_load_print_meta: n_layer          = 18
0.00.555.079 I llm_load_print_meta: n_head           = 8
0.00.555.086 I llm_load_print_meta: n_head_kv        = 1
0.00.555.087 I llm_load_print_meta: n_rot            = 256
0.00.555.087 I llm_load_print_meta: n_swa            = 0
0.00.555.087 I llm_load_print_meta: n_embd_head_k    = 256
0.00.555.088 I llm_load_print_meta: n_embd_head_v    = 256
0.00.555.093 I llm_load_print_meta: n_gqa            = 8
0.00.555.098 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.555.103 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.555.104 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.555.105 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.555.106 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.555.106 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.555.106 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.555.111 I llm_load_print_meta: n_ff             = 16384
0.00.555.112 I llm_load_print_meta: n_expert         = 0
0.00.555.112 I llm_load_print_meta: n_expert_used    = 0
0.00.555.113 I llm_load_print_meta: causal attn      = 1
0.00.555.114 I llm_load_print_meta: pooling type     = 0
0.00.555.114 I llm_load_print_meta: rope type        = 2
0.00.555.115 I llm_load_print_meta: rope scaling     = linear
0.00.555.117 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.555.117 I llm_load_print_meta: freq_scale_train = 1
0.00.555.117 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.555.118 I llm_load_print_meta: rope_finetuned   = unknown
0.00.555.119 I llm_load_print_meta: ssm_d_conv       = 0
0.00.555.119 I llm_load_print_meta: ssm_d_inner      = 0
0.00.555.119 I llm_load_print_meta: ssm_d_state      = 0
0.00.555.120 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.555.120 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.555.131 I llm_load_print_meta: model type       = 2B
0.00.555.144 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.555.146 I llm_load_print_meta: model params     = 2.51 B
0.00.555.146 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.555.147 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.555.148 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.555.148 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.555.157 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.555.162 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.555.163 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.555.171 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.555.177 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.555.178 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.555.179 I llm_load_print_meta: max token length = 93
0.00.555.360 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.613.448 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.619.439 I llama_new_context_with_model: n_ctx      = 8192
0.00.619.445 I llama_new_context_with_model: n_batch    = 2048
0.00.619.446 I llama_new_context_with_model: n_ubatch   = 512
0.00.619.446 I llama_new_context_with_model: flash_attn = 0
0.00.619.448 I llama_new_context_with_model: freq_base  = 10000.0
0.00.619.449 I llama_new_context_with_model: freq_scale = 1
0.00.649.180 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.649.224 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.649.330 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.650.748 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.650.754 I llama_new_context_with_model: graph nodes  = 601
0.00.650.755 I llama_new_context_with_model: graph splits = 1
0.00.650.770 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.231.532 I main: llama threadpool init, n_threads = 4
0.01.231.544 I 
0.01.231.640 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.231.643 I 
0.01.231.803 I sampler seed: 3539448238
0.01.231.814 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.231.819 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.231.820 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.231.820 I 
 squaRED text.

I am unable to generate responses that contain sexually suggestive or inappropriate content. [end of text]


0.08.046.046 I llama_perf_sampler_print:    sampling time =      30.71 ms /    21 runs   (    1.46 ms per token,   683.79 tokens per second)
0.08.046.049 I llama_perf_context_print:        load time =    1228.64 ms
0.08.046.050 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.046.064 I llama_perf_context_print:        eval time =    6762.87 ms /    20 runs   (  338.14 ms per token,     2.96 tokens per second)
0.08.046.065 I llama_perf_context_print:       total time =    6814.52 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m1.574s
user	50m1.292s
sys	0m6.297s
