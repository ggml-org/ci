+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.552 I build: 4212 (89071931) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.765 I main: llama backend init
0.00.000.771 I main: load the model and apply lora adapter, if any
0.00.021.329 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.339 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.347 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.356 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.360 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.363 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.364 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.365 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.365 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.366 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.367 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.371 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.371 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.372 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.372 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.373 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.931 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.904 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.827 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.834 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.835 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.836 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.836 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.837 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.838 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.840 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.841 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.842 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.844 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.844 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.849 I llama_model_loader: - type  f32:   37 tensors
0.00.132.850 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.461 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.613 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.180 I llm_load_vocab: special tokens cache size = 5
0.00.270.503 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.520 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.521 I llm_load_print_meta: arch             = gemma
0.00.270.521 I llm_load_print_meta: vocab type       = SPM
0.00.270.522 I llm_load_print_meta: n_vocab          = 256000
0.00.270.522 I llm_load_print_meta: n_merges         = 0
0.00.270.523 I llm_load_print_meta: vocab_only       = 0
0.00.270.523 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.523 I llm_load_print_meta: n_embd           = 2048
0.00.270.524 I llm_load_print_meta: n_layer          = 18
0.00.270.534 I llm_load_print_meta: n_head           = 8
0.00.270.535 I llm_load_print_meta: n_head_kv        = 1
0.00.270.536 I llm_load_print_meta: n_rot            = 256
0.00.270.536 I llm_load_print_meta: n_swa            = 0
0.00.270.536 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.537 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.538 I llm_load_print_meta: n_gqa            = 8
0.00.270.539 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.540 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.541 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.542 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.543 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.543 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.543 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.544 I llm_load_print_meta: n_ff             = 16384
0.00.270.545 I llm_load_print_meta: n_expert         = 0
0.00.270.545 I llm_load_print_meta: n_expert_used    = 0
0.00.270.545 I llm_load_print_meta: causal attn      = 1
0.00.270.545 I llm_load_print_meta: pooling type     = 0
0.00.270.546 I llm_load_print_meta: rope type        = 2
0.00.270.546 I llm_load_print_meta: rope scaling     = linear
0.00.270.547 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.548 I llm_load_print_meta: freq_scale_train = 1
0.00.270.548 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.549 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.549 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.549 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.550 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.550 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.550 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.550 I llm_load_print_meta: model type       = 2B
0.00.270.551 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.552 I llm_load_print_meta: model params     = 2.51 B
0.00.270.553 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.553 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.553 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.554 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.554 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.555 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.555 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.555 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.556 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.556 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.556 I llm_load_print_meta: max token length = 93
0.00.372.551 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.372.558 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.372.558 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.372.559 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.372.559 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.372.560 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.377.879 I llama_new_context_with_model: n_seq_max     = 1
0.00.377.885 I llama_new_context_with_model: n_ctx         = 4096
0.00.377.885 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.377.885 I llama_new_context_with_model: n_batch       = 2048
0.00.377.886 I llama_new_context_with_model: n_ubatch      = 512
0.00.377.887 I llama_new_context_with_model: flash_attn    = 0
0.00.377.888 I llama_new_context_with_model: freq_base     = 10000.0
0.00.377.889 I llama_new_context_with_model: freq_scale    = 1
0.00.377.890 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.392.513 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.392.525 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.392.618 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.393.943 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.393.946 I llama_new_context_with_model: graph nodes  = 601
0.00.393.947 I llama_new_context_with_model: graph splits = 1
0.00.393.949 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.478.613 I main: llama threadpool init, n_threads = 4
0.00.478.629 I 
0.00.478.699 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.478.702 I 
0.00.478.745 I sampler seed: 2705019688
0.00.478.756 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.478.769 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.478.772 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.478.772 I 
 increabling is a common clinical condition characterized by excessive secretion of the hormone cortisol, resulting in symptoms of hypercortisolism.

**What are the symptoms of

0.02.732.338 I llama_perf_sampler_print:    sampling time =       5.00 ms /    33 runs   (    0.15 ms per token,  6598.68 tokens per second)
0.02.732.341 I llama_perf_context_print:        load time =     477.82 ms
0.02.732.342 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.732.344 I llama_perf_context_print:        eval time =    2234.80 ms /    32 runs   (   69.84 ms per token,    14.32 tokens per second)
0.02.732.344 I llama_perf_context_print:       total time =    2253.73 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.571 I build: 4212 (89071931) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.767 I main: llama backend init
0.00.000.774 I main: load the model and apply lora adapter, if any
0.00.021.377 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.392 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.400 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.403 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.408 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.409 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.410 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.411 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.412 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.413 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.416 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.417 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.417 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.418 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.418 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.623 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.531 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.383 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.389 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.389 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.390 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.390 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.391 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.392 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.394 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.395 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.395 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.397 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.398 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.401 I llama_model_loader: - type  f32:   37 tensors
0.00.132.402 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.818 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.447 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.061 I llm_load_vocab: special tokens cache size = 5
0.00.276.245 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.263 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.264 I llm_load_print_meta: arch             = gemma
0.00.276.264 I llm_load_print_meta: vocab type       = SPM
0.00.276.265 I llm_load_print_meta: n_vocab          = 256000
0.00.276.265 I llm_load_print_meta: n_merges         = 0
0.00.276.265 I llm_load_print_meta: vocab_only       = 0
0.00.276.266 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.266 I llm_load_print_meta: n_embd           = 2048
0.00.276.266 I llm_load_print_meta: n_layer          = 18
0.00.276.278 I llm_load_print_meta: n_head           = 8
0.00.276.279 I llm_load_print_meta: n_head_kv        = 1
0.00.276.279 I llm_load_print_meta: n_rot            = 256
0.00.276.280 I llm_load_print_meta: n_swa            = 0
0.00.276.280 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.280 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.281 I llm_load_print_meta: n_gqa            = 8
0.00.276.282 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.283 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.284 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.285 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.285 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.286 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.286 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.287 I llm_load_print_meta: n_ff             = 16384
0.00.276.287 I llm_load_print_meta: n_expert         = 0
0.00.276.287 I llm_load_print_meta: n_expert_used    = 0
0.00.276.288 I llm_load_print_meta: causal attn      = 1
0.00.276.288 I llm_load_print_meta: pooling type     = 0
0.00.276.288 I llm_load_print_meta: rope type        = 2
0.00.276.289 I llm_load_print_meta: rope scaling     = linear
0.00.276.290 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.291 I llm_load_print_meta: freq_scale_train = 1
0.00.276.291 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.291 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.291 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.292 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.292 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.292 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.292 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.293 I llm_load_print_meta: model type       = 2B
0.00.276.293 I llm_load_print_meta: model ftype      = Q8_0
0.00.276.294 I llm_load_print_meta: model params     = 2.51 B
0.00.276.295 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.276.295 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.296 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.296 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.297 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.297 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.297 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.298 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.298 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.299 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.299 I llm_load_print_meta: max token length = 93
0.00.370.792 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.376.120 I llama_new_context_with_model: n_seq_max     = 1
0.00.376.126 I llama_new_context_with_model: n_ctx         = 4096
0.00.376.127 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.376.127 I llama_new_context_with_model: n_batch       = 2048
0.00.376.127 I llama_new_context_with_model: n_ubatch      = 512
0.00.376.128 I llama_new_context_with_model: flash_attn    = 0
0.00.376.130 I llama_new_context_with_model: freq_base     = 10000.0
0.00.376.131 I llama_new_context_with_model: freq_scale    = 1
0.00.376.133 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.391.146 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.391.160 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.391.258 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.392.570 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.392.575 I llama_new_context_with_model: graph nodes  = 601
0.00.392.576 I llama_new_context_with_model: graph splits = 1
0.00.392.577 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.497 I main: llama threadpool init, n_threads = 4
0.00.474.512 I 
0.00.474.584 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.474.587 I 
0.00.474.633 I sampler seed: 3312820574
0.00.474.644 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.655 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.474.659 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.659 I 
 seconally.

The question is about making a time-lapse video.

**Step 1: Planning**

- Choose the subject and location.


0.02.648.703 I llama_perf_sampler_print:    sampling time =       4.85 ms /    33 runs   (    0.15 ms per token,  6798.52 tokens per second)
0.02.648.706 I llama_perf_context_print:        load time =     473.70 ms
0.02.648.707 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.648.708 I llama_perf_context_print:        eval time =    2155.53 ms /    32 runs   (   67.36 ms per token,    14.85 tokens per second)
0.02.648.709 I llama_perf_context_print:       total time =    2174.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.612 I build: 4212 (89071931) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.827 I main: llama backend init
0.00.000.834 I main: load the model and apply lora adapter, if any
0.00.021.212 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.222 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.230 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.235 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.237 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.240 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.240 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.242 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.242 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.242 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.243 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.249 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.250 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.251 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.251 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.253 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.191 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.792 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.648 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.654 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.655 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.655 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.656 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.657 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.657 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.660 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.660 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.661 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.662 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.662 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.666 I llama_model_loader: - type  f32:   37 tensors
0.00.132.667 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.424 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.407 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.011 I llm_load_vocab: special tokens cache size = 5
0.00.272.447 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.463 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.464 I llm_load_print_meta: arch             = gemma
0.00.272.464 I llm_load_print_meta: vocab type       = SPM
0.00.272.465 I llm_load_print_meta: n_vocab          = 256000
0.00.272.466 I llm_load_print_meta: n_merges         = 0
0.00.272.466 I llm_load_print_meta: vocab_only       = 0
0.00.272.466 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.467 I llm_load_print_meta: n_embd           = 2048
0.00.272.467 I llm_load_print_meta: n_layer          = 18
0.00.272.479 I llm_load_print_meta: n_head           = 8
0.00.272.480 I llm_load_print_meta: n_head_kv        = 1
0.00.272.480 I llm_load_print_meta: n_rot            = 256
0.00.272.481 I llm_load_print_meta: n_swa            = 0
0.00.272.481 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.481 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.482 I llm_load_print_meta: n_gqa            = 8
0.00.272.483 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.484 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.485 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.487 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.487 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.488 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.488 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.489 I llm_load_print_meta: n_ff             = 16384
0.00.272.490 I llm_load_print_meta: n_expert         = 0
0.00.272.490 I llm_load_print_meta: n_expert_used    = 0
0.00.272.491 I llm_load_print_meta: causal attn      = 1
0.00.272.491 I llm_load_print_meta: pooling type     = 0
0.00.272.492 I llm_load_print_meta: rope type        = 2
0.00.272.493 I llm_load_print_meta: rope scaling     = linear
0.00.272.495 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.496 I llm_load_print_meta: freq_scale_train = 1
0.00.272.496 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.496 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.497 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.497 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.498 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.498 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.499 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.500 I llm_load_print_meta: model type       = 2B
0.00.272.501 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.502 I llm_load_print_meta: model params     = 2.51 B
0.00.272.504 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.504 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.505 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.506 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.506 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.507 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.507 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.508 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.509 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.509 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.510 I llm_load_print_meta: max token length = 93
0.00.348.482 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.348.489 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.348.490 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.348.491 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.348.491 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.348.492 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.353.887 I llama_new_context_with_model: n_seq_max     = 1
0.00.353.894 I llama_new_context_with_model: n_ctx         = 4096
0.00.353.894 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.353.895 I llama_new_context_with_model: n_batch       = 2048
0.00.353.895 I llama_new_context_with_model: n_ubatch      = 512
0.00.353.896 I llama_new_context_with_model: flash_attn    = 0
0.00.353.898 I llama_new_context_with_model: freq_base     = 10000.0
0.00.353.899 I llama_new_context_with_model: freq_scale    = 1
0.00.353.900 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.369.375 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.369.389 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.369.488 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.370.738 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.370.745 I llama_new_context_with_model: graph nodes  = 601
0.00.370.745 I llama_new_context_with_model: graph splits = 1
0.00.370.747 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.458.145 I main: llama threadpool init, n_threads = 4
0.00.458.161 I 
0.00.458.238 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.458.242 I 
0.00.458.296 I sampler seed: 2142873943
0.00.458.315 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.458.319 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.458.320 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.458.321 I 
 increasively!

I am sorry, I am not able to generate responses that are sexually suggestive in nature. Would you like me to try generating something different?

0.02.722.207 I llama_perf_sampler_print:    sampling time =       4.84 ms /    33 runs   (    0.15 ms per token,  6818.18 tokens per second)
0.02.722.210 I llama_perf_context_print:        load time =     457.29 ms
0.02.722.211 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.722.213 I llama_perf_context_print:        eval time =    2245.25 ms /    32 runs   (   70.16 ms per token,    14.25 tokens per second)
0.02.722.214 I llama_perf_context_print:       total time =    2264.07 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.173 I build: 4212 (89071931) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.373 I main: llama backend init
0.00.000.380 I main: load the model and apply lora adapter, if any
0.00.020.612 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.622 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.629 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.638 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.639 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.644 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.645 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.646 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.647 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.647 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.648 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.652 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.652 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.653 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.653 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.654 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.494 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.352 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.204 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.210 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.211 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.211 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.212 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.213 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.214 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.216 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.216 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.217 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.218 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.219 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.221 I llama_model_loader: - type  f32:   37 tensors
0.00.131.222 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.083 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.687 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.208 I llm_load_vocab: special tokens cache size = 5
0.00.263.303 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.318 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.319 I llm_load_print_meta: arch             = gemma
0.00.263.319 I llm_load_print_meta: vocab type       = SPM
0.00.263.320 I llm_load_print_meta: n_vocab          = 256000
0.00.263.321 I llm_load_print_meta: n_merges         = 0
0.00.263.321 I llm_load_print_meta: vocab_only       = 0
0.00.263.321 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.321 I llm_load_print_meta: n_embd           = 2048
0.00.263.322 I llm_load_print_meta: n_layer          = 18
0.00.263.332 I llm_load_print_meta: n_head           = 8
0.00.263.333 I llm_load_print_meta: n_head_kv        = 1
0.00.263.333 I llm_load_print_meta: n_rot            = 256
0.00.263.334 I llm_load_print_meta: n_swa            = 0
0.00.263.334 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.334 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.335 I llm_load_print_meta: n_gqa            = 8
0.00.263.337 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.337 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.338 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.340 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.341 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.341 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.342 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.342 I llm_load_print_meta: n_ff             = 16384
0.00.263.343 I llm_load_print_meta: n_expert         = 0
0.00.263.343 I llm_load_print_meta: n_expert_used    = 0
0.00.263.343 I llm_load_print_meta: causal attn      = 1
0.00.263.344 I llm_load_print_meta: pooling type     = 0
0.00.263.344 I llm_load_print_meta: rope type        = 2
0.00.263.344 I llm_load_print_meta: rope scaling     = linear
0.00.263.345 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.346 I llm_load_print_meta: freq_scale_train = 1
0.00.263.346 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.347 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.347 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.347 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.347 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.347 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.348 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.348 I llm_load_print_meta: model type       = 2B
0.00.263.349 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.350 I llm_load_print_meta: model params     = 2.51 B
0.00.263.350 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.351 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.351 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.352 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.352 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.352 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.353 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.353 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.353 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.354 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.354 I llm_load_print_meta: max token length = 93
0.00.334.400 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.334.407 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.339.398 I llama_new_context_with_model: n_seq_max     = 1
0.00.339.404 I llama_new_context_with_model: n_ctx         = 4096
0.00.339.404 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.339.405 I llama_new_context_with_model: n_batch       = 2048
0.00.339.405 I llama_new_context_with_model: n_ubatch      = 512
0.00.339.406 I llama_new_context_with_model: flash_attn    = 0
0.00.339.408 I llama_new_context_with_model: freq_base     = 10000.0
0.00.339.409 I llama_new_context_with_model: freq_scale    = 1
0.00.339.409 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.354.062 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.354.075 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.354.167 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.355.428 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.355.434 I llama_new_context_with_model: graph nodes  = 601
0.00.355.434 I llama_new_context_with_model: graph splits = 1
0.00.355.436 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.443.860 I main: llama threadpool init, n_threads = 4
0.00.443.877 I 
0.00.443.947 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.443.950 I 
0.00.443.991 I sampler seed: 3929997886
0.00.444.002 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.444.014 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.444.018 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.444.018 I 
 seconary factors (SPF) are a vital component in email authentication.

**True or False?**

SPF is a type of email authentication mechanism. [end of text]


0.02.870.756 I llama_perf_sampler_print:    sampling time =       4.79 ms /    33 runs   (    0.15 ms per token,  6895.11 tokens per second)
0.02.870.760 I llama_perf_context_print:        load time =     443.46 ms
0.02.870.762 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.870.764 I llama_perf_context_print:        eval time =    2407.14 ms /    32 runs   (   75.22 ms per token,    13.29 tokens per second)
0.02.870.765 I llama_perf_context_print:       total time =    2426.91 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.465s
user	0m39.355s
sys	0m9.314s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4212 (89071931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40204.32 ms
main:    total time = 40204.32 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.581 I build: 4212 (89071931) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.792 I main: llama backend init
0.00.000.798 I main: load the model and apply lora adapter, if any
0.00.021.300 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.310 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.318 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.325 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.330 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.334 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.335 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.336 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.337 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.338 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.339 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.344 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.344 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.345 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.346 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.347 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.372 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.679 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.602 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.609 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.610 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.611 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.611 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.612 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.613 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.616 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.620 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.621 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.621 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.622 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.625 I llama_model_loader: - type  f32:   37 tensors
0.00.132.626 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.627 I llama_model_loader: - type q6_K:   19 tensors
0.00.208.949 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.300 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.904 I llm_load_vocab: special tokens cache size = 5
0.00.275.932 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.947 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.948 I llm_load_print_meta: arch             = gemma
0.00.275.948 I llm_load_print_meta: vocab type       = SPM
0.00.275.949 I llm_load_print_meta: n_vocab          = 256000
0.00.275.950 I llm_load_print_meta: n_merges         = 0
0.00.275.950 I llm_load_print_meta: vocab_only       = 0
0.00.275.950 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.950 I llm_load_print_meta: n_embd           = 2048
0.00.275.951 I llm_load_print_meta: n_layer          = 18
0.00.275.962 I llm_load_print_meta: n_head           = 8
0.00.275.963 I llm_load_print_meta: n_head_kv        = 1
0.00.275.964 I llm_load_print_meta: n_rot            = 256
0.00.275.964 I llm_load_print_meta: n_swa            = 0
0.00.275.964 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.965 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.965 I llm_load_print_meta: n_gqa            = 8
0.00.275.967 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.968 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.968 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.969 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.970 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.970 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.970 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.971 I llm_load_print_meta: n_ff             = 16384
0.00.275.971 I llm_load_print_meta: n_expert         = 0
0.00.275.972 I llm_load_print_meta: n_expert_used    = 0
0.00.275.972 I llm_load_print_meta: causal attn      = 1
0.00.275.972 I llm_load_print_meta: pooling type     = 0
0.00.275.973 I llm_load_print_meta: rope type        = 2
0.00.275.973 I llm_load_print_meta: rope scaling     = linear
0.00.275.974 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.975 I llm_load_print_meta: freq_scale_train = 1
0.00.275.975 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.976 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.976 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.976 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.977 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.977 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.977 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.977 I llm_load_print_meta: model type       = 2B
0.00.275.978 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.275.979 I llm_load_print_meta: model params     = 2.51 B
0.00.275.980 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.275.980 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.980 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.981 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.981 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.981 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.982 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.982 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.982 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.983 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.983 I llm_load_print_meta: max token length = 93
0.00.336.169 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.336.175 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.336.176 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.336.177 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.336.177 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.336.178 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.341.469 I llama_new_context_with_model: n_seq_max     = 1
0.00.341.475 I llama_new_context_with_model: n_ctx         = 4096
0.00.341.476 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.341.476 I llama_new_context_with_model: n_batch       = 2048
0.00.341.476 I llama_new_context_with_model: n_ubatch      = 512
0.00.341.477 I llama_new_context_with_model: flash_attn    = 0
0.00.341.479 I llama_new_context_with_model: freq_base     = 10000.0
0.00.341.480 I llama_new_context_with_model: freq_scale    = 1
0.00.341.480 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.976 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.990 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.076 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.374 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.382 I llama_new_context_with_model: graph nodes  = 601
0.00.357.382 I llama_new_context_with_model: graph splits = 1
0.00.357.384 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.432.920 I main: llama threadpool init, n_threads = 4
0.00.432.936 I 
0.00.433.027 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.433.030 I 
0.00.433.090 I sampler seed: 3736073765
0.00.433.104 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.433.108 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.433.109 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.433.110 I 
 increamically!

I am sorry, I am not supposed to generate responses that are disrespectful or insensitive. Would you like me to try generating something different? [end of text]


0.02.047.790 I llama_perf_sampler_print:    sampling time =       5.13 ms /    33 runs   (    0.16 ms per token,  6427.74 tokens per second)
0.02.047.793 I llama_perf_context_print:        load time =     432.10 ms
0.02.047.794 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.047.796 I llama_perf_context_print:        eval time =    1595.66 ms /    32 runs   (   49.86 ms per token,    20.05 tokens per second)
0.02.047.798 I llama_perf_context_print:       total time =    1614.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4212 (89071931)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40198.86 ms
main:    total time = 40198.86 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.549 I build: 4212 (89071931) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.000.750 I main: load the model and apply lora adapter, if any
0.00.020.815 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.831 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.838 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.839 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.842 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.843 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.844 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.845 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.845 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.846 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.850 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.851 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.852 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.852 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.853 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.189 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.857 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.706 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.713 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.714 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.714 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.715 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.716 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.716 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.719 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.719 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.723 I llama_model_loader: - type  f32:   37 tensors
0.00.131.724 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.724 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.131 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.067 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.703 I llm_load_vocab: special tokens cache size = 5
0.00.265.905 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.921 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.922 I llm_load_print_meta: arch             = gemma
0.00.265.922 I llm_load_print_meta: vocab type       = SPM
0.00.265.923 I llm_load_print_meta: n_vocab          = 256000
0.00.265.924 I llm_load_print_meta: n_merges         = 0
0.00.265.924 I llm_load_print_meta: vocab_only       = 0
0.00.265.925 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.925 I llm_load_print_meta: n_embd           = 2048
0.00.265.925 I llm_load_print_meta: n_layer          = 18
0.00.265.937 I llm_load_print_meta: n_head           = 8
0.00.265.938 I llm_load_print_meta: n_head_kv        = 1
0.00.265.938 I llm_load_print_meta: n_rot            = 256
0.00.265.938 I llm_load_print_meta: n_swa            = 0
0.00.265.938 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.939 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.940 I llm_load_print_meta: n_gqa            = 8
0.00.265.941 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.942 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.942 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.944 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.944 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.944 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.945 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.945 I llm_load_print_meta: n_ff             = 16384
0.00.265.946 I llm_load_print_meta: n_expert         = 0
0.00.265.946 I llm_load_print_meta: n_expert_used    = 0
0.00.265.946 I llm_load_print_meta: causal attn      = 1
0.00.265.946 I llm_load_print_meta: pooling type     = 0
0.00.265.946 I llm_load_print_meta: rope type        = 2
0.00.265.947 I llm_load_print_meta: rope scaling     = linear
0.00.265.949 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.949 I llm_load_print_meta: freq_scale_train = 1
0.00.265.950 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.950 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.950 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.951 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.951 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.951 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.951 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.952 I llm_load_print_meta: model type       = 2B
0.00.265.953 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.954 I llm_load_print_meta: model params     = 2.51 B
0.00.265.955 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.955 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.955 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.956 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.956 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.956 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.957 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.957 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.957 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.958 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.958 I llm_load_print_meta: max token length = 93
0.00.322.574 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.327.715 I llama_new_context_with_model: n_seq_max     = 1
0.00.327.721 I llama_new_context_with_model: n_ctx         = 4096
0.00.327.721 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.327.722 I llama_new_context_with_model: n_batch       = 2048
0.00.327.722 I llama_new_context_with_model: n_ubatch      = 512
0.00.327.723 I llama_new_context_with_model: flash_attn    = 0
0.00.327.725 I llama_new_context_with_model: freq_base     = 10000.0
0.00.327.726 I llama_new_context_with_model: freq_scale    = 1
0.00.327.727 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.342.737 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.342.752 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.342.844 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.068 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.344.073 I llama_new_context_with_model: graph nodes  = 601
0.00.344.074 I llama_new_context_with_model: graph splits = 1
0.00.344.076 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.918 I main: llama threadpool init, n_threads = 4
0.00.418.934 I 
0.00.419.005 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.419.008 I 
0.00.419.055 I sampler seed: 2051599975
0.00.419.066 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.069 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.070 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.070 I 
 squaRED

**The Importance of Quality in Software Development**

**1. User Experience:**

- High-quality software delivers a seamless and intuitive experience for

0.01.994.784 I llama_perf_sampler_print:    sampling time =       5.00 ms /    33 runs   (    0.15 ms per token,  6606.61 tokens per second)
0.01.994.787 I llama_perf_context_print:        load time =     418.15 ms
0.01.994.788 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.994.790 I llama_perf_context_print:        eval time =    1557.06 ms /    32 runs   (   48.66 ms per token,    20.55 tokens per second)
0.01.994.790 I llama_perf_context_print:       total time =    1575.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.260s
user	10m23.723s
sys	0m7.078s
