+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.174 I build: 4278 (784a14aa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.366 I main: llama backend init
0.00.000.372 I main: load the model and apply lora adapter, if any
0.00.020.820 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.831 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.838 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.842 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.843 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.847 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.848 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.849 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.850 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.850 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.851 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.854 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.855 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.856 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.856 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.858 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.155 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.399 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.257 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.263 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.263 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.264 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.265 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.265 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.266 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.269 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.269 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.270 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.271 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.272 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.278 I llama_model_loader: - type  f32:   37 tensors
0.00.130.289 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.565 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.999 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.577 I llm_load_vocab: special tokens cache size = 5
0.00.263.536 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.550 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.551 I llm_load_print_meta: arch             = gemma
0.00.263.552 I llm_load_print_meta: vocab type       = SPM
0.00.263.553 I llm_load_print_meta: n_vocab          = 256000
0.00.263.553 I llm_load_print_meta: n_merges         = 0
0.00.263.554 I llm_load_print_meta: vocab_only       = 0
0.00.263.554 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.554 I llm_load_print_meta: n_embd           = 2048
0.00.263.555 I llm_load_print_meta: n_layer          = 18
0.00.263.566 I llm_load_print_meta: n_head           = 8
0.00.263.567 I llm_load_print_meta: n_head_kv        = 1
0.00.263.567 I llm_load_print_meta: n_rot            = 256
0.00.263.567 I llm_load_print_meta: n_swa            = 0
0.00.263.567 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.568 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.569 I llm_load_print_meta: n_gqa            = 8
0.00.263.570 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.571 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.572 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.573 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.574 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.574 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.574 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.575 I llm_load_print_meta: n_ff             = 16384
0.00.263.576 I llm_load_print_meta: n_expert         = 0
0.00.263.576 I llm_load_print_meta: n_expert_used    = 0
0.00.263.576 I llm_load_print_meta: causal attn      = 1
0.00.263.576 I llm_load_print_meta: pooling type     = 0
0.00.263.577 I llm_load_print_meta: rope type        = 2
0.00.263.577 I llm_load_print_meta: rope scaling     = linear
0.00.263.578 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.579 I llm_load_print_meta: freq_scale_train = 1
0.00.263.579 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.580 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.580 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.581 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.581 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.581 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.581 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.582 I llm_load_print_meta: model type       = 2B
0.00.263.583 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.583 I llm_load_print_meta: model params     = 2.51 B
0.00.263.584 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.584 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.585 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.585 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.586 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.586 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.586 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.587 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.587 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.588 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.588 I llm_load_print_meta: max token length = 93
0.00.365.477 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.365.484 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.365.485 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.365.486 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.365.486 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.365.487 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.371.343 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.349 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.349 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.349 I llama_new_context_with_model: n_batch       = 2048
0.00.371.350 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.350 I llama_new_context_with_model: flash_attn    = 0
0.00.371.353 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.353 I llama_new_context_with_model: freq_scale    = 1
0.00.371.354 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.385.502 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.516 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.604 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.865 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.386.872 I llama_new_context_with_model: graph nodes  = 601
0.00.386.872 I llama_new_context_with_model: graph splits = 1
0.00.386.874 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.634 I main: llama threadpool init, n_threads = 4
0.00.471.650 I 
0.00.471.723 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.471.726 I 
0.00.471.774 I sampler seed: 3594629654
0.00.471.785 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.797 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.471.801 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.471.801 I 
 seconally, summarizing the key points discussed in the lecture.

**Lecture Summary**

**Key Points:**

* **The impact of technology on society:**

0.02.717.388 I llama_perf_sampler_print:    sampling time =       4.74 ms /    33 runs   (    0.14 ms per token,  6962.03 tokens per second)
0.02.717.391 I llama_perf_context_print:        load time =     471.25 ms
0.02.717.392 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.717.393 I llama_perf_context_print:        eval time =    2226.40 ms /    32 runs   (   69.57 ms per token,    14.37 tokens per second)
0.02.717.394 I llama_perf_context_print:       total time =    2245.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.216 I build: 4278 (784a14aa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.412 I main: llama backend init
0.00.000.419 I main: load the model and apply lora adapter, if any
0.00.020.627 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.641 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.647 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.648 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.652 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.653 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.654 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.654 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.655 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.656 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.660 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.661 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.661 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.662 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.663 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.478 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.619 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.688 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.693 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.694 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.695 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.696 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.696 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.697 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.699 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.700 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.701 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.701 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.702 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.704 I llama_model_loader: - type  f32:   37 tensors
0.00.130.705 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.249 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.236.717 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.237.211 I llm_load_vocab: special tokens cache size = 5
0.00.258.486 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.258.503 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.258.503 I llm_load_print_meta: arch             = gemma
0.00.258.504 I llm_load_print_meta: vocab type       = SPM
0.00.258.505 I llm_load_print_meta: n_vocab          = 256000
0.00.258.505 I llm_load_print_meta: n_merges         = 0
0.00.258.506 I llm_load_print_meta: vocab_only       = 0
0.00.258.506 I llm_load_print_meta: n_ctx_train      = 8192
0.00.258.506 I llm_load_print_meta: n_embd           = 2048
0.00.258.507 I llm_load_print_meta: n_layer          = 18
0.00.258.517 I llm_load_print_meta: n_head           = 8
0.00.258.518 I llm_load_print_meta: n_head_kv        = 1
0.00.258.519 I llm_load_print_meta: n_rot            = 256
0.00.258.519 I llm_load_print_meta: n_swa            = 0
0.00.258.519 I llm_load_print_meta: n_embd_head_k    = 256
0.00.258.519 I llm_load_print_meta: n_embd_head_v    = 256
0.00.258.520 I llm_load_print_meta: n_gqa            = 8
0.00.258.521 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.258.522 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.258.524 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.258.525 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.258.526 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.258.526 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.258.526 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.258.527 I llm_load_print_meta: n_ff             = 16384
0.00.258.527 I llm_load_print_meta: n_expert         = 0
0.00.258.528 I llm_load_print_meta: n_expert_used    = 0
0.00.258.528 I llm_load_print_meta: causal attn      = 1
0.00.258.528 I llm_load_print_meta: pooling type     = 0
0.00.258.528 I llm_load_print_meta: rope type        = 2
0.00.258.529 I llm_load_print_meta: rope scaling     = linear
0.00.258.530 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.258.531 I llm_load_print_meta: freq_scale_train = 1
0.00.258.531 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.258.531 I llm_load_print_meta: rope_finetuned   = unknown
0.00.258.532 I llm_load_print_meta: ssm_d_conv       = 0
0.00.258.532 I llm_load_print_meta: ssm_d_inner      = 0
0.00.258.532 I llm_load_print_meta: ssm_d_state      = 0
0.00.258.532 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.258.533 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.258.533 I llm_load_print_meta: model type       = 2B
0.00.258.533 I llm_load_print_meta: model ftype      = Q8_0
0.00.258.534 I llm_load_print_meta: model params     = 2.51 B
0.00.258.535 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.258.535 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.258.535 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.258.536 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.258.536 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.258.536 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.258.537 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.258.537 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.258.538 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.258.538 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.258.539 I llm_load_print_meta: max token length = 93
0.00.353.984 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.359.074 I llama_new_context_with_model: n_seq_max     = 1
0.00.359.080 I llama_new_context_with_model: n_ctx         = 4096
0.00.359.081 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.359.081 I llama_new_context_with_model: n_batch       = 2048
0.00.359.082 I llama_new_context_with_model: n_ubatch      = 512
0.00.359.082 I llama_new_context_with_model: flash_attn    = 0
0.00.359.084 I llama_new_context_with_model: freq_base     = 10000.0
0.00.359.085 I llama_new_context_with_model: freq_scale    = 1
0.00.359.086 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.373.366 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.373.381 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.373.471 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.374.719 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.374.725 I llama_new_context_with_model: graph nodes  = 601
0.00.374.725 I llama_new_context_with_model: graph splits = 1
0.00.374.727 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.455.464 I main: llama threadpool init, n_threads = 4
0.00.455.480 I 
0.00.455.554 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.455.557 I 
0.00.455.603 I sampler seed: 3854017639
0.00.455.614 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.455.625 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.455.629 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.455.629 I 
 increasements of the 20th century. 

**Answer:**

I am unable to provide information or answer questions that reference historical events or figures that

0.02.625.791 I llama_perf_sampler_print:    sampling time =       4.81 ms /    33 runs   (    0.15 ms per token,  6863.56 tokens per second)
0.02.625.793 I llama_perf_context_print:        load time =     455.03 ms
0.02.625.794 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.625.796 I llama_perf_context_print:        eval time =    2151.85 ms /    32 runs   (   67.25 ms per token,    14.87 tokens per second)
0.02.625.797 I llama_perf_context_print:       total time =    2170.33 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.535 I build: 4278 (784a14aa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.735 I main: llama backend init
0.00.000.742 I main: load the model and apply lora adapter, if any
0.00.021.263 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.273 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.281 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.290 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.292 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.296 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.299 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.300 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.300 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.301 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.301 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.309 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.310 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.310 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.311 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.312 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.631 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.026 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.909 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.916 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.916 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.917 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.917 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.918 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.919 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.921 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.922 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.922 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.923 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.925 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.930 I llama_model_loader: - type  f32:   37 tensors
0.00.130.931 I llama_model_loader: - type q8_0:  127 tensors
0.00.219.488 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.267.321 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.267.917 I llm_load_vocab: special tokens cache size = 5
0.00.288.998 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.289.013 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.289.014 I llm_load_print_meta: arch             = gemma
0.00.289.015 I llm_load_print_meta: vocab type       = SPM
0.00.289.015 I llm_load_print_meta: n_vocab          = 256000
0.00.289.016 I llm_load_print_meta: n_merges         = 0
0.00.289.016 I llm_load_print_meta: vocab_only       = 0
0.00.289.016 I llm_load_print_meta: n_ctx_train      = 8192
0.00.289.016 I llm_load_print_meta: n_embd           = 2048
0.00.289.017 I llm_load_print_meta: n_layer          = 18
0.00.289.029 I llm_load_print_meta: n_head           = 8
0.00.289.029 I llm_load_print_meta: n_head_kv        = 1
0.00.289.030 I llm_load_print_meta: n_rot            = 256
0.00.289.030 I llm_load_print_meta: n_swa            = 0
0.00.289.030 I llm_load_print_meta: n_embd_head_k    = 256
0.00.289.030 I llm_load_print_meta: n_embd_head_v    = 256
0.00.289.031 I llm_load_print_meta: n_gqa            = 8
0.00.289.033 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.289.033 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.289.034 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.289.036 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.289.036 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.289.036 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.289.037 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.289.037 I llm_load_print_meta: n_ff             = 16384
0.00.289.038 I llm_load_print_meta: n_expert         = 0
0.00.289.038 I llm_load_print_meta: n_expert_used    = 0
0.00.289.038 I llm_load_print_meta: causal attn      = 1
0.00.289.038 I llm_load_print_meta: pooling type     = 0
0.00.289.039 I llm_load_print_meta: rope type        = 2
0.00.289.039 I llm_load_print_meta: rope scaling     = linear
0.00.289.040 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.289.041 I llm_load_print_meta: freq_scale_train = 1
0.00.289.041 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.289.042 I llm_load_print_meta: rope_finetuned   = unknown
0.00.289.042 I llm_load_print_meta: ssm_d_conv       = 0
0.00.289.042 I llm_load_print_meta: ssm_d_inner      = 0
0.00.289.043 I llm_load_print_meta: ssm_d_state      = 0
0.00.289.043 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.289.043 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.289.044 I llm_load_print_meta: model type       = 2B
0.00.289.044 I llm_load_print_meta: model ftype      = Q8_0
0.00.289.045 I llm_load_print_meta: model params     = 2.51 B
0.00.289.046 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.289.046 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.289.046 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.289.047 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.289.047 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.289.047 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.289.048 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.289.048 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.289.048 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.289.049 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.289.049 I llm_load_print_meta: max token length = 93
0.00.368.185 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.368.191 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.368.191 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.368.192 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.368.192 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.368.193 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.373.254 I llama_new_context_with_model: n_seq_max     = 1
0.00.373.259 I llama_new_context_with_model: n_ctx         = 4096
0.00.373.259 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.373.260 I llama_new_context_with_model: n_batch       = 2048
0.00.373.260 I llama_new_context_with_model: n_ubatch      = 512
0.00.373.261 I llama_new_context_with_model: flash_attn    = 0
0.00.373.265 I llama_new_context_with_model: freq_base     = 10000.0
0.00.373.265 I llama_new_context_with_model: freq_scale    = 1
0.00.373.267 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.387.785 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.798 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.886 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.167 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.173 I llama_new_context_with_model: graph nodes  = 601
0.00.389.174 I llama_new_context_with_model: graph splits = 1
0.00.389.176 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.702 I main: llama threadpool init, n_threads = 4
0.00.475.719 I 
0.00.475.790 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.475.793 I 
0.00.475.841 I sampler seed: 1323546654
0.00.475.852 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.857 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.858 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.859 I 
 increasities.

This context does not mention anything about the specific actions or outcomes of the events, so I am unable to answer this question from the provided context

0.02.731.534 I llama_perf_sampler_print:    sampling time =       4.63 ms /    33 runs   (    0.14 ms per token,  7127.43 tokens per second)
0.02.731.537 I llama_perf_context_print:        load time =     474.94 ms
0.02.731.539 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.731.540 I llama_perf_context_print:        eval time =    2236.38 ms /    32 runs   (   69.89 ms per token,    14.31 tokens per second)
0.02.731.541 I llama_perf_context_print:       total time =    2255.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.530 I build: 4278 (784a14aa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.719 I main: llama backend init
0.00.000.726 I main: load the model and apply lora adapter, if any
0.00.021.105 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.114 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.122 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.130 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.131 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.134 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.135 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.136 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.136 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.137 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.138 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.146 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.146 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.147 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.147 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.148 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.411 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.128.276 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.135.494 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.135.501 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.135.501 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.135.502 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.135.502 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.135.503 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.135.504 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.135.506 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.135.507 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.135.508 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.135.509 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.135.510 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.135.512 I llama_model_loader: - type  f32:   37 tensors
0.00.135.513 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.923 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.790 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.296 I llm_load_vocab: special tokens cache size = 5
0.00.268.194 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.208 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.209 I llm_load_print_meta: arch             = gemma
0.00.268.210 I llm_load_print_meta: vocab type       = SPM
0.00.268.210 I llm_load_print_meta: n_vocab          = 256000
0.00.268.210 I llm_load_print_meta: n_merges         = 0
0.00.268.211 I llm_load_print_meta: vocab_only       = 0
0.00.268.211 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.212 I llm_load_print_meta: n_embd           = 2048
0.00.268.212 I llm_load_print_meta: n_layer          = 18
0.00.268.223 I llm_load_print_meta: n_head           = 8
0.00.268.224 I llm_load_print_meta: n_head_kv        = 1
0.00.268.225 I llm_load_print_meta: n_rot            = 256
0.00.268.225 I llm_load_print_meta: n_swa            = 0
0.00.268.225 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.225 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.226 I llm_load_print_meta: n_gqa            = 8
0.00.268.227 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.228 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.229 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.231 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.231 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.231 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.232 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.232 I llm_load_print_meta: n_ff             = 16384
0.00.268.233 I llm_load_print_meta: n_expert         = 0
0.00.268.233 I llm_load_print_meta: n_expert_used    = 0
0.00.268.233 I llm_load_print_meta: causal attn      = 1
0.00.268.234 I llm_load_print_meta: pooling type     = 0
0.00.268.234 I llm_load_print_meta: rope type        = 2
0.00.268.234 I llm_load_print_meta: rope scaling     = linear
0.00.268.236 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.237 I llm_load_print_meta: freq_scale_train = 1
0.00.268.237 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.237 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.238 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.238 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.238 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.238 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.239 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.240 I llm_load_print_meta: model type       = 2B
0.00.268.241 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.241 I llm_load_print_meta: model params     = 2.51 B
0.00.268.242 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.242 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.243 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.243 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.244 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.245 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.245 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.246 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.246 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.247 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.247 I llm_load_print_meta: max token length = 93
0.00.338.951 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.338.956 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.344.007 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.013 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.013 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.013 I llama_new_context_with_model: n_batch       = 2048
0.00.344.014 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.014 I llama_new_context_with_model: flash_attn    = 0
0.00.344.017 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.018 I llama_new_context_with_model: freq_scale    = 1
0.00.344.019 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.533 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.546 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.358.637 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.359.900 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.359.907 I llama_new_context_with_model: graph nodes  = 601
0.00.359.907 I llama_new_context_with_model: graph splits = 1
0.00.359.909 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.470 I main: llama threadpool init, n_threads = 4
0.00.451.487 I 
0.00.451.561 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.451.564 I 
0.00.451.612 I sampler seed: 2556848370
0.00.451.623 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.626 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.451.627 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.627 I 
 increasities, but they also bring opportunities for growth, learning, and connection.

**Answer the question using the provided context.**

Based on the provided context

0.02.872.682 I llama_perf_sampler_print:    sampling time =       5.18 ms /    33 runs   (    0.16 ms per token,  6374.35 tokens per second)
0.02.872.684 I llama_perf_context_print:        load time =     450.73 ms
0.02.872.685 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.872.686 I llama_perf_context_print:        eval time =    2402.02 ms /    32 runs   (   75.06 ms per token,    13.32 tokens per second)
0.02.872.687 I llama_perf_context_print:       total time =    2421.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.419s
user	0m39.197s
sys	0m9.350s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4278 (784a14aa)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40189.00 ms
main:    total time = 40189.01 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.555 I build: 4278 (784a14aa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.745 I main: llama backend init
0.00.000.751 I main: load the model and apply lora adapter, if any
0.00.021.120 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.130 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.138 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.143 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.144 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.147 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.150 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.151 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.152 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.152 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.152 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.156 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.156 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.157 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.157 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.158 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.795 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.248 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.115 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.122 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.122 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.123 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.123 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.125 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.125 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.127 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.128 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.129 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.129 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.131 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.134 I llama_model_loader: - type  f32:   37 tensors
0.00.131.135 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.136 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.314 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.101 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.588 I llm_load_vocab: special tokens cache size = 5
0.00.262.497 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.512 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.512 I llm_load_print_meta: arch             = gemma
0.00.262.513 I llm_load_print_meta: vocab type       = SPM
0.00.262.514 I llm_load_print_meta: n_vocab          = 256000
0.00.262.514 I llm_load_print_meta: n_merges         = 0
0.00.262.515 I llm_load_print_meta: vocab_only       = 0
0.00.262.515 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.515 I llm_load_print_meta: n_embd           = 2048
0.00.262.515 I llm_load_print_meta: n_layer          = 18
0.00.262.526 I llm_load_print_meta: n_head           = 8
0.00.262.527 I llm_load_print_meta: n_head_kv        = 1
0.00.262.527 I llm_load_print_meta: n_rot            = 256
0.00.262.528 I llm_load_print_meta: n_swa            = 0
0.00.262.528 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.528 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.529 I llm_load_print_meta: n_gqa            = 8
0.00.262.530 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.531 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.532 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.533 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.534 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.534 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.535 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.536 I llm_load_print_meta: n_ff             = 16384
0.00.262.538 I llm_load_print_meta: n_expert         = 0
0.00.262.538 I llm_load_print_meta: n_expert_used    = 0
0.00.262.539 I llm_load_print_meta: causal attn      = 1
0.00.262.539 I llm_load_print_meta: pooling type     = 0
0.00.262.540 I llm_load_print_meta: rope type        = 2
0.00.262.540 I llm_load_print_meta: rope scaling     = linear
0.00.262.542 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.543 I llm_load_print_meta: freq_scale_train = 1
0.00.262.543 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.543 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.547 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.547 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.548 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.548 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.548 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.549 I llm_load_print_meta: model type       = 2B
0.00.262.549 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.262.550 I llm_load_print_meta: model params     = 2.51 B
0.00.262.551 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.262.552 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.552 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.553 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.553 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.553 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.554 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.555 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.555 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.555 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.555 I llm_load_print_meta: max token length = 93
0.00.322.619 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.322.626 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.322.626 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.322.627 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.322.628 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.322.628 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.327.762 I llama_new_context_with_model: n_seq_max     = 1
0.00.327.768 I llama_new_context_with_model: n_ctx         = 4096
0.00.327.769 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.327.769 I llama_new_context_with_model: n_batch       = 2048
0.00.327.770 I llama_new_context_with_model: n_ubatch      = 512
0.00.327.770 I llama_new_context_with_model: flash_attn    = 0
0.00.327.772 I llama_new_context_with_model: freq_base     = 10000.0
0.00.327.773 I llama_new_context_with_model: freq_scale    = 1
0.00.327.774 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.342.061 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.342.075 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.342.165 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.429 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.343.435 I llama_new_context_with_model: graph nodes  = 601
0.00.343.435 I llama_new_context_with_model: graph splits = 1
0.00.343.437 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.845 I main: llama threadpool init, n_threads = 4
0.00.419.860 I 
0.00.419.939 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.419.942 I 
0.00.419.994 I sampler seed: 3964625418
0.00.420.008 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.420.022 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.420.026 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.420.026 I 
 seconde,
I am unable to access the requested file.

I am unable to access the requested file. Please check the file location and try again later

0.01.999.546 I llama_perf_sampler_print:    sampling time =       5.04 ms /    33 runs   (    0.15 ms per token,  6550.22 tokens per second)
0.01.999.548 I llama_perf_context_print:        load time =     419.08 ms
0.01.999.561 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.999.563 I llama_perf_context_print:        eval time =    1560.98 ms /    32 runs   (   48.78 ms per token,    20.50 tokens per second)
0.01.999.564 I llama_perf_context_print:       total time =    1579.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4278 (784a14aa)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40167.25 ms
main:    total time = 40167.25 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.543 I build: 4278 (784a14aa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.754 I main: llama backend init
0.00.000.761 I main: load the model and apply lora adapter, if any
0.00.021.439 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.451 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.458 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.459 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.463 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.463 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.464 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.465 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.465 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.465 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.469 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.470 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.470 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.471 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.472 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.840 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.025 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.914 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.921 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.921 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.922 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.922 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.923 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.924 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.927 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.927 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.930 I llama_model_loader: - type  f32:   37 tensors
0.00.130.931 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.932 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.040 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.379 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.893 I llm_load_vocab: special tokens cache size = 5
0.00.262.796 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.812 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.812 I llm_load_print_meta: arch             = gemma
0.00.262.813 I llm_load_print_meta: vocab type       = SPM
0.00.262.814 I llm_load_print_meta: n_vocab          = 256000
0.00.262.814 I llm_load_print_meta: n_merges         = 0
0.00.262.815 I llm_load_print_meta: vocab_only       = 0
0.00.262.815 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.816 I llm_load_print_meta: n_embd           = 2048
0.00.262.816 I llm_load_print_meta: n_layer          = 18
0.00.262.828 I llm_load_print_meta: n_head           = 8
0.00.262.829 I llm_load_print_meta: n_head_kv        = 1
0.00.262.830 I llm_load_print_meta: n_rot            = 256
0.00.262.830 I llm_load_print_meta: n_swa            = 0
0.00.262.830 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.831 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.832 I llm_load_print_meta: n_gqa            = 8
0.00.262.833 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.834 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.834 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.836 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.836 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.837 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.837 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.838 I llm_load_print_meta: n_ff             = 16384
0.00.262.839 I llm_load_print_meta: n_expert         = 0
0.00.262.839 I llm_load_print_meta: n_expert_used    = 0
0.00.262.839 I llm_load_print_meta: causal attn      = 1
0.00.262.839 I llm_load_print_meta: pooling type     = 0
0.00.262.840 I llm_load_print_meta: rope type        = 2
0.00.262.840 I llm_load_print_meta: rope scaling     = linear
0.00.262.842 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.842 I llm_load_print_meta: freq_scale_train = 1
0.00.262.843 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.843 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.844 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.844 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.844 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.844 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.845 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.845 I llm_load_print_meta: model type       = 2B
0.00.262.846 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.262.847 I llm_load_print_meta: model params     = 2.51 B
0.00.262.847 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.262.848 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.848 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.848 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.849 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.849 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.849 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.850 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.850 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.851 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.851 I llm_load_print_meta: max token length = 93
0.00.321.383 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.326.596 I llama_new_context_with_model: n_seq_max     = 1
0.00.326.603 I llama_new_context_with_model: n_ctx         = 4096
0.00.326.603 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.326.603 I llama_new_context_with_model: n_batch       = 2048
0.00.326.604 I llama_new_context_with_model: n_ubatch      = 512
0.00.326.604 I llama_new_context_with_model: flash_attn    = 0
0.00.326.607 I llama_new_context_with_model: freq_base     = 10000.0
0.00.326.608 I llama_new_context_with_model: freq_scale    = 1
0.00.326.609 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.341.332 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.341.346 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.341.436 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.342.639 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.342.647 I llama_new_context_with_model: graph nodes  = 601
0.00.342.647 I llama_new_context_with_model: graph splits = 1
0.00.342.649 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.340 I main: llama threadpool init, n_threads = 4
0.00.418.355 I 
0.00.418.443 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.418.447 I 
0.00.418.494 I sampler seed: 277908241
0.00.418.504 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.418.509 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.418.510 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.418.511 I 
 seconded. The sentence is grammatically incorrect. Rewrite it correctly.

The sentence is grammatically incorrect. It requires either a change in the word order or

0.01.982.351 I llama_perf_sampler_print:    sampling time =       5.06 ms /    33 runs   (    0.15 ms per token,  6526.90 tokens per second)
0.01.982.354 I llama_perf_context_print:        load time =     417.56 ms
0.01.982.355 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.982.356 I llama_perf_context_print:        eval time =    1544.86 ms /    32 runs   (   48.28 ms per token,    20.71 tokens per second)
0.01.982.357 I llama_perf_context_print:       total time =    1564.02 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.167s
user	10m23.942s
sys	0m6.946s
