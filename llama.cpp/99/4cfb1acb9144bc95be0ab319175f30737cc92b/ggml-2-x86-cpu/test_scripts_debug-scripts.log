+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.681 I build: 3953 (994cfb1a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.886 I main: llama backend init
0.00.002.835 I main: load the model and apply lora adapter, if any
0.00.024.740 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.963 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.064 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.077 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.079 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.085 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.089 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.090 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.091 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.092 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.093 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.101 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.102 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.103 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.104 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.106 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.994 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.929 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.276.301 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.276.311 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.276.312 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.276.313 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.276.314 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.276.315 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.276.316 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.276.320 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.276.320 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.276.321 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.276.322 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.276.324 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.276.332 I llama_model_loader: - type  f32:   37 tensors
0.00.276.336 I llama_model_loader: - type q8_0:  127 tensors
0.00.454.549 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.523.499 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.524.543 I llm_load_vocab: special tokens cache size = 5
0.00.619.442 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.619.518 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.619.519 I llm_load_print_meta: arch             = gemma
0.00.619.519 I llm_load_print_meta: vocab type       = SPM
0.00.619.520 I llm_load_print_meta: n_vocab          = 256000
0.00.619.523 I llm_load_print_meta: n_merges         = 0
0.00.619.523 I llm_load_print_meta: vocab_only       = 0
0.00.619.524 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.524 I llm_load_print_meta: n_embd           = 2048
0.00.619.524 I llm_load_print_meta: n_layer          = 18
0.00.619.591 I llm_load_print_meta: n_head           = 8
0.00.619.599 I llm_load_print_meta: n_head_kv        = 1
0.00.619.599 I llm_load_print_meta: n_rot            = 256
0.00.619.600 I llm_load_print_meta: n_swa            = 0
0.00.619.600 I llm_load_print_meta: n_embd_head_k    = 256
0.00.619.601 I llm_load_print_meta: n_embd_head_v    = 256
0.00.619.605 I llm_load_print_meta: n_gqa            = 8
0.00.619.610 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.619.615 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.619.616 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.619.618 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.619.619 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.619.619 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.619.620 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.619.625 I llm_load_print_meta: n_ff             = 16384
0.00.619.626 I llm_load_print_meta: n_expert         = 0
0.00.619.626 I llm_load_print_meta: n_expert_used    = 0
0.00.619.626 I llm_load_print_meta: causal attn      = 1
0.00.619.627 I llm_load_print_meta: pooling type     = 0
0.00.619.627 I llm_load_print_meta: rope type        = 2
0.00.619.627 I llm_load_print_meta: rope scaling     = linear
0.00.619.629 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.619.629 I llm_load_print_meta: freq_scale_train = 1
0.00.619.630 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.619.634 I llm_load_print_meta: rope_finetuned   = unknown
0.00.619.634 I llm_load_print_meta: ssm_d_conv       = 0
0.00.619.634 I llm_load_print_meta: ssm_d_inner      = 0
0.00.619.634 I llm_load_print_meta: ssm_d_state      = 0
0.00.619.635 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.619.635 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.619.644 I llm_load_print_meta: model type       = 2B
0.00.619.645 I llm_load_print_meta: model ftype      = Q8_0
0.00.619.646 I llm_load_print_meta: model params     = 2.51 B
0.00.619.647 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.619.650 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.619.651 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.619.652 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.619.652 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.619.653 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.619.653 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.619.653 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.619.659 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.619.661 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.619.661 I llm_load_print_meta: max token length = 93
0.00.619.833 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.720.932 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.720.945 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.720.945 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.720.946 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.720.947 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.720.947 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.726.730 I llama_new_context_with_model: n_ctx      = 8192
0.00.726.737 I llama_new_context_with_model: n_batch    = 2048
0.00.726.737 I llama_new_context_with_model: n_ubatch   = 512
0.00.726.738 I llama_new_context_with_model: flash_attn = 0
0.00.726.741 I llama_new_context_with_model: freq_base  = 10000.0
0.00.726.742 I llama_new_context_with_model: freq_scale = 1
0.00.755.949 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.755.993 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.756.114 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.757.528 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.757.533 I llama_new_context_with_model: graph nodes  = 601
0.00.757.533 I llama_new_context_with_model: graph splits = 1
0.00.757.550 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.368.733 I main: llama threadpool init, n_threads = 4
0.01.368.744 I 
0.01.368.850 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.368.854 I 
0.01.369.033 I sampler seed: 2915632271
0.01.369.045 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.369.052 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.369.053 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.369.053 I 
 increasities, and provide a solution that respects human rights.

I am unable to answer this question as it involves sensitive and controversial topics that may promote harmful or

0.14.768.503 I llama_perf_sampler_print:    sampling time =      49.93 ms /    33 runs   (    1.51 ms per token,   660.95 tokens per second)
0.14.768.506 I llama_perf_context_print:        load time =    1365.79 ms
0.14.768.508 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.768.509 I llama_perf_context_print:        eval time =   13304.84 ms /    32 runs   (  415.78 ms per token,     2.41 tokens per second)
0.14.768.510 I llama_perf_context_print:       total time =   13399.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.667 I build: 3953 (994cfb1a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.907 I main: llama backend init
0.00.002.847 I main: load the model and apply lora adapter, if any
0.00.025.345 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.456 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.475 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.480 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.486 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.488 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.490 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.492 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.494 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.496 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.506 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.511 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.513 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.514 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.516 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.147 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.817 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.276.302 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.276.312 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.276.313 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.276.314 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.276.315 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.276.317 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.276.318 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.276.322 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.276.323 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.276.324 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.276.325 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.276.326 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.276.335 I llama_model_loader: - type  f32:   37 tensors
0.00.276.339 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.640 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.519.206 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.520.369 I llm_load_vocab: special tokens cache size = 5
0.00.619.662 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.619.740 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.619.740 I llm_load_print_meta: arch             = gemma
0.00.619.741 I llm_load_print_meta: vocab type       = SPM
0.00.619.742 I llm_load_print_meta: n_vocab          = 256000
0.00.619.745 I llm_load_print_meta: n_merges         = 0
0.00.619.745 I llm_load_print_meta: vocab_only       = 0
0.00.619.746 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.746 I llm_load_print_meta: n_embd           = 2048
0.00.619.747 I llm_load_print_meta: n_layer          = 18
0.00.619.815 I llm_load_print_meta: n_head           = 8
0.00.619.822 I llm_load_print_meta: n_head_kv        = 1
0.00.619.822 I llm_load_print_meta: n_rot            = 256
0.00.619.823 I llm_load_print_meta: n_swa            = 0
0.00.619.823 I llm_load_print_meta: n_embd_head_k    = 256
0.00.619.823 I llm_load_print_meta: n_embd_head_v    = 256
0.00.619.828 I llm_load_print_meta: n_gqa            = 8
0.00.619.833 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.619.837 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.619.838 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.619.839 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.619.840 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.619.840 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.619.841 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.619.845 I llm_load_print_meta: n_ff             = 16384
0.00.619.846 I llm_load_print_meta: n_expert         = 0
0.00.619.846 I llm_load_print_meta: n_expert_used    = 0
0.00.619.847 I llm_load_print_meta: causal attn      = 1
0.00.619.847 I llm_load_print_meta: pooling type     = 0
0.00.619.847 I llm_load_print_meta: rope type        = 2
0.00.619.848 I llm_load_print_meta: rope scaling     = linear
0.00.619.849 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.619.850 I llm_load_print_meta: freq_scale_train = 1
0.00.619.850 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.619.850 I llm_load_print_meta: rope_finetuned   = unknown
0.00.619.851 I llm_load_print_meta: ssm_d_conv       = 0
0.00.619.851 I llm_load_print_meta: ssm_d_inner      = 0
0.00.619.851 I llm_load_print_meta: ssm_d_state      = 0
0.00.619.851 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.619.852 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.619.852 I llm_load_print_meta: model type       = 2B
0.00.619.853 I llm_load_print_meta: model ftype      = Q8_0
0.00.619.854 I llm_load_print_meta: model params     = 2.51 B
0.00.619.854 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.619.855 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.619.856 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.619.856 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.619.856 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.619.857 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.619.857 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.619.857 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.619.863 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.619.865 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.619.865 I llm_load_print_meta: max token length = 93
0.00.620.058 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.714.003 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.720.244 I llama_new_context_with_model: n_ctx      = 8192
0.00.720.250 I llama_new_context_with_model: n_batch    = 2048
0.00.720.250 I llama_new_context_with_model: n_ubatch   = 512
0.00.720.251 I llama_new_context_with_model: flash_attn = 0
0.00.720.255 I llama_new_context_with_model: freq_base  = 10000.0
0.00.720.255 I llama_new_context_with_model: freq_scale = 1
0.00.751.333 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.751.380 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.751.508 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.752.918 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.752.923 I llama_new_context_with_model: graph nodes  = 601
0.00.752.923 I llama_new_context_with_model: graph splits = 1
0.00.752.941 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.365.402 I main: llama threadpool init, n_threads = 4
0.01.365.415 I 
0.01.365.535 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.365.539 I 
0.01.365.727 I sampler seed: 609825408
0.01.365.739 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.365.747 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.365.747 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.365.748 I 
 seconded and incomplete statements.

**Assistant**

I understand. I will attempt to analyze and complete the statements as best as I can.

**Instructions

0.14.927.837 I llama_perf_sampler_print:    sampling time =      49.34 ms /    33 runs   (    1.50 ms per token,   668.86 tokens per second)
0.14.927.840 I llama_perf_context_print:        load time =    1362.46 ms
0.14.927.854 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.927.856 I llama_perf_context_print:        eval time =   13467.45 ms /    32 runs   (  420.86 ms per token,     2.38 tokens per second)
0.14.927.858 I llama_perf_context_print:       total time =   13562.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.680 I build: 3953 (994cfb1a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.878 I main: llama backend init
0.00.002.816 I main: load the model and apply lora adapter, if any
0.00.025.189 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.400 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.490 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.500 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.502 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.506 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.507 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.508 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.509 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.511 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.512 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.519 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.522 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.523 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.524 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.526 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.157.632 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.259.429 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.277.838 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.277.848 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.277.849 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.277.850 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.277.851 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.277.852 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.277.854 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.277.857 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.277.858 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.277.859 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.277.860 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.277.862 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.277.871 I llama_model_loader: - type  f32:   37 tensors
0.00.277.875 I llama_model_loader: - type q8_0:  127 tensors
0.00.462.124 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.529.466 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.530.500 I llm_load_vocab: special tokens cache size = 5
0.00.644.378 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.644.448 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.644.449 I llm_load_print_meta: arch             = gemma
0.00.644.450 I llm_load_print_meta: vocab type       = SPM
0.00.644.451 I llm_load_print_meta: n_vocab          = 256000
0.00.644.453 I llm_load_print_meta: n_merges         = 0
0.00.644.454 I llm_load_print_meta: vocab_only       = 0
0.00.644.454 I llm_load_print_meta: n_ctx_train      = 8192
0.00.644.455 I llm_load_print_meta: n_embd           = 2048
0.00.644.455 I llm_load_print_meta: n_layer          = 18
0.00.644.519 I llm_load_print_meta: n_head           = 8
0.00.644.525 I llm_load_print_meta: n_head_kv        = 1
0.00.644.526 I llm_load_print_meta: n_rot            = 256
0.00.644.526 I llm_load_print_meta: n_swa            = 0
0.00.644.526 I llm_load_print_meta: n_embd_head_k    = 256
0.00.644.527 I llm_load_print_meta: n_embd_head_v    = 256
0.00.644.532 I llm_load_print_meta: n_gqa            = 8
0.00.644.536 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.644.553 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.644.555 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.644.557 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.644.557 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.644.558 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.644.558 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.644.563 I llm_load_print_meta: n_ff             = 16384
0.00.644.564 I llm_load_print_meta: n_expert         = 0
0.00.644.564 I llm_load_print_meta: n_expert_used    = 0
0.00.644.565 I llm_load_print_meta: causal attn      = 1
0.00.644.565 I llm_load_print_meta: pooling type     = 0
0.00.644.566 I llm_load_print_meta: rope type        = 2
0.00.644.566 I llm_load_print_meta: rope scaling     = linear
0.00.644.582 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.644.583 I llm_load_print_meta: freq_scale_train = 1
0.00.644.583 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.644.584 I llm_load_print_meta: rope_finetuned   = unknown
0.00.644.584 I llm_load_print_meta: ssm_d_conv       = 0
0.00.644.585 I llm_load_print_meta: ssm_d_inner      = 0
0.00.644.585 I llm_load_print_meta: ssm_d_state      = 0
0.00.644.586 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.644.586 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.644.587 I llm_load_print_meta: model type       = 2B
0.00.644.588 I llm_load_print_meta: model ftype      = Q8_0
0.00.644.589 I llm_load_print_meta: model params     = 2.51 B
0.00.644.589 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.644.590 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.644.591 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.644.592 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.644.601 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.644.602 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.644.603 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.644.603 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.644.609 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.644.610 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.644.611 I llm_load_print_meta: max token length = 93
0.00.644.788 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.722.178 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.722.187 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.722.189 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.722.189 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.722.190 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.722.191 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.727.818 I llama_new_context_with_model: n_ctx      = 8192
0.00.727.825 I llama_new_context_with_model: n_batch    = 2048
0.00.727.825 I llama_new_context_with_model: n_ubatch   = 512
0.00.727.826 I llama_new_context_with_model: flash_attn = 0
0.00.727.828 I llama_new_context_with_model: freq_base  = 10000.0
0.00.727.829 I llama_new_context_with_model: freq_scale = 1
0.00.757.086 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.757.127 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.757.246 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.758.653 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.758.658 I llama_new_context_with_model: graph nodes  = 601
0.00.758.659 I llama_new_context_with_model: graph splits = 1
0.00.758.675 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.372.941 I main: llama threadpool init, n_threads = 4
0.01.372.954 I 
0.01.373.066 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.373.067 I 
0.01.373.249 I sampler seed: 1466870985
0.01.373.262 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.373.269 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.373.270 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.373.270 I 
 increably. [end of text]


0.03.058.954 I llama_perf_sampler_print:    sampling time =       6.32 ms /     5 runs   (    1.26 ms per token,   791.64 tokens per second)
0.03.058.968 I llama_perf_context_print:        load time =    1370.04 ms
0.03.058.970 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.058.972 I llama_perf_context_print:        eval time =    1672.30 ms /     4 runs   (  418.08 ms per token,     2.39 tokens per second)
0.03.058.973 I llama_perf_context_print:       total time =    1686.02 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.703 I build: 3953 (994cfb1a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.906 I main: llama backend init
0.00.002.849 I main: load the model and apply lora adapter, if any
0.00.025.049 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.269 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.363 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.375 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.377 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.382 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.386 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.387 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.388 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.389 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.389 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.397 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.398 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.399 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.400 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.401 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.308 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.258.004 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.276.481 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.276.492 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.276.493 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.276.494 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.276.495 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.276.497 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.276.498 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.276.501 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.276.502 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.276.503 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.276.504 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.276.505 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.276.514 I llama_model_loader: - type  f32:   37 tensors
0.00.276.518 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.394 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.725 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.662 I llm_load_vocab: special tokens cache size = 5
0.00.610.539 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.610.611 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.610.612 I llm_load_print_meta: arch             = gemma
0.00.610.613 I llm_load_print_meta: vocab type       = SPM
0.00.610.613 I llm_load_print_meta: n_vocab          = 256000
0.00.610.616 I llm_load_print_meta: n_merges         = 0
0.00.610.616 I llm_load_print_meta: vocab_only       = 0
0.00.610.617 I llm_load_print_meta: n_ctx_train      = 8192
0.00.610.617 I llm_load_print_meta: n_embd           = 2048
0.00.610.618 I llm_load_print_meta: n_layer          = 18
0.00.610.681 I llm_load_print_meta: n_head           = 8
0.00.610.688 I llm_load_print_meta: n_head_kv        = 1
0.00.610.688 I llm_load_print_meta: n_rot            = 256
0.00.610.689 I llm_load_print_meta: n_swa            = 0
0.00.610.689 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.689 I llm_load_print_meta: n_embd_head_v    = 256
0.00.610.694 I llm_load_print_meta: n_gqa            = 8
0.00.610.698 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.703 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.704 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.728 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.729 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.610.730 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.610.730 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.610.736 I llm_load_print_meta: n_ff             = 16384
0.00.610.736 I llm_load_print_meta: n_expert         = 0
0.00.610.737 I llm_load_print_meta: n_expert_used    = 0
0.00.610.743 I llm_load_print_meta: causal attn      = 1
0.00.610.743 I llm_load_print_meta: pooling type     = 0
0.00.610.744 I llm_load_print_meta: rope type        = 2
0.00.610.744 I llm_load_print_meta: rope scaling     = linear
0.00.610.746 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.610.746 I llm_load_print_meta: freq_scale_train = 1
0.00.610.747 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.610.747 I llm_load_print_meta: rope_finetuned   = unknown
0.00.610.747 I llm_load_print_meta: ssm_d_conv       = 0
0.00.610.748 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.748 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.748 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.748 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.749 I llm_load_print_meta: model type       = 2B
0.00.610.750 I llm_load_print_meta: model ftype      = Q8_0
0.00.610.751 I llm_load_print_meta: model params     = 2.51 B
0.00.610.751 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.610.761 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.770 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.770 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.771 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.771 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.774 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.775 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.781 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.782 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.783 I llm_load_print_meta: max token length = 93
0.00.610.953 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.682.656 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.682.667 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.688.360 I llama_new_context_with_model: n_ctx      = 8192
0.00.688.368 I llama_new_context_with_model: n_batch    = 2048
0.00.688.369 I llama_new_context_with_model: n_ubatch   = 512
0.00.688.369 I llama_new_context_with_model: flash_attn = 0
0.00.688.372 I llama_new_context_with_model: freq_base  = 10000.0
0.00.688.373 I llama_new_context_with_model: freq_scale = 1
0.00.719.037 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.719.083 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.719.196 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.720.558 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.720.563 I llama_new_context_with_model: graph nodes  = 601
0.00.720.563 I llama_new_context_with_model: graph splits = 1
0.00.720.578 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.333.977 I main: llama threadpool init, n_threads = 4
0.01.333.991 I 
0.01.334.104 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.334.107 I 
0.01.334.284 I sampler seed: 2674792958
0.01.334.295 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.334.302 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.334.304 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.334.304 I 
 increably with an iridescent gleam.
- Opal
- A radiant gem that embodies the essence of mystery and allure.
- A symbol of transformation, rebirth

0.14.767.984 I llama_perf_sampler_print:    sampling time =      49.33 ms /    33 runs   (    1.49 ms per token,   668.91 tokens per second)
0.14.767.987 I llama_perf_context_print:        load time =    1331.02 ms
0.14.767.989 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.767.990 I llama_perf_context_print:        eval time =   13337.92 ms /    32 runs   (  416.81 ms per token,     2.40 tokens per second)
0.14.767.991 I llama_perf_context_print:       total time =   13434.02 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m57.352s
user	3m1.016s
sys	0m9.707s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3953 (994cfb1a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199897.80 ms
main:    total time = 199897.80 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 3953 (994cfb1a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.002.814 I main: load the model and apply lora adapter, if any
0.00.024.672 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.890 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.993 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.006 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.008 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.014 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.019 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.020 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.022 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.025 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.026 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.035 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.041 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.042 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.045 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.047 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.809 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.742 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.276.276 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.276.287 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.276.289 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.276.290 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.276.291 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.276.292 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.276.293 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.276.297 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.276.298 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.276.299 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.276.300 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.276.301 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.276.310 I llama_model_loader: - type  f32:   37 tensors
0.00.276.314 I llama_model_loader: - type q4_K:  108 tensors
0.00.276.315 I llama_model_loader: - type q6_K:   19 tensors
0.00.468.612 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.534.557 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.535.557 I llm_load_vocab: special tokens cache size = 5
0.00.630.433 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.630.506 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.630.507 I llm_load_print_meta: arch             = gemma
0.00.630.508 I llm_load_print_meta: vocab type       = SPM
0.00.630.509 I llm_load_print_meta: n_vocab          = 256000
0.00.630.511 I llm_load_print_meta: n_merges         = 0
0.00.630.512 I llm_load_print_meta: vocab_only       = 0
0.00.630.512 I llm_load_print_meta: n_ctx_train      = 8192
0.00.630.512 I llm_load_print_meta: n_embd           = 2048
0.00.630.513 I llm_load_print_meta: n_layer          = 18
0.00.630.580 I llm_load_print_meta: n_head           = 8
0.00.630.588 I llm_load_print_meta: n_head_kv        = 1
0.00.630.588 I llm_load_print_meta: n_rot            = 256
0.00.630.589 I llm_load_print_meta: n_swa            = 0
0.00.630.589 I llm_load_print_meta: n_embd_head_k    = 256
0.00.630.589 I llm_load_print_meta: n_embd_head_v    = 256
0.00.630.594 I llm_load_print_meta: n_gqa            = 8
0.00.630.598 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.630.603 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.630.605 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.630.606 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.630.607 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.630.607 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.630.607 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.630.612 I llm_load_print_meta: n_ff             = 16384
0.00.630.613 I llm_load_print_meta: n_expert         = 0
0.00.630.613 I llm_load_print_meta: n_expert_used    = 0
0.00.630.613 I llm_load_print_meta: causal attn      = 1
0.00.630.614 I llm_load_print_meta: pooling type     = 0
0.00.630.614 I llm_load_print_meta: rope type        = 2
0.00.630.615 I llm_load_print_meta: rope scaling     = linear
0.00.630.616 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.630.617 I llm_load_print_meta: freq_scale_train = 1
0.00.630.617 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.630.617 I llm_load_print_meta: rope_finetuned   = unknown
0.00.630.619 I llm_load_print_meta: ssm_d_conv       = 0
0.00.630.619 I llm_load_print_meta: ssm_d_inner      = 0
0.00.630.619 I llm_load_print_meta: ssm_d_state      = 0
0.00.630.620 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.630.620 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.630.621 I llm_load_print_meta: model type       = 2B
0.00.630.622 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.630.623 I llm_load_print_meta: model params     = 2.51 B
0.00.630.623 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.630.624 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.630.625 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.630.626 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.630.649 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.630.650 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.630.651 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.630.652 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.630.663 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.630.665 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.630.667 I llm_load_print_meta: max token length = 93
0.00.630.867 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.690.951 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.690.962 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.690.963 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.690.963 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.690.964 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.690.964 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.696.694 I llama_new_context_with_model: n_ctx      = 8192
0.00.696.704 I llama_new_context_with_model: n_batch    = 2048
0.00.696.704 I llama_new_context_with_model: n_ubatch   = 512
0.00.696.704 I llama_new_context_with_model: flash_attn = 0
0.00.696.707 I llama_new_context_with_model: freq_base  = 10000.0
0.00.696.707 I llama_new_context_with_model: freq_scale = 1
0.00.727.433 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.727.479 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.727.596 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.729.070 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.729.072 I llama_new_context_with_model: graph nodes  = 601
0.00.729.073 I llama_new_context_with_model: graph splits = 1
0.00.729.088 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.309.537 I main: llama threadpool init, n_threads = 4
0.01.309.550 I 
0.01.309.667 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.309.672 I 
0.01.309.861 I sampler seed: 3357905637
0.01.309.873 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.309.880 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.309.884 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.309.884 I 
 seconded.

**Assistant**

I understand. I will proceed to assist you with your request. Please provide me with the necessary information and context so I

0.12.291.951 I llama_perf_sampler_print:    sampling time =      49.05 ms /    33 runs   (    1.49 ms per token,   672.71 tokens per second)
0.12.291.955 I llama_perf_context_print:        load time =    1306.63 ms
0.12.291.956 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.291.958 I llama_perf_context_print:        eval time =   10888.59 ms /    32 runs   (  340.27 ms per token,     2.94 tokens per second)
0.12.291.983 I llama_perf_context_print:       total time =   10982.43 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3953 (994cfb1a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199812.27 ms
main:    total time = 199812.27 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 3953 (994cfb1a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.002.772 I main: load the model and apply lora adapter, if any
0.00.024.877 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.980 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.995 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.997 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.002 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.003 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.004 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.005 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.006 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.008 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.015 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.017 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.018 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.019 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.020 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.644 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.123 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.595 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.606 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.607 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.609 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.610 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.611 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.612 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.616 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.617 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.627 I llama_model_loader: - type  f32:   37 tensors
0.00.275.631 I llama_model_loader: - type q4_K:  108 tensors
0.00.275.632 I llama_model_loader: - type q6_K:   19 tensors
0.00.454.605 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.523.043 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.524.062 I llm_load_vocab: special tokens cache size = 5
0.00.619.606 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.619.678 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.619.679 I llm_load_print_meta: arch             = gemma
0.00.619.680 I llm_load_print_meta: vocab type       = SPM
0.00.619.681 I llm_load_print_meta: n_vocab          = 256000
0.00.619.683 I llm_load_print_meta: n_merges         = 0
0.00.619.684 I llm_load_print_meta: vocab_only       = 0
0.00.619.684 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.684 I llm_load_print_meta: n_embd           = 2048
0.00.619.685 I llm_load_print_meta: n_layer          = 18
0.00.619.748 I llm_load_print_meta: n_head           = 8
0.00.619.754 I llm_load_print_meta: n_head_kv        = 1
0.00.619.755 I llm_load_print_meta: n_rot            = 256
0.00.619.755 I llm_load_print_meta: n_swa            = 0
0.00.619.755 I llm_load_print_meta: n_embd_head_k    = 256
0.00.619.756 I llm_load_print_meta: n_embd_head_v    = 256
0.00.619.760 I llm_load_print_meta: n_gqa            = 8
0.00.619.765 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.619.769 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.619.771 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.619.772 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.619.772 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.619.773 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.619.773 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.619.795 I llm_load_print_meta: n_ff             = 16384
0.00.619.796 I llm_load_print_meta: n_expert         = 0
0.00.619.797 I llm_load_print_meta: n_expert_used    = 0
0.00.619.797 I llm_load_print_meta: causal attn      = 1
0.00.619.797 I llm_load_print_meta: pooling type     = 0
0.00.619.798 I llm_load_print_meta: rope type        = 2
0.00.619.798 I llm_load_print_meta: rope scaling     = linear
0.00.619.800 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.619.801 I llm_load_print_meta: freq_scale_train = 1
0.00.619.801 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.619.802 I llm_load_print_meta: rope_finetuned   = unknown
0.00.619.802 I llm_load_print_meta: ssm_d_conv       = 0
0.00.619.802 I llm_load_print_meta: ssm_d_inner      = 0
0.00.619.802 I llm_load_print_meta: ssm_d_state      = 0
0.00.619.803 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.619.803 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.619.804 I llm_load_print_meta: model type       = 2B
0.00.619.805 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.619.805 I llm_load_print_meta: model params     = 2.51 B
0.00.619.806 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.619.807 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.619.807 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.619.808 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.619.808 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.619.808 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.619.809 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.619.809 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.619.815 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.619.817 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.619.831 I llm_load_print_meta: max token length = 93
0.00.620.010 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.677.406 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.683.143 I llama_new_context_with_model: n_ctx      = 8192
0.00.683.150 I llama_new_context_with_model: n_batch    = 2048
0.00.683.151 I llama_new_context_with_model: n_ubatch   = 512
0.00.683.152 I llama_new_context_with_model: flash_attn = 0
0.00.683.155 I llama_new_context_with_model: freq_base  = 10000.0
0.00.683.157 I llama_new_context_with_model: freq_scale = 1
0.00.714.531 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.714.574 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.714.687 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.716.067 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.716.072 I llama_new_context_with_model: graph nodes  = 601
0.00.716.073 I llama_new_context_with_model: graph splits = 1
0.00.716.088 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.296.349 I main: llama threadpool init, n_threads = 4
0.01.296.362 I 
0.01.296.471 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.296.475 I 
0.01.296.657 I sampler seed: 1968124214
0.01.296.669 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.296.677 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.296.677 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.296.677 I 
 increasively. [end of text]


0.02.669.772 I llama_perf_sampler_print:    sampling time =       6.22 ms /     5 runs   (    1.24 ms per token,   803.86 tokens per second)
0.02.669.775 I llama_perf_context_print:        load time =    1293.48 ms
0.02.669.776 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.669.778 I llama_perf_context_print:        eval time =    1359.82 ms /     4 runs   (  339.96 ms per token,     2.94 tokens per second)
0.02.669.778 I llama_perf_context_print:       total time =    1373.43 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m57.670s
user	49m36.635s
sys	0m6.457s
