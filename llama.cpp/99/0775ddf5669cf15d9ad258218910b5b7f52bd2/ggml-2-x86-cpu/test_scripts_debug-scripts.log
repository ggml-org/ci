+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.696 I build: 4078 (990775dd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.907 I main: llama backend init
0.00.001.938 I main: load the model and apply lora adapter, if any
0.00.027.529 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.027.543 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.027.642 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.027.655 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.027.657 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.027.663 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.027.667 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.027.668 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.027.669 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.027.670 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.027.671 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.027.679 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.027.681 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.027.682 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.027.683 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.027.686 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.584 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.828 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.448 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.459 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.460 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.461 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.462 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.464 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.465 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.491 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.493 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.494 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.496 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.275.497 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.505 I llama_model_loader: - type  f32:   37 tensors
0.00.275.507 I llama_model_loader: - type q8_0:  127 tensors
0.00.471.759 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.542.526 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.543.697 I llm_load_vocab: special tokens cache size = 5
0.00.640.306 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.640.383 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.640.385 I llm_load_print_meta: arch             = gemma
0.00.640.385 I llm_load_print_meta: vocab type       = SPM
0.00.640.386 I llm_load_print_meta: n_vocab          = 256000
0.00.640.389 I llm_load_print_meta: n_merges         = 0
0.00.640.389 I llm_load_print_meta: vocab_only       = 0
0.00.640.390 I llm_load_print_meta: n_ctx_train      = 8192
0.00.640.391 I llm_load_print_meta: n_embd           = 2048
0.00.640.392 I llm_load_print_meta: n_layer          = 18
0.00.640.458 I llm_load_print_meta: n_head           = 8
0.00.640.469 I llm_load_print_meta: n_head_kv        = 1
0.00.640.470 I llm_load_print_meta: n_rot            = 256
0.00.640.470 I llm_load_print_meta: n_swa            = 0
0.00.640.471 I llm_load_print_meta: n_embd_head_k    = 256
0.00.640.471 I llm_load_print_meta: n_embd_head_v    = 256
0.00.640.476 I llm_load_print_meta: n_gqa            = 8
0.00.640.480 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.640.486 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.640.489 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.640.491 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.640.491 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.640.492 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.640.492 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.640.497 I llm_load_print_meta: n_ff             = 16384
0.00.640.498 I llm_load_print_meta: n_expert         = 0
0.00.640.498 I llm_load_print_meta: n_expert_used    = 0
0.00.640.499 I llm_load_print_meta: causal attn      = 1
0.00.640.499 I llm_load_print_meta: pooling type     = 0
0.00.640.500 I llm_load_print_meta: rope type        = 2
0.00.640.501 I llm_load_print_meta: rope scaling     = linear
0.00.640.502 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.640.503 I llm_load_print_meta: freq_scale_train = 1
0.00.640.504 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.640.504 I llm_load_print_meta: rope_finetuned   = unknown
0.00.640.505 I llm_load_print_meta: ssm_d_conv       = 0
0.00.640.505 I llm_load_print_meta: ssm_d_inner      = 0
0.00.640.506 I llm_load_print_meta: ssm_d_state      = 0
0.00.640.506 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.640.507 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.640.508 I llm_load_print_meta: model type       = 2B
0.00.640.511 I llm_load_print_meta: model ftype      = Q8_0
0.00.640.512 I llm_load_print_meta: model params     = 2.51 B
0.00.640.521 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.640.522 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.640.525 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.640.525 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.640.526 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.640.526 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.640.527 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.640.527 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.640.533 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.640.534 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.640.535 I llm_load_print_meta: max token length = 93
0.00.741.961 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.741.973 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.741.974 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.741.974 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.741.975 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.741.976 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.748.086 I llama_new_context_with_model: n_seq_max     = 1
0.00.748.096 I llama_new_context_with_model: n_ctx         = 4096
0.00.748.096 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.748.097 I llama_new_context_with_model: n_batch       = 2048
0.00.748.097 I llama_new_context_with_model: n_ubatch      = 512
0.00.748.098 I llama_new_context_with_model: flash_attn    = 0
0.00.748.103 I llama_new_context_with_model: freq_base     = 10000.0
0.00.748.104 I llama_new_context_with_model: freq_scale    = 1
0.00.748.105 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.766.504 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.766.545 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.766.674 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.769.281 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.769.285 I llama_new_context_with_model: graph nodes  = 601
0.00.769.286 I llama_new_context_with_model: graph splits = 1
0.00.769.312 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.376.173 I main: llama threadpool init, n_threads = 4
0.01.376.189 I 
0.01.376.296 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.376.300 I 
0.01.376.537 I sampler seed: 3997023280
0.01.376.566 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.376.578 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.376.579 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.376.579 I 
 increasities and injustices, leading to calls for restorative justice.

**Restorative Justice:**

Restorative justice focuses on repairing harm and promoting reconciliation within a community

0.14.895.198 I llama_perf_sampler_print:    sampling time =      49.21 ms /    33 runs   (    1.49 ms per token,   670.58 tokens per second)
0.14.895.201 I llama_perf_context_print:        load time =    1374.12 ms
0.14.895.203 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.895.219 I llama_perf_context_print:        eval time =   13428.44 ms /    32 runs   (  419.64 ms per token,     2.38 tokens per second)
0.14.895.220 I llama_perf_context_print:       total time =   13519.03 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.671 I build: 4078 (990775dd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.879 I main: llama backend init
0.00.001.923 I main: load the model and apply lora adapter, if any
0.00.024.700 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.809 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.825 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.829 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.836 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.837 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.839 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.840 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.841 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.842 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.849 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.851 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.864 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.869 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.870 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.677 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.762 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.387 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.398 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.399 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.400 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.401 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.402 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.403 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.407 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.408 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.410 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.273.411 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.273.412 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.273.421 I llama_model_loader: - type  f32:   37 tensors
0.00.273.423 I llama_model_loader: - type q8_0:  127 tensors
0.00.466.278 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.536.943 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.537.986 I llm_load_vocab: special tokens cache size = 5
0.00.636.762 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.636.839 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.636.840 I llm_load_print_meta: arch             = gemma
0.00.636.841 I llm_load_print_meta: vocab type       = SPM
0.00.636.842 I llm_load_print_meta: n_vocab          = 256000
0.00.636.844 I llm_load_print_meta: n_merges         = 0
0.00.636.845 I llm_load_print_meta: vocab_only       = 0
0.00.636.845 I llm_load_print_meta: n_ctx_train      = 8192
0.00.636.845 I llm_load_print_meta: n_embd           = 2048
0.00.636.846 I llm_load_print_meta: n_layer          = 18
0.00.636.911 I llm_load_print_meta: n_head           = 8
0.00.636.918 I llm_load_print_meta: n_head_kv        = 1
0.00.636.920 I llm_load_print_meta: n_rot            = 256
0.00.636.920 I llm_load_print_meta: n_swa            = 0
0.00.636.921 I llm_load_print_meta: n_embd_head_k    = 256
0.00.636.921 I llm_load_print_meta: n_embd_head_v    = 256
0.00.636.927 I llm_load_print_meta: n_gqa            = 8
0.00.636.943 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.636.948 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.636.950 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.636.952 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.636.952 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.636.953 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.636.953 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.636.958 I llm_load_print_meta: n_ff             = 16384
0.00.636.959 I llm_load_print_meta: n_expert         = 0
0.00.636.960 I llm_load_print_meta: n_expert_used    = 0
0.00.636.960 I llm_load_print_meta: causal attn      = 1
0.00.636.961 I llm_load_print_meta: pooling type     = 0
0.00.636.961 I llm_load_print_meta: rope type        = 2
0.00.636.962 I llm_load_print_meta: rope scaling     = linear
0.00.636.964 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.636.965 I llm_load_print_meta: freq_scale_train = 1
0.00.636.966 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.636.966 I llm_load_print_meta: rope_finetuned   = unknown
0.00.636.966 I llm_load_print_meta: ssm_d_conv       = 0
0.00.636.967 I llm_load_print_meta: ssm_d_inner      = 0
0.00.636.967 I llm_load_print_meta: ssm_d_state      = 0
0.00.636.967 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.636.968 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.636.971 I llm_load_print_meta: model type       = 2B
0.00.636.973 I llm_load_print_meta: model ftype      = Q8_0
0.00.636.974 I llm_load_print_meta: model params     = 2.51 B
0.00.636.988 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.637.004 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.637.005 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.637.006 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.637.007 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.637.008 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.637.008 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.637.009 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.637.016 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.637.018 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.637.018 I llm_load_print_meta: max token length = 93
0.00.732.093 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.738.163 I llama_new_context_with_model: n_seq_max     = 1
0.00.738.172 I llama_new_context_with_model: n_ctx         = 4096
0.00.738.173 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.738.173 I llama_new_context_with_model: n_batch       = 2048
0.00.738.173 I llama_new_context_with_model: n_ubatch      = 512
0.00.738.174 I llama_new_context_with_model: flash_attn    = 0
0.00.738.178 I llama_new_context_with_model: freq_base     = 10000.0
0.00.738.179 I llama_new_context_with_model: freq_scale    = 1
0.00.738.180 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.756.891 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.756.935 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.757.070 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.759.640 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.759.644 I llama_new_context_with_model: graph nodes  = 601
0.00.759.645 I llama_new_context_with_model: graph splits = 1
0.00.759.671 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.367.728 I main: llama threadpool init, n_threads = 4
0.01.367.745 I 
0.01.367.854 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.367.858 I 
0.01.368.103 I sampler seed: 4021148275
0.01.368.116 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.368.122 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.368.125 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.368.126 I 
 increably, and then fell silent.

The stillness was deafening. The silence hung heavy in the air, pregnant with unspoken words and unspoken desires.

What

0.14.975.004 I llama_perf_sampler_print:    sampling time =      49.40 ms /    33 runs   (    1.50 ms per token,   668.08 tokens per second)
0.14.975.007 I llama_perf_context_print:        load time =    1365.69 ms
0.14.975.023 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.975.025 I llama_perf_context_print:        eval time =   13516.03 ms /    32 runs   (  422.38 ms per token,     2.37 tokens per second)
0.14.975.026 I llama_perf_context_print:       total time =   13607.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 4078 (990775dd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.001.881 I main: load the model and apply lora adapter, if any
0.00.024.106 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.120 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.218 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.231 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.233 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.239 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.241 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.242 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.243 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.244 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.245 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.255 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.256 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.257 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.258 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.259 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.125 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.558 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.242 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.256 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.257 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.258 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.260 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.261 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.263 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.266 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.267 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.269 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.270 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.272.271 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.280 I llama_model_loader: - type  f32:   37 tensors
0.00.272.283 I llama_model_loader: - type q8_0:  127 tensors
0.00.484.052 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.554.364 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.555.379 I llm_load_vocab: special tokens cache size = 5
0.00.656.318 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.656.392 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.656.393 I llm_load_print_meta: arch             = gemma
0.00.656.394 I llm_load_print_meta: vocab type       = SPM
0.00.656.395 I llm_load_print_meta: n_vocab          = 256000
0.00.656.398 I llm_load_print_meta: n_merges         = 0
0.00.656.398 I llm_load_print_meta: vocab_only       = 0
0.00.656.399 I llm_load_print_meta: n_ctx_train      = 8192
0.00.656.399 I llm_load_print_meta: n_embd           = 2048
0.00.656.399 I llm_load_print_meta: n_layer          = 18
0.00.656.462 I llm_load_print_meta: n_head           = 8
0.00.656.470 I llm_load_print_meta: n_head_kv        = 1
0.00.656.471 I llm_load_print_meta: n_rot            = 256
0.00.656.471 I llm_load_print_meta: n_swa            = 0
0.00.656.494 I llm_load_print_meta: n_embd_head_k    = 256
0.00.656.495 I llm_load_print_meta: n_embd_head_v    = 256
0.00.656.500 I llm_load_print_meta: n_gqa            = 8
0.00.656.514 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.656.520 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.656.521 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.656.522 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.656.523 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.656.523 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.656.531 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.656.537 I llm_load_print_meta: n_ff             = 16384
0.00.656.538 I llm_load_print_meta: n_expert         = 0
0.00.656.538 I llm_load_print_meta: n_expert_used    = 0
0.00.656.539 I llm_load_print_meta: causal attn      = 1
0.00.656.540 I llm_load_print_meta: pooling type     = 0
0.00.656.548 I llm_load_print_meta: rope type        = 2
0.00.656.549 I llm_load_print_meta: rope scaling     = linear
0.00.656.551 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.656.552 I llm_load_print_meta: freq_scale_train = 1
0.00.656.553 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.656.553 I llm_load_print_meta: rope_finetuned   = unknown
0.00.656.562 I llm_load_print_meta: ssm_d_conv       = 0
0.00.656.562 I llm_load_print_meta: ssm_d_inner      = 0
0.00.656.563 I llm_load_print_meta: ssm_d_state      = 0
0.00.656.563 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.656.563 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.656.565 I llm_load_print_meta: model type       = 2B
0.00.656.566 I llm_load_print_meta: model ftype      = Q8_0
0.00.656.566 I llm_load_print_meta: model params     = 2.51 B
0.00.656.575 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.656.576 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.656.576 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.656.577 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.656.578 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.656.578 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.656.587 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.656.588 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.656.594 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.656.596 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.656.596 I llm_load_print_meta: max token length = 93
0.00.741.783 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.741.795 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.741.796 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.741.796 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.741.797 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.741.798 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.747.706 I llama_new_context_with_model: n_seq_max     = 1
0.00.747.715 I llama_new_context_with_model: n_ctx         = 4096
0.00.747.716 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.747.716 I llama_new_context_with_model: n_batch       = 2048
0.00.747.717 I llama_new_context_with_model: n_ubatch      = 512
0.00.747.718 I llama_new_context_with_model: flash_attn    = 0
0.00.747.722 I llama_new_context_with_model: freq_base     = 10000.0
0.00.747.723 I llama_new_context_with_model: freq_scale    = 1
0.00.747.724 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.765.281 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.765.321 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.765.465 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.768.011 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.768.016 I llama_new_context_with_model: graph nodes  = 601
0.00.768.016 I llama_new_context_with_model: graph splits = 1
0.00.768.042 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.374.443 I main: llama threadpool init, n_threads = 4
0.01.374.460 I 
0.01.374.569 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.374.572 I 
0.01.374.810 I sampler seed: 1902363310
0.01.374.823 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.374.830 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.374.831 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.374.834 I 
 increasively.

I'm feeling overwhelmed, and I need to prioritize my tasks.

**Step 1:** Take a deep breath and assess your current

0.14.891.672 I llama_perf_sampler_print:    sampling time =      49.15 ms /    33 runs   (    1.49 ms per token,   671.47 tokens per second)
0.14.891.675 I llama_perf_context_print:        load time =    1372.46 ms
0.14.891.690 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.891.691 I llama_perf_context_print:        eval time =   13426.48 ms /    32 runs   (  419.58 ms per token,     2.38 tokens per second)
0.14.891.692 I llama_perf_context_print:       total time =   13517.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4078 (990775dd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.001.876 I main: load the model and apply lora adapter, if any
0.00.024.749 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.761 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.852 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.864 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.866 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.871 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.872 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.874 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.875 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.877 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.878 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.885 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.886 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.888 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.889 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.890 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.865 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.128 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.778 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.789 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.790 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.791 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.792 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.793 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.794 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.798 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.799 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.800 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.801 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.272.802 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.810 I llama_model_loader: - type  f32:   37 tensors
0.00.272.813 I llama_model_loader: - type q8_0:  127 tensors
0.00.479.636 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.549.942 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.550.940 I llm_load_vocab: special tokens cache size = 5
0.00.648.186 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.648.258 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.648.259 I llm_load_print_meta: arch             = gemma
0.00.648.260 I llm_load_print_meta: vocab type       = SPM
0.00.648.261 I llm_load_print_meta: n_vocab          = 256000
0.00.648.263 I llm_load_print_meta: n_merges         = 0
0.00.648.263 I llm_load_print_meta: vocab_only       = 0
0.00.648.264 I llm_load_print_meta: n_ctx_train      = 8192
0.00.648.264 I llm_load_print_meta: n_embd           = 2048
0.00.648.265 I llm_load_print_meta: n_layer          = 18
0.00.648.332 I llm_load_print_meta: n_head           = 8
0.00.648.339 I llm_load_print_meta: n_head_kv        = 1
0.00.648.340 I llm_load_print_meta: n_rot            = 256
0.00.648.340 I llm_load_print_meta: n_swa            = 0
0.00.648.340 I llm_load_print_meta: n_embd_head_k    = 256
0.00.648.341 I llm_load_print_meta: n_embd_head_v    = 256
0.00.648.361 I llm_load_print_meta: n_gqa            = 8
0.00.648.369 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.648.375 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.648.376 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.648.378 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.648.378 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.648.379 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.648.379 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.648.385 I llm_load_print_meta: n_ff             = 16384
0.00.648.385 I llm_load_print_meta: n_expert         = 0
0.00.648.385 I llm_load_print_meta: n_expert_used    = 0
0.00.648.399 I llm_load_print_meta: causal attn      = 1
0.00.648.400 I llm_load_print_meta: pooling type     = 0
0.00.648.401 I llm_load_print_meta: rope type        = 2
0.00.648.401 I llm_load_print_meta: rope scaling     = linear
0.00.648.403 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.648.404 I llm_load_print_meta: freq_scale_train = 1
0.00.648.404 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.648.404 I llm_load_print_meta: rope_finetuned   = unknown
0.00.648.405 I llm_load_print_meta: ssm_d_conv       = 0
0.00.648.410 I llm_load_print_meta: ssm_d_inner      = 0
0.00.648.419 I llm_load_print_meta: ssm_d_state      = 0
0.00.648.419 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.648.420 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.648.421 I llm_load_print_meta: model type       = 2B
0.00.648.422 I llm_load_print_meta: model ftype      = Q8_0
0.00.648.423 I llm_load_print_meta: model params     = 2.51 B
0.00.648.433 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.648.433 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.648.434 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.648.434 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.648.435 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.648.435 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.648.444 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.648.445 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.648.451 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.648.452 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.648.460 I llm_load_print_meta: max token length = 93
0.00.721.096 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.721.108 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.727.113 I llama_new_context_with_model: n_seq_max     = 1
0.00.727.121 I llama_new_context_with_model: n_ctx         = 4096
0.00.727.122 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.727.122 I llama_new_context_with_model: n_batch       = 2048
0.00.727.123 I llama_new_context_with_model: n_ubatch      = 512
0.00.727.123 I llama_new_context_with_model: flash_attn    = 0
0.00.727.127 I llama_new_context_with_model: freq_base     = 10000.0
0.00.727.128 I llama_new_context_with_model: freq_scale    = 1
0.00.727.129 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.744.891 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.744.930 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.745.055 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.747.614 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.747.618 I llama_new_context_with_model: graph nodes  = 601
0.00.747.618 I llama_new_context_with_model: graph splits = 1
0.00.747.642 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.361.495 I main: llama threadpool init, n_threads = 4
0.01.361.510 I 
0.01.361.612 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.361.615 I 
0.01.361.845 I sampler seed: 369868018
0.01.361.858 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.361.864 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.361.865 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.361.865 I 
 increadibly.

I am unable to comprehend this sentence. Could you please provide additional context or explain the meaning of the sentence? [end of text]


0.12.885.687 I llama_perf_sampler_print:    sampling time =      41.47 ms /    28 runs   (    1.48 ms per token,   675.14 tokens per second)
0.12.885.705 I llama_perf_context_print:        load time =    1359.52 ms
0.12.885.707 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.885.708 I llama_perf_context_print:        eval time =   11447.62 ms /    27 runs   (  423.99 ms per token,     2.36 tokens per second)
0.12.885.709 I llama_perf_context_print:       total time =   11524.20 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m7.462s
user	3m41.548s
sys	0m9.573s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4078 (990775dd)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186428.05 ms
main:    total time = 186428.05 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.698 I build: 4078 (990775dd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.930 I main: llama backend init
0.00.001.969 I main: load the model and apply lora adapter, if any
0.00.024.734 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.746 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.843 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.856 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.858 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.864 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.868 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.869 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.870 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.871 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.873 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.881 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.882 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.884 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.885 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.886 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.481 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.503 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.134 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.146 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.147 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.148 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.149 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.150 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.151 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.155 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.156 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.157 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.158 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.274.160 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.168 I llama_model_loader: - type  f32:   37 tensors
0.00.274.171 I llama_model_loader: - type q4_K:  108 tensors
0.00.274.171 I llama_model_loader: - type q6_K:   19 tensors
0.00.478.351 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.549.746 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.550.728 I llm_load_vocab: special tokens cache size = 5
0.00.665.020 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.665.098 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.665.099 I llm_load_print_meta: arch             = gemma
0.00.665.099 I llm_load_print_meta: vocab type       = SPM
0.00.665.100 I llm_load_print_meta: n_vocab          = 256000
0.00.665.103 I llm_load_print_meta: n_merges         = 0
0.00.665.103 I llm_load_print_meta: vocab_only       = 0
0.00.665.104 I llm_load_print_meta: n_ctx_train      = 8192
0.00.665.104 I llm_load_print_meta: n_embd           = 2048
0.00.665.104 I llm_load_print_meta: n_layer          = 18
0.00.665.171 I llm_load_print_meta: n_head           = 8
0.00.665.179 I llm_load_print_meta: n_head_kv        = 1
0.00.665.180 I llm_load_print_meta: n_rot            = 256
0.00.665.181 I llm_load_print_meta: n_swa            = 0
0.00.665.194 I llm_load_print_meta: n_embd_head_k    = 256
0.00.665.209 I llm_load_print_meta: n_embd_head_v    = 256
0.00.665.215 I llm_load_print_meta: n_gqa            = 8
0.00.665.224 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.665.233 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.665.236 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.665.237 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.665.238 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.665.238 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.665.239 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.665.244 I llm_load_print_meta: n_ff             = 16384
0.00.665.244 I llm_load_print_meta: n_expert         = 0
0.00.665.245 I llm_load_print_meta: n_expert_used    = 0
0.00.665.246 I llm_load_print_meta: causal attn      = 1
0.00.665.246 I llm_load_print_meta: pooling type     = 0
0.00.665.247 I llm_load_print_meta: rope type        = 2
0.00.665.248 I llm_load_print_meta: rope scaling     = linear
0.00.665.250 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.665.251 I llm_load_print_meta: freq_scale_train = 1
0.00.665.251 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.665.252 I llm_load_print_meta: rope_finetuned   = unknown
0.00.665.252 I llm_load_print_meta: ssm_d_conv       = 0
0.00.665.252 I llm_load_print_meta: ssm_d_inner      = 0
0.00.665.253 I llm_load_print_meta: ssm_d_state      = 0
0.00.665.255 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.665.255 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.665.256 I llm_load_print_meta: model type       = 2B
0.00.665.257 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.665.258 I llm_load_print_meta: model params     = 2.51 B
0.00.665.267 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.665.268 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.665.269 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.665.269 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.665.270 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.665.271 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.665.271 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.665.272 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.665.278 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.665.280 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.665.280 I llm_load_print_meta: max token length = 93
0.00.727.860 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.727.872 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.727.873 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.727.873 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.727.874 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.727.875 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.733.696 I llama_new_context_with_model: n_seq_max     = 1
0.00.733.703 I llama_new_context_with_model: n_ctx         = 4096
0.00.733.704 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.733.704 I llama_new_context_with_model: n_batch       = 2048
0.00.733.705 I llama_new_context_with_model: n_ubatch      = 512
0.00.733.706 I llama_new_context_with_model: flash_attn    = 0
0.00.733.708 I llama_new_context_with_model: freq_base     = 10000.0
0.00.733.709 I llama_new_context_with_model: freq_scale    = 1
0.00.733.710 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.750.601 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.750.640 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.750.768 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.753.344 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.753.349 I llama_new_context_with_model: graph nodes  = 601
0.00.753.349 I llama_new_context_with_model: graph splits = 1
0.00.753.375 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.342.873 I main: llama threadpool init, n_threads = 4
0.01.342.888 I 
0.01.342.991 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.342.996 I 
0.01.343.230 I sampler seed: 966929589
0.01.343.242 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.343.250 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.343.253 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.343.254 I 
 squaRED WITH PINK DUST.

This is a poem written by Emily Dickinson. It is a fragment from a larger work titled "The Visionary Poems." The

0.12.467.154 I llama_perf_sampler_print:    sampling time =      49.22 ms /    33 runs   (    1.49 ms per token,   670.53 tokens per second)
0.12.467.156 I llama_perf_context_print:        load time =    1340.79 ms
0.12.467.158 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.467.182 I llama_perf_context_print:        eval time =   11034.31 ms /    32 runs   (  344.82 ms per token,     2.90 tokens per second)
0.12.467.186 I llama_perf_context_print:       total time =   11124.29 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4078 (990775dd)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185609.56 ms
main:    total time = 185609.56 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 4078 (990775dd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.001.878 I main: load the model and apply lora adapter, if any
0.00.027.088 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.027.200 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.027.217 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.027.221 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.027.230 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.027.231 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.027.232 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.027.233 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.027.235 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.027.236 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.027.243 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.027.244 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.027.246 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.027.248 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.027.249 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.391 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.282 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.911 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.922 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.924 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.925 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.926 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.927 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.929 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.933 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.934 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.942 I llama_model_loader: - type  f32:   37 tensors
0.00.275.945 I llama_model_loader: - type q4_K:  108 tensors
0.00.275.945 I llama_model_loader: - type q6_K:   19 tensors
0.00.472.963 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.544.146 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.545.220 I llm_load_vocab: special tokens cache size = 5
0.00.642.592 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.642.669 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.642.671 I llm_load_print_meta: arch             = gemma
0.00.642.671 I llm_load_print_meta: vocab type       = SPM
0.00.642.672 I llm_load_print_meta: n_vocab          = 256000
0.00.642.676 I llm_load_print_meta: n_merges         = 0
0.00.642.676 I llm_load_print_meta: vocab_only       = 0
0.00.642.677 I llm_load_print_meta: n_ctx_train      = 8192
0.00.642.677 I llm_load_print_meta: n_embd           = 2048
0.00.642.677 I llm_load_print_meta: n_layer          = 18
0.00.642.745 I llm_load_print_meta: n_head           = 8
0.00.642.752 I llm_load_print_meta: n_head_kv        = 1
0.00.642.752 I llm_load_print_meta: n_rot            = 256
0.00.642.753 I llm_load_print_meta: n_swa            = 0
0.00.642.753 I llm_load_print_meta: n_embd_head_k    = 256
0.00.642.753 I llm_load_print_meta: n_embd_head_v    = 256
0.00.642.758 I llm_load_print_meta: n_gqa            = 8
0.00.642.763 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.642.768 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.642.770 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.642.772 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.642.773 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.642.795 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.642.797 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.642.803 I llm_load_print_meta: n_ff             = 16384
0.00.642.804 I llm_load_print_meta: n_expert         = 0
0.00.642.804 I llm_load_print_meta: n_expert_used    = 0
0.00.642.805 I llm_load_print_meta: causal attn      = 1
0.00.642.805 I llm_load_print_meta: pooling type     = 0
0.00.642.812 I llm_load_print_meta: rope type        = 2
0.00.642.813 I llm_load_print_meta: rope scaling     = linear
0.00.642.815 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.642.823 I llm_load_print_meta: freq_scale_train = 1
0.00.642.830 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.642.835 I llm_load_print_meta: rope_finetuned   = unknown
0.00.642.835 I llm_load_print_meta: ssm_d_conv       = 0
0.00.642.835 I llm_load_print_meta: ssm_d_inner      = 0
0.00.642.836 I llm_load_print_meta: ssm_d_state      = 0
0.00.642.836 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.642.836 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.642.837 I llm_load_print_meta: model type       = 2B
0.00.642.838 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.642.839 I llm_load_print_meta: model params     = 2.51 B
0.00.642.849 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.642.852 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.642.853 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.642.854 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.642.854 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.642.855 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.642.855 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.642.856 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.642.863 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.642.865 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.642.865 I llm_load_print_meta: max token length = 93
0.00.702.862 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.708.729 I llama_new_context_with_model: n_seq_max     = 1
0.00.708.738 I llama_new_context_with_model: n_ctx         = 4096
0.00.708.739 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.708.739 I llama_new_context_with_model: n_batch       = 2048
0.00.708.739 I llama_new_context_with_model: n_ubatch      = 512
0.00.708.740 I llama_new_context_with_model: flash_attn    = 0
0.00.708.743 I llama_new_context_with_model: freq_base     = 10000.0
0.00.708.744 I llama_new_context_with_model: freq_scale    = 1
0.00.708.745 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.727.387 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.727.429 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.727.558 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.730.161 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.730.166 I llama_new_context_with_model: graph nodes  = 601
0.00.730.166 I llama_new_context_with_model: graph splits = 1
0.00.730.190 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.322.301 I main: llama threadpool init, n_threads = 4
0.01.322.317 I 
0.01.322.427 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.322.431 I 
0.01.322.659 I sampler seed: 3080447704
0.01.322.671 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.322.678 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.322.681 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.322.681 I 
 encomporn the world.

**Answer:** The universe.

The universe is everything that exists in existence. It includes all of space and time, all of

0.12.483.095 I llama_perf_sampler_print:    sampling time =      48.80 ms /    33 runs   (    1.48 ms per token,   676.30 tokens per second)
0.12.483.099 I llama_perf_context_print:        load time =    1320.32 ms
0.12.483.101 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.483.114 I llama_perf_context_print:        eval time =   11069.93 ms /    32 runs   (  345.94 ms per token,     2.89 tokens per second)
0.12.483.116 I llama_perf_context_print:       total time =   11160.80 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.976s
user	46m48.572s
sys	0m6.471s
