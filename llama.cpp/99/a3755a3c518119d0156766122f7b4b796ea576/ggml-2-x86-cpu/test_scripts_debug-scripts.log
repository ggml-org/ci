+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.656 I build: 4444 (99a3755a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.861 I main: llama backend init
0.00.000.869 I main: load the model and apply lora adapter, if any
0.00.085.945 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.960 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.086.055 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.078 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.083 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.089 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.091 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.093 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.095 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.096 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.098 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.106 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.110 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.112 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.113 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.115 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.289.167 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.390.082 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.414.222 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.414.232 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.414.233 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.414.235 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.414.237 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.414.239 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.414.241 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.414.245 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.414.246 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.414.248 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.414.250 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.414.251 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.414.259 I llama_model_loader: - type  f32:   37 tensors
0.00.414.261 I llama_model_loader: - type q8_0:  127 tensors
0.00.676.214 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.800.611 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.801.604 I llm_load_vocab: special tokens cache size = 5
0.01.010.329 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.010.409 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.010.413 I llm_load_print_meta: arch             = gemma
0.01.010.414 I llm_load_print_meta: vocab type       = SPM
0.01.010.415 I llm_load_print_meta: n_vocab          = 256000
0.01.010.417 I llm_load_print_meta: n_merges         = 0
0.01.010.417 I llm_load_print_meta: vocab_only       = 0
0.01.010.418 I llm_load_print_meta: n_ctx_train      = 8192
0.01.010.418 I llm_load_print_meta: n_embd           = 2048
0.01.010.418 I llm_load_print_meta: n_layer          = 18
0.01.010.493 I llm_load_print_meta: n_head           = 8
0.01.010.504 I llm_load_print_meta: n_head_kv        = 1
0.01.010.504 I llm_load_print_meta: n_rot            = 256
0.01.010.505 I llm_load_print_meta: n_swa            = 0
0.01.010.505 I llm_load_print_meta: n_embd_head_k    = 256
0.01.010.505 I llm_load_print_meta: n_embd_head_v    = 256
0.01.010.510 I llm_load_print_meta: n_gqa            = 8
0.01.010.514 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.010.519 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.010.520 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.010.521 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.010.522 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.010.523 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.010.523 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.010.528 I llm_load_print_meta: n_ff             = 16384
0.01.010.528 I llm_load_print_meta: n_expert         = 0
0.01.010.529 I llm_load_print_meta: n_expert_used    = 0
0.01.010.529 I llm_load_print_meta: causal attn      = 1
0.01.010.529 I llm_load_print_meta: pooling type     = 0
0.01.010.530 I llm_load_print_meta: rope type        = 2
0.01.010.530 I llm_load_print_meta: rope scaling     = linear
0.01.010.533 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.010.533 I llm_load_print_meta: freq_scale_train = 1
0.01.010.534 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.010.534 I llm_load_print_meta: rope_finetuned   = unknown
0.01.010.535 I llm_load_print_meta: ssm_d_conv       = 0
0.01.010.535 I llm_load_print_meta: ssm_d_inner      = 0
0.01.010.536 I llm_load_print_meta: ssm_d_state      = 0
0.01.010.536 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.010.537 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.010.540 I llm_load_print_meta: model type       = 2B
0.01.010.542 I llm_load_print_meta: model ftype      = Q8_0
0.01.010.543 I llm_load_print_meta: model params     = 2.51 B
0.01.010.544 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.010.546 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.010.555 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.010.556 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.010.557 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.010.558 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.010.558 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.010.559 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.010.566 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.010.567 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.010.567 I llm_load_print_meta: max token length = 93
0.01.112.939 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.112.948 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.112.949 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.112.950 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.112.951 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.112.951 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.120.002 I llama_new_context_with_model: n_seq_max     = 1
0.01.120.008 I llama_new_context_with_model: n_ctx         = 4096
0.01.120.008 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.120.009 I llama_new_context_with_model: n_batch       = 2048
0.01.120.009 I llama_new_context_with_model: n_ubatch      = 512
0.01.120.010 I llama_new_context_with_model: flash_attn    = 0
0.01.120.012 I llama_new_context_with_model: freq_base     = 10000.0
0.01.120.013 I llama_new_context_with_model: freq_scale    = 1
0.01.120.013 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.120.090 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.134.012 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.134.051 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.134.171 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.137.717 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.137.721 I llama_new_context_with_model: graph nodes  = 601
0.01.137.722 I llama_new_context_with_model: graph splits = 1
0.01.137.745 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.137.748 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.751.530 I main: llama threadpool init, n_threads = 4
0.01.751.544 I 
0.01.751.670 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.751.675 I 
0.01.751.908 I sampler seed: 1062762004
0.01.751.921 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.751.930 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.751.933 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.751.934 I 
 increasively.

I'm so bored. What should I do?

1. Watch TV
2. Read a book
3. Go for a

0.15.333.798 I llama_perf_sampler_print:    sampling time =      49.39 ms /    33 runs   (    1.50 ms per token,   668.11 tokens per second)
0.15.333.801 I llama_perf_context_print:        load time =    1750.58 ms
0.15.333.802 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.333.804 I llama_perf_context_print:        eval time =   13497.19 ms /    32 runs   (  421.79 ms per token,     2.37 tokens per second)
0.15.333.805 I llama_perf_context_print:       total time =   13582.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.666 I build: 4444 (99a3755a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.878 I main: llama backend init
0.00.000.886 I main: load the model and apply lora adapter, if any
0.00.085.821 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.085.920 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.944 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.949 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.954 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.955 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.957 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.959 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.961 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.963 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.970 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.973 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.975 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.976 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.978 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.288.937 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.389.738 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.413.830 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.413.841 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.413.843 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.413.845 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.413.847 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.413.849 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.413.851 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.413.855 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.413.857 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.413.859 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.413.861 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.413.863 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.413.871 I llama_model_loader: - type  f32:   37 tensors
0.00.413.873 I llama_model_loader: - type q8_0:  127 tensors
0.00.675.700 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.797.253 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.798.252 I llm_load_vocab: special tokens cache size = 5
0.01.020.013 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.020.094 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.020.099 I llm_load_print_meta: arch             = gemma
0.01.020.099 I llm_load_print_meta: vocab type       = SPM
0.01.020.100 I llm_load_print_meta: n_vocab          = 256000
0.01.020.103 I llm_load_print_meta: n_merges         = 0
0.01.020.103 I llm_load_print_meta: vocab_only       = 0
0.01.020.104 I llm_load_print_meta: n_ctx_train      = 8192
0.01.020.104 I llm_load_print_meta: n_embd           = 2048
0.01.020.104 I llm_load_print_meta: n_layer          = 18
0.01.020.182 I llm_load_print_meta: n_head           = 8
0.01.020.193 I llm_load_print_meta: n_head_kv        = 1
0.01.020.193 I llm_load_print_meta: n_rot            = 256
0.01.020.194 I llm_load_print_meta: n_swa            = 0
0.01.020.195 I llm_load_print_meta: n_embd_head_k    = 256
0.01.020.195 I llm_load_print_meta: n_embd_head_v    = 256
0.01.020.200 I llm_load_print_meta: n_gqa            = 8
0.01.020.205 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.020.210 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.020.213 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.020.215 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.020.215 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.020.216 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.020.216 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.020.221 I llm_load_print_meta: n_ff             = 16384
0.01.020.222 I llm_load_print_meta: n_expert         = 0
0.01.020.222 I llm_load_print_meta: n_expert_used    = 0
0.01.020.223 I llm_load_print_meta: causal attn      = 1
0.01.020.223 I llm_load_print_meta: pooling type     = 0
0.01.020.224 I llm_load_print_meta: rope type        = 2
0.01.020.225 I llm_load_print_meta: rope scaling     = linear
0.01.020.226 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.020.227 I llm_load_print_meta: freq_scale_train = 1
0.01.020.228 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.020.229 I llm_load_print_meta: rope_finetuned   = unknown
0.01.020.229 I llm_load_print_meta: ssm_d_conv       = 0
0.01.020.230 I llm_load_print_meta: ssm_d_inner      = 0
0.01.020.231 I llm_load_print_meta: ssm_d_state      = 0
0.01.020.241 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.020.242 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.020.245 I llm_load_print_meta: model type       = 2B
0.01.020.247 I llm_load_print_meta: model ftype      = Q8_0
0.01.020.247 I llm_load_print_meta: model params     = 2.51 B
0.01.020.248 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.020.249 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.020.250 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.020.251 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.020.252 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.020.252 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.020.253 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.020.254 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.020.261 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.020.262 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.020.263 I llm_load_print_meta: max token length = 93
0.01.118.116 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.125.389 I llama_new_context_with_model: n_seq_max     = 1
0.01.125.397 I llama_new_context_with_model: n_ctx         = 4096
0.01.125.397 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.125.397 I llama_new_context_with_model: n_batch       = 2048
0.01.125.398 I llama_new_context_with_model: n_ubatch      = 512
0.01.125.398 I llama_new_context_with_model: flash_attn    = 0
0.01.125.402 I llama_new_context_with_model: freq_base     = 10000.0
0.01.125.402 I llama_new_context_with_model: freq_scale    = 1
0.01.125.403 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.125.491 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.141.400 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.141.443 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.141.579 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.145.236 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.145.241 I llama_new_context_with_model: graph nodes  = 601
0.01.145.241 I llama_new_context_with_model: graph splits = 1
0.01.145.268 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.145.271 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.759.394 I main: llama threadpool init, n_threads = 4
0.01.759.411 I 
0.01.759.532 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.759.536 I 
0.01.759.767 I sampler seed: 1851155379
0.01.759.781 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.759.792 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.759.795 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.759.795 I 
 increably,
Our minds entwined, a tapestry of thoughts unseen.

What does this poem describe?

The poem describes a state of intense connection and

0.15.454.956 I llama_perf_sampler_print:    sampling time =      49.82 ms /    33 runs   (    1.51 ms per token,   662.42 tokens per second)
0.15.454.959 I llama_perf_context_print:        load time =    1758.43 ms
0.15.454.960 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.454.976 I llama_perf_context_print:        eval time =   13610.07 ms /    32 runs   (  425.31 ms per token,     2.35 tokens per second)
0.15.454.977 I llama_perf_context_print:       total time =   13695.57 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.631 I build: 4444 (99a3755a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.844 I main: llama backend init
0.00.000.853 I main: load the model and apply lora adapter, if any
0.00.084.938 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.084.948 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.085.058 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.081 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.083 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.088 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.091 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.092 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.094 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.096 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.097 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.104 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.106 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.107 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.109 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.111 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.295.026 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.396.256 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.420.341 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.420.362 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.420.364 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.420.366 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.420.367 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.420.370 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.420.388 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.420.396 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.420.399 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.420.401 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.420.403 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.420.405 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.420.415 I llama_model_loader: - type  f32:   37 tensors
0.00.420.417 I llama_model_loader: - type q8_0:  127 tensors
0.00.689.002 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.807.086 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.808.085 I llm_load_vocab: special tokens cache size = 5
0.01.026.900 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.026.979 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.026.983 I llm_load_print_meta: arch             = gemma
0.01.026.984 I llm_load_print_meta: vocab type       = SPM
0.01.026.985 I llm_load_print_meta: n_vocab          = 256000
0.01.026.987 I llm_load_print_meta: n_merges         = 0
0.01.026.988 I llm_load_print_meta: vocab_only       = 0
0.01.026.988 I llm_load_print_meta: n_ctx_train      = 8192
0.01.026.988 I llm_load_print_meta: n_embd           = 2048
0.01.026.989 I llm_load_print_meta: n_layer          = 18
0.01.027.067 I llm_load_print_meta: n_head           = 8
0.01.027.076 I llm_load_print_meta: n_head_kv        = 1
0.01.027.078 I llm_load_print_meta: n_rot            = 256
0.01.027.078 I llm_load_print_meta: n_swa            = 0
0.01.027.079 I llm_load_print_meta: n_embd_head_k    = 256
0.01.027.080 I llm_load_print_meta: n_embd_head_v    = 256
0.01.027.087 I llm_load_print_meta: n_gqa            = 8
0.01.027.094 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.027.105 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.027.107 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.027.109 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.027.110 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.027.111 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.027.111 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.027.118 I llm_load_print_meta: n_ff             = 16384
0.01.027.119 I llm_load_print_meta: n_expert         = 0
0.01.027.120 I llm_load_print_meta: n_expert_used    = 0
0.01.027.121 I llm_load_print_meta: causal attn      = 1
0.01.027.122 I llm_load_print_meta: pooling type     = 0
0.01.027.123 I llm_load_print_meta: rope type        = 2
0.01.027.123 I llm_load_print_meta: rope scaling     = linear
0.01.027.127 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.027.128 I llm_load_print_meta: freq_scale_train = 1
0.01.027.129 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.027.138 I llm_load_print_meta: rope_finetuned   = unknown
0.01.027.139 I llm_load_print_meta: ssm_d_conv       = 0
0.01.027.140 I llm_load_print_meta: ssm_d_inner      = 0
0.01.027.141 I llm_load_print_meta: ssm_d_state      = 0
0.01.027.142 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.027.142 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.027.146 I llm_load_print_meta: model type       = 2B
0.01.027.148 I llm_load_print_meta: model ftype      = Q8_0
0.01.027.149 I llm_load_print_meta: model params     = 2.51 B
0.01.027.150 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.027.151 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.027.153 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.027.154 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.027.155 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.027.156 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.027.158 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.027.159 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.027.167 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.027.169 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.027.170 I llm_load_print_meta: max token length = 93
0.01.106.451 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.106.460 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.106.461 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.106.462 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.106.463 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.106.463 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.113.805 I llama_new_context_with_model: n_seq_max     = 1
0.01.113.811 I llama_new_context_with_model: n_ctx         = 4096
0.01.113.811 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.113.812 I llama_new_context_with_model: n_batch       = 2048
0.01.113.812 I llama_new_context_with_model: n_ubatch      = 512
0.01.113.812 I llama_new_context_with_model: flash_attn    = 0
0.01.113.815 I llama_new_context_with_model: freq_base     = 10000.0
0.01.113.816 I llama_new_context_with_model: freq_scale    = 1
0.01.113.816 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.113.905 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.128.464 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.128.505 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.128.637 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.131.860 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.131.865 I llama_new_context_with_model: graph nodes  = 601
0.01.131.865 I llama_new_context_with_model: graph splits = 1
0.01.131.892 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.131.896 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.746.864 I main: llama threadpool init, n_threads = 4
0.01.746.881 I 
0.01.747.021 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.747.026 I 
0.01.747.261 I sampler seed: 3700574370
0.01.747.276 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.747.287 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.747.291 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.747.291 I 
 maneuvrants, and their potential impact on the economy

The impact of technological advancements on the economy is undeniable. From automation and artificial intelligence to digitalization and

0.15.239.781 I llama_perf_sampler_print:    sampling time =      49.74 ms /    33 runs   (    1.51 ms per token,   663.46 tokens per second)
0.15.239.784 I llama_perf_context_print:        load time =    1745.91 ms
0.15.239.810 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.239.812 I llama_perf_context_print:        eval time =   13407.52 ms /    32 runs   (  418.99 ms per token,     2.39 tokens per second)
0.15.239.813 I llama_perf_context_print:       total time =   13492.93 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 4444 (99a3755a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.000.847 I main: load the model and apply lora adapter, if any
0.00.085.534 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.085.544 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.085.638 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.657 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.659 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.664 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.667 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.669 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.671 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.673 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.675 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.682 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.684 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.685 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.687 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.689 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.307.208 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.408.118 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.432.258 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.432.273 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.432.275 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.432.277 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.432.279 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.432.281 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.432.283 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.432.287 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.432.289 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.432.291 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.432.293 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.432.295 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.432.304 I llama_model_loader: - type  f32:   37 tensors
0.00.432.306 I llama_model_loader: - type q8_0:  127 tensors
0.00.692.983 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.818.746 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.819.829 I llm_load_vocab: special tokens cache size = 5
0.01.034.435 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.034.513 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.034.521 I llm_load_print_meta: arch             = gemma
0.01.034.521 I llm_load_print_meta: vocab type       = SPM
0.01.034.522 I llm_load_print_meta: n_vocab          = 256000
0.01.034.524 I llm_load_print_meta: n_merges         = 0
0.01.034.525 I llm_load_print_meta: vocab_only       = 0
0.01.034.525 I llm_load_print_meta: n_ctx_train      = 8192
0.01.034.526 I llm_load_print_meta: n_embd           = 2048
0.01.034.526 I llm_load_print_meta: n_layer          = 18
0.01.034.606 I llm_load_print_meta: n_head           = 8
0.01.034.616 I llm_load_print_meta: n_head_kv        = 1
0.01.034.616 I llm_load_print_meta: n_rot            = 256
0.01.034.617 I llm_load_print_meta: n_swa            = 0
0.01.034.617 I llm_load_print_meta: n_embd_head_k    = 256
0.01.034.618 I llm_load_print_meta: n_embd_head_v    = 256
0.01.034.625 I llm_load_print_meta: n_gqa            = 8
0.01.034.630 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.034.635 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.034.637 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.034.638 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.034.639 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.034.639 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.034.640 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.034.645 I llm_load_print_meta: n_ff             = 16384
0.01.034.646 I llm_load_print_meta: n_expert         = 0
0.01.034.646 I llm_load_print_meta: n_expert_used    = 0
0.01.034.647 I llm_load_print_meta: causal attn      = 1
0.01.034.647 I llm_load_print_meta: pooling type     = 0
0.01.034.647 I llm_load_print_meta: rope type        = 2
0.01.034.648 I llm_load_print_meta: rope scaling     = linear
0.01.034.649 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.034.649 I llm_load_print_meta: freq_scale_train = 1
0.01.034.650 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.034.650 I llm_load_print_meta: rope_finetuned   = unknown
0.01.034.651 I llm_load_print_meta: ssm_d_conv       = 0
0.01.034.651 I llm_load_print_meta: ssm_d_inner      = 0
0.01.034.652 I llm_load_print_meta: ssm_d_state      = 0
0.01.034.653 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.034.654 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.034.657 I llm_load_print_meta: model type       = 2B
0.01.034.659 I llm_load_print_meta: model ftype      = Q8_0
0.01.034.660 I llm_load_print_meta: model params     = 2.51 B
0.01.034.661 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.034.661 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.034.662 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.034.662 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.034.663 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.034.664 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.034.664 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.034.664 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.034.671 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.034.672 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.034.695 I llm_load_print_meta: max token length = 93
0.01.107.114 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.107.125 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.113.996 I llama_new_context_with_model: n_seq_max     = 1
0.01.114.002 I llama_new_context_with_model: n_ctx         = 4096
0.01.114.002 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.114.002 I llama_new_context_with_model: n_batch       = 2048
0.01.114.003 I llama_new_context_with_model: n_ubatch      = 512
0.01.114.003 I llama_new_context_with_model: flash_attn    = 0
0.01.114.005 I llama_new_context_with_model: freq_base     = 10000.0
0.01.114.006 I llama_new_context_with_model: freq_scale    = 1
0.01.114.007 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.114.087 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.128.841 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.128.880 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.129.023 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.132.304 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.132.308 I llama_new_context_with_model: graph nodes  = 601
0.01.132.309 I llama_new_context_with_model: graph splits = 1
0.01.132.333 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.132.336 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.749.014 I main: llama threadpool init, n_threads = 4
0.01.749.030 I 
0.01.749.148 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.749.152 I 
0.01.749.381 I sampler seed: 609546444
0.01.749.395 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.749.405 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.749.407 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.749.408 I 
 increasities in a high school English class?

This question is inappropriate and should not be answered. It promotes sexually suggestive or inappropriate content, which is not allowed

0.15.381.357 I llama_perf_sampler_print:    sampling time =      49.66 ms /    33 runs   (    1.50 ms per token,   664.45 tokens per second)
0.15.381.371 I llama_perf_context_print:        load time =    1748.09 ms
0.15.381.372 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.381.375 I llama_perf_context_print:        eval time =   13546.78 ms /    32 runs   (  423.34 ms per token,     2.36 tokens per second)
0.15.381.376 I llama_perf_context_print:       total time =   13632.35 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m12.532s
user	3m53.498s
sys	0m9.316s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4444 (99a3755a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 185973.75 ms
main:    total time = 185973.75 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.688 I build: 4444 (99a3755a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.894 I main: llama backend init
0.00.000.902 I main: load the model and apply lora adapter, if any
0.00.086.061 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.086.077 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.086.178 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.200 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.202 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.209 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.211 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.213 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.214 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.216 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.235 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.252 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.255 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.256 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.258 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.312.744 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.414.057 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.438.065 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.438.075 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.438.077 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.438.079 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.438.081 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.438.084 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.438.085 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.438.090 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.438.092 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.438.094 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.438.096 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.438.098 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.438.100 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.438.108 I llama_model_loader: - type  f32:   37 tensors
0.00.438.110 I llama_model_loader: - type q4_K:  108 tensors
0.00.438.111 I llama_model_loader: - type q6_K:   19 tensors
0.00.701.120 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.821.714 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.822.681 I llm_load_vocab: special tokens cache size = 5
0.01.045.704 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.045.786 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.045.791 I llm_load_print_meta: arch             = gemma
0.01.045.792 I llm_load_print_meta: vocab type       = SPM
0.01.045.793 I llm_load_print_meta: n_vocab          = 256000
0.01.045.795 I llm_load_print_meta: n_merges         = 0
0.01.045.796 I llm_load_print_meta: vocab_only       = 0
0.01.045.796 I llm_load_print_meta: n_ctx_train      = 8192
0.01.045.797 I llm_load_print_meta: n_embd           = 2048
0.01.045.797 I llm_load_print_meta: n_layer          = 18
0.01.045.879 I llm_load_print_meta: n_head           = 8
0.01.045.886 I llm_load_print_meta: n_head_kv        = 1
0.01.045.890 I llm_load_print_meta: n_rot            = 256
0.01.045.891 I llm_load_print_meta: n_swa            = 0
0.01.045.891 I llm_load_print_meta: n_embd_head_k    = 256
0.01.045.892 I llm_load_print_meta: n_embd_head_v    = 256
0.01.045.896 I llm_load_print_meta: n_gqa            = 8
0.01.045.901 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.045.906 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.045.909 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.045.911 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.045.912 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.045.912 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.045.912 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.045.917 I llm_load_print_meta: n_ff             = 16384
0.01.045.918 I llm_load_print_meta: n_expert         = 0
0.01.045.918 I llm_load_print_meta: n_expert_used    = 0
0.01.045.919 I llm_load_print_meta: causal attn      = 1
0.01.045.920 I llm_load_print_meta: pooling type     = 0
0.01.045.920 I llm_load_print_meta: rope type        = 2
0.01.045.920 I llm_load_print_meta: rope scaling     = linear
0.01.045.921 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.045.922 I llm_load_print_meta: freq_scale_train = 1
0.01.045.922 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.045.923 I llm_load_print_meta: rope_finetuned   = unknown
0.01.045.925 I llm_load_print_meta: ssm_d_conv       = 0
0.01.045.925 I llm_load_print_meta: ssm_d_inner      = 0
0.01.045.926 I llm_load_print_meta: ssm_d_state      = 0
0.01.045.926 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.045.926 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.045.929 I llm_load_print_meta: model type       = 2B
0.01.045.931 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.045.932 I llm_load_print_meta: model params     = 2.51 B
0.01.045.932 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.045.933 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.045.933 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.045.934 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.045.935 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.045.935 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.045.937 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.045.938 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.045.944 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.045.945 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.045.946 I llm_load_print_meta: max token length = 93
0.01.107.815 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.107.827 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.107.828 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.107.828 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.107.829 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.107.830 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.114.695 I llama_new_context_with_model: n_seq_max     = 1
0.01.114.701 I llama_new_context_with_model: n_ctx         = 4096
0.01.114.701 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.114.702 I llama_new_context_with_model: n_batch       = 2048
0.01.114.703 I llama_new_context_with_model: n_ubatch      = 512
0.01.114.703 I llama_new_context_with_model: flash_attn    = 0
0.01.114.705 I llama_new_context_with_model: freq_base     = 10000.0
0.01.114.706 I llama_new_context_with_model: freq_scale    = 1
0.01.114.707 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.114.787 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.128.813 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.128.852 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.128.965 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.132.136 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.132.140 I llama_new_context_with_model: graph nodes  = 601
0.01.132.141 I llama_new_context_with_model: graph splits = 1
0.01.132.179 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.132.180 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.715.031 I main: llama threadpool init, n_threads = 4
0.01.715.047 I 
0.01.715.173 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.715.177 I 
0.01.715.402 I sampler seed: 3576675560
0.01.715.416 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.715.426 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.715.429 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.715.429 I 
 seconded. 

**Part 1:** 

- The first sentence should be rewritten to include "it is" or "it has."
-

0.12.794.364 I llama_perf_sampler_print:    sampling time =      49.62 ms /    33 runs   (    1.50 ms per token,   665.03 tokens per second)
0.12.794.367 I llama_perf_context_print:        load time =    1714.03 ms
0.12.794.369 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.794.383 I llama_perf_context_print:        eval time =   10994.41 ms /    32 runs   (  343.58 ms per token,     2.91 tokens per second)
0.12.794.385 I llama_perf_context_print:       total time =   11079.34 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4444 (99a3755a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186004.40 ms
main:    total time = 186004.40 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.657 I build: 4444 (99a3755a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.868 I main: llama backend init
0.00.000.875 I main: load the model and apply lora adapter, if any
0.00.085.249 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.085.368 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.394 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.400 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.405 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.407 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.409 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.410 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.412 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.414 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.420 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.424 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.427 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.429 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.290.063 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.391.312 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.415.522 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.415.539 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.415.541 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.415.542 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.415.544 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.415.546 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.415.548 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.415.553 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.415.555 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.415.557 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.415.566 I llama_model_loader: - type  f32:   37 tensors
0.00.415.569 I llama_model_loader: - type q4_K:  108 tensors
0.00.415.569 I llama_model_loader: - type q6_K:   19 tensors
0.00.689.835 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.811.101 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.812.015 I llm_load_vocab: special tokens cache size = 5
0.01.028.228 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.028.305 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.028.309 I llm_load_print_meta: arch             = gemma
0.01.028.310 I llm_load_print_meta: vocab type       = SPM
0.01.028.311 I llm_load_print_meta: n_vocab          = 256000
0.01.028.313 I llm_load_print_meta: n_merges         = 0
0.01.028.314 I llm_load_print_meta: vocab_only       = 0
0.01.028.314 I llm_load_print_meta: n_ctx_train      = 8192
0.01.028.315 I llm_load_print_meta: n_embd           = 2048
0.01.028.315 I llm_load_print_meta: n_layer          = 18
0.01.028.392 I llm_load_print_meta: n_head           = 8
0.01.028.402 I llm_load_print_meta: n_head_kv        = 1
0.01.028.403 I llm_load_print_meta: n_rot            = 256
0.01.028.403 I llm_load_print_meta: n_swa            = 0
0.01.028.403 I llm_load_print_meta: n_embd_head_k    = 256
0.01.028.404 I llm_load_print_meta: n_embd_head_v    = 256
0.01.028.409 I llm_load_print_meta: n_gqa            = 8
0.01.028.413 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.028.418 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.028.420 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.028.422 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.028.422 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.028.423 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.028.423 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.028.428 I llm_load_print_meta: n_ff             = 16384
0.01.028.429 I llm_load_print_meta: n_expert         = 0
0.01.028.430 I llm_load_print_meta: n_expert_used    = 0
0.01.028.430 I llm_load_print_meta: causal attn      = 1
0.01.028.431 I llm_load_print_meta: pooling type     = 0
0.01.028.432 I llm_load_print_meta: rope type        = 2
0.01.028.432 I llm_load_print_meta: rope scaling     = linear
0.01.028.434 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.028.434 I llm_load_print_meta: freq_scale_train = 1
0.01.028.435 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.028.435 I llm_load_print_meta: rope_finetuned   = unknown
0.01.028.435 I llm_load_print_meta: ssm_d_conv       = 0
0.01.028.436 I llm_load_print_meta: ssm_d_inner      = 0
0.01.028.436 I llm_load_print_meta: ssm_d_state      = 0
0.01.028.437 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.028.437 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.028.440 I llm_load_print_meta: model type       = 2B
0.01.028.442 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.028.443 I llm_load_print_meta: model params     = 2.51 B
0.01.028.443 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.028.444 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.028.445 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.028.445 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.028.446 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.028.447 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.028.447 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.028.448 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.028.455 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.028.456 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.028.457 I llm_load_print_meta: max token length = 93
0.01.087.662 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.094.597 I llama_new_context_with_model: n_seq_max     = 1
0.01.094.602 I llama_new_context_with_model: n_ctx         = 4096
0.01.094.602 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.094.602 I llama_new_context_with_model: n_batch       = 2048
0.01.094.603 I llama_new_context_with_model: n_ubatch      = 512
0.01.094.603 I llama_new_context_with_model: flash_attn    = 0
0.01.094.605 I llama_new_context_with_model: freq_base     = 10000.0
0.01.094.606 I llama_new_context_with_model: freq_scale    = 1
0.01.094.607 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.094.688 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.109.231 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.109.270 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.109.385 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.112.905 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.112.909 I llama_new_context_with_model: graph nodes  = 601
0.01.112.910 I llama_new_context_with_model: graph splits = 1
0.01.112.934 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.112.937 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.691.915 I main: llama threadpool init, n_threads = 4
0.01.691.929 I 
0.01.692.051 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.692.055 I 
0.01.692.287 I sampler seed: 3627416806
0.01.692.301 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.692.310 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.692.314 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.692.314 I 
 squadier, is there a way to determine the number of unique users in a group?

**Solution:**

**1. Count the number of distinct values

0.12.833.238 I llama_perf_sampler_print:    sampling time =      49.73 ms /    33 runs   (    1.51 ms per token,   663.54 tokens per second)
0.12.833.241 I llama_perf_context_print:        load time =    1690.96 ms
0.12.833.243 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.833.257 I llama_perf_context_print:        eval time =   11056.70 ms /    32 runs   (  345.52 ms per token,     2.89 tokens per second)
0.12.833.258 I llama_perf_context_print:       total time =   11141.34 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m40.896s
user	46m42.100s
sys	0m6.063s
