+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.574 I build: 4444 (99a3755a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.778 I main: llama backend init
0.00.000.785 I main: load the model and apply lora adapter, if any
0.00.030.463 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.030.474 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.030.482 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.488 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.489 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.491 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.492 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.493 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.493 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.494 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.495 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.499 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.499 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.500 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.500 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.030.501 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.056.891 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.541 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.867 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.874 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.875 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.876 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.877 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.878 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.878 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.881 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.881 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.882 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.883 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.137.884 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.137.886 I llama_model_loader: - type  f32:   37 tensors
0.00.137.887 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.566 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.072 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.566 I llm_load_vocab: special tokens cache size = 5
0.00.267.760 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.777 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.778 I llm_load_print_meta: arch             = gemma
0.00.267.778 I llm_load_print_meta: vocab type       = SPM
0.00.267.779 I llm_load_print_meta: n_vocab          = 256000
0.00.267.780 I llm_load_print_meta: n_merges         = 0
0.00.267.780 I llm_load_print_meta: vocab_only       = 0
0.00.267.781 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.781 I llm_load_print_meta: n_embd           = 2048
0.00.267.781 I llm_load_print_meta: n_layer          = 18
0.00.267.792 I llm_load_print_meta: n_head           = 8
0.00.267.795 I llm_load_print_meta: n_head_kv        = 1
0.00.267.795 I llm_load_print_meta: n_rot            = 256
0.00.267.795 I llm_load_print_meta: n_swa            = 0
0.00.267.795 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.796 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.798 I llm_load_print_meta: n_gqa            = 8
0.00.267.799 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.801 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.801 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.803 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.803 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.804 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.804 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.806 I llm_load_print_meta: n_ff             = 16384
0.00.267.806 I llm_load_print_meta: n_expert         = 0
0.00.267.806 I llm_load_print_meta: n_expert_used    = 0
0.00.267.807 I llm_load_print_meta: causal attn      = 1
0.00.267.807 I llm_load_print_meta: pooling type     = 0
0.00.267.807 I llm_load_print_meta: rope type        = 2
0.00.267.808 I llm_load_print_meta: rope scaling     = linear
0.00.267.809 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.809 I llm_load_print_meta: freq_scale_train = 1
0.00.267.810 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.810 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.810 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.811 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.811 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.811 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.812 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.814 I llm_load_print_meta: model type       = 2B
0.00.267.815 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.815 I llm_load_print_meta: model params     = 2.51 B
0.00.267.816 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.816 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.817 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.817 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.817 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.818 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.818 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.819 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.819 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.820 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.820 I llm_load_print_meta: max token length = 93
0.00.368.986 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.368.993 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.368.994 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.368.995 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.368.995 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.368.996 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.370.378 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.382 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.382 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.382 I llama_new_context_with_model: n_batch       = 2048
0.00.370.383 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.384 I llama_new_context_with_model: flash_attn    = 0
0.00.370.385 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.386 I llama_new_context_with_model: freq_scale    = 1
0.00.370.387 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.370.412 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.384.472 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.485 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.587 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.468 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.386.475 I llama_new_context_with_model: graph nodes  = 601
0.00.386.475 I llama_new_context_with_model: graph splits = 1
0.00.386.478 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.386.479 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.656 I main: llama threadpool init, n_threads = 4
0.00.471.669 I 
0.00.471.744 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.471.747 I 
0.00.471.790 I sampler seed: 3837403618
0.00.471.801 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.812 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.471.816 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.471.816 I 
 maneupher, a young woman with fiery hair and a defiant spirit, is about to embark on a journey of self-discovery.

**Scene:** A bustling

0.02.709.362 I llama_perf_sampler_print:    sampling time =       4.75 ms /    33 runs   (    0.14 ms per token,  6940.06 tokens per second)
0.02.709.365 I llama_perf_context_print:        load time =     470.85 ms
0.02.709.366 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.709.367 I llama_perf_context_print:        eval time =    2219.07 ms /    32 runs   (   69.35 ms per token,    14.42 tokens per second)
0.02.709.368 I llama_perf_context_print:       total time =    2237.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.579 I build: 4444 (99a3755a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.780 I main: llama backend init
0.00.000.787 I main: load the model and apply lora adapter, if any
0.00.030.835 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.030.851 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.860 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.861 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.865 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.865 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.866 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.867 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.868 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.870 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.875 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.876 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.877 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.877 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.030.878 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.057.404 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.132.292 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.138.790 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.138.797 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.138.798 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.138.798 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.138.799 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.138.800 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.138.800 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.138.804 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.138.805 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.138.806 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.138.806 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.138.807 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.138.811 I llama_model_loader: - type  f32:   37 tensors
0.00.138.811 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.476 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.930 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.439 I llm_load_vocab: special tokens cache size = 5
0.00.267.600 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.619 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.620 I llm_load_print_meta: arch             = gemma
0.00.267.621 I llm_load_print_meta: vocab type       = SPM
0.00.267.621 I llm_load_print_meta: n_vocab          = 256000
0.00.267.622 I llm_load_print_meta: n_merges         = 0
0.00.267.622 I llm_load_print_meta: vocab_only       = 0
0.00.267.622 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.623 I llm_load_print_meta: n_embd           = 2048
0.00.267.623 I llm_load_print_meta: n_layer          = 18
0.00.267.640 I llm_load_print_meta: n_head           = 8
0.00.267.642 I llm_load_print_meta: n_head_kv        = 1
0.00.267.642 I llm_load_print_meta: n_rot            = 256
0.00.267.642 I llm_load_print_meta: n_swa            = 0
0.00.267.643 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.643 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.645 I llm_load_print_meta: n_gqa            = 8
0.00.267.646 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.648 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.649 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.651 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.652 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.652 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.653 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.655 I llm_load_print_meta: n_ff             = 16384
0.00.267.655 I llm_load_print_meta: n_expert         = 0
0.00.267.655 I llm_load_print_meta: n_expert_used    = 0
0.00.267.656 I llm_load_print_meta: causal attn      = 1
0.00.267.656 I llm_load_print_meta: pooling type     = 0
0.00.267.656 I llm_load_print_meta: rope type        = 2
0.00.267.656 I llm_load_print_meta: rope scaling     = linear
0.00.267.658 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.659 I llm_load_print_meta: freq_scale_train = 1
0.00.267.659 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.660 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.660 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.660 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.660 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.661 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.661 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.663 I llm_load_print_meta: model type       = 2B
0.00.267.665 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.665 I llm_load_print_meta: model params     = 2.51 B
0.00.267.666 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.667 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.667 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.667 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.668 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.668 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.668 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.669 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.669 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.669 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.670 I llm_load_print_meta: max token length = 93
0.00.364.673 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.365.977 I llama_new_context_with_model: n_seq_max     = 1
0.00.365.981 I llama_new_context_with_model: n_ctx         = 4096
0.00.365.981 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.365.982 I llama_new_context_with_model: n_batch       = 2048
0.00.365.982 I llama_new_context_with_model: n_ubatch      = 512
0.00.365.983 I llama_new_context_with_model: flash_attn    = 0
0.00.365.985 I llama_new_context_with_model: freq_base     = 10000.0
0.00.365.986 I llama_new_context_with_model: freq_scale    = 1
0.00.365.987 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.366.005 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.380.402 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.417 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.511 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.725 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.732 I llama_new_context_with_model: graph nodes  = 601
0.00.382.732 I llama_new_context_with_model: graph splits = 1
0.00.382.735 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.382.736 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.323 I main: llama threadpool init, n_threads = 4
0.00.464.337 I 
0.00.464.415 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.464.419 I 
0.00.464.455 I sampler seed: 1524684989
0.00.464.466 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.469 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.470 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.471 I 
 increasities. [end of text]


0.00.736.795 I llama_perf_sampler_print:    sampling time =       0.65 ms /     5 runs   (    0.13 ms per token,  7704.16 tokens per second)
0.00.736.798 I llama_perf_context_print:        load time =     463.51 ms
0.00.736.799 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.736.800 I llama_perf_context_print:        eval time =     269.34 ms /     4 runs   (   67.33 ms per token,    14.85 tokens per second)
0.00.736.801 I llama_perf_context_print:       total time =     272.48 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.536 I build: 4444 (99a3755a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.727 I main: llama backend init
0.00.000.734 I main: load the model and apply lora adapter, if any
0.00.030.007 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.030.019 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.030.026 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.032 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.033 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.036 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.037 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.037 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.041 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.041 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.042 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.046 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.046 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.047 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.047 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.030.048 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.056.430 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.657 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.269 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.277 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.278 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.279 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.280 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.281 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.282 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.286 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.287 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.287 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.289 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.137.290 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.137.295 I llama_model_loader: - type  f32:   37 tensors
0.00.137.296 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.334 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.264.154 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.912 I llm_load_vocab: special tokens cache size = 5
0.00.286.236 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.286.255 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.286.257 I llm_load_print_meta: arch             = gemma
0.00.286.257 I llm_load_print_meta: vocab type       = SPM
0.00.286.258 I llm_load_print_meta: n_vocab          = 256000
0.00.286.258 I llm_load_print_meta: n_merges         = 0
0.00.286.258 I llm_load_print_meta: vocab_only       = 0
0.00.286.270 I llm_load_print_meta: n_ctx_train      = 8192
0.00.286.270 I llm_load_print_meta: n_embd           = 2048
0.00.286.271 I llm_load_print_meta: n_layer          = 18
0.00.286.283 I llm_load_print_meta: n_head           = 8
0.00.286.286 I llm_load_print_meta: n_head_kv        = 1
0.00.286.286 I llm_load_print_meta: n_rot            = 256
0.00.286.287 I llm_load_print_meta: n_swa            = 0
0.00.286.288 I llm_load_print_meta: n_embd_head_k    = 256
0.00.286.288 I llm_load_print_meta: n_embd_head_v    = 256
0.00.286.290 I llm_load_print_meta: n_gqa            = 8
0.00.286.292 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.286.294 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.286.295 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.286.297 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.286.297 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.286.299 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.286.299 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.286.301 I llm_load_print_meta: n_ff             = 16384
0.00.286.301 I llm_load_print_meta: n_expert         = 0
0.00.286.302 I llm_load_print_meta: n_expert_used    = 0
0.00.286.302 I llm_load_print_meta: causal attn      = 1
0.00.286.303 I llm_load_print_meta: pooling type     = 0
0.00.286.303 I llm_load_print_meta: rope type        = 2
0.00.286.303 I llm_load_print_meta: rope scaling     = linear
0.00.286.305 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.286.306 I llm_load_print_meta: freq_scale_train = 1
0.00.286.310 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.286.310 I llm_load_print_meta: rope_finetuned   = unknown
0.00.286.310 I llm_load_print_meta: ssm_d_conv       = 0
0.00.286.310 I llm_load_print_meta: ssm_d_inner      = 0
0.00.286.311 I llm_load_print_meta: ssm_d_state      = 0
0.00.286.311 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.286.312 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.286.313 I llm_load_print_meta: model type       = 2B
0.00.286.315 I llm_load_print_meta: model ftype      = Q8_0
0.00.286.316 I llm_load_print_meta: model params     = 2.51 B
0.00.286.319 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.286.320 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.286.320 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.286.320 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.286.321 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.286.321 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.286.322 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.286.322 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.286.323 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.286.323 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.286.323 I llm_load_print_meta: max token length = 93
0.00.362.408 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.362.415 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.362.416 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.362.417 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.362.417 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.362.418 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.363.739 I llama_new_context_with_model: n_seq_max     = 1
0.00.363.743 I llama_new_context_with_model: n_ctx         = 4096
0.00.363.744 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.363.744 I llama_new_context_with_model: n_batch       = 2048
0.00.363.745 I llama_new_context_with_model: n_ubatch      = 512
0.00.363.745 I llama_new_context_with_model: flash_attn    = 0
0.00.363.747 I llama_new_context_with_model: freq_base     = 10000.0
0.00.363.747 I llama_new_context_with_model: freq_scale    = 1
0.00.363.748 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.363.767 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.378.195 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.378.209 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.378.302 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.544 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.549 I llama_new_context_with_model: graph nodes  = 601
0.00.380.549 I llama_new_context_with_model: graph splits = 1
0.00.380.552 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.380.553 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.880 I main: llama threadpool init, n_threads = 4
0.00.474.895 I 
0.00.474.968 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.474.972 I 
0.00.475.005 I sampler seed: 3610365583
0.00.475.015 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.026 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.030 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.030 I 
 increamically in size. What shape would it eventually form?

Please explain your answer.

The answer is a sphere.

As the object increases in size

0.02.752.498 I llama_perf_sampler_print:    sampling time =       4.74 ms /    33 runs   (    0.14 ms per token,  6969.38 tokens per second)
0.02.752.501 I llama_perf_context_print:        load time =     474.12 ms
0.02.752.504 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.752.506 I llama_perf_context_print:        eval time =    2259.45 ms /    32 runs   (   70.61 ms per token,    14.16 tokens per second)
0.02.752.506 I llama_perf_context_print:       total time =    2277.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.179 I build: 4444 (99a3755a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.441 I main: llama backend init
0.00.000.449 I main: load the model and apply lora adapter, if any
0.00.029.327 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.029.337 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.029.346 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.353 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.354 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.357 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.358 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.359 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.359 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.360 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.361 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.365 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.366 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.366 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.367 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.029.368 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.055.963 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.910 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.264 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.271 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.272 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.273 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.274 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.275 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.276 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.279 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.280 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.281 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.282 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.137.283 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.137.287 I llama_model_loader: - type  f32:   37 tensors
0.00.137.288 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.542 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.126 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.698 I llm_load_vocab: special tokens cache size = 5
0.00.272.049 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.067 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.068 I llm_load_print_meta: arch             = gemma
0.00.272.069 I llm_load_print_meta: vocab type       = SPM
0.00.272.069 I llm_load_print_meta: n_vocab          = 256000
0.00.272.070 I llm_load_print_meta: n_merges         = 0
0.00.272.070 I llm_load_print_meta: vocab_only       = 0
0.00.272.071 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.071 I llm_load_print_meta: n_embd           = 2048
0.00.272.071 I llm_load_print_meta: n_layer          = 18
0.00.272.082 I llm_load_print_meta: n_head           = 8
0.00.272.084 I llm_load_print_meta: n_head_kv        = 1
0.00.272.084 I llm_load_print_meta: n_rot            = 256
0.00.272.085 I llm_load_print_meta: n_swa            = 0
0.00.272.085 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.085 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.087 I llm_load_print_meta: n_gqa            = 8
0.00.272.089 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.091 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.092 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.093 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.094 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.094 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.094 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.096 I llm_load_print_meta: n_ff             = 16384
0.00.272.096 I llm_load_print_meta: n_expert         = 0
0.00.272.097 I llm_load_print_meta: n_expert_used    = 0
0.00.272.097 I llm_load_print_meta: causal attn      = 1
0.00.272.097 I llm_load_print_meta: pooling type     = 0
0.00.272.098 I llm_load_print_meta: rope type        = 2
0.00.272.098 I llm_load_print_meta: rope scaling     = linear
0.00.272.099 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.100 I llm_load_print_meta: freq_scale_train = 1
0.00.272.100 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.101 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.101 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.101 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.101 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.102 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.102 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.104 I llm_load_print_meta: model type       = 2B
0.00.272.105 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.106 I llm_load_print_meta: model params     = 2.51 B
0.00.272.107 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.107 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.107 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.107 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.108 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.108 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.109 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.109 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.109 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.110 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.110 I llm_load_print_meta: max token length = 93
0.00.343.332 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.343.339 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.344.553 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.557 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.558 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.558 I llama_new_context_with_model: n_batch       = 2048
0.00.344.558 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.559 I llama_new_context_with_model: flash_attn    = 0
0.00.344.562 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.563 I llama_new_context_with_model: freq_scale    = 1
0.00.344.564 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.344.581 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.358.688 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.702 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.358.790 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.003 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.009 I llama_new_context_with_model: graph nodes  = 601
0.00.361.009 I llama_new_context_with_model: graph splits = 1
0.00.361.012 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.361.013 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.449.509 I main: llama threadpool init, n_threads = 4
0.00.449.524 I 
0.00.449.602 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.449.605 I 
0.00.449.638 I sampler seed: 1955328074
0.00.449.651 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.449.654 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.449.654 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.449.655 I 
 increably, a symphony of sound that reverberated through the vast amphitheater. The crowd roared with applause, their cheers a rhythmic pulse against the backdrop of the

0.02.875.618 I llama_perf_sampler_print:    sampling time =       4.77 ms /    33 runs   (    0.14 ms per token,  6922.59 tokens per second)
0.02.875.621 I llama_perf_context_print:        load time =     449.04 ms
0.02.875.622 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.875.624 I llama_perf_context_print:        eval time =    2407.53 ms /    32 runs   (   75.24 ms per token,    13.29 tokens per second)
0.02.875.625 I llama_perf_context_print:       total time =    2426.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.892s
user	0m31.901s
sys	0m9.309s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4444 (99a3755a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40210.98 ms
main:    total time = 40210.98 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.558 I build: 4444 (99a3755a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.749 I main: llama backend init
0.00.000.756 I main: load the model and apply lora adapter, if any
0.00.029.937 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.029.947 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.029.956 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.961 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.963 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.965 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.966 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.967 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.968 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.969 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.969 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.973 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.973 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.974 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.975 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.056.224 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.555 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.136.944 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.136.951 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.136.952 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.136.953 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.136.954 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.136.955 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.136.956 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.136.959 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.136.960 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.136.960 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.136.961 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.136.961 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.136.962 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.136.966 I llama_model_loader: - type  f32:   37 tensors
0.00.136.967 I llama_model_loader: - type q4_K:  108 tensors
0.00.136.967 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.792 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.730 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.431 I llm_load_vocab: special tokens cache size = 5
0.00.272.746 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.769 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.770 I llm_load_print_meta: arch             = gemma
0.00.272.771 I llm_load_print_meta: vocab type       = SPM
0.00.272.771 I llm_load_print_meta: n_vocab          = 256000
0.00.272.772 I llm_load_print_meta: n_merges         = 0
0.00.272.772 I llm_load_print_meta: vocab_only       = 0
0.00.272.772 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.773 I llm_load_print_meta: n_embd           = 2048
0.00.272.773 I llm_load_print_meta: n_layer          = 18
0.00.272.785 I llm_load_print_meta: n_head           = 8
0.00.272.787 I llm_load_print_meta: n_head_kv        = 1
0.00.272.787 I llm_load_print_meta: n_rot            = 256
0.00.272.788 I llm_load_print_meta: n_swa            = 0
0.00.272.789 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.789 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.791 I llm_load_print_meta: n_gqa            = 8
0.00.272.793 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.795 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.796 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.797 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.797 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.798 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.798 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.801 I llm_load_print_meta: n_ff             = 16384
0.00.272.801 I llm_load_print_meta: n_expert         = 0
0.00.272.802 I llm_load_print_meta: n_expert_used    = 0
0.00.272.802 I llm_load_print_meta: causal attn      = 1
0.00.272.803 I llm_load_print_meta: pooling type     = 0
0.00.272.803 I llm_load_print_meta: rope type        = 2
0.00.272.804 I llm_load_print_meta: rope scaling     = linear
0.00.272.805 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.806 I llm_load_print_meta: freq_scale_train = 1
0.00.272.807 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.807 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.808 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.809 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.811 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.811 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.812 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.813 I llm_load_print_meta: model type       = 2B
0.00.272.815 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.272.815 I llm_load_print_meta: model params     = 2.51 B
0.00.272.816 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.272.817 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.817 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.818 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.818 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.819 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.819 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.820 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.820 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.820 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.821 I llm_load_print_meta: max token length = 93
0.00.332.359 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.332.368 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.332.369 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.332.369 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.332.370 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.332.370 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.333.641 I llama_new_context_with_model: n_seq_max     = 1
0.00.333.645 I llama_new_context_with_model: n_ctx         = 4096
0.00.333.645 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.333.645 I llama_new_context_with_model: n_batch       = 2048
0.00.333.646 I llama_new_context_with_model: n_ubatch      = 512
0.00.333.646 I llama_new_context_with_model: flash_attn    = 0
0.00.333.648 I llama_new_context_with_model: freq_base     = 10000.0
0.00.333.649 I llama_new_context_with_model: freq_scale    = 1
0.00.333.650 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.333.669 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.349.060 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.349.074 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.349.169 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.351.109 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.351.116 I llama_new_context_with_model: graph nodes  = 601
0.00.351.116 I llama_new_context_with_model: graph splits = 1
0.00.351.119 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.351.120 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.426.869 I main: llama threadpool init, n_threads = 4
0.00.426.881 I 
0.00.426.956 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.426.960 I 
0.00.426.995 I sampler seed: 3485521872
0.00.427.007 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.427.018 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.427.022 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.427.022 I 
 squaRED by THE MOONLIGHT is a captivating novel that explores the themes of love, loss, and the power of nature.

**Summary:**

The novel

0.02.012.274 I llama_perf_sampler_print:    sampling time =       4.98 ms /    33 runs   (    0.15 ms per token,  6622.52 tokens per second)
0.02.012.277 I llama_perf_context_print:        load time =     426.09 ms
0.02.012.278 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.012.279 I llama_perf_context_print:        eval time =    1566.80 ms /    32 runs   (   48.96 ms per token,    20.42 tokens per second)
0.02.012.280 I llama_perf_context_print:       total time =    1585.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4444 (99a3755a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40188.11 ms
main:    total time = 40188.11 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.544 I build: 4444 (99a3755a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.744 I main: llama backend init
0.00.000.751 I main: load the model and apply lora adapter, if any
0.00.029.637 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.029.654 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.662 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.663 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.665 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.666 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.666 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.667 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.668 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.668 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.672 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.673 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.674 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.674 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.055.954 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.638 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.136.996 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.003 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.004 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.004 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.005 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.006 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.007 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.009 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.009 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.137.011 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.137.016 I llama_model_loader: - type  f32:   37 tensors
0.00.137.017 I llama_model_loader: - type q4_K:  108 tensors
0.00.137.017 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.957 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.169 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.853 I llm_load_vocab: special tokens cache size = 5
0.00.273.100 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.123 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.125 I llm_load_print_meta: arch             = gemma
0.00.273.126 I llm_load_print_meta: vocab type       = SPM
0.00.273.126 I llm_load_print_meta: n_vocab          = 256000
0.00.273.126 I llm_load_print_meta: n_merges         = 0
0.00.273.127 I llm_load_print_meta: vocab_only       = 0
0.00.273.127 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.127 I llm_load_print_meta: n_embd           = 2048
0.00.273.128 I llm_load_print_meta: n_layer          = 18
0.00.273.139 I llm_load_print_meta: n_head           = 8
0.00.273.142 I llm_load_print_meta: n_head_kv        = 1
0.00.273.142 I llm_load_print_meta: n_rot            = 256
0.00.273.142 I llm_load_print_meta: n_swa            = 0
0.00.273.143 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.143 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.145 I llm_load_print_meta: n_gqa            = 8
0.00.273.147 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.149 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.150 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.151 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.152 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.152 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.153 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.155 I llm_load_print_meta: n_ff             = 16384
0.00.273.155 I llm_load_print_meta: n_expert         = 0
0.00.273.156 I llm_load_print_meta: n_expert_used    = 0
0.00.273.156 I llm_load_print_meta: causal attn      = 1
0.00.273.156 I llm_load_print_meta: pooling type     = 0
0.00.273.157 I llm_load_print_meta: rope type        = 2
0.00.273.157 I llm_load_print_meta: rope scaling     = linear
0.00.273.159 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.159 I llm_load_print_meta: freq_scale_train = 1
0.00.273.161 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.161 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.161 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.162 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.162 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.163 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.163 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.165 I llm_load_print_meta: model type       = 2B
0.00.273.166 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.273.167 I llm_load_print_meta: model params     = 2.51 B
0.00.273.168 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.273.168 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.169 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.169 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.170 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.170 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.170 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.171 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.171 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.172 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.172 I llm_load_print_meta: max token length = 93
0.00.329.627 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.330.922 I llama_new_context_with_model: n_seq_max     = 1
0.00.330.925 I llama_new_context_with_model: n_ctx         = 4096
0.00.330.926 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.330.926 I llama_new_context_with_model: n_batch       = 2048
0.00.330.927 I llama_new_context_with_model: n_ubatch      = 512
0.00.330.927 I llama_new_context_with_model: flash_attn    = 0
0.00.330.929 I llama_new_context_with_model: freq_base     = 10000.0
0.00.330.930 I llama_new_context_with_model: freq_scale    = 1
0.00.330.931 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.330.949 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.346.100 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.346.113 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.346.205 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.348.069 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.348.075 I llama_new_context_with_model: graph nodes  = 601
0.00.348.075 I llama_new_context_with_model: graph splits = 1
0.00.348.079 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.348.079 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.272 I main: llama threadpool init, n_threads = 4
0.00.422.284 I 
0.00.422.360 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.422.363 I 
0.00.422.396 I sampler seed: 1524845570
0.00.422.407 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.412 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.422.412 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.422.413 I 
 effei, the founder of the Academy of Science in Athens, laid the groundwork for scientific inquiry by establishing the first scientific laboratory in Greece. This remarkable achievement laid

0.01.969.290 I llama_perf_sampler_print:    sampling time =       4.86 ms /    33 runs   (    0.15 ms per token,  6792.92 tokens per second)
0.01.969.293 I llama_perf_context_print:        load time =     421.50 ms
0.01.969.294 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.969.296 I llama_perf_context_print:        eval time =    1528.79 ms /    32 runs   (   47.77 ms per token,    20.93 tokens per second)
0.01.969.297 I llama_perf_context_print:       total time =    1547.03 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.152s
user	10m24.020s
sys	0m6.794s
