+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.561 I build: 3935 (99bd4ac2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.771 I main: llama backend init
0.00.001.865 I main: load the model and apply lora adapter, if any
0.00.022.227 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.275 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.282 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.287 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.288 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.291 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.292 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.292 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.293 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.293 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.294 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.298 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.299 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.299 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.300 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.300 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.673 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.671 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.564 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.570 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.571 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.571 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.572 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.573 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.573 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.576 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.576 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.576 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.577 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.578 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.582 I llama_model_loader: - type  f32:   37 tensors
0.00.132.585 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.729 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.714 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.240.227 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.245.123 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.255.944 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.638 I llm_load_vocab: special tokens cache size = 5
0.00.278.004 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.023 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.024 I llm_load_print_meta: arch             = gemma
0.00.278.025 I llm_load_print_meta: vocab type       = SPM
0.00.278.025 I llm_load_print_meta: n_vocab          = 256000
0.00.278.026 I llm_load_print_meta: n_merges         = 0
0.00.278.026 I llm_load_print_meta: vocab_only       = 0
0.00.278.026 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.027 I llm_load_print_meta: n_embd           = 2048
0.00.278.027 I llm_load_print_meta: n_layer          = 18
0.00.278.039 I llm_load_print_meta: n_head           = 8
0.00.278.040 I llm_load_print_meta: n_head_kv        = 1
0.00.278.041 I llm_load_print_meta: n_rot            = 256
0.00.278.041 I llm_load_print_meta: n_swa            = 0
0.00.278.041 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.042 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.043 I llm_load_print_meta: n_gqa            = 8
0.00.278.044 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.045 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.045 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.046 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.047 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.047 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.047 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.048 I llm_load_print_meta: n_ff             = 16384
0.00.278.049 I llm_load_print_meta: n_expert         = 0
0.00.278.049 I llm_load_print_meta: n_expert_used    = 0
0.00.278.049 I llm_load_print_meta: causal attn      = 1
0.00.278.050 I llm_load_print_meta: pooling type     = 0
0.00.278.050 I llm_load_print_meta: rope type        = 2
0.00.278.050 I llm_load_print_meta: rope scaling     = linear
0.00.278.052 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.052 I llm_load_print_meta: freq_scale_train = 1
0.00.278.053 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.053 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.053 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.053 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.053 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.054 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.054 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.055 I llm_load_print_meta: model type       = 2B
0.00.278.056 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.056 I llm_load_print_meta: model params     = 2.51 B
0.00.278.057 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.057 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.058 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.058 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.059 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.059 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.060 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.060 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.060 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.061 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.061 I llm_load_print_meta: max token length = 93
0.00.278.081 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.376.707 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.376.717 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.376.717 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.376.718 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.376.719 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.376.719 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.381.801 I llama_new_context_with_model: n_ctx      = 8192
0.00.381.807 I llama_new_context_with_model: n_batch    = 2048
0.00.381.808 I llama_new_context_with_model: n_ubatch   = 512
0.00.381.808 I llama_new_context_with_model: flash_attn = 0
0.00.381.810 I llama_new_context_with_model: freq_base  = 10000.0
0.00.381.811 I llama_new_context_with_model: freq_scale = 1
0.00.410.056 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.410.071 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.410.164 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.411.051 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.411.060 I llama_new_context_with_model: graph nodes  = 601
0.00.411.061 I llama_new_context_with_model: graph splits = 1
0.00.411.063 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.502.873 I main: llama threadpool init, n_threads = 4
0.00.502.886 I 
0.00.502.963 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.502.966 I 
0.00.503.004 I sampler seed: 1194979728
0.00.503.015 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.503.018 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.503.018 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.503.018 I 
 increably, and swiftly.

(a) Write the sentence in expanded form.
(b) Identify the parts of speech used in the sentence.



0.02.766.543 I llama_perf_sampler_print:    sampling time =       4.91 ms /    33 runs   (    0.15 ms per token,  6722.35 tokens per second)
0.02.766.546 I llama_perf_context_print:        load time =     500.99 ms
0.02.766.547 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.766.549 I llama_perf_context_print:        eval time =    2244.64 ms /    32 runs   (   70.15 ms per token,    14.26 tokens per second)
0.02.766.549 I llama_perf_context_print:       total time =    2263.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.540 I build: 3935 (99bd4ac2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.729 I main: llama backend init
0.00.001.821 I main: load the model and apply lora adapter, if any
0.00.022.246 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.258 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.265 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.266 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.269 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.270 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.271 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.271 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.272 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.272 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.277 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.277 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.278 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.279 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.279 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.938 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.090 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.071 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.079 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.079 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.080 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.080 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.081 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.082 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.085 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.085 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.086 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.086 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.088 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.091 I llama_model_loader: - type  f32:   37 tensors
0.00.133.094 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.648 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.341 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.242.856 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.247.497 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.257.009 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.625 I llm_load_vocab: special tokens cache size = 5
0.00.278.754 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.774 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.774 I llm_load_print_meta: arch             = gemma
0.00.278.775 I llm_load_print_meta: vocab type       = SPM
0.00.278.776 I llm_load_print_meta: n_vocab          = 256000
0.00.278.776 I llm_load_print_meta: n_merges         = 0
0.00.278.777 I llm_load_print_meta: vocab_only       = 0
0.00.278.777 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.777 I llm_load_print_meta: n_embd           = 2048
0.00.278.777 I llm_load_print_meta: n_layer          = 18
0.00.278.789 I llm_load_print_meta: n_head           = 8
0.00.278.790 I llm_load_print_meta: n_head_kv        = 1
0.00.278.791 I llm_load_print_meta: n_rot            = 256
0.00.278.791 I llm_load_print_meta: n_swa            = 0
0.00.278.791 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.792 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.793 I llm_load_print_meta: n_gqa            = 8
0.00.278.793 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.794 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.795 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.796 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.796 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.797 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.797 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.798 I llm_load_print_meta: n_ff             = 16384
0.00.278.798 I llm_load_print_meta: n_expert         = 0
0.00.278.798 I llm_load_print_meta: n_expert_used    = 0
0.00.278.799 I llm_load_print_meta: causal attn      = 1
0.00.278.799 I llm_load_print_meta: pooling type     = 0
0.00.278.799 I llm_load_print_meta: rope type        = 2
0.00.278.800 I llm_load_print_meta: rope scaling     = linear
0.00.278.801 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.802 I llm_load_print_meta: freq_scale_train = 1
0.00.278.802 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.802 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.802 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.803 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.803 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.803 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.803 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.804 I llm_load_print_meta: model type       = 2B
0.00.278.804 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.805 I llm_load_print_meta: model params     = 2.51 B
0.00.278.806 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.806 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.807 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.807 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.807 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.808 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.808 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.808 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.809 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.809 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.809 I llm_load_print_meta: max token length = 93
0.00.278.830 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.372.996 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.378.205 I llama_new_context_with_model: n_ctx      = 8192
0.00.378.211 I llama_new_context_with_model: n_batch    = 2048
0.00.378.212 I llama_new_context_with_model: n_ubatch   = 512
0.00.378.212 I llama_new_context_with_model: flash_attn = 0
0.00.378.214 I llama_new_context_with_model: freq_base  = 10000.0
0.00.378.215 I llama_new_context_with_model: freq_scale = 1
0.00.408.305 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.408.320 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.408.417 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.409.286 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.409.294 I llama_new_context_with_model: graph nodes  = 601
0.00.409.294 I llama_new_context_with_model: graph splits = 1
0.00.409.296 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.496.909 I main: llama threadpool init, n_threads = 4
0.00.496.923 I 
0.00.496.998 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.497.002 I 
0.00.497.043 I sampler seed: 4164803667
0.00.497.053 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.497.056 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.497.056 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.497.056 I 
 increasities. [end of text]


0.00.770.237 I llama_perf_sampler_print:    sampling time =       0.65 ms /     5 runs   (    0.13 ms per token,  7751.94 tokens per second)
0.00.770.239 I llama_perf_context_print:        load time =     495.07 ms
0.00.770.241 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.770.242 I llama_perf_context_print:        eval time =     269.81 ms /     4 runs   (   67.45 ms per token,    14.83 tokens per second)
0.00.770.243 I llama_perf_context_print:       total time =     273.34 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.624 I build: 3935 (99bd4ac2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.866 I main: llama backend init
0.00.001.991 I main: load the model and apply lora adapter, if any
0.00.022.372 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.421 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.429 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.434 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.436 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.440 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.441 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.442 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.442 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.443 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.443 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.448 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.449 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.449 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.450 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.451 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.915 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.997 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.851 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.857 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.858 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.858 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.859 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.860 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.860 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.863 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.863 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.864 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.865 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.866 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.869 I llama_model_loader: - type  f32:   37 tensors
0.00.131.872 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.467 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.237.535 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.238.982 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.243.418 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.252.778 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.420 I llm_load_vocab: special tokens cache size = 5
0.00.274.518 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.535 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.536 I llm_load_print_meta: arch             = gemma
0.00.274.537 I llm_load_print_meta: vocab type       = SPM
0.00.274.538 I llm_load_print_meta: n_vocab          = 256000
0.00.274.538 I llm_load_print_meta: n_merges         = 0
0.00.274.538 I llm_load_print_meta: vocab_only       = 0
0.00.274.539 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.539 I llm_load_print_meta: n_embd           = 2048
0.00.274.539 I llm_load_print_meta: n_layer          = 18
0.00.274.551 I llm_load_print_meta: n_head           = 8
0.00.274.552 I llm_load_print_meta: n_head_kv        = 1
0.00.274.552 I llm_load_print_meta: n_rot            = 256
0.00.274.553 I llm_load_print_meta: n_swa            = 0
0.00.274.553 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.553 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.554 I llm_load_print_meta: n_gqa            = 8
0.00.274.555 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.556 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.557 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.558 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.558 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.558 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.559 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.560 I llm_load_print_meta: n_ff             = 16384
0.00.274.560 I llm_load_print_meta: n_expert         = 0
0.00.274.560 I llm_load_print_meta: n_expert_used    = 0
0.00.274.561 I llm_load_print_meta: causal attn      = 1
0.00.274.561 I llm_load_print_meta: pooling type     = 0
0.00.274.561 I llm_load_print_meta: rope type        = 2
0.00.274.562 I llm_load_print_meta: rope scaling     = linear
0.00.274.563 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.564 I llm_load_print_meta: freq_scale_train = 1
0.00.274.564 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.565 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.565 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.565 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.565 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.565 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.566 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.566 I llm_load_print_meta: model type       = 2B
0.00.274.567 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.568 I llm_load_print_meta: model params     = 2.51 B
0.00.274.568 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.569 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.569 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.570 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.570 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.570 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.571 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.571 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.571 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.572 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.572 I llm_load_print_meta: max token length = 93
0.00.274.601 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.350.444 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.350.451 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.350.451 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.350.452 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.350.452 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.350.453 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.356.333 I llama_new_context_with_model: n_ctx      = 8192
0.00.356.339 I llama_new_context_with_model: n_batch    = 2048
0.00.356.339 I llama_new_context_with_model: n_ubatch   = 512
0.00.356.340 I llama_new_context_with_model: flash_attn = 0
0.00.356.342 I llama_new_context_with_model: freq_base  = 10000.0
0.00.356.343 I llama_new_context_with_model: freq_scale = 1
0.00.385.780 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.385.794 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.385.884 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.769 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.386.778 I llama_new_context_with_model: graph nodes  = 601
0.00.386.779 I llama_new_context_with_model: graph splits = 1
0.00.386.780 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.479.086 I main: llama threadpool init, n_threads = 4
0.00.479.101 I 
0.00.479.188 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.479.192 I 
0.00.479.238 I sampler seed: 2602319923
0.00.479.251 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.479.255 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.479.256 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.479.256 I 
 increasities.

I'm not sure if you understand what I'm saying. Can you please explain?

I'm unable to provide a response

0.02.771.785 I llama_perf_sampler_print:    sampling time =       4.99 ms /    33 runs   (    0.15 ms per token,  6607.93 tokens per second)
0.02.771.787 I llama_perf_context_print:        load time =     477.07 ms
0.02.771.788 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.771.789 I llama_perf_context_print:        eval time =    2273.51 ms /    32 runs   (   71.05 ms per token,    14.08 tokens per second)
0.02.771.790 I llama_perf_context_print:       total time =    2292.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.548 I build: 3935 (99bd4ac2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.751 I main: llama backend init
0.00.001.863 I main: load the model and apply lora adapter, if any
0.00.021.923 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.968 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.979 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.984 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.988 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.991 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.992 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.993 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.993 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.994 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.994 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.998 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.999 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.000 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.001 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.001 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.650 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.770 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.674 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.680 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.681 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.682 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.682 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.683 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.684 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.686 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.687 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.687 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.688 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.689 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.691 I llama_model_loader: - type  f32:   37 tensors
0.00.132.695 I llama_model_loader: - type q8_0:  127 tensors
0.00.213.489 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.477 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.252.104 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.257.159 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.267.128 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.267.741 I llm_load_vocab: special tokens cache size = 5
0.00.288.937 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.288.955 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.288.955 I llm_load_print_meta: arch             = gemma
0.00.288.956 I llm_load_print_meta: vocab type       = SPM
0.00.288.956 I llm_load_print_meta: n_vocab          = 256000
0.00.288.957 I llm_load_print_meta: n_merges         = 0
0.00.288.957 I llm_load_print_meta: vocab_only       = 0
0.00.288.957 I llm_load_print_meta: n_ctx_train      = 8192
0.00.288.958 I llm_load_print_meta: n_embd           = 2048
0.00.288.958 I llm_load_print_meta: n_layer          = 18
0.00.288.969 I llm_load_print_meta: n_head           = 8
0.00.288.970 I llm_load_print_meta: n_head_kv        = 1
0.00.288.971 I llm_load_print_meta: n_rot            = 256
0.00.288.971 I llm_load_print_meta: n_swa            = 0
0.00.288.972 I llm_load_print_meta: n_embd_head_k    = 256
0.00.288.972 I llm_load_print_meta: n_embd_head_v    = 256
0.00.288.973 I llm_load_print_meta: n_gqa            = 8
0.00.288.974 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.288.975 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.288.976 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.288.977 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.288.977 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.288.978 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.288.978 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.288.979 I llm_load_print_meta: n_ff             = 16384
0.00.288.979 I llm_load_print_meta: n_expert         = 0
0.00.288.979 I llm_load_print_meta: n_expert_used    = 0
0.00.288.980 I llm_load_print_meta: causal attn      = 1
0.00.288.980 I llm_load_print_meta: pooling type     = 0
0.00.288.980 I llm_load_print_meta: rope type        = 2
0.00.288.981 I llm_load_print_meta: rope scaling     = linear
0.00.288.982 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.288.983 I llm_load_print_meta: freq_scale_train = 1
0.00.288.983 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.288.983 I llm_load_print_meta: rope_finetuned   = unknown
0.00.288.984 I llm_load_print_meta: ssm_d_conv       = 0
0.00.288.984 I llm_load_print_meta: ssm_d_inner      = 0
0.00.288.984 I llm_load_print_meta: ssm_d_state      = 0
0.00.288.984 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.288.984 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.288.985 I llm_load_print_meta: model type       = 2B
0.00.288.986 I llm_load_print_meta: model ftype      = Q8_0
0.00.288.987 I llm_load_print_meta: model params     = 2.51 B
0.00.288.987 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.288.988 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.288.988 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.288.989 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.288.989 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.288.989 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.288.990 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.288.990 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.288.990 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.288.991 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.288.991 I llm_load_print_meta: max token length = 93
0.00.289.010 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.359.943 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.359.950 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.365.057 I llama_new_context_with_model: n_ctx      = 8192
0.00.365.066 I llama_new_context_with_model: n_batch    = 2048
0.00.365.066 I llama_new_context_with_model: n_ubatch   = 512
0.00.365.067 I llama_new_context_with_model: flash_attn = 0
0.00.365.070 I llama_new_context_with_model: freq_base  = 10000.0
0.00.365.071 I llama_new_context_with_model: freq_scale = 1
0.00.394.604 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.394.621 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.394.711 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.395.564 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.395.572 I llama_new_context_with_model: graph nodes  = 601
0.00.395.572 I llama_new_context_with_model: graph splits = 1
0.00.395.573 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.489.157 I main: llama threadpool init, n_threads = 4
0.00.489.171 I 
0.00.489.255 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.489.258 I 
0.00.489.301 I sampler seed: 177842604
0.00.489.312 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.489.315 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.489.315 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.489.315 I 
 increably!

I am unable to generate a response due to the lack of information regarding the context or topic of the question. Please provide more context or specify

0.02.931.213 I llama_perf_sampler_print:    sampling time =       5.36 ms /    33 runs   (    0.16 ms per token,  6156.72 tokens per second)
0.02.931.216 I llama_perf_context_print:        load time =     487.27 ms
0.02.931.217 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.931.218 I llama_perf_context_print:        eval time =    2422.47 ms /    32 runs   (   75.70 ms per token,    13.21 tokens per second)
0.02.931.219 I llama_perf_context_print:       total time =    2442.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.766s
user	0m32.011s
sys	0m9.508s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3935 (99bd4ac2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32061.90 ms
main:    total time = 32061.90 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.586 I build: 3935 (99bd4ac2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.792 I main: llama backend init
0.00.001.922 I main: load the model and apply lora adapter, if any
0.00.022.258 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.307 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.316 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.322 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.323 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.327 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.328 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.328 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.329 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.329 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.330 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.334 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.334 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.335 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.336 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.336 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.422 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.444 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.301 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.307 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.308 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.308 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.309 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.310 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.310 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.313 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.314 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.314 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.315 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.316 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.319 I llama_model_loader: - type  f32:   37 tensors
0.00.132.323 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.324 I llama_model_loader: - type q6_K:   19 tensors
0.00.209.481 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.021 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.244.705 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.249.915 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.261.033 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.812 I llm_load_vocab: special tokens cache size = 5
0.00.283.309 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.330 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.331 I llm_load_print_meta: arch             = gemma
0.00.283.331 I llm_load_print_meta: vocab type       = SPM
0.00.283.332 I llm_load_print_meta: n_vocab          = 256000
0.00.283.332 I llm_load_print_meta: n_merges         = 0
0.00.283.333 I llm_load_print_meta: vocab_only       = 0
0.00.283.333 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.333 I llm_load_print_meta: n_embd           = 2048
0.00.283.334 I llm_load_print_meta: n_layer          = 18
0.00.283.345 I llm_load_print_meta: n_head           = 8
0.00.283.346 I llm_load_print_meta: n_head_kv        = 1
0.00.283.347 I llm_load_print_meta: n_rot            = 256
0.00.283.347 I llm_load_print_meta: n_swa            = 0
0.00.283.347 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.348 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.349 I llm_load_print_meta: n_gqa            = 8
0.00.283.350 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.351 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.352 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.353 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.354 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.354 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.354 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.355 I llm_load_print_meta: n_ff             = 16384
0.00.283.355 I llm_load_print_meta: n_expert         = 0
0.00.283.356 I llm_load_print_meta: n_expert_used    = 0
0.00.283.356 I llm_load_print_meta: causal attn      = 1
0.00.283.356 I llm_load_print_meta: pooling type     = 0
0.00.283.357 I llm_load_print_meta: rope type        = 2
0.00.283.357 I llm_load_print_meta: rope scaling     = linear
0.00.283.359 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.359 I llm_load_print_meta: freq_scale_train = 1
0.00.283.359 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.360 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.360 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.360 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.360 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.361 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.361 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.361 I llm_load_print_meta: model type       = 2B
0.00.283.362 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.283.363 I llm_load_print_meta: model params     = 2.51 B
0.00.283.364 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.283.364 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.365 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.365 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.365 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.365 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.366 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.366 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.366 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.367 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.367 I llm_load_print_meta: max token length = 93
0.00.283.400 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.341.418 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.341.424 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.341.424 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.341.425 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.341.425 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.341.426 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.346.510 I llama_new_context_with_model: n_ctx      = 8192
0.00.346.517 I llama_new_context_with_model: n_batch    = 2048
0.00.346.517 I llama_new_context_with_model: n_ubatch   = 512
0.00.346.517 I llama_new_context_with_model: flash_attn = 0
0.00.346.520 I llama_new_context_with_model: freq_base  = 10000.0
0.00.346.520 I llama_new_context_with_model: freq_scale = 1
0.00.375.303 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.375.319 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.375.411 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.306 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.376.311 I llama_new_context_with_model: graph nodes  = 601
0.00.376.312 I llama_new_context_with_model: graph splits = 1
0.00.376.313 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.457.360 I main: llama threadpool init, n_threads = 4
0.00.457.373 I 
0.00.457.450 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.457.453 I 
0.00.457.492 I sampler seed: 927754025
0.00.457.502 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.457.505 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.457.506 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.457.506 I 
 encompates an extensive range of topics, including:

**History:**
- Ancient civilizations
- Major historical events
- Cultural development
- Social structures



0.02.121.904 I llama_perf_sampler_print:    sampling time =       5.57 ms /    33 runs   (    0.17 ms per token,  5923.53 tokens per second)
0.02.121.907 I llama_perf_context_print:        load time =     455.41 ms
0.02.121.908 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.121.910 I llama_perf_context_print:        eval time =    1645.30 ms /    32 runs   (   51.42 ms per token,    19.45 tokens per second)
0.02.121.910 I llama_perf_context_print:       total time =    1664.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3935 (99bd4ac2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32134.08 ms
main:    total time = 32134.09 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.537 I build: 3935 (99bd4ac2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.731 I main: llama backend init
0.00.001.847 I main: load the model and apply lora adapter, if any
0.00.022.149 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.163 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.170 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.170 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.174 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.175 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.176 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.176 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.177 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.177 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.181 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.182 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.182 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.182 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.183 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.238 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.214 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.131 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.138 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.138 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.139 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.140 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.141 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.141 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.144 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.145 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.148 I llama_model_loader: - type  f32:   37 tensors
0.00.132.152 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.152 I llama_model_loader: - type q6_K:   19 tensors
0.00.219.956 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.550 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.257.288 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.262.626 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.273.820 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.274.561 I llm_load_vocab: special tokens cache size = 5
0.00.295.916 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.295.936 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.295.937 I llm_load_print_meta: arch             = gemma
0.00.295.938 I llm_load_print_meta: vocab type       = SPM
0.00.295.939 I llm_load_print_meta: n_vocab          = 256000
0.00.295.940 I llm_load_print_meta: n_merges         = 0
0.00.295.940 I llm_load_print_meta: vocab_only       = 0
0.00.295.940 I llm_load_print_meta: n_ctx_train      = 8192
0.00.295.941 I llm_load_print_meta: n_embd           = 2048
0.00.295.941 I llm_load_print_meta: n_layer          = 18
0.00.295.953 I llm_load_print_meta: n_head           = 8
0.00.295.954 I llm_load_print_meta: n_head_kv        = 1
0.00.295.955 I llm_load_print_meta: n_rot            = 256
0.00.295.955 I llm_load_print_meta: n_swa            = 0
0.00.295.955 I llm_load_print_meta: n_embd_head_k    = 256
0.00.295.956 I llm_load_print_meta: n_embd_head_v    = 256
0.00.295.956 I llm_load_print_meta: n_gqa            = 8
0.00.295.957 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.295.959 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.295.959 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.295.961 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.295.961 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.295.961 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.295.962 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.295.962 I llm_load_print_meta: n_ff             = 16384
0.00.295.963 I llm_load_print_meta: n_expert         = 0
0.00.295.963 I llm_load_print_meta: n_expert_used    = 0
0.00.295.963 I llm_load_print_meta: causal attn      = 1
0.00.295.964 I llm_load_print_meta: pooling type     = 0
0.00.295.964 I llm_load_print_meta: rope type        = 2
0.00.295.964 I llm_load_print_meta: rope scaling     = linear
0.00.295.966 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.295.967 I llm_load_print_meta: freq_scale_train = 1
0.00.295.967 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.295.968 I llm_load_print_meta: rope_finetuned   = unknown
0.00.295.968 I llm_load_print_meta: ssm_d_conv       = 0
0.00.295.968 I llm_load_print_meta: ssm_d_inner      = 0
0.00.295.968 I llm_load_print_meta: ssm_d_state      = 0
0.00.295.969 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.295.969 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.295.969 I llm_load_print_meta: model type       = 2B
0.00.295.970 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.295.971 I llm_load_print_meta: model params     = 2.51 B
0.00.295.971 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.295.972 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.295.972 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.295.973 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.295.973 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.295.974 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.295.974 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.295.974 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.295.975 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.295.975 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.295.975 I llm_load_print_meta: max token length = 93
0.00.295.996 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.353.267 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.358.339 I llama_new_context_with_model: n_ctx      = 8192
0.00.358.346 I llama_new_context_with_model: n_batch    = 2048
0.00.358.347 I llama_new_context_with_model: n_ubatch   = 512
0.00.358.348 I llama_new_context_with_model: flash_attn = 0
0.00.358.350 I llama_new_context_with_model: freq_base  = 10000.0
0.00.358.350 I llama_new_context_with_model: freq_scale = 1
0.00.389.176 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.389.192 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.389.288 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.151 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.390.159 I llama_new_context_with_model: graph nodes  = 601
0.00.390.159 I llama_new_context_with_model: graph splits = 1
0.00.390.161 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.322 I main: llama threadpool init, n_threads = 4
0.00.472.337 I 
0.00.472.416 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.472.420 I 
0.00.472.463 I sampler seed: 3849864543
0.00.472.474 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.477 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.472.477 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.472.478 I 
 encompases and other people-pleasing behaviors in an attempt to avoid conflict and maintain harmony within a group.

**Answer the following questions based on the provided

0.02.121.549 I llama_perf_sampler_print:    sampling time =       5.29 ms /    33 runs   (    0.16 ms per token,  6244.09 tokens per second)
0.02.121.552 I llama_perf_context_print:        load time =     470.45 ms
0.02.121.554 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.121.555 I llama_perf_context_print:        eval time =    1629.95 ms /    32 runs   (   50.94 ms per token,    19.63 tokens per second)
0.02.121.557 I llama_perf_context_print:       total time =    1649.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.241s
user	8m15.375s
sys	0m7.036s
