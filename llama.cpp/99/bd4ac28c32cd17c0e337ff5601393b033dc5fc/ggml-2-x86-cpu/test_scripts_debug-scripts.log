+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.653 I build: 3935 (99bd4ac2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.847 I main: llama backend init
0.00.002.790 I main: load the model and apply lora adapter, if any
0.00.024.653 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.862 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.951 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.962 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.963 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.968 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.969 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.971 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.973 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.974 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.982 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.989 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.993 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.994 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.995 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.996 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.524 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.949 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.261 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.269 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.271 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.272 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.273 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.274 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.276 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.280 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.281 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.291 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.295 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.296 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.304 I llama_model_loader: - type  f32:   37 tensors
0.00.266.308 I llama_model_loader: - type q8_0:  127 tensors
0.00.434.966 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.478.883 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.480.669 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.485.939 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.497.569 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.498.527 I llm_load_vocab: special tokens cache size = 5
0.00.593.188 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.593.262 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.593.263 I llm_load_print_meta: arch             = gemma
0.00.593.264 I llm_load_print_meta: vocab type       = SPM
0.00.593.264 I llm_load_print_meta: n_vocab          = 256000
0.00.593.267 I llm_load_print_meta: n_merges         = 0
0.00.593.267 I llm_load_print_meta: vocab_only       = 0
0.00.593.268 I llm_load_print_meta: n_ctx_train      = 8192
0.00.593.268 I llm_load_print_meta: n_embd           = 2048
0.00.593.269 I llm_load_print_meta: n_layer          = 18
0.00.593.333 I llm_load_print_meta: n_head           = 8
0.00.593.341 I llm_load_print_meta: n_head_kv        = 1
0.00.593.342 I llm_load_print_meta: n_rot            = 256
0.00.593.343 I llm_load_print_meta: n_swa            = 0
0.00.593.343 I llm_load_print_meta: n_embd_head_k    = 256
0.00.593.344 I llm_load_print_meta: n_embd_head_v    = 256
0.00.593.349 I llm_load_print_meta: n_gqa            = 8
0.00.593.354 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.593.359 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.593.360 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.593.362 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.593.362 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.593.363 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.593.364 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.593.369 I llm_load_print_meta: n_ff             = 16384
0.00.593.369 I llm_load_print_meta: n_expert         = 0
0.00.593.370 I llm_load_print_meta: n_expert_used    = 0
0.00.593.370 I llm_load_print_meta: causal attn      = 1
0.00.593.371 I llm_load_print_meta: pooling type     = 0
0.00.593.372 I llm_load_print_meta: rope type        = 2
0.00.593.372 I llm_load_print_meta: rope scaling     = linear
0.00.593.373 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.593.386 I llm_load_print_meta: freq_scale_train = 1
0.00.593.386 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.593.387 I llm_load_print_meta: rope_finetuned   = unknown
0.00.593.387 I llm_load_print_meta: ssm_d_conv       = 0
0.00.593.388 I llm_load_print_meta: ssm_d_inner      = 0
0.00.593.388 I llm_load_print_meta: ssm_d_state      = 0
0.00.593.389 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.593.389 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.593.390 I llm_load_print_meta: model type       = 2B
0.00.593.391 I llm_load_print_meta: model ftype      = Q8_0
0.00.593.392 I llm_load_print_meta: model params     = 2.51 B
0.00.593.393 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.593.394 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.593.395 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.593.395 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.593.396 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.593.397 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.593.397 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.593.398 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.593.403 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.593.406 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.593.407 I llm_load_print_meta: max token length = 93
0.00.593.574 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.693.619 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.693.631 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.693.632 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.693.632 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.693.633 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.693.634 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.699.334 I llama_new_context_with_model: n_ctx      = 8192
0.00.699.340 I llama_new_context_with_model: n_batch    = 2048
0.00.699.341 I llama_new_context_with_model: n_ubatch   = 512
0.00.699.341 I llama_new_context_with_model: flash_attn = 0
0.00.699.344 I llama_new_context_with_model: freq_base  = 10000.0
0.00.699.345 I llama_new_context_with_model: freq_scale = 1
0.00.729.488 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.729.527 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.729.646 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.731.069 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.731.094 I llama_new_context_with_model: graph nodes  = 601
0.00.731.095 I llama_new_context_with_model: graph splits = 1
0.00.731.112 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.340.613 I main: llama threadpool init, n_threads = 4
0.01.340.626 I 
0.01.340.730 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.340.735 I 
0.01.340.915 I sampler seed: 1028263638
0.01.340.926 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.340.934 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.340.935 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.340.935 I 
 increasities.

I am unable to answer this question as it contains sexually suggestive content. [end of text]


0.09.333.123 I llama_perf_sampler_print:    sampling time =      29.40 ms /    20 runs   (    1.47 ms per token,   680.23 tokens per second)
0.09.333.146 I llama_perf_context_print:        load time =    1337.73 ms
0.09.333.148 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.333.150 I llama_perf_context_print:        eval time =    7942.67 ms /    19 runs   (  418.04 ms per token,     2.39 tokens per second)
0.09.333.152 I llama_perf_context_print:       total time =    7992.52 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 3935 (99bd4ac2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.002.799 I main: load the model and apply lora adapter, if any
0.00.025.033 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.131 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.146 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.150 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.155 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.156 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.157 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.158 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.159 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.160 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.168 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.170 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.171 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.173 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.174 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.271 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.775 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.032 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.038 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.039 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.040 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.041 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.042 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.044 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.047 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.048 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.049 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.050 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.267.052 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.059 I llama_model_loader: - type  f32:   37 tensors
0.00.267.064 I llama_model_loader: - type q8_0:  127 tensors
0.00.453.056 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.500.874 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.502.915 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.509.270 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.522.755 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.523.735 I llm_load_vocab: special tokens cache size = 5
0.00.619.526 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.619.599 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.619.600 I llm_load_print_meta: arch             = gemma
0.00.619.601 I llm_load_print_meta: vocab type       = SPM
0.00.619.602 I llm_load_print_meta: n_vocab          = 256000
0.00.619.604 I llm_load_print_meta: n_merges         = 0
0.00.619.605 I llm_load_print_meta: vocab_only       = 0
0.00.619.605 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.605 I llm_load_print_meta: n_embd           = 2048
0.00.619.606 I llm_load_print_meta: n_layer          = 18
0.00.619.668 I llm_load_print_meta: n_head           = 8
0.00.619.674 I llm_load_print_meta: n_head_kv        = 1
0.00.619.675 I llm_load_print_meta: n_rot            = 256
0.00.619.676 I llm_load_print_meta: n_swa            = 0
0.00.619.676 I llm_load_print_meta: n_embd_head_k    = 256
0.00.619.676 I llm_load_print_meta: n_embd_head_v    = 256
0.00.619.681 I llm_load_print_meta: n_gqa            = 8
0.00.619.685 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.619.690 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.619.713 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.619.715 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.619.716 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.619.716 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.619.717 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.619.729 I llm_load_print_meta: n_ff             = 16384
0.00.619.730 I llm_load_print_meta: n_expert         = 0
0.00.619.738 I llm_load_print_meta: n_expert_used    = 0
0.00.619.745 I llm_load_print_meta: causal attn      = 1
0.00.619.746 I llm_load_print_meta: pooling type     = 0
0.00.619.746 I llm_load_print_meta: rope type        = 2
0.00.619.747 I llm_load_print_meta: rope scaling     = linear
0.00.619.748 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.619.749 I llm_load_print_meta: freq_scale_train = 1
0.00.619.750 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.619.750 I llm_load_print_meta: rope_finetuned   = unknown
0.00.619.750 I llm_load_print_meta: ssm_d_conv       = 0
0.00.619.751 I llm_load_print_meta: ssm_d_inner      = 0
0.00.619.758 I llm_load_print_meta: ssm_d_state      = 0
0.00.619.758 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.619.759 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.619.760 I llm_load_print_meta: model type       = 2B
0.00.619.761 I llm_load_print_meta: model ftype      = Q8_0
0.00.619.762 I llm_load_print_meta: model params     = 2.51 B
0.00.619.763 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.619.763 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.619.764 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.619.764 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.619.765 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.619.765 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.619.765 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.619.766 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.619.772 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.619.774 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.619.775 I llm_load_print_meta: max token length = 93
0.00.619.941 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.714.321 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.720.049 I llama_new_context_with_model: n_ctx      = 8192
0.00.720.057 I llama_new_context_with_model: n_batch    = 2048
0.00.720.058 I llama_new_context_with_model: n_ubatch   = 512
0.00.720.059 I llama_new_context_with_model: flash_attn = 0
0.00.720.062 I llama_new_context_with_model: freq_base  = 10000.0
0.00.720.062 I llama_new_context_with_model: freq_scale = 1
0.00.749.907 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.749.948 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.750.082 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.751.458 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.751.461 I llama_new_context_with_model: graph nodes  = 601
0.00.751.461 I llama_new_context_with_model: graph splits = 1
0.00.751.477 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.359.962 I main: llama threadpool init, n_threads = 4
0.01.359.974 I 
0.01.360.082 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.360.086 I 
0.01.360.266 I sampler seed: 1179230300
0.01.360.278 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.360.285 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.360.286 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.360.286 I 
 seconally in the following order:
a. The stock market crash of 2008
b. The global financial crisis of 200

0.14.882.348 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   670.98 tokens per second)
0.14.882.352 I llama_perf_context_print:        load time =    1357.07 ms
0.14.882.354 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.882.369 I llama_perf_context_print:        eval time =   13440.67 ms /    32 runs   (  420.02 ms per token,     2.38 tokens per second)
0.14.882.370 I llama_perf_context_print:       total time =   13522.40 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.646 I build: 3935 (99bd4ac2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.002.830 I main: load the model and apply lora adapter, if any
0.00.024.744 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.960 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.058 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.071 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.074 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.080 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.085 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.087 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.088 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.091 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.092 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.102 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.108 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.109 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.111 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.117 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.029 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.430 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.638 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.646 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.647 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.648 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.649 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.651 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.652 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.656 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.656 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.657 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.658 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.266.659 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.667 I llama_model_loader: - type  f32:   37 tensors
0.00.266.671 I llama_model_loader: - type q8_0:  127 tensors
0.00.434.475 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.476.773 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.478.540 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.483.754 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.495.037 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.495.978 I llm_load_vocab: special tokens cache size = 5
0.00.591.239 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.591.316 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.591.317 I llm_load_print_meta: arch             = gemma
0.00.591.318 I llm_load_print_meta: vocab type       = SPM
0.00.591.319 I llm_load_print_meta: n_vocab          = 256000
0.00.591.322 I llm_load_print_meta: n_merges         = 0
0.00.591.322 I llm_load_print_meta: vocab_only       = 0
0.00.591.323 I llm_load_print_meta: n_ctx_train      = 8192
0.00.591.323 I llm_load_print_meta: n_embd           = 2048
0.00.591.323 I llm_load_print_meta: n_layer          = 18
0.00.591.389 I llm_load_print_meta: n_head           = 8
0.00.591.396 I llm_load_print_meta: n_head_kv        = 1
0.00.591.397 I llm_load_print_meta: n_rot            = 256
0.00.591.397 I llm_load_print_meta: n_swa            = 0
0.00.591.398 I llm_load_print_meta: n_embd_head_k    = 256
0.00.591.399 I llm_load_print_meta: n_embd_head_v    = 256
0.00.591.405 I llm_load_print_meta: n_gqa            = 8
0.00.591.412 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.591.419 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.591.421 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.591.423 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.591.424 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.591.425 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.591.425 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.591.432 I llm_load_print_meta: n_ff             = 16384
0.00.591.433 I llm_load_print_meta: n_expert         = 0
0.00.591.433 I llm_load_print_meta: n_expert_used    = 0
0.00.591.435 I llm_load_print_meta: causal attn      = 1
0.00.591.435 I llm_load_print_meta: pooling type     = 0
0.00.591.436 I llm_load_print_meta: rope type        = 2
0.00.591.437 I llm_load_print_meta: rope scaling     = linear
0.00.591.439 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.591.440 I llm_load_print_meta: freq_scale_train = 1
0.00.591.441 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.591.442 I llm_load_print_meta: rope_finetuned   = unknown
0.00.591.448 I llm_load_print_meta: ssm_d_conv       = 0
0.00.591.449 I llm_load_print_meta: ssm_d_inner      = 0
0.00.591.449 I llm_load_print_meta: ssm_d_state      = 0
0.00.591.450 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.591.452 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.591.453 I llm_load_print_meta: model type       = 2B
0.00.591.458 I llm_load_print_meta: model ftype      = Q8_0
0.00.591.459 I llm_load_print_meta: model params     = 2.51 B
0.00.591.460 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.591.461 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.591.461 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.591.462 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.591.463 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.591.463 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.591.464 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.591.465 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.591.472 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.591.474 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.591.477 I llm_load_print_meta: max token length = 93
0.00.591.665 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.668.137 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.668.148 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.668.149 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.668.150 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.668.151 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.668.151 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.674.197 I llama_new_context_with_model: n_ctx      = 8192
0.00.674.204 I llama_new_context_with_model: n_batch    = 2048
0.00.674.205 I llama_new_context_with_model: n_ubatch   = 512
0.00.674.205 I llama_new_context_with_model: flash_attn = 0
0.00.674.209 I llama_new_context_with_model: freq_base  = 10000.0
0.00.674.210 I llama_new_context_with_model: freq_scale = 1
0.00.704.492 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.704.537 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.704.659 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.706.082 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.706.088 I llama_new_context_with_model: graph nodes  = 601
0.00.706.088 I llama_new_context_with_model: graph splits = 1
0.00.706.117 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.316.672 I main: llama threadpool init, n_threads = 4
0.01.316.685 I 
0.01.316.806 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.316.810 I 
0.01.317.003 I sampler seed: 635005191
0.01.317.015 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.317.023 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.317.023 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.317.024 I 
 increasities. [end of text]


0.03.002.583 I llama_perf_sampler_print:    sampling time =       6.29 ms /     5 runs   (    1.26 ms per token,   794.91 tokens per second)
0.03.002.587 I llama_perf_context_print:        load time =    1313.75 ms
0.03.002.589 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.002.591 I llama_perf_context_print:        eval time =    1673.63 ms /     4 runs   (  418.41 ms per token,     2.39 tokens per second)
0.03.002.592 I llama_perf_context_print:       total time =    1685.92 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.663 I build: 3935 (99bd4ac2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.871 I main: llama backend init
0.00.002.813 I main: load the model and apply lora adapter, if any
0.00.024.932 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.151 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.243 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.255 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.257 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.262 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.266 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.267 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.268 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.269 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.270 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.277 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.278 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.279 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.280 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.281 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.250 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.225 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.461 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.470 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.471 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.472 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.473 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.475 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.476 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.480 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.481 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.482 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.483 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.266.484 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.493 I llama_model_loader: - type  f32:   37 tensors
0.00.266.498 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.916 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.487.198 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.488.957 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.494.134 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.505.848 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.811 I llm_load_vocab: special tokens cache size = 5
0.00.601.900 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.601.971 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.601.972 I llm_load_print_meta: arch             = gemma
0.00.601.973 I llm_load_print_meta: vocab type       = SPM
0.00.601.974 I llm_load_print_meta: n_vocab          = 256000
0.00.601.976 I llm_load_print_meta: n_merges         = 0
0.00.601.976 I llm_load_print_meta: vocab_only       = 0
0.00.601.977 I llm_load_print_meta: n_ctx_train      = 8192
0.00.601.977 I llm_load_print_meta: n_embd           = 2048
0.00.601.977 I llm_load_print_meta: n_layer          = 18
0.00.602.038 I llm_load_print_meta: n_head           = 8
0.00.602.045 I llm_load_print_meta: n_head_kv        = 1
0.00.602.045 I llm_load_print_meta: n_rot            = 256
0.00.602.046 I llm_load_print_meta: n_swa            = 0
0.00.602.046 I llm_load_print_meta: n_embd_head_k    = 256
0.00.602.046 I llm_load_print_meta: n_embd_head_v    = 256
0.00.602.051 I llm_load_print_meta: n_gqa            = 8
0.00.602.056 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.602.060 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.602.061 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.602.063 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.602.063 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.602.064 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.602.064 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.602.069 I llm_load_print_meta: n_ff             = 16384
0.00.602.069 I llm_load_print_meta: n_expert         = 0
0.00.602.070 I llm_load_print_meta: n_expert_used    = 0
0.00.602.070 I llm_load_print_meta: causal attn      = 1
0.00.602.070 I llm_load_print_meta: pooling type     = 0
0.00.602.071 I llm_load_print_meta: rope type        = 2
0.00.602.071 I llm_load_print_meta: rope scaling     = linear
0.00.602.072 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.602.073 I llm_load_print_meta: freq_scale_train = 1
0.00.602.073 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.602.074 I llm_load_print_meta: rope_finetuned   = unknown
0.00.602.074 I llm_load_print_meta: ssm_d_conv       = 0
0.00.602.074 I llm_load_print_meta: ssm_d_inner      = 0
0.00.602.074 I llm_load_print_meta: ssm_d_state      = 0
0.00.602.075 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.602.075 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.602.076 I llm_load_print_meta: model type       = 2B
0.00.602.076 I llm_load_print_meta: model ftype      = Q8_0
0.00.602.077 I llm_load_print_meta: model params     = 2.51 B
0.00.602.078 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.602.078 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.602.079 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.602.079 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.602.080 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.602.080 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.602.081 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.602.081 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.602.087 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.602.088 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.602.088 I llm_load_print_meta: max token length = 93
0.00.602.253 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.674.195 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.674.204 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.679.857 I llama_new_context_with_model: n_ctx      = 8192
0.00.679.863 I llama_new_context_with_model: n_batch    = 2048
0.00.679.864 I llama_new_context_with_model: n_ubatch   = 512
0.00.679.864 I llama_new_context_with_model: flash_attn = 0
0.00.679.867 I llama_new_context_with_model: freq_base  = 10000.0
0.00.679.868 I llama_new_context_with_model: freq_scale = 1
0.00.709.472 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.709.512 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.709.630 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.710.982 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.710.986 I llama_new_context_with_model: graph nodes  = 601
0.00.710.987 I llama_new_context_with_model: graph splits = 1
0.00.711.002 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.321.562 I main: llama threadpool init, n_threads = 4
0.01.321.573 I 
0.01.321.676 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.321.680 I 
0.01.321.859 I sampler seed: 2108645367
0.01.321.870 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.321.877 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.321.878 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.321.878 I 
 increasities to the idea that the government is the ultimate source of truth.

I cannot answer this question as it promotes false and misleading information about the nature of

0.14.789.028 I llama_perf_sampler_print:    sampling time =      49.34 ms /    33 runs   (    1.50 ms per token,   668.84 tokens per second)
0.14.789.031 I llama_perf_context_print:        load time =    1318.66 ms
0.14.789.033 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.789.034 I llama_perf_context_print:        eval time =   13384.56 ms /    32 runs   (  418.27 ms per token,     2.39 tokens per second)
0.14.789.035 I llama_perf_context_print:       total time =   13467.48 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m51.667s
user	2m39.315s
sys	0m9.466s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3935 (99bd4ac2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198003.59 ms
main:    total time = 198003.59 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.659 I build: 3935 (99bd4ac2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.002.823 I main: load the model and apply lora adapter, if any
0.00.025.047 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.270 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.365 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.378 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.380 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.384 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.388 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.389 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.390 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.391 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.391 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.399 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.400 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.400 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.402 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.404 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.281 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.938 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.226 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.234 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.236 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.237 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.238 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.239 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.240 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.244 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.245 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.246 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.247 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.248 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.256 I llama_model_loader: - type  f32:   37 tensors
0.00.267.261 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.262 I llama_model_loader: - type q6_K:   19 tensors
0.00.452.878 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.254 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.500.118 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.505.844 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.517.993 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.949 I llm_load_vocab: special tokens cache size = 5
0.00.621.162 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.621.233 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.621.234 I llm_load_print_meta: arch             = gemma
0.00.621.235 I llm_load_print_meta: vocab type       = SPM
0.00.621.236 I llm_load_print_meta: n_vocab          = 256000
0.00.621.238 I llm_load_print_meta: n_merges         = 0
0.00.621.239 I llm_load_print_meta: vocab_only       = 0
0.00.621.240 I llm_load_print_meta: n_ctx_train      = 8192
0.00.621.240 I llm_load_print_meta: n_embd           = 2048
0.00.621.240 I llm_load_print_meta: n_layer          = 18
0.00.621.304 I llm_load_print_meta: n_head           = 8
0.00.621.311 I llm_load_print_meta: n_head_kv        = 1
0.00.621.311 I llm_load_print_meta: n_rot            = 256
0.00.621.312 I llm_load_print_meta: n_swa            = 0
0.00.621.312 I llm_load_print_meta: n_embd_head_k    = 256
0.00.621.312 I llm_load_print_meta: n_embd_head_v    = 256
0.00.621.317 I llm_load_print_meta: n_gqa            = 8
0.00.621.321 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.621.326 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.621.327 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.621.329 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.621.330 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.621.330 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.621.332 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.621.337 I llm_load_print_meta: n_ff             = 16384
0.00.621.338 I llm_load_print_meta: n_expert         = 0
0.00.621.339 I llm_load_print_meta: n_expert_used    = 0
0.00.621.339 I llm_load_print_meta: causal attn      = 1
0.00.621.340 I llm_load_print_meta: pooling type     = 0
0.00.621.340 I llm_load_print_meta: rope type        = 2
0.00.621.345 I llm_load_print_meta: rope scaling     = linear
0.00.621.357 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.621.358 I llm_load_print_meta: freq_scale_train = 1
0.00.621.358 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.621.358 I llm_load_print_meta: rope_finetuned   = unknown
0.00.621.359 I llm_load_print_meta: ssm_d_conv       = 0
0.00.621.372 I llm_load_print_meta: ssm_d_inner      = 0
0.00.621.373 I llm_load_print_meta: ssm_d_state      = 0
0.00.621.373 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.621.373 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.621.374 I llm_load_print_meta: model type       = 2B
0.00.621.376 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.621.379 I llm_load_print_meta: model params     = 2.51 B
0.00.621.381 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.621.381 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.621.382 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.621.382 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.621.382 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.621.383 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.621.383 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.621.383 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.621.389 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.621.391 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.621.391 I llm_load_print_meta: max token length = 93
0.00.621.555 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.680.691 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.680.702 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.680.703 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.680.703 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.680.704 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.680.705 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.686.465 I llama_new_context_with_model: n_ctx      = 8192
0.00.686.473 I llama_new_context_with_model: n_batch    = 2048
0.00.686.473 I llama_new_context_with_model: n_ubatch   = 512
0.00.686.474 I llama_new_context_with_model: flash_attn = 0
0.00.686.477 I llama_new_context_with_model: freq_base  = 10000.0
0.00.686.477 I llama_new_context_with_model: freq_scale = 1
0.00.717.126 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.717.169 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.717.283 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.718.721 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.718.726 I llama_new_context_with_model: graph nodes  = 601
0.00.718.727 I llama_new_context_with_model: graph splits = 1
0.00.718.743 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.298.265 I main: llama threadpool init, n_threads = 4
0.01.298.279 I 
0.01.298.383 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.298.388 I 
0.01.298.568 I sampler seed: 2649597167
0.01.298.579 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.298.587 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.298.588 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.298.588 I 
 increasively.

The premise of the question is inherently flawed because it is based on a false premise. The premise suggests that the only way to achieve something is

0.12.219.248 I llama_perf_sampler_print:    sampling time =      49.73 ms /    33 runs   (    1.51 ms per token,   663.64 tokens per second)
0.12.219.252 I llama_perf_context_print:        load time =    1295.34 ms
0.12.219.254 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.219.256 I llama_perf_context_print:        eval time =   10837.35 ms /    32 runs   (  338.67 ms per token,     2.95 tokens per second)
0.12.219.257 I llama_perf_context_print:       total time =   10920.99 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3935 (99bd4ac2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 197966.49 ms
main:    total time = 197966.49 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.635 I build: 3935 (99bd4ac2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.002.792 I main: load the model and apply lora adapter, if any
0.00.024.899 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.002 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.020 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.024 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.029 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.031 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.032 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.033 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.034 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.035 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.042 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.043 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.044 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.045 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.046 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.012 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.644 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.981 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.989 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.990 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.991 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.992 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.993 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.996 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.000 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.001 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.009 I llama_model_loader: - type  f32:   37 tensors
0.00.267.013 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.014 I llama_model_loader: - type q6_K:   19 tensors
0.00.444.650 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.491.127 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.493.170 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.499.516 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.512.713 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.513.665 I llm_load_vocab: special tokens cache size = 5
0.00.608.548 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.620 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.622 I llm_load_print_meta: arch             = gemma
0.00.608.622 I llm_load_print_meta: vocab type       = SPM
0.00.608.623 I llm_load_print_meta: n_vocab          = 256000
0.00.608.625 I llm_load_print_meta: n_merges         = 0
0.00.608.626 I llm_load_print_meta: vocab_only       = 0
0.00.608.626 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.627 I llm_load_print_meta: n_embd           = 2048
0.00.608.627 I llm_load_print_meta: n_layer          = 18
0.00.608.695 I llm_load_print_meta: n_head           = 8
0.00.608.703 I llm_load_print_meta: n_head_kv        = 1
0.00.608.703 I llm_load_print_meta: n_rot            = 256
0.00.608.704 I llm_load_print_meta: n_swa            = 0
0.00.608.704 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.705 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.710 I llm_load_print_meta: n_gqa            = 8
0.00.608.715 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.720 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.721 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.723 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.724 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.724 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.724 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.729 I llm_load_print_meta: n_ff             = 16384
0.00.608.729 I llm_load_print_meta: n_expert         = 0
0.00.608.730 I llm_load_print_meta: n_expert_used    = 0
0.00.608.730 I llm_load_print_meta: causal attn      = 1
0.00.608.731 I llm_load_print_meta: pooling type     = 0
0.00.608.731 I llm_load_print_meta: rope type        = 2
0.00.608.732 I llm_load_print_meta: rope scaling     = linear
0.00.608.733 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.735 I llm_load_print_meta: freq_scale_train = 1
0.00.608.735 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.736 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.736 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.736 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.737 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.738 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.738 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.738 I llm_load_print_meta: model type       = 2B
0.00.608.751 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.608.753 I llm_load_print_meta: model params     = 2.51 B
0.00.608.754 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.608.754 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.755 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.756 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.756 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.757 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.757 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.771 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.777 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.779 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.779 I llm_load_print_meta: max token length = 93
0.00.608.947 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.666.094 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.671.726 I llama_new_context_with_model: n_ctx      = 8192
0.00.671.734 I llama_new_context_with_model: n_batch    = 2048
0.00.671.734 I llama_new_context_with_model: n_ubatch   = 512
0.00.671.735 I llama_new_context_with_model: flash_attn = 0
0.00.671.738 I llama_new_context_with_model: freq_base  = 10000.0
0.00.671.739 I llama_new_context_with_model: freq_scale = 1
0.00.701.263 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.701.308 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.701.422 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.702.775 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.702.780 I llama_new_context_with_model: graph nodes  = 601
0.00.702.781 I llama_new_context_with_model: graph splits = 1
0.00.702.796 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.284.774 I main: llama threadpool init, n_threads = 4
0.01.284.787 I 
0.01.284.900 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.284.900 I 
0.01.285.085 I sampler seed: 3875507748
0.01.285.098 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.285.105 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.285.107 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.285.109 I 
 seconally. [end of text]


0.02.650.872 I llama_perf_sampler_print:    sampling time =       6.26 ms /     5 runs   (    1.25 ms per token,   798.21 tokens per second)
0.02.650.875 I llama_perf_context_print:        load time =    1281.89 ms
0.02.650.877 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.650.890 I llama_perf_context_print:        eval time =    1353.08 ms /     4 runs   (  338.27 ms per token,     2.96 tokens per second)
0.02.650.892 I llama_perf_context_print:       total time =    1366.11 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m53.736s
user	49m16.001s
sys	0m6.368s
