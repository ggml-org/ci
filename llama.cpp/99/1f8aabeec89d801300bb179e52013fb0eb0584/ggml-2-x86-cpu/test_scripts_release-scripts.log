+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.529 I build: 4239 (991f8aab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.719 I main: llama backend init
0.00.000.725 I main: load the model and apply lora adapter, if any
0.00.021.487 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.496 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.503 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.509 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.510 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.514 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.515 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.515 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.516 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.516 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.517 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.521 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.522 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.522 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.523 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.523 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.257 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.020 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.841 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.847 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.848 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.848 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.849 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.850 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.850 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.852 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.853 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.854 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.855 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.856 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.859 I llama_model_loader: - type  f32:   37 tensors
0.00.131.860 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.143 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.020 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.567 I llm_load_vocab: special tokens cache size = 5
0.00.264.508 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.526 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.527 I llm_load_print_meta: arch             = gemma
0.00.264.527 I llm_load_print_meta: vocab type       = SPM
0.00.264.528 I llm_load_print_meta: n_vocab          = 256000
0.00.264.528 I llm_load_print_meta: n_merges         = 0
0.00.264.529 I llm_load_print_meta: vocab_only       = 0
0.00.264.529 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.529 I llm_load_print_meta: n_embd           = 2048
0.00.264.530 I llm_load_print_meta: n_layer          = 18
0.00.264.542 I llm_load_print_meta: n_head           = 8
0.00.264.543 I llm_load_print_meta: n_head_kv        = 1
0.00.264.544 I llm_load_print_meta: n_rot            = 256
0.00.264.544 I llm_load_print_meta: n_swa            = 0
0.00.264.544 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.545 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.546 I llm_load_print_meta: n_gqa            = 8
0.00.264.547 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.547 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.548 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.550 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.550 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.551 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.551 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.552 I llm_load_print_meta: n_ff             = 16384
0.00.264.552 I llm_load_print_meta: n_expert         = 0
0.00.264.552 I llm_load_print_meta: n_expert_used    = 0
0.00.264.553 I llm_load_print_meta: causal attn      = 1
0.00.264.553 I llm_load_print_meta: pooling type     = 0
0.00.264.553 I llm_load_print_meta: rope type        = 2
0.00.264.553 I llm_load_print_meta: rope scaling     = linear
0.00.264.555 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.555 I llm_load_print_meta: freq_scale_train = 1
0.00.264.555 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.556 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.556 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.556 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.557 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.557 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.557 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.558 I llm_load_print_meta: model type       = 2B
0.00.264.559 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.560 I llm_load_print_meta: model params     = 2.51 B
0.00.264.561 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.561 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.561 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.562 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.562 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.562 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.563 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.563 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.563 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.564 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.564 I llm_load_print_meta: max token length = 93
0.00.365.128 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.365.135 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.365.136 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.365.136 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.365.137 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.365.138 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.370.271 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.278 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.278 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.279 I llama_new_context_with_model: n_batch       = 2048
0.00.370.279 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.279 I llama_new_context_with_model: flash_attn    = 0
0.00.370.282 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.283 I llama_new_context_with_model: freq_scale    = 1
0.00.370.284 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.384.820 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.833 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.925 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.155 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.386.162 I llama_new_context_with_model: graph nodes  = 601
0.00.386.162 I llama_new_context_with_model: graph splits = 1
0.00.386.164 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.888 I main: llama threadpool init, n_threads = 4
0.00.470.905 I 
0.00.470.974 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.470.977 I 
0.00.471.019 I sampler seed: 2916750697
0.00.471.031 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.045 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.471.049 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.471.049 I 
 increasities

I'm so sorry, but I am unable to provide sexually suggestive or inappropriate responses. My purpose is to assist with tasks and provide information in

0.02.714.546 I llama_perf_sampler_print:    sampling time =       4.73 ms /    33 runs   (    0.14 ms per token,  6972.32 tokens per second)
0.02.714.549 I llama_perf_context_print:        load time =     470.14 ms
0.02.714.550 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.714.551 I llama_perf_context_print:        eval time =    2225.02 ms /    32 runs   (   69.53 ms per token,    14.38 tokens per second)
0.02.714.552 I llama_perf_context_print:       total time =    2243.67 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.550 I build: 4239 (991f8aab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.766 I main: llama backend init
0.00.000.773 I main: load the model and apply lora adapter, if any
0.00.021.151 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.166 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.173 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.176 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.180 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.181 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.182 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.182 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.183 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.184 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.188 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.189 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.191 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.192 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.193 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.512 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.141 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.007 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.013 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.014 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.014 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.015 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.016 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.016 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.018 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.019 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.020 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.021 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.021 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.024 I llama_model_loader: - type  f32:   37 tensors
0.00.131.025 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.686 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.313 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.837 I llm_load_vocab: special tokens cache size = 5
0.00.263.478 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.492 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.492 I llm_load_print_meta: arch             = gemma
0.00.263.493 I llm_load_print_meta: vocab type       = SPM
0.00.263.493 I llm_load_print_meta: n_vocab          = 256000
0.00.263.494 I llm_load_print_meta: n_merges         = 0
0.00.263.494 I llm_load_print_meta: vocab_only       = 0
0.00.263.495 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.495 I llm_load_print_meta: n_embd           = 2048
0.00.263.496 I llm_load_print_meta: n_layer          = 18
0.00.263.507 I llm_load_print_meta: n_head           = 8
0.00.263.508 I llm_load_print_meta: n_head_kv        = 1
0.00.263.508 I llm_load_print_meta: n_rot            = 256
0.00.263.509 I llm_load_print_meta: n_swa            = 0
0.00.263.509 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.509 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.510 I llm_load_print_meta: n_gqa            = 8
0.00.263.511 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.512 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.513 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.514 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.515 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.515 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.516 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.517 I llm_load_print_meta: n_ff             = 16384
0.00.263.517 I llm_load_print_meta: n_expert         = 0
0.00.263.517 I llm_load_print_meta: n_expert_used    = 0
0.00.263.517 I llm_load_print_meta: causal attn      = 1
0.00.263.518 I llm_load_print_meta: pooling type     = 0
0.00.263.518 I llm_load_print_meta: rope type        = 2
0.00.263.518 I llm_load_print_meta: rope scaling     = linear
0.00.263.520 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.520 I llm_load_print_meta: freq_scale_train = 1
0.00.263.520 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.521 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.521 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.521 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.522 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.522 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.522 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.523 I llm_load_print_meta: model type       = 2B
0.00.263.523 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.525 I llm_load_print_meta: model params     = 2.51 B
0.00.263.525 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.526 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.526 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.527 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.527 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.527 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.527 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.528 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.528 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.529 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.529 I llm_load_print_meta: max token length = 93
0.00.360.106 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.365.279 I llama_new_context_with_model: n_seq_max     = 1
0.00.365.286 I llama_new_context_with_model: n_ctx         = 4096
0.00.365.286 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.365.286 I llama_new_context_with_model: n_batch       = 2048
0.00.365.287 I llama_new_context_with_model: n_ubatch      = 512
0.00.365.287 I llama_new_context_with_model: flash_attn    = 0
0.00.365.291 I llama_new_context_with_model: freq_base     = 10000.0
0.00.365.291 I llama_new_context_with_model: freq_scale    = 1
0.00.365.292 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.533 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.547 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.642 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.878 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.381.884 I llama_new_context_with_model: graph nodes  = 601
0.00.381.885 I llama_new_context_with_model: graph splits = 1
0.00.381.886 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.018 I main: llama threadpool init, n_threads = 4
0.00.463.034 I 
0.00.463.117 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.463.122 I 
0.00.463.178 I sampler seed: 4177930508
0.00.463.189 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.463.199 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.463.203 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.463.204 I 
 increasities by providing a framework and example for their implementation.

**Framework for Implementing Crescendo Pilferings**

**Step 1. Identify Assets at

0.02.639.931 I llama_perf_sampler_print:    sampling time =       5.05 ms /    33 runs   (    0.15 ms per token,  6539.83 tokens per second)
0.02.639.934 I llama_perf_context_print:        load time =     462.23 ms
0.02.639.935 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.639.937 I llama_perf_context_print:        eval time =    2157.44 ms /    32 runs   (   67.42 ms per token,    14.83 tokens per second)
0.02.639.938 I llama_perf_context_print:       total time =    2176.92 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.186 I build: 4239 (991f8aab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.385 I main: llama backend init
0.00.000.391 I main: load the model and apply lora adapter, if any
0.00.020.575 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.584 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.591 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.596 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.597 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.600 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.601 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.601 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.602 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.602 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.603 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.606 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.607 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.608 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.608 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.609 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.042 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.103 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.947 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.953 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.954 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.954 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.955 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.956 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.956 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.959 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.961 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.962 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.962 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.963 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.967 I llama_model_loader: - type  f32:   37 tensors
0.00.130.968 I llama_model_loader: - type q8_0:  127 tensors
0.00.217.408 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.267.378 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.267.965 I llm_load_vocab: special tokens cache size = 5
0.00.288.899 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.288.916 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.288.917 I llm_load_print_meta: arch             = gemma
0.00.288.917 I llm_load_print_meta: vocab type       = SPM
0.00.288.918 I llm_load_print_meta: n_vocab          = 256000
0.00.288.918 I llm_load_print_meta: n_merges         = 0
0.00.288.919 I llm_load_print_meta: vocab_only       = 0
0.00.288.920 I llm_load_print_meta: n_ctx_train      = 8192
0.00.288.920 I llm_load_print_meta: n_embd           = 2048
0.00.288.920 I llm_load_print_meta: n_layer          = 18
0.00.288.932 I llm_load_print_meta: n_head           = 8
0.00.288.933 I llm_load_print_meta: n_head_kv        = 1
0.00.288.933 I llm_load_print_meta: n_rot            = 256
0.00.288.934 I llm_load_print_meta: n_swa            = 0
0.00.288.934 I llm_load_print_meta: n_embd_head_k    = 256
0.00.288.934 I llm_load_print_meta: n_embd_head_v    = 256
0.00.288.935 I llm_load_print_meta: n_gqa            = 8
0.00.288.936 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.288.937 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.288.938 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.288.941 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.288.941 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.288.942 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.288.942 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.288.943 I llm_load_print_meta: n_ff             = 16384
0.00.288.943 I llm_load_print_meta: n_expert         = 0
0.00.288.943 I llm_load_print_meta: n_expert_used    = 0
0.00.288.944 I llm_load_print_meta: causal attn      = 1
0.00.288.945 I llm_load_print_meta: pooling type     = 0
0.00.288.945 I llm_load_print_meta: rope type        = 2
0.00.288.945 I llm_load_print_meta: rope scaling     = linear
0.00.288.947 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.288.947 I llm_load_print_meta: freq_scale_train = 1
0.00.288.948 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.288.949 I llm_load_print_meta: rope_finetuned   = unknown
0.00.288.949 I llm_load_print_meta: ssm_d_conv       = 0
0.00.288.949 I llm_load_print_meta: ssm_d_inner      = 0
0.00.288.949 I llm_load_print_meta: ssm_d_state      = 0
0.00.288.950 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.288.950 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.288.951 I llm_load_print_meta: model type       = 2B
0.00.288.952 I llm_load_print_meta: model ftype      = Q8_0
0.00.288.953 I llm_load_print_meta: model params     = 2.51 B
0.00.288.954 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.288.955 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.288.955 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.288.956 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.288.956 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.288.957 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.288.957 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.288.958 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.288.958 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.288.959 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.288.959 I llm_load_print_meta: max token length = 93
0.00.363.946 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.363.953 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.363.954 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.363.954 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.363.955 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.363.955 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.369.066 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.072 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.073 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.073 I llama_new_context_with_model: n_batch       = 2048
0.00.369.073 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.074 I llama_new_context_with_model: flash_attn    = 0
0.00.369.075 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.076 I llama_new_context_with_model: freq_scale    = 1
0.00.369.077 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.383.352 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.365 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.447 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.695 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.701 I llama_new_context_with_model: graph nodes  = 601
0.00.384.702 I llama_new_context_with_model: graph splits = 1
0.00.384.703 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.090 I main: llama threadpool init, n_threads = 4
0.00.470.104 I 
0.00.470.180 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.470.183 I 
0.00.470.225 I sampler seed: 810485659
0.00.470.235 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.248 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.252 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.252 I 
 increasities on social media, which involve misrepresenting or exaggerating facts to create a false impression of reality.

**What are some of the potential consequences of participating

0.02.774.292 I llama_perf_sampler_print:    sampling time =       4.92 ms /    33 runs   (    0.15 ms per token,  6705.95 tokens per second)
0.02.774.295 I llama_perf_context_print:        load time =     469.68 ms
0.02.774.296 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.774.298 I llama_perf_context_print:        eval time =    2284.74 ms /    32 runs   (   71.40 ms per token,    14.01 tokens per second)
0.02.774.300 I llama_perf_context_print:       total time =    2304.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.561 I build: 4239 (991f8aab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.753 I main: llama backend init
0.00.000.760 I main: load the model and apply lora adapter, if any
0.00.021.172 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.181 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.189 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.197 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.199 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.203 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.204 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.205 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.206 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.206 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.207 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.210 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.211 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.211 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.212 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.212 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.163 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.867 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.731 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.737 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.738 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.739 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.740 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.741 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.742 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.745 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.746 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.747 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.748 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.749 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.753 I llama_model_loader: - type  f32:   37 tensors
0.00.131.754 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.109 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.268 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.862 I llm_load_vocab: special tokens cache size = 5
0.00.267.610 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.626 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.626 I llm_load_print_meta: arch             = gemma
0.00.267.627 I llm_load_print_meta: vocab type       = SPM
0.00.267.628 I llm_load_print_meta: n_vocab          = 256000
0.00.267.628 I llm_load_print_meta: n_merges         = 0
0.00.267.628 I llm_load_print_meta: vocab_only       = 0
0.00.267.629 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.629 I llm_load_print_meta: n_embd           = 2048
0.00.267.629 I llm_load_print_meta: n_layer          = 18
0.00.267.641 I llm_load_print_meta: n_head           = 8
0.00.267.642 I llm_load_print_meta: n_head_kv        = 1
0.00.267.643 I llm_load_print_meta: n_rot            = 256
0.00.267.643 I llm_load_print_meta: n_swa            = 0
0.00.267.643 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.644 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.644 I llm_load_print_meta: n_gqa            = 8
0.00.267.645 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.646 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.647 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.648 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.649 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.649 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.650 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.651 I llm_load_print_meta: n_ff             = 16384
0.00.267.651 I llm_load_print_meta: n_expert         = 0
0.00.267.651 I llm_load_print_meta: n_expert_used    = 0
0.00.267.652 I llm_load_print_meta: causal attn      = 1
0.00.267.652 I llm_load_print_meta: pooling type     = 0
0.00.267.652 I llm_load_print_meta: rope type        = 2
0.00.267.652 I llm_load_print_meta: rope scaling     = linear
0.00.267.654 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.654 I llm_load_print_meta: freq_scale_train = 1
0.00.267.655 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.655 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.655 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.656 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.656 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.656 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.657 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.657 I llm_load_print_meta: model type       = 2B
0.00.267.658 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.659 I llm_load_print_meta: model params     = 2.51 B
0.00.267.659 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.660 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.660 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.660 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.661 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.661 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.661 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.662 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.662 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.663 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.663 I llm_load_print_meta: max token length = 93
0.00.339.128 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.339.136 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.344.399 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.406 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.406 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.406 I llama_new_context_with_model: n_batch       = 2048
0.00.344.407 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.408 I llama_new_context_with_model: flash_attn    = 0
0.00.344.411 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.412 I llama_new_context_with_model: freq_scale    = 1
0.00.344.413 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.359.826 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.359.841 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.359.947 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.290 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.296 I llama_new_context_with_model: graph nodes  = 601
0.00.361.297 I llama_new_context_with_model: graph splits = 1
0.00.361.298 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.452.565 I main: llama threadpool init, n_threads = 4
0.00.452.581 I 
0.00.452.656 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.452.660 I 
0.00.452.701 I sampler seed: 2242921913
0.00.452.712 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.452.715 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.452.716 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.452.717 I 
 increably. [end of text]


0.00.755.733 I llama_perf_sampler_print:    sampling time =       0.62 ms /     5 runs   (    0.12 ms per token,  8012.82 tokens per second)
0.00.755.735 I llama_perf_context_print:        load time =     451.79 ms
0.00.755.737 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.755.738 I llama_perf_context_print:        eval time =     300.08 ms /     4 runs   (   75.02 ms per token,    13.33 tokens per second)
0.00.755.739 I llama_perf_context_print:       total time =     303.18 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.587s
user	0m31.009s
sys	0m9.451s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4239 (991f8aab)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40213.81 ms
main:    total time = 40213.81 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.534 I build: 4239 (991f8aab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.748 I main: llama backend init
0.00.000.755 I main: load the model and apply lora adapter, if any
0.00.021.365 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.375 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.384 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.388 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.391 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.395 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.396 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.397 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.397 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.398 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.398 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.401 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.402 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.403 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.403 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.404 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.708 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.574 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.424 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.431 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.431 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.432 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.433 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.434 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.434 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.437 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.438 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.439 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.439 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.440 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.443 I llama_model_loader: - type  f32:   37 tensors
0.00.131.445 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.445 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.117 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.521 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.064 I llm_load_vocab: special tokens cache size = 5
0.00.260.842 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.857 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.858 I llm_load_print_meta: arch             = gemma
0.00.260.859 I llm_load_print_meta: vocab type       = SPM
0.00.260.859 I llm_load_print_meta: n_vocab          = 256000
0.00.260.860 I llm_load_print_meta: n_merges         = 0
0.00.260.860 I llm_load_print_meta: vocab_only       = 0
0.00.260.861 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.861 I llm_load_print_meta: n_embd           = 2048
0.00.260.861 I llm_load_print_meta: n_layer          = 18
0.00.260.872 I llm_load_print_meta: n_head           = 8
0.00.260.873 I llm_load_print_meta: n_head_kv        = 1
0.00.260.874 I llm_load_print_meta: n_rot            = 256
0.00.260.874 I llm_load_print_meta: n_swa            = 0
0.00.260.874 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.875 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.875 I llm_load_print_meta: n_gqa            = 8
0.00.260.876 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.877 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.878 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.879 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.880 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.880 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.881 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.881 I llm_load_print_meta: n_ff             = 16384
0.00.260.882 I llm_load_print_meta: n_expert         = 0
0.00.260.882 I llm_load_print_meta: n_expert_used    = 0
0.00.260.882 I llm_load_print_meta: causal attn      = 1
0.00.260.882 I llm_load_print_meta: pooling type     = 0
0.00.260.882 I llm_load_print_meta: rope type        = 2
0.00.260.883 I llm_load_print_meta: rope scaling     = linear
0.00.260.884 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.885 I llm_load_print_meta: freq_scale_train = 1
0.00.260.885 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.886 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.886 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.886 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.887 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.887 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.887 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.888 I llm_load_print_meta: model type       = 2B
0.00.260.888 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.260.889 I llm_load_print_meta: model params     = 2.51 B
0.00.260.889 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.260.890 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.890 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.890 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.891 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.891 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.892 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.892 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.892 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.893 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.893 I llm_load_print_meta: max token length = 93
0.00.321.752 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.321.759 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.321.760 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.321.760 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.321.761 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.321.761 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.326.948 I llama_new_context_with_model: n_seq_max     = 1
0.00.326.954 I llama_new_context_with_model: n_ctx         = 4096
0.00.326.955 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.326.955 I llama_new_context_with_model: n_batch       = 2048
0.00.326.955 I llama_new_context_with_model: n_ubatch      = 512
0.00.326.956 I llama_new_context_with_model: flash_attn    = 0
0.00.326.958 I llama_new_context_with_model: freq_base     = 10000.0
0.00.326.959 I llama_new_context_with_model: freq_scale    = 1
0.00.326.960 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.341.523 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.341.537 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.341.645 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.342.925 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.342.932 I llama_new_context_with_model: graph nodes  = 601
0.00.342.932 I llama_new_context_with_model: graph splits = 1
0.00.342.934 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.448 I main: llama threadpool init, n_threads = 4
0.00.419.464 I 
0.00.419.540 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.419.543 I 
0.00.419.587 I sampler seed: 2818683180
0.00.419.598 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.602 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.602 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.602 I 
 squaRED: An exploration of the relationship between the subconscious mind and the conscious mind.

**Part I: The Subconscious Mind**

**1. Introduction

0.02.011.759 I llama_perf_sampler_print:    sampling time =       4.97 ms /    33 runs   (    0.15 ms per token,  6635.83 tokens per second)
0.02.011.762 I llama_perf_context_print:        load time =     418.67 ms
0.02.011.763 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.011.765 I llama_perf_context_print:        eval time =    1573.70 ms /    32 runs   (   49.18 ms per token,    20.33 tokens per second)
0.02.011.766 I llama_perf_context_print:       total time =    1592.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4239 (991f8aab)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40192.60 ms
main:    total time = 40192.60 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.556 I build: 4239 (991f8aab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.748 I main: llama backend init
0.00.000.754 I main: load the model and apply lora adapter, if any
0.00.021.118 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.133 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.139 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.140 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.144 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.145 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.145 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.146 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.146 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.146 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.150 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.151 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.152 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.153 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.153 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.628 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.020 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.890 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.896 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.896 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.897 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.897 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.898 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.899 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.901 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.902 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.906 I llama_model_loader: - type  f32:   37 tensors
0.00.130.908 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.908 I llama_model_loader: - type q6_K:   19 tensors
0.00.199.924 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.235.297 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.235.731 I llm_load_vocab: special tokens cache size = 5
0.00.256.275 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.256.290 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.256.291 I llm_load_print_meta: arch             = gemma
0.00.256.291 I llm_load_print_meta: vocab type       = SPM
0.00.256.292 I llm_load_print_meta: n_vocab          = 256000
0.00.256.292 I llm_load_print_meta: n_merges         = 0
0.00.256.293 I llm_load_print_meta: vocab_only       = 0
0.00.256.293 I llm_load_print_meta: n_ctx_train      = 8192
0.00.256.294 I llm_load_print_meta: n_embd           = 2048
0.00.256.294 I llm_load_print_meta: n_layer          = 18
0.00.256.305 I llm_load_print_meta: n_head           = 8
0.00.256.306 I llm_load_print_meta: n_head_kv        = 1
0.00.256.307 I llm_load_print_meta: n_rot            = 256
0.00.256.307 I llm_load_print_meta: n_swa            = 0
0.00.256.307 I llm_load_print_meta: n_embd_head_k    = 256
0.00.256.308 I llm_load_print_meta: n_embd_head_v    = 256
0.00.256.309 I llm_load_print_meta: n_gqa            = 8
0.00.256.310 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.256.311 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.256.312 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.256.313 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.256.313 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.256.314 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.256.314 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.256.315 I llm_load_print_meta: n_ff             = 16384
0.00.256.315 I llm_load_print_meta: n_expert         = 0
0.00.256.316 I llm_load_print_meta: n_expert_used    = 0
0.00.256.316 I llm_load_print_meta: causal attn      = 1
0.00.256.316 I llm_load_print_meta: pooling type     = 0
0.00.256.317 I llm_load_print_meta: rope type        = 2
0.00.256.317 I llm_load_print_meta: rope scaling     = linear
0.00.256.319 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.256.319 I llm_load_print_meta: freq_scale_train = 1
0.00.256.319 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.256.320 I llm_load_print_meta: rope_finetuned   = unknown
0.00.256.320 I llm_load_print_meta: ssm_d_conv       = 0
0.00.256.320 I llm_load_print_meta: ssm_d_inner      = 0
0.00.256.321 I llm_load_print_meta: ssm_d_state      = 0
0.00.256.321 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.256.321 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.256.322 I llm_load_print_meta: model type       = 2B
0.00.256.322 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.256.323 I llm_load_print_meta: model params     = 2.51 B
0.00.256.324 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.256.324 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.256.324 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.256.325 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.256.325 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.256.325 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.256.326 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.256.326 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.256.326 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.256.327 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.256.327 I llm_load_print_meta: max token length = 93
0.00.312.636 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.317.720 I llama_new_context_with_model: n_seq_max     = 1
0.00.317.726 I llama_new_context_with_model: n_ctx         = 4096
0.00.317.726 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.317.727 I llama_new_context_with_model: n_batch       = 2048
0.00.317.727 I llama_new_context_with_model: n_ubatch      = 512
0.00.317.728 I llama_new_context_with_model: flash_attn    = 0
0.00.317.730 I llama_new_context_with_model: freq_base     = 10000.0
0.00.317.731 I llama_new_context_with_model: freq_scale    = 1
0.00.317.732 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.332.292 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.332.306 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.332.395 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.333.668 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.333.674 I llama_new_context_with_model: graph nodes  = 601
0.00.333.674 I llama_new_context_with_model: graph splits = 1
0.00.333.676 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.410.681 I main: llama threadpool init, n_threads = 4
0.00.410.699 I 
0.00.410.772 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.410.775 I 
0.00.410.819 I sampler seed: 1519505923
0.00.410.830 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.410.837 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.410.838 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.410.840 I 
 squaRED, a leading AI-powered legal research and analytics platform, has revolutionized the way lawyers conduct business.

**Here are some key features and benefits

0.01.992.024 I llama_perf_sampler_print:    sampling time =       4.93 ms /    33 runs   (    0.15 ms per token,  6692.35 tokens per second)
0.01.992.026 I llama_perf_context_print:        load time =     409.91 ms
0.01.992.027 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.992.029 I llama_perf_context_print:        eval time =    1562.10 ms /    32 runs   (   48.82 ms per token,    20.49 tokens per second)
0.01.992.029 I llama_perf_context_print:       total time =    1581.35 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.173s
user	10m24.503s
sys	0m6.785s
