+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.647 I build: 4239 (991f8aab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.861 I main: llama backend init
0.00.000.880 I main: load the model and apply lora adapter, if any
0.00.023.619 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.630 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.719 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.731 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.732 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.739 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.741 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.742 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.743 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.745 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.746 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.753 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.754 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.755 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.757 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.759 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.996 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.330.702 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.837 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.844 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.846 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.847 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.848 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.850 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.851 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.855 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.857 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.858 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.353.859 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.353.861 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.353.869 I llama_model_loader: - type  f32:   37 tensors
0.00.353.871 I llama_model_loader: - type q8_0:  127 tensors
0.00.624.391 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.750.568 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.751.568 I llm_load_vocab: special tokens cache size = 5
0.00.939.840 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.939.911 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.939.912 I llm_load_print_meta: arch             = gemma
0.00.939.913 I llm_load_print_meta: vocab type       = SPM
0.00.939.914 I llm_load_print_meta: n_vocab          = 256000
0.00.939.917 I llm_load_print_meta: n_merges         = 0
0.00.939.917 I llm_load_print_meta: vocab_only       = 0
0.00.939.918 I llm_load_print_meta: n_ctx_train      = 8192
0.00.939.918 I llm_load_print_meta: n_embd           = 2048
0.00.939.919 I llm_load_print_meta: n_layer          = 18
0.00.939.982 I llm_load_print_meta: n_head           = 8
0.00.939.990 I llm_load_print_meta: n_head_kv        = 1
0.00.939.990 I llm_load_print_meta: n_rot            = 256
0.00.939.991 I llm_load_print_meta: n_swa            = 0
0.00.939.992 I llm_load_print_meta: n_embd_head_k    = 256
0.00.939.992 I llm_load_print_meta: n_embd_head_v    = 256
0.00.939.997 I llm_load_print_meta: n_gqa            = 8
0.00.940.013 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.940.023 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.940.024 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.940.026 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.940.027 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.940.027 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.940.028 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.940.032 I llm_load_print_meta: n_ff             = 16384
0.00.940.033 I llm_load_print_meta: n_expert         = 0
0.00.940.033 I llm_load_print_meta: n_expert_used    = 0
0.00.940.034 I llm_load_print_meta: causal attn      = 1
0.00.940.035 I llm_load_print_meta: pooling type     = 0
0.00.940.035 I llm_load_print_meta: rope type        = 2
0.00.940.035 I llm_load_print_meta: rope scaling     = linear
0.00.940.037 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.940.038 I llm_load_print_meta: freq_scale_train = 1
0.00.940.038 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.940.039 I llm_load_print_meta: rope_finetuned   = unknown
0.00.940.039 I llm_load_print_meta: ssm_d_conv       = 0
0.00.940.040 I llm_load_print_meta: ssm_d_inner      = 0
0.00.940.040 I llm_load_print_meta: ssm_d_state      = 0
0.00.940.041 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.940.041 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.940.042 I llm_load_print_meta: model type       = 2B
0.00.940.043 I llm_load_print_meta: model ftype      = Q8_0
0.00.940.044 I llm_load_print_meta: model params     = 2.51 B
0.00.940.053 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.940.054 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.940.055 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.940.055 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.940.056 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.940.057 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.940.057 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.940.058 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.940.065 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.940.066 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.940.067 I llm_load_print_meta: max token length = 93
0.01.042.709 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.042.718 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.042.719 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.042.720 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.042.720 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.042.721 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.048.580 I llama_new_context_with_model: n_seq_max     = 1
0.01.048.587 I llama_new_context_with_model: n_ctx         = 4096
0.01.048.588 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.048.588 I llama_new_context_with_model: n_batch       = 2048
0.01.048.588 I llama_new_context_with_model: n_ubatch      = 512
0.01.048.589 I llama_new_context_with_model: flash_attn    = 0
0.01.048.591 I llama_new_context_with_model: freq_base     = 10000.0
0.01.048.592 I llama_new_context_with_model: freq_scale    = 1
0.01.048.593 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.063.798 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.063.839 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.063.968 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.066.571 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.066.575 I llama_new_context_with_model: graph nodes  = 601
0.01.066.576 I llama_new_context_with_model: graph splits = 1
0.01.066.598 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.677.270 I main: llama threadpool init, n_threads = 4
0.01.677.286 I 
0.01.677.405 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.677.409 I 
0.01.677.644 I sampler seed: 2672616534
0.01.677.658 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.677.669 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.677.671 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.677.671 I 
 increasities. [end of text]


0.03.374.515 I llama_perf_sampler_print:    sampling time =       6.24 ms /     5 runs   (    1.25 ms per token,   800.77 tokens per second)
0.03.374.519 I llama_perf_context_print:        load time =    1676.30 ms
0.03.374.520 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.374.522 I llama_perf_context_print:        eval time =    1684.15 ms /     4 runs   (  421.04 ms per token,     2.38 tokens per second)
0.03.374.523 I llama_perf_context_print:       total time =    1697.26 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.696 I build: 4239 (991f8aab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.932 I main: llama backend init
0.00.000.941 I main: load the model and apply lora adapter, if any
0.00.023.804 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.912 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.928 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.931 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.939 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.943 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.944 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.945 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.947 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.949 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.962 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.966 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.968 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.969 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.972 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.820 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.529 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.355.107 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.355.117 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.355.118 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.355.120 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.355.121 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.355.122 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.355.124 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.355.128 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.355.130 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.355.131 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.355.132 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.355.135 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.355.143 I llama_model_loader: - type  f32:   37 tensors
0.00.355.145 I llama_model_loader: - type q8_0:  127 tensors
0.00.617.370 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.742.210 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.743.136 I llm_load_vocab: special tokens cache size = 5
0.00.940.404 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.940.480 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.940.481 I llm_load_print_meta: arch             = gemma
0.00.940.481 I llm_load_print_meta: vocab type       = SPM
0.00.940.482 I llm_load_print_meta: n_vocab          = 256000
0.00.940.485 I llm_load_print_meta: n_merges         = 0
0.00.940.485 I llm_load_print_meta: vocab_only       = 0
0.00.940.486 I llm_load_print_meta: n_ctx_train      = 8192
0.00.940.486 I llm_load_print_meta: n_embd           = 2048
0.00.940.487 I llm_load_print_meta: n_layer          = 18
0.00.940.555 I llm_load_print_meta: n_head           = 8
0.00.940.562 I llm_load_print_meta: n_head_kv        = 1
0.00.940.567 I llm_load_print_meta: n_rot            = 256
0.00.940.567 I llm_load_print_meta: n_swa            = 0
0.00.940.567 I llm_load_print_meta: n_embd_head_k    = 256
0.00.940.568 I llm_load_print_meta: n_embd_head_v    = 256
0.00.940.572 I llm_load_print_meta: n_gqa            = 8
0.00.940.577 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.940.583 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.940.586 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.940.587 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.940.588 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.940.588 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.940.589 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.940.594 I llm_load_print_meta: n_ff             = 16384
0.00.940.594 I llm_load_print_meta: n_expert         = 0
0.00.940.595 I llm_load_print_meta: n_expert_used    = 0
0.00.940.595 I llm_load_print_meta: causal attn      = 1
0.00.940.596 I llm_load_print_meta: pooling type     = 0
0.00.940.597 I llm_load_print_meta: rope type        = 2
0.00.940.597 I llm_load_print_meta: rope scaling     = linear
0.00.940.598 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.940.599 I llm_load_print_meta: freq_scale_train = 1
0.00.940.599 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.940.601 I llm_load_print_meta: rope_finetuned   = unknown
0.00.940.601 I llm_load_print_meta: ssm_d_conv       = 0
0.00.940.602 I llm_load_print_meta: ssm_d_inner      = 0
0.00.940.603 I llm_load_print_meta: ssm_d_state      = 0
0.00.940.603 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.940.603 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.940.604 I llm_load_print_meta: model type       = 2B
0.00.940.605 I llm_load_print_meta: model ftype      = Q8_0
0.00.940.606 I llm_load_print_meta: model params     = 2.51 B
0.00.940.615 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.940.616 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.940.617 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.940.618 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.940.618 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.940.619 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.940.620 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.940.620 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.940.626 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.940.630 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.940.630 I llm_load_print_meta: max token length = 93
0.01.036.743 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.042.716 I llama_new_context_with_model: n_seq_max     = 1
0.01.042.725 I llama_new_context_with_model: n_ctx         = 4096
0.01.042.725 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.042.726 I llama_new_context_with_model: n_batch       = 2048
0.01.042.726 I llama_new_context_with_model: n_ubatch      = 512
0.01.042.727 I llama_new_context_with_model: flash_attn    = 0
0.01.042.730 I llama_new_context_with_model: freq_base     = 10000.0
0.01.042.732 I llama_new_context_with_model: freq_scale    = 1
0.01.042.733 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.058.436 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.058.482 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.058.634 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.061.263 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.061.266 I llama_new_context_with_model: graph nodes  = 601
0.01.061.266 I llama_new_context_with_model: graph splits = 1
0.01.061.290 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.671.545 I main: llama threadpool init, n_threads = 4
0.01.671.562 I 
0.01.671.677 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.671.681 I 
0.01.671.920 I sampler seed: 2742510463
0.01.671.933 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.671.945 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.671.945 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.671.946 I 
 increasements for the following two sentences:

Sentence 1: The company's growth has been exponential in recent years.

Sentence 2: The company

0.15.459.711 I llama_perf_sampler_print:    sampling time =      49.26 ms /    33 runs   (    1.49 ms per token,   669.91 tokens per second)
0.15.459.724 I llama_perf_context_print:        load time =    1670.49 ms
0.15.459.726 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.459.727 I llama_perf_context_print:        eval time =   13699.07 ms /    32 runs   (  428.10 ms per token,     2.34 tokens per second)
0.15.459.728 I llama_perf_context_print:       total time =   13788.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 4239 (991f8aab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.000.850 I main: load the model and apply lora adapter, if any
0.00.023.174 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.185 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.273 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.285 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.286 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.292 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.296 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.298 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.299 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.300 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.301 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.310 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.311 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.313 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.314 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.316 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.252.968 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.355.954 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.379.191 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.379.201 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.379.202 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.379.204 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.379.205 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.379.206 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.379.208 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.379.211 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.379.213 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.379.214 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.379.215 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.379.217 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.379.226 I llama_model_loader: - type  f32:   37 tensors
0.00.379.229 I llama_model_loader: - type q8_0:  127 tensors
0.00.645.663 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.764.999 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.765.846 I llm_load_vocab: special tokens cache size = 5
0.00.975.588 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.975.658 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.975.659 I llm_load_print_meta: arch             = gemma
0.00.975.660 I llm_load_print_meta: vocab type       = SPM
0.00.975.661 I llm_load_print_meta: n_vocab          = 256000
0.00.975.664 I llm_load_print_meta: n_merges         = 0
0.00.975.664 I llm_load_print_meta: vocab_only       = 0
0.00.975.665 I llm_load_print_meta: n_ctx_train      = 8192
0.00.975.665 I llm_load_print_meta: n_embd           = 2048
0.00.975.665 I llm_load_print_meta: n_layer          = 18
0.00.975.727 I llm_load_print_meta: n_head           = 8
0.00.975.735 I llm_load_print_meta: n_head_kv        = 1
0.00.975.736 I llm_load_print_meta: n_rot            = 256
0.00.975.736 I llm_load_print_meta: n_swa            = 0
0.00.975.737 I llm_load_print_meta: n_embd_head_k    = 256
0.00.975.737 I llm_load_print_meta: n_embd_head_v    = 256
0.00.975.742 I llm_load_print_meta: n_gqa            = 8
0.00.975.746 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.975.751 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.975.753 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.975.754 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.975.754 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.975.755 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.975.755 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.975.760 I llm_load_print_meta: n_ff             = 16384
0.00.975.761 I llm_load_print_meta: n_expert         = 0
0.00.975.761 I llm_load_print_meta: n_expert_used    = 0
0.00.975.762 I llm_load_print_meta: causal attn      = 1
0.00.975.762 I llm_load_print_meta: pooling type     = 0
0.00.975.762 I llm_load_print_meta: rope type        = 2
0.00.975.762 I llm_load_print_meta: rope scaling     = linear
0.00.975.764 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.975.765 I llm_load_print_meta: freq_scale_train = 1
0.00.975.766 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.975.766 I llm_load_print_meta: rope_finetuned   = unknown
0.00.975.766 I llm_load_print_meta: ssm_d_conv       = 0
0.00.975.767 I llm_load_print_meta: ssm_d_inner      = 0
0.00.975.768 I llm_load_print_meta: ssm_d_state      = 0
0.00.975.768 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.975.768 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.975.769 I llm_load_print_meta: model type       = 2B
0.00.975.770 I llm_load_print_meta: model ftype      = Q8_0
0.00.975.770 I llm_load_print_meta: model params     = 2.51 B
0.00.975.779 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.975.780 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.975.780 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.975.785 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.975.785 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.975.786 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.975.786 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.975.795 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.975.802 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.975.803 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.975.804 I llm_load_print_meta: max token length = 93
0.01.053.552 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.053.561 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.053.561 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.053.562 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.053.563 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.053.564 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.059.246 I llama_new_context_with_model: n_seq_max     = 1
0.01.059.252 I llama_new_context_with_model: n_ctx         = 4096
0.01.059.253 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.059.253 I llama_new_context_with_model: n_batch       = 2048
0.01.059.254 I llama_new_context_with_model: n_ubatch      = 512
0.01.059.254 I llama_new_context_with_model: flash_attn    = 0
0.01.059.257 I llama_new_context_with_model: freq_base     = 10000.0
0.01.059.258 I llama_new_context_with_model: freq_scale    = 1
0.01.059.258 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.073.701 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.073.738 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.073.862 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.076.361 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.076.364 I llama_new_context_with_model: graph nodes  = 601
0.01.076.365 I llama_new_context_with_model: graph splits = 1
0.01.076.388 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.685.674 I main: llama threadpool init, n_threads = 4
0.01.685.691 I 
0.01.685.815 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.685.816 I 
0.01.686.055 I sampler seed: 3854579137
0.01.686.069 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.686.079 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.686.080 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.686.080 I 
 increasities, and the like, are all acceptable in a code review, as long as they are not harming the readability or maintainability of the code.



0.15.257.460 I llama_perf_sampler_print:    sampling time =      49.37 ms /    33 runs   (    1.50 ms per token,   668.45 tokens per second)
0.15.257.465 I llama_perf_context_print:        load time =    1684.73 ms
0.15.257.467 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.257.469 I llama_perf_context_print:        eval time =   13482.91 ms /    32 runs   (  421.34 ms per token,     2.37 tokens per second)
0.15.257.470 I llama_perf_context_print:       total time =   13571.80 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.643 I build: 4239 (991f8aab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.000.849 I main: load the model and apply lora adapter, if any
0.00.023.489 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.500 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.592 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.605 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.607 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.613 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.617 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.619 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.620 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.621 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.622 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.633 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.634 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.636 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.637 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.648 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.483 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.418 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.801 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.812 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.814 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.816 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.817 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.818 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.820 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.824 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.826 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.827 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.828 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.352.831 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.840 I llama_model_loader: - type  f32:   37 tensors
0.00.352.842 I llama_model_loader: - type q8_0:  127 tensors
0.00.624.140 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.745.103 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.746.028 I llm_load_vocab: special tokens cache size = 5
0.00.940.433 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.940.507 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.940.508 I llm_load_print_meta: arch             = gemma
0.00.940.509 I llm_load_print_meta: vocab type       = SPM
0.00.940.510 I llm_load_print_meta: n_vocab          = 256000
0.00.940.512 I llm_load_print_meta: n_merges         = 0
0.00.940.512 I llm_load_print_meta: vocab_only       = 0
0.00.940.513 I llm_load_print_meta: n_ctx_train      = 8192
0.00.940.513 I llm_load_print_meta: n_embd           = 2048
0.00.940.514 I llm_load_print_meta: n_layer          = 18
0.00.940.578 I llm_load_print_meta: n_head           = 8
0.00.940.585 I llm_load_print_meta: n_head_kv        = 1
0.00.940.586 I llm_load_print_meta: n_rot            = 256
0.00.940.586 I llm_load_print_meta: n_swa            = 0
0.00.940.587 I llm_load_print_meta: n_embd_head_k    = 256
0.00.940.587 I llm_load_print_meta: n_embd_head_v    = 256
0.00.940.591 I llm_load_print_meta: n_gqa            = 8
0.00.940.596 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.940.601 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.940.602 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.940.604 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.940.604 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.940.604 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.940.605 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.940.609 I llm_load_print_meta: n_ff             = 16384
0.00.940.610 I llm_load_print_meta: n_expert         = 0
0.00.940.610 I llm_load_print_meta: n_expert_used    = 0
0.00.940.610 I llm_load_print_meta: causal attn      = 1
0.00.940.611 I llm_load_print_meta: pooling type     = 0
0.00.940.611 I llm_load_print_meta: rope type        = 2
0.00.940.611 I llm_load_print_meta: rope scaling     = linear
0.00.940.612 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.940.613 I llm_load_print_meta: freq_scale_train = 1
0.00.940.613 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.940.614 I llm_load_print_meta: rope_finetuned   = unknown
0.00.940.614 I llm_load_print_meta: ssm_d_conv       = 0
0.00.940.615 I llm_load_print_meta: ssm_d_inner      = 0
0.00.940.615 I llm_load_print_meta: ssm_d_state      = 0
0.00.940.615 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.940.616 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.940.616 I llm_load_print_meta: model type       = 2B
0.00.940.617 I llm_load_print_meta: model ftype      = Q8_0
0.00.940.618 I llm_load_print_meta: model params     = 2.51 B
0.00.940.628 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.940.628 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.940.628 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.940.629 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.940.630 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.940.630 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.940.630 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.940.631 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.940.636 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.940.638 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.940.638 I llm_load_print_meta: max token length = 93
0.01.013.907 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.013.918 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.019.755 I llama_new_context_with_model: n_seq_max     = 1
0.01.019.762 I llama_new_context_with_model: n_ctx         = 4096
0.01.019.763 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.019.763 I llama_new_context_with_model: n_batch       = 2048
0.01.019.764 I llama_new_context_with_model: n_ubatch      = 512
0.01.019.764 I llama_new_context_with_model: flash_attn    = 0
0.01.019.767 I llama_new_context_with_model: freq_base     = 10000.0
0.01.019.768 I llama_new_context_with_model: freq_scale    = 1
0.01.019.768 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.035.234 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.035.273 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.035.405 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.038.043 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.038.047 I llama_new_context_with_model: graph nodes  = 601
0.01.038.048 I llama_new_context_with_model: graph splits = 1
0.01.038.070 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.645.997 I main: llama threadpool init, n_threads = 4
0.01.646.013 I 
0.01.646.138 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.646.142 I 
0.01.646.380 I sampler seed: 1008232759
0.01.646.396 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.646.405 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.646.408 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.646.408 I 
 increasities and their potential causes

**Introduction:**

A complex interplay of biological, psychological, and social factors contribute to the development of narcissistic personality disorder (NPD

0.15.278.162 I llama_perf_sampler_print:    sampling time =      49.30 ms /    33 runs   (    1.49 ms per token,   669.41 tokens per second)
0.15.278.166 I llama_perf_context_print:        load time =    1645.06 ms
0.15.278.167 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.278.169 I llama_perf_context_print:        eval time =   13542.93 ms /    32 runs   (  423.22 ms per token,     2.36 tokens per second)
0.15.278.191 I llama_perf_context_print:       total time =   13632.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m58.937s
user	3m4.867s
sys	0m9.257s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4239 (991f8aab)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186665.91 ms
main:    total time = 186665.91 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 4239 (991f8aab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.856 I main: llama backend init
0.00.000.863 I main: load the model and apply lora adapter, if any
0.00.023.379 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.390 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.482 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.494 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.496 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.503 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.507 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.508 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.509 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.511 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.512 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.521 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.524 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.533 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.535 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.536 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.232.298 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.334.907 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.358.194 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.358.205 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.358.207 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.358.208 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.358.210 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.358.212 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.358.213 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.358.218 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.358.219 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.221 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.358.223 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.358.225 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.358.235 I llama_model_loader: - type  f32:   37 tensors
0.00.358.238 I llama_model_loader: - type q4_K:  108 tensors
0.00.358.246 I llama_model_loader: - type q6_K:   19 tensors
0.00.621.143 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.745.082 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.745.985 I llm_load_vocab: special tokens cache size = 5
0.00.933.662 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.933.732 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.933.733 I llm_load_print_meta: arch             = gemma
0.00.933.734 I llm_load_print_meta: vocab type       = SPM
0.00.933.734 I llm_load_print_meta: n_vocab          = 256000
0.00.933.737 I llm_load_print_meta: n_merges         = 0
0.00.933.737 I llm_load_print_meta: vocab_only       = 0
0.00.933.738 I llm_load_print_meta: n_ctx_train      = 8192
0.00.933.738 I llm_load_print_meta: n_embd           = 2048
0.00.933.739 I llm_load_print_meta: n_layer          = 18
0.00.933.804 I llm_load_print_meta: n_head           = 8
0.00.933.811 I llm_load_print_meta: n_head_kv        = 1
0.00.933.813 I llm_load_print_meta: n_rot            = 256
0.00.933.813 I llm_load_print_meta: n_swa            = 0
0.00.933.813 I llm_load_print_meta: n_embd_head_k    = 256
0.00.933.814 I llm_load_print_meta: n_embd_head_v    = 256
0.00.933.818 I llm_load_print_meta: n_gqa            = 8
0.00.933.823 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.933.828 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.933.831 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.933.833 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.933.834 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.933.834 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.933.835 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.933.839 I llm_load_print_meta: n_ff             = 16384
0.00.933.840 I llm_load_print_meta: n_expert         = 0
0.00.933.841 I llm_load_print_meta: n_expert_used    = 0
0.00.933.841 I llm_load_print_meta: causal attn      = 1
0.00.933.842 I llm_load_print_meta: pooling type     = 0
0.00.933.842 I llm_load_print_meta: rope type        = 2
0.00.933.843 I llm_load_print_meta: rope scaling     = linear
0.00.933.845 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.933.845 I llm_load_print_meta: freq_scale_train = 1
0.00.933.846 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.933.847 I llm_load_print_meta: rope_finetuned   = unknown
0.00.933.847 I llm_load_print_meta: ssm_d_conv       = 0
0.00.933.847 I llm_load_print_meta: ssm_d_inner      = 0
0.00.933.848 I llm_load_print_meta: ssm_d_state      = 0
0.00.933.849 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.933.849 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.933.850 I llm_load_print_meta: model type       = 2B
0.00.933.851 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.933.852 I llm_load_print_meta: model params     = 2.51 B
0.00.933.861 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.933.862 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.933.863 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.933.863 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.933.864 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.933.865 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.933.865 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.933.865 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.933.871 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.933.873 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.933.874 I llm_load_print_meta: max token length = 93
0.00.997.701 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.997.709 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.997.710 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.997.710 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.997.711 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.997.712 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.003.461 I llama_new_context_with_model: n_seq_max     = 1
0.01.003.468 I llama_new_context_with_model: n_ctx         = 4096
0.01.003.468 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.003.469 I llama_new_context_with_model: n_batch       = 2048
0.01.003.469 I llama_new_context_with_model: n_ubatch      = 512
0.01.003.470 I llama_new_context_with_model: flash_attn    = 0
0.01.003.472 I llama_new_context_with_model: freq_base     = 10000.0
0.01.003.473 I llama_new_context_with_model: freq_scale    = 1
0.01.003.473 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.018.196 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.018.237 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.018.364 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.020.947 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.020.951 I llama_new_context_with_model: graph nodes  = 601
0.01.020.952 I llama_new_context_with_model: graph splits = 1
0.01.020.974 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.606.760 I main: llama threadpool init, n_threads = 4
0.01.606.778 I 
0.01.606.906 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.606.910 I 
0.01.607.151 I sampler seed: 604412060
0.01.607.166 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.607.176 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.607.180 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.607.180 I 
 seconally. [end of text]


0.03.013.255 I llama_perf_sampler_print:    sampling time =       6.25 ms /     5 runs   (    1.25 ms per token,   799.36 tokens per second)
0.03.013.270 I llama_perf_context_print:        load time =    1605.81 ms
0.03.013.271 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.013.273 I llama_perf_context_print:        eval time =    1393.49 ms /     4 runs   (  348.37 ms per token,     2.87 tokens per second)
0.03.013.274 I llama_perf_context_print:       total time =    1406.50 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4239 (991f8aab)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186489.41 ms
main:    total time = 186489.41 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.669 I build: 4239 (991f8aab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.869 I main: llama backend init
0.00.000.878 I main: load the model and apply lora adapter, if any
0.00.023.250 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.358 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.372 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.377 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.384 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.388 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.390 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.391 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.393 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.394 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.405 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.409 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.410 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.412 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.415 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.710 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.999 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.257 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.268 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.269 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.270 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.272 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.273 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.275 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.279 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.280 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.290 I llama_model_loader: - type  f32:   37 tensors
0.00.353.293 I llama_model_loader: - type q4_K:  108 tensors
0.00.353.294 I llama_model_loader: - type q6_K:   19 tensors
0.00.617.373 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.738.001 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.738.907 I llm_load_vocab: special tokens cache size = 5
0.00.927.947 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.928.022 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.928.024 I llm_load_print_meta: arch             = gemma
0.00.928.024 I llm_load_print_meta: vocab type       = SPM
0.00.928.025 I llm_load_print_meta: n_vocab          = 256000
0.00.928.027 I llm_load_print_meta: n_merges         = 0
0.00.928.028 I llm_load_print_meta: vocab_only       = 0
0.00.928.028 I llm_load_print_meta: n_ctx_train      = 8192
0.00.928.028 I llm_load_print_meta: n_embd           = 2048
0.00.928.029 I llm_load_print_meta: n_layer          = 18
0.00.928.095 I llm_load_print_meta: n_head           = 8
0.00.928.102 I llm_load_print_meta: n_head_kv        = 1
0.00.928.103 I llm_load_print_meta: n_rot            = 256
0.00.928.103 I llm_load_print_meta: n_swa            = 0
0.00.928.104 I llm_load_print_meta: n_embd_head_k    = 256
0.00.928.105 I llm_load_print_meta: n_embd_head_v    = 256
0.00.928.109 I llm_load_print_meta: n_gqa            = 8
0.00.928.115 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.928.120 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.928.121 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.928.123 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.928.124 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.928.128 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.928.129 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.928.134 I llm_load_print_meta: n_ff             = 16384
0.00.928.134 I llm_load_print_meta: n_expert         = 0
0.00.928.135 I llm_load_print_meta: n_expert_used    = 0
0.00.928.136 I llm_load_print_meta: causal attn      = 1
0.00.928.136 I llm_load_print_meta: pooling type     = 0
0.00.928.136 I llm_load_print_meta: rope type        = 2
0.00.928.137 I llm_load_print_meta: rope scaling     = linear
0.00.928.138 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.928.139 I llm_load_print_meta: freq_scale_train = 1
0.00.928.140 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.928.140 I llm_load_print_meta: rope_finetuned   = unknown
0.00.928.140 I llm_load_print_meta: ssm_d_conv       = 0
0.00.928.150 I llm_load_print_meta: ssm_d_inner      = 0
0.00.928.154 I llm_load_print_meta: ssm_d_state      = 0
0.00.928.154 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.928.155 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.928.155 I llm_load_print_meta: model type       = 2B
0.00.928.156 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.928.157 I llm_load_print_meta: model params     = 2.51 B
0.00.928.168 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.928.169 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.928.169 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.928.172 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.928.172 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.928.173 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.928.173 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.928.173 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.928.180 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.928.181 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.928.184 I llm_load_print_meta: max token length = 93
0.00.986.443 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.992.339 I llama_new_context_with_model: n_seq_max     = 1
0.00.992.347 I llama_new_context_with_model: n_ctx         = 4096
0.00.992.347 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.992.348 I llama_new_context_with_model: n_batch       = 2048
0.00.992.348 I llama_new_context_with_model: n_ubatch      = 512
0.00.992.349 I llama_new_context_with_model: flash_attn    = 0
0.00.992.351 I llama_new_context_with_model: freq_base     = 10000.0
0.00.992.351 I llama_new_context_with_model: freq_scale    = 1
0.00.992.352 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.007.583 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.007.623 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.007.762 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.010.358 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.010.362 I llama_new_context_with_model: graph nodes  = 601
0.01.010.362 I llama_new_context_with_model: graph splits = 1
0.01.010.386 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.595.817 I main: llama threadpool init, n_threads = 4
0.01.595.836 I 
0.01.595.956 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.595.960 I 
0.01.596.198 I sampler seed: 1156779281
0.01.596.212 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.596.221 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.596.224 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.596.224 I 
 seconded, and secondary spermatogenesis occurs in the seminiferous tubules of the testes.

**Primary spermatogenesis occurs in the seminiferous tubules of the testes.**

0.12.854.380 I llama_perf_sampler_print:    sampling time =      49.33 ms /    33 runs   (    1.49 ms per token,   669.02 tokens per second)
0.12.854.382 I llama_perf_context_print:        load time =    1594.84 ms
0.12.854.384 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.854.399 I llama_perf_context_print:        eval time =   11169.00 ms /    32 runs   (  349.03 ms per token,     2.87 tokens per second)
0.12.854.400 I llama_perf_context_print:       total time =   11258.57 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m31.911s
user	46m7.273s
sys	0m6.410s
