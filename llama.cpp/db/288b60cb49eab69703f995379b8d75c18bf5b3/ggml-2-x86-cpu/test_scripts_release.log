+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.626 I build: 4636 (db288b60) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.837 I main: llama backend init
0.00.000.845 I main: load the model and apply lora adapter, if any
0.00.031.240 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.031.254 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.031.262 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.031.269 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.031.270 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.031.274 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.031.274 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.031.275 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.031.276 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.031.276 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.031.277 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.031.283 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.031.284 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.031.285 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.031.286 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.031.287 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.058.134 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.135.556 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.141.994 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.142.005 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.142.006 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.142.007 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.142.008 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.142.009 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.142.010 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.142.012 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.142.013 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.142.013 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.142.015 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.142.015 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.142.019 I llama_model_loader: - type  f32:   37 tensors
0.00.142.020 I llama_model_loader: - type q8_0:  127 tensors
0.00.142.024 I print_info: file format = GGUF V3 (latest)
0.00.142.024 I print_info: file type   = Q8_0
0.00.142.028 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.246.244 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.302.542 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.303.367 I load: special tokens cache size = 5
0.00.324.971 I load: token to piece cache size = 1.6014 MB
0.00.325.008 I print_info: arch             = gemma
0.00.325.009 I print_info: vocab_only       = 0
0.00.325.009 I print_info: n_ctx_train      = 8192
0.00.325.009 I print_info: n_embd           = 2048
0.00.325.010 I print_info: n_layer          = 18
0.00.325.021 I print_info: n_head           = 8
0.00.325.024 I print_info: n_head_kv        = 1
0.00.325.024 I print_info: n_rot            = 256
0.00.325.024 I print_info: n_swa            = 0
0.00.325.025 I print_info: n_embd_head_k    = 256
0.00.325.025 I print_info: n_embd_head_v    = 256
0.00.325.027 I print_info: n_gqa            = 8
0.00.325.029 I print_info: n_embd_k_gqa     = 256
0.00.325.030 I print_info: n_embd_v_gqa     = 256
0.00.325.031 I print_info: f_norm_eps       = 0.0e+00
0.00.325.034 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.325.034 I print_info: f_clamp_kqv      = 0.0e+00
0.00.325.034 I print_info: f_max_alibi_bias = 0.0e+00
0.00.325.035 I print_info: f_logit_scale    = 0.0e+00
0.00.325.036 I print_info: n_ff             = 16384
0.00.325.037 I print_info: n_expert         = 0
0.00.325.037 I print_info: n_expert_used    = 0
0.00.325.037 I print_info: causal attn      = 1
0.00.325.037 I print_info: pooling type     = 0
0.00.325.037 I print_info: rope type        = 2
0.00.325.038 I print_info: rope scaling     = linear
0.00.325.039 I print_info: freq_base_train  = 10000.0
0.00.325.040 I print_info: freq_scale_train = 1
0.00.325.040 I print_info: n_ctx_orig_yarn  = 8192
0.00.325.041 I print_info: rope_finetuned   = unknown
0.00.325.041 I print_info: ssm_d_conv       = 0
0.00.325.041 I print_info: ssm_d_inner      = 0
0.00.325.042 I print_info: ssm_d_state      = 0
0.00.325.042 I print_info: ssm_dt_rank      = 0
0.00.325.042 I print_info: ssm_dt_b_c_rms   = 0
0.00.325.043 I print_info: model type       = 2B
0.00.325.043 I print_info: model params     = 2.51 B
0.00.325.044 I print_info: general.name     = gemma-1.1-2b-it
0.00.325.047 I print_info: vocab type       = SPM
0.00.325.048 I print_info: n_vocab          = 256000
0.00.325.049 I print_info: n_merges         = 0
0.00.325.049 I print_info: BOS token        = 2 '<bos>'
0.00.325.050 I print_info: EOS token        = 1 '<eos>'
0.00.325.050 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.325.050 I print_info: UNK token        = 3 '<unk>'
0.00.325.051 I print_info: PAD token        = 0 '<pad>'
0.00.325.051 I print_info: LF token         = 227 '<0x0A>'
0.00.325.052 I print_info: EOG token        = 1 '<eos>'
0.00.325.052 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.325.053 I print_info: max token length = 93
0.00.426.625 I load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.426.635 I load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.426.635 I load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.426.636 I load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.426.637 I load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.426.637 I load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
0.00.428.006 I llama_init_from_model: n_seq_max     = 1
0.00.428.012 I llama_init_from_model: n_ctx         = 4096
0.00.428.012 I llama_init_from_model: n_ctx_per_seq = 4096
0.00.428.012 I llama_init_from_model: n_batch       = 2048
0.00.428.013 I llama_init_from_model: n_ubatch      = 512
0.00.428.013 I llama_init_from_model: flash_attn    = 0
0.00.428.015 I llama_init_from_model: freq_base     = 10000.0
0.00.428.016 I llama_init_from_model: freq_scale    = 1
0.00.428.017 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.428.042 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.444.451 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.444.465 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.444.567 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.00.446.640 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.00.446.647 I llama_init_from_model: graph nodes  = 601
0.00.446.647 I llama_init_from_model: graph splits = 1
0.00.446.650 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.446.651 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.544.013 I main: llama threadpool init, n_threads = 4
0.00.544.031 I 
0.00.544.092 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.544.095 I 
0.00.544.129 I sampler seed: 361429598
0.00.544.139 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.544.143 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.544.143 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.544.146 I 
 increasively as the narrator becomes more and more engrossed in the conversation. [end of text]


0.01.685.899 I llama_perf_sampler_print:    sampling time =       2.34 ms /    16 runs   (    0.15 ms per token,  6834.69 tokens per second)
0.01.685.901 I llama_perf_context_print:        load time =     540.65 ms
0.01.685.902 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.685.904 I llama_perf_context_print:        eval time =    1131.88 ms /    15 runs   (   75.46 ms per token,    13.25 tokens per second)
0.01.685.904 I llama_perf_context_print:       total time =    1144.39 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.696 I build: 4636 (db288b60) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.902 I main: llama backend init
0.00.000.911 I main: load the model and apply lora adapter, if any
0.00.031.341 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.031.360 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.031.370 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.031.371 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.031.374 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.031.375 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.031.376 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.031.376 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.031.377 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.031.377 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.031.383 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.031.384 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.031.385 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.031.386 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.031.386 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.058.469 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.136.103 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.142.562 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.142.573 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.142.574 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.142.575 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.142.576 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.142.577 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.142.578 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.142.580 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.142.581 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.142.582 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.142.583 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.142.584 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.142.588 I llama_model_loader: - type  f32:   37 tensors
0.00.142.590 I llama_model_loader: - type q8_0:  127 tensors
0.00.142.592 I print_info: file format = GGUF V3 (latest)
0.00.142.592 I print_info: file type   = Q8_0
0.00.142.596 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.244.048 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.301.292 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.302.125 I load: special tokens cache size = 5
0.00.323.893 I load: token to piece cache size = 1.6014 MB
0.00.323.918 I print_info: arch             = gemma
0.00.323.918 I print_info: vocab_only       = 0
0.00.323.919 I print_info: n_ctx_train      = 8192
0.00.323.919 I print_info: n_embd           = 2048
0.00.323.920 I print_info: n_layer          = 18
0.00.323.941 I print_info: n_head           = 8
0.00.323.943 I print_info: n_head_kv        = 1
0.00.323.943 I print_info: n_rot            = 256
0.00.323.943 I print_info: n_swa            = 0
0.00.323.944 I print_info: n_embd_head_k    = 256
0.00.323.944 I print_info: n_embd_head_v    = 256
0.00.323.946 I print_info: n_gqa            = 8
0.00.323.948 I print_info: n_embd_k_gqa     = 256
0.00.323.949 I print_info: n_embd_v_gqa     = 256
0.00.323.950 I print_info: f_norm_eps       = 0.0e+00
0.00.323.952 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.323.952 I print_info: f_clamp_kqv      = 0.0e+00
0.00.323.952 I print_info: f_max_alibi_bias = 0.0e+00
0.00.323.953 I print_info: f_logit_scale    = 0.0e+00
0.00.323.954 I print_info: n_ff             = 16384
0.00.323.955 I print_info: n_expert         = 0
0.00.323.955 I print_info: n_expert_used    = 0
0.00.323.955 I print_info: causal attn      = 1
0.00.323.956 I print_info: pooling type     = 0
0.00.323.956 I print_info: rope type        = 2
0.00.323.956 I print_info: rope scaling     = linear
0.00.323.958 I print_info: freq_base_train  = 10000.0
0.00.323.959 I print_info: freq_scale_train = 1
0.00.323.959 I print_info: n_ctx_orig_yarn  = 8192
0.00.323.960 I print_info: rope_finetuned   = unknown
0.00.323.960 I print_info: ssm_d_conv       = 0
0.00.323.960 I print_info: ssm_d_inner      = 0
0.00.323.961 I print_info: ssm_d_state      = 0
0.00.323.961 I print_info: ssm_dt_rank      = 0
0.00.323.961 I print_info: ssm_dt_b_c_rms   = 0
0.00.323.962 I print_info: model type       = 2B
0.00.323.962 I print_info: model params     = 2.51 B
0.00.323.963 I print_info: general.name     = gemma-1.1-2b-it
0.00.323.966 I print_info: vocab type       = SPM
0.00.323.967 I print_info: n_vocab          = 256000
0.00.323.967 I print_info: n_merges         = 0
0.00.323.968 I print_info: BOS token        = 2 '<bos>'
0.00.323.968 I print_info: EOS token        = 1 '<eos>'
0.00.323.969 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.323.969 I print_info: UNK token        = 3 '<unk>'
0.00.323.969 I print_info: PAD token        = 0 '<pad>'
0.00.323.970 I print_info: LF token         = 227 '<0x0A>'
0.00.323.970 I print_info: EOG token        = 1 '<eos>'
0.00.323.971 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.323.971 I print_info: max token length = 93
0.00.417.514 I load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
0.00.418.872 I llama_init_from_model: n_seq_max     = 1
0.00.418.877 I llama_init_from_model: n_ctx         = 4096
0.00.418.877 I llama_init_from_model: n_ctx_per_seq = 4096
0.00.418.878 I llama_init_from_model: n_batch       = 2048
0.00.418.879 I llama_init_from_model: n_ubatch      = 512
0.00.418.880 I llama_init_from_model: flash_attn    = 0
0.00.418.883 I llama_init_from_model: freq_base     = 10000.0
0.00.418.884 I llama_init_from_model: freq_scale    = 1
0.00.418.885 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.418.904 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.435.901 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.435.917 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.436.015 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.00.438.263 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.00.438.267 I llama_init_from_model: graph nodes  = 601
0.00.438.268 I llama_init_from_model: graph splits = 1
0.00.438.271 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.438.272 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.532.617 I main: llama threadpool init, n_threads = 4
0.00.532.635 I 
0.00.532.707 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.532.710 I 
0.00.532.746 I sampler seed: 1708173691
0.00.532.757 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.532.759 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.532.760 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.532.760 I 
 increasities to the effect of the given matrix and vector.

$$A = \begin{bmatrix} 1 & 2 \\ 3 & 4

0.02.917.339 I llama_perf_sampler_print:    sampling time =       4.87 ms /    33 runs   (    0.15 ms per token,  6778.96 tokens per second)
0.02.917.341 I llama_perf_context_print:        load time =     529.19 ms
0.02.917.342 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.917.344 I llama_perf_context_print:        eval time =    2364.89 ms /    32 runs   (   73.90 ms per token,    13.53 tokens per second)
0.02.917.344 I llama_perf_context_print:       total time =    2387.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.217 I build: 4636 (db288b60) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.419 I main: llama backend init
0.00.000.427 I main: load the model and apply lora adapter, if any
0.00.030.582 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.030.596 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.030.604 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.611 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.612 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.614 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.615 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.616 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.616 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.617 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.617 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.622 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.623 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.623 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.625 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.030.626 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.057.659 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.135.386 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.141.907 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.141.918 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.141.918 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.141.919 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.141.920 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.141.921 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.141.922 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.141.924 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.141.925 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.141.926 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.141.927 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.141.927 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.141.932 I llama_model_loader: - type  f32:   37 tensors
0.00.141.933 I llama_model_loader: - type q8_0:  127 tensors
0.00.141.936 I print_info: file format = GGUF V3 (latest)
0.00.141.937 I print_info: file type   = Q8_0
0.00.141.939 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.245.838 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.302.988 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.303.865 I load: special tokens cache size = 5
0.00.325.558 I load: token to piece cache size = 1.6014 MB
0.00.325.591 I print_info: arch             = gemma
0.00.325.591 I print_info: vocab_only       = 0
0.00.325.592 I print_info: n_ctx_train      = 8192
0.00.325.592 I print_info: n_embd           = 2048
0.00.325.593 I print_info: n_layer          = 18
0.00.325.606 I print_info: n_head           = 8
0.00.325.612 I print_info: n_head_kv        = 1
0.00.325.613 I print_info: n_rot            = 256
0.00.325.613 I print_info: n_swa            = 0
0.00.325.613 I print_info: n_embd_head_k    = 256
0.00.325.615 I print_info: n_embd_head_v    = 256
0.00.325.617 I print_info: n_gqa            = 8
0.00.325.619 I print_info: n_embd_k_gqa     = 256
0.00.325.620 I print_info: n_embd_v_gqa     = 256
0.00.325.621 I print_info: f_norm_eps       = 0.0e+00
0.00.325.623 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.325.623 I print_info: f_clamp_kqv      = 0.0e+00
0.00.325.624 I print_info: f_max_alibi_bias = 0.0e+00
0.00.325.624 I print_info: f_logit_scale    = 0.0e+00
0.00.325.626 I print_info: n_ff             = 16384
0.00.325.626 I print_info: n_expert         = 0
0.00.325.626 I print_info: n_expert_used    = 0
0.00.325.627 I print_info: causal attn      = 1
0.00.325.627 I print_info: pooling type     = 0
0.00.325.627 I print_info: rope type        = 2
0.00.325.628 I print_info: rope scaling     = linear
0.00.325.630 I print_info: freq_base_train  = 10000.0
0.00.325.631 I print_info: freq_scale_train = 1
0.00.325.631 I print_info: n_ctx_orig_yarn  = 8192
0.00.325.632 I print_info: rope_finetuned   = unknown
0.00.325.632 I print_info: ssm_d_conv       = 0
0.00.325.633 I print_info: ssm_d_inner      = 0
0.00.325.633 I print_info: ssm_d_state      = 0
0.00.325.633 I print_info: ssm_dt_rank      = 0
0.00.325.634 I print_info: ssm_dt_b_c_rms   = 0
0.00.325.635 I print_info: model type       = 2B
0.00.325.636 I print_info: model params     = 2.51 B
0.00.325.636 I print_info: general.name     = gemma-1.1-2b-it
0.00.325.639 I print_info: vocab type       = SPM
0.00.325.640 I print_info: n_vocab          = 256000
0.00.325.641 I print_info: n_merges         = 0
0.00.325.642 I print_info: BOS token        = 2 '<bos>'
0.00.325.642 I print_info: EOS token        = 1 '<eos>'
0.00.325.643 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.325.643 I print_info: UNK token        = 3 '<unk>'
0.00.325.643 I print_info: PAD token        = 0 '<pad>'
0.00.325.644 I print_info: LF token         = 227 '<0x0A>'
0.00.325.645 I print_info: EOG token        = 1 '<eos>'
0.00.325.646 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.325.646 I print_info: max token length = 93
0.00.400.630 I load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.400.639 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.400.640 I load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.400.640 I load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.400.641 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.400.641 I load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
0.00.401.923 I llama_init_from_model: n_seq_max     = 1
0.00.401.928 I llama_init_from_model: n_ctx         = 4096
0.00.401.929 I llama_init_from_model: n_ctx_per_seq = 4096
0.00.401.929 I llama_init_from_model: n_batch       = 2048
0.00.401.930 I llama_init_from_model: n_ubatch      = 512
0.00.401.930 I llama_init_from_model: flash_attn    = 0
0.00.401.932 I llama_init_from_model: freq_base     = 10000.0
0.00.401.933 I llama_init_from_model: freq_scale    = 1
0.00.401.934 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.401.953 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.418.403 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.418.417 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.418.522 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.00.420.779 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.00.420.786 I llama_init_from_model: graph nodes  = 601
0.00.420.787 I llama_init_from_model: graph splits = 1
0.00.420.790 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.420.790 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.519.450 I main: llama threadpool init, n_threads = 4
0.00.519.463 I 
0.00.519.525 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.519.528 I 
0.00.519.560 I sampler seed: 1910879012
0.00.519.569 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.519.572 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.519.572 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.519.572 I 
 increably.

I am unable to access the provided text. [end of text]


0.01.625.592 I llama_perf_sampler_print:    sampling time =       2.17 ms /    15 runs   (    0.14 ms per token,  6902.90 tokens per second)
0.01.625.594 I llama_perf_context_print:        load time =     516.50 ms
0.01.625.596 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.625.597 I llama_perf_context_print:        eval time =    1096.89 ms /    14 runs   (   78.35 ms per token,    12.76 tokens per second)
0.01.625.598 I llama_perf_context_print:       total time =    1108.65 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.716 I build: 4636 (db288b60) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.935 I main: llama backend init
0.00.000.944 I main: load the model and apply lora adapter, if any
0.00.031.560 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.031.572 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.031.581 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.031.588 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.031.589 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.031.592 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.031.593 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.031.594 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.031.594 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.031.595 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.031.596 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.031.601 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.031.602 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.031.602 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.031.603 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.031.604 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.058.517 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.135.727 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.142.163 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.142.173 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.142.174 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.142.175 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.142.176 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.142.177 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.142.178 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.142.180 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.142.180 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.142.181 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.142.183 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.142.183 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.142.188 I llama_model_loader: - type  f32:   37 tensors
0.00.142.189 I llama_model_loader: - type q8_0:  127 tensors
0.00.142.191 I print_info: file format = GGUF V3 (latest)
0.00.142.191 I print_info: file type   = Q8_0
0.00.142.194 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.245.803 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.302.910 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.303.726 I load: special tokens cache size = 5
0.00.325.375 I load: token to piece cache size = 1.6014 MB
0.00.325.398 I print_info: arch             = gemma
0.00.325.399 I print_info: vocab_only       = 0
0.00.325.399 I print_info: n_ctx_train      = 8192
0.00.325.400 I print_info: n_embd           = 2048
0.00.325.400 I print_info: n_layer          = 18
0.00.325.412 I print_info: n_head           = 8
0.00.325.414 I print_info: n_head_kv        = 1
0.00.325.415 I print_info: n_rot            = 256
0.00.325.415 I print_info: n_swa            = 0
0.00.325.415 I print_info: n_embd_head_k    = 256
0.00.325.416 I print_info: n_embd_head_v    = 256
0.00.325.417 I print_info: n_gqa            = 8
0.00.325.419 I print_info: n_embd_k_gqa     = 256
0.00.325.420 I print_info: n_embd_v_gqa     = 256
0.00.325.421 I print_info: f_norm_eps       = 0.0e+00
0.00.325.423 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.325.423 I print_info: f_clamp_kqv      = 0.0e+00
0.00.325.424 I print_info: f_max_alibi_bias = 0.0e+00
0.00.325.424 I print_info: f_logit_scale    = 0.0e+00
0.00.325.426 I print_info: n_ff             = 16384
0.00.325.426 I print_info: n_expert         = 0
0.00.325.426 I print_info: n_expert_used    = 0
0.00.325.427 I print_info: causal attn      = 1
0.00.325.427 I print_info: pooling type     = 0
0.00.325.427 I print_info: rope type        = 2
0.00.325.428 I print_info: rope scaling     = linear
0.00.325.429 I print_info: freq_base_train  = 10000.0
0.00.325.430 I print_info: freq_scale_train = 1
0.00.325.430 I print_info: n_ctx_orig_yarn  = 8192
0.00.325.430 I print_info: rope_finetuned   = unknown
0.00.325.431 I print_info: ssm_d_conv       = 0
0.00.325.431 I print_info: ssm_d_inner      = 0
0.00.325.431 I print_info: ssm_d_state      = 0
0.00.325.432 I print_info: ssm_dt_rank      = 0
0.00.325.432 I print_info: ssm_dt_b_c_rms   = 0
0.00.325.433 I print_info: model type       = 2B
0.00.325.433 I print_info: model params     = 2.51 B
0.00.325.433 I print_info: general.name     = gemma-1.1-2b-it
0.00.325.437 I print_info: vocab type       = SPM
0.00.325.438 I print_info: n_vocab          = 256000
0.00.325.439 I print_info: n_merges         = 0
0.00.325.439 I print_info: BOS token        = 2 '<bos>'
0.00.325.440 I print_info: EOS token        = 1 '<eos>'
0.00.325.440 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.325.441 I print_info: UNK token        = 3 '<unk>'
0.00.325.441 I print_info: PAD token        = 0 '<pad>'
0.00.325.442 I print_info: LF token         = 227 '<0x0A>'
0.00.325.442 I print_info: EOG token        = 1 '<eos>'
0.00.325.443 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.325.443 I print_info: max token length = 93
0.00.396.419 I load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.396.425 I load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
0.00.397.684 I llama_init_from_model: n_seq_max     = 1
0.00.397.689 I llama_init_from_model: n_ctx         = 4096
0.00.397.690 I llama_init_from_model: n_ctx_per_seq = 4096
0.00.397.690 I llama_init_from_model: n_batch       = 2048
0.00.397.691 I llama_init_from_model: n_ubatch      = 512
0.00.397.691 I llama_init_from_model: flash_attn    = 0
0.00.397.694 I llama_init_from_model: freq_base     = 10000.0
0.00.397.695 I llama_init_from_model: freq_scale    = 1
0.00.397.696 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.397.715 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.413.834 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.413.849 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.413.949 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.00.415.914 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.00.415.921 I llama_init_from_model: graph nodes  = 601
0.00.415.922 I llama_init_from_model: graph splits = 1
0.00.415.925 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.415.925 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.516.200 I main: llama threadpool init, n_threads = 4
0.00.516.215 I 
0.00.516.292 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.516.296 I 
0.00.516.340 I sampler seed: 1408047148
0.00.516.352 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.516.356 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.516.356 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.516.356 I 
 increasities, but also of the highest standards and integrity. [end of text]


0.01.589.257 I llama_perf_sampler_print:    sampling time =       2.13 ms /    14 runs   (    0.15 ms per token,  6575.86 tokens per second)
0.01.589.260 I llama_perf_context_print:        load time =     512.72 ms
0.01.589.262 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.589.263 I llama_perf_context_print:        eval time =    1063.91 ms /    13 runs   (   81.84 ms per token,    12.22 tokens per second)
0.01.589.264 I llama_perf_context_print:       total time =    1075.57 ms /    14 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.676s
user	0m26.254s
sys	0m9.923s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4636 (db288b60)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40418.47 ms
main:    total time = 40418.47 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.593 I build: 4636 (db288b60) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.790 I main: llama backend init
0.00.000.797 I main: load the model and apply lora adapter, if any
0.00.031.003 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.031.018 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.031.029 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.031.036 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.031.037 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.031.039 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.031.040 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.031.041 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.031.041 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.031.042 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.031.042 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.031.048 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.031.049 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.031.049 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.031.050 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.057.708 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.134.849 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.141.251 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.141.261 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.141.262 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.141.263 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.141.263 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.141.265 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.141.266 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.141.269 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.141.270 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.141.272 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.141.273 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.141.275 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.141.276 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.141.281 I llama_model_loader: - type  f32:   37 tensors
0.00.141.283 I llama_model_loader: - type q4_K:  108 tensors
0.00.141.283 I llama_model_loader: - type q6_K:   19 tensors
0.00.141.286 I print_info: file format = GGUF V3 (latest)
0.00.141.287 I print_info: file type   = Q4_K - Medium
0.00.141.289 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.234.005 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.290.644 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.291.481 I load: special tokens cache size = 5
0.00.313.125 I load: token to piece cache size = 1.6014 MB
0.00.313.149 I print_info: arch             = gemma
0.00.313.149 I print_info: vocab_only       = 0
0.00.313.150 I print_info: n_ctx_train      = 8192
0.00.313.150 I print_info: n_embd           = 2048
0.00.313.151 I print_info: n_layer          = 18
0.00.313.163 I print_info: n_head           = 8
0.00.313.164 I print_info: n_head_kv        = 1
0.00.313.165 I print_info: n_rot            = 256
0.00.313.165 I print_info: n_swa            = 0
0.00.313.165 I print_info: n_embd_head_k    = 256
0.00.313.166 I print_info: n_embd_head_v    = 256
0.00.313.168 I print_info: n_gqa            = 8
0.00.313.170 I print_info: n_embd_k_gqa     = 256
0.00.313.171 I print_info: n_embd_v_gqa     = 256
0.00.313.172 I print_info: f_norm_eps       = 0.0e+00
0.00.313.174 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.313.174 I print_info: f_clamp_kqv      = 0.0e+00
0.00.313.174 I print_info: f_max_alibi_bias = 0.0e+00
0.00.313.175 I print_info: f_logit_scale    = 0.0e+00
0.00.313.177 I print_info: n_ff             = 16384
0.00.313.177 I print_info: n_expert         = 0
0.00.313.177 I print_info: n_expert_used    = 0
0.00.313.177 I print_info: causal attn      = 1
0.00.313.178 I print_info: pooling type     = 0
0.00.313.178 I print_info: rope type        = 2
0.00.313.178 I print_info: rope scaling     = linear
0.00.313.180 I print_info: freq_base_train  = 10000.0
0.00.313.180 I print_info: freq_scale_train = 1
0.00.313.181 I print_info: n_ctx_orig_yarn  = 8192
0.00.313.181 I print_info: rope_finetuned   = unknown
0.00.313.181 I print_info: ssm_d_conv       = 0
0.00.313.182 I print_info: ssm_d_inner      = 0
0.00.313.182 I print_info: ssm_d_state      = 0
0.00.313.182 I print_info: ssm_dt_rank      = 0
0.00.313.183 I print_info: ssm_dt_b_c_rms   = 0
0.00.313.184 I print_info: model type       = 2B
0.00.313.184 I print_info: model params     = 2.51 B
0.00.313.184 I print_info: general.name     = gemma-1.1-2b-it
0.00.313.188 I print_info: vocab type       = SPM
0.00.313.189 I print_info: n_vocab          = 256000
0.00.313.189 I print_info: n_merges         = 0
0.00.313.190 I print_info: BOS token        = 2 '<bos>'
0.00.313.190 I print_info: EOS token        = 1 '<eos>'
0.00.313.191 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.313.191 I print_info: UNK token        = 3 '<unk>'
0.00.313.191 I print_info: PAD token        = 0 '<pad>'
0.00.313.193 I print_info: LF token         = 227 '<0x0A>'
0.00.313.193 I print_info: EOG token        = 1 '<eos>'
0.00.313.194 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.313.194 I print_info: max token length = 93
0.00.372.672 I load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.372.681 I load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.372.682 I load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.372.683 I load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.372.683 I load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.372.684 I load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
0.00.373.935 I llama_init_from_model: n_seq_max     = 1
0.00.373.941 I llama_init_from_model: n_ctx         = 4096
0.00.373.941 I llama_init_from_model: n_ctx_per_seq = 4096
0.00.373.942 I llama_init_from_model: n_batch       = 2048
0.00.373.942 I llama_init_from_model: n_ubatch      = 512
0.00.373.942 I llama_init_from_model: flash_attn    = 0
0.00.373.944 I llama_init_from_model: freq_base     = 10000.0
0.00.373.945 I llama_init_from_model: freq_scale    = 1
0.00.373.946 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.373.965 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.390.484 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.390.500 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.390.600 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.00.392.617 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.00.392.623 I llama_init_from_model: graph nodes  = 601
0.00.392.624 I llama_init_from_model: graph splits = 1
0.00.392.628 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.392.628 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.480.668 I main: llama threadpool init, n_threads = 4
0.00.480.683 I 
0.00.480.751 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.480.754 I 
0.00.480.787 I sampler seed: 1145435320
0.00.480.797 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.480.800 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.480.801 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.480.801 I 
 seconally.

I am unable to generate a response because I am unable to access real-time information. I do not have access to the internet or other

0.02.216.296 I llama_perf_sampler_print:    sampling time =       5.23 ms /    33 runs   (    0.16 ms per token,  6314.58 tokens per second)
0.02.216.300 I llama_perf_context_print:        load time =     477.32 ms
0.02.216.301 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.216.303 I llama_perf_context_print:        eval time =    1715.14 ms /    32 runs   (   53.60 ms per token,    18.66 tokens per second)
0.02.216.303 I llama_perf_context_print:       total time =    1738.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4636 (db288b60)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40375.13 ms
main:    total time = 40375.13 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.212 I build: 4636 (db288b60) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.418 I main: llama backend init
0.00.000.425 I main: load the model and apply lora adapter, if any
0.00.030.619 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.030.638 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.648 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.649 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.652 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.652 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.653 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.654 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.654 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.654 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.660 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.661 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.661 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.663 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.056.977 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.134.197 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.140.533 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.140.541 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.140.542 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.140.543 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.140.544 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.140.545 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.140.546 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.140.548 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.140.549 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.140.550 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.140.553 I llama_model_loader: - type  f32:   37 tensors
0.00.140.555 I llama_model_loader: - type q4_K:  108 tensors
0.00.140.555 I llama_model_loader: - type q6_K:   19 tensors
0.00.140.558 I print_info: file format = GGUF V3 (latest)
0.00.140.558 I print_info: file type   = Q4_K - Medium
0.00.140.561 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.250.306 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.306.817 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.307.643 I load: special tokens cache size = 5
0.00.329.442 I load: token to piece cache size = 1.6014 MB
0.00.329.464 I print_info: arch             = gemma
0.00.329.465 I print_info: vocab_only       = 0
0.00.329.465 I print_info: n_ctx_train      = 8192
0.00.329.466 I print_info: n_embd           = 2048
0.00.329.466 I print_info: n_layer          = 18
0.00.329.479 I print_info: n_head           = 8
0.00.329.481 I print_info: n_head_kv        = 1
0.00.329.481 I print_info: n_rot            = 256
0.00.329.482 I print_info: n_swa            = 0
0.00.329.482 I print_info: n_embd_head_k    = 256
0.00.329.482 I print_info: n_embd_head_v    = 256
0.00.329.484 I print_info: n_gqa            = 8
0.00.329.486 I print_info: n_embd_k_gqa     = 256
0.00.329.488 I print_info: n_embd_v_gqa     = 256
0.00.329.489 I print_info: f_norm_eps       = 0.0e+00
0.00.329.490 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.329.491 I print_info: f_clamp_kqv      = 0.0e+00
0.00.329.491 I print_info: f_max_alibi_bias = 0.0e+00
0.00.329.492 I print_info: f_logit_scale    = 0.0e+00
0.00.329.494 I print_info: n_ff             = 16384
0.00.329.495 I print_info: n_expert         = 0
0.00.329.495 I print_info: n_expert_used    = 0
0.00.329.495 I print_info: causal attn      = 1
0.00.329.496 I print_info: pooling type     = 0
0.00.329.496 I print_info: rope type        = 2
0.00.329.497 I print_info: rope scaling     = linear
0.00.329.498 I print_info: freq_base_train  = 10000.0
0.00.329.499 I print_info: freq_scale_train = 1
0.00.329.499 I print_info: n_ctx_orig_yarn  = 8192
0.00.329.500 I print_info: rope_finetuned   = unknown
0.00.329.500 I print_info: ssm_d_conv       = 0
0.00.329.502 I print_info: ssm_d_inner      = 0
0.00.329.502 I print_info: ssm_d_state      = 0
0.00.329.503 I print_info: ssm_dt_rank      = 0
0.00.329.503 I print_info: ssm_dt_b_c_rms   = 0
0.00.329.504 I print_info: model type       = 2B
0.00.329.505 I print_info: model params     = 2.51 B
0.00.329.505 I print_info: general.name     = gemma-1.1-2b-it
0.00.329.508 I print_info: vocab type       = SPM
0.00.329.510 I print_info: n_vocab          = 256000
0.00.329.510 I print_info: n_merges         = 0
0.00.329.511 I print_info: BOS token        = 2 '<bos>'
0.00.329.512 I print_info: EOS token        = 1 '<eos>'
0.00.329.512 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.329.513 I print_info: UNK token        = 3 '<unk>'
0.00.329.513 I print_info: PAD token        = 0 '<pad>'
0.00.329.514 I print_info: LF token         = 227 '<0x0A>'
0.00.329.515 I print_info: EOG token        = 1 '<eos>'
0.00.329.516 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.329.516 I print_info: max token length = 93
0.00.386.158 I load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
0.00.387.403 I llama_init_from_model: n_seq_max     = 1
0.00.387.408 I llama_init_from_model: n_ctx         = 4096
0.00.387.408 I llama_init_from_model: n_ctx_per_seq = 4096
0.00.387.409 I llama_init_from_model: n_batch       = 2048
0.00.387.409 I llama_init_from_model: n_ubatch      = 512
0.00.387.410 I llama_init_from_model: flash_attn    = 0
0.00.387.412 I llama_init_from_model: freq_base     = 10000.0
0.00.387.412 I llama_init_from_model: freq_scale    = 1
0.00.387.413 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.387.439 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.403.407 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.403.421 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.403.519 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.00.405.748 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.00.405.755 I llama_init_from_model: graph nodes  = 601
0.00.405.755 I llama_init_from_model: graph splits = 1
0.00.405.758 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.405.759 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.487.591 I main: llama threadpool init, n_threads = 4
0.00.487.604 I 
0.00.487.664 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.487.667 I 
0.00.487.700 I sampler seed: 2820714015
0.00.487.711 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.487.713 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.487.714 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.487.714 I 
 encomporn statements cannot be used in the context of a contract or offer.

**True or False** [end of text]


0.01.671.478 I llama_perf_sampler_print:    sampling time =       3.48 ms /    23 runs   (    0.15 ms per token,  6609.20 tokens per second)
0.01.671.481 I llama_perf_context_print:        load time =     484.65 ms
0.01.671.483 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.671.484 I llama_perf_context_print:        eval time =    1169.97 ms /    22 runs   (   53.18 ms per token,    18.80 tokens per second)
0.01.671.485 I llama_perf_context_print:       total time =    1186.39 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.668s
user	10m24.448s
sys	0m7.768s
