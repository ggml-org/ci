+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.661 I build: 3951 (dbd5f2f5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.863 I main: llama backend init
0.00.002.815 I main: load the model and apply lora adapter, if any
0.00.024.883 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.092 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.184 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.195 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.196 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.201 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.204 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.205 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.206 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.208 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.208 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.216 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.218 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.219 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.220 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.229 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.161.626 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.263.372 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.281.859 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.281.867 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.281.868 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.281.869 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.281.870 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.281.872 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.281.873 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.281.876 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.281.877 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.281.878 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.281.879 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.281.880 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.281.889 I llama_model_loader: - type  f32:   37 tensors
0.00.281.893 I llama_model_loader: - type q8_0:  127 tensors
0.00.478.773 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.553.805 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.554.900 I llm_load_vocab: special tokens cache size = 5
0.00.656.501 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.656.575 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.656.576 I llm_load_print_meta: arch             = gemma
0.00.656.576 I llm_load_print_meta: vocab type       = SPM
0.00.656.577 I llm_load_print_meta: n_vocab          = 256000
0.00.656.580 I llm_load_print_meta: n_merges         = 0
0.00.656.580 I llm_load_print_meta: vocab_only       = 0
0.00.656.581 I llm_load_print_meta: n_ctx_train      = 8192
0.00.656.581 I llm_load_print_meta: n_embd           = 2048
0.00.656.581 I llm_load_print_meta: n_layer          = 18
0.00.656.646 I llm_load_print_meta: n_head           = 8
0.00.656.654 I llm_load_print_meta: n_head_kv        = 1
0.00.656.654 I llm_load_print_meta: n_rot            = 256
0.00.656.655 I llm_load_print_meta: n_swa            = 0
0.00.656.655 I llm_load_print_meta: n_embd_head_k    = 256
0.00.656.655 I llm_load_print_meta: n_embd_head_v    = 256
0.00.656.660 I llm_load_print_meta: n_gqa            = 8
0.00.656.666 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.656.670 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.656.672 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.656.674 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.656.675 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.656.688 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.656.689 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.656.694 I llm_load_print_meta: n_ff             = 16384
0.00.656.695 I llm_load_print_meta: n_expert         = 0
0.00.656.700 I llm_load_print_meta: n_expert_used    = 0
0.00.656.701 I llm_load_print_meta: causal attn      = 1
0.00.656.701 I llm_load_print_meta: pooling type     = 0
0.00.656.701 I llm_load_print_meta: rope type        = 2
0.00.656.702 I llm_load_print_meta: rope scaling     = linear
0.00.656.703 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.656.704 I llm_load_print_meta: freq_scale_train = 1
0.00.656.708 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.656.708 I llm_load_print_meta: rope_finetuned   = unknown
0.00.656.709 I llm_load_print_meta: ssm_d_conv       = 0
0.00.656.709 I llm_load_print_meta: ssm_d_inner      = 0
0.00.656.709 I llm_load_print_meta: ssm_d_state      = 0
0.00.656.709 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.656.710 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.656.710 I llm_load_print_meta: model type       = 2B
0.00.656.711 I llm_load_print_meta: model ftype      = Q8_0
0.00.656.712 I llm_load_print_meta: model params     = 2.51 B
0.00.656.713 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.656.713 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.656.714 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.656.714 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.656.715 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.656.728 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.656.728 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.656.736 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.656.743 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.656.745 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.656.752 I llm_load_print_meta: max token length = 93
0.00.656.926 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.759.242 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.759.252 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.759.253 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.759.254 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.759.255 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.759.255 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.764.876 I llama_new_context_with_model: n_ctx      = 8192
0.00.764.883 I llama_new_context_with_model: n_batch    = 2048
0.00.764.884 I llama_new_context_with_model: n_ubatch   = 512
0.00.764.884 I llama_new_context_with_model: flash_attn = 0
0.00.764.887 I llama_new_context_with_model: freq_base  = 10000.0
0.00.764.888 I llama_new_context_with_model: freq_scale = 1
0.00.794.413 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.794.454 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.794.567 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.795.969 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.795.974 I llama_new_context_with_model: graph nodes  = 601
0.00.795.975 I llama_new_context_with_model: graph splits = 1
0.00.795.991 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.408.679 I main: llama threadpool init, n_threads = 4
0.01.408.692 I 
0.01.408.800 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.408.804 I 
0.01.408.978 I sampler seed: 1641574007
0.01.408.991 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.408.998 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.409.001 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.409.001 I 
 increasities, a term coined by sociologist Émile Durkheim.

**Key Points:**

* Durkheim believed that social facts, rather than individual minds, shaped

0.14.898.580 I llama_perf_sampler_print:    sampling time =      49.17 ms /    33 runs   (    1.49 ms per token,   671.11 tokens per second)
0.14.898.583 I llama_perf_context_print:        load time =    1405.77 ms
0.14.898.585 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.898.586 I llama_perf_context_print:        eval time =   13395.06 ms /    32 runs   (  418.60 ms per token,     2.39 tokens per second)
0.14.898.601 I llama_perf_context_print:       total time =   13489.91 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.685 I build: 3951 (dbd5f2f5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.896 I main: llama backend init
0.00.002.857 I main: load the model and apply lora adapter, if any
0.00.025.173 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.274 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.289 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.294 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.299 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.300 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.301 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.302 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.304 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.306 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.313 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.317 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.318 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.318 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.319 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.502 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.258.162 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.276.592 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.276.605 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.276.607 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.276.607 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.276.608 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.276.610 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.276.611 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.276.614 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.276.615 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.276.616 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.276.617 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.276.618 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.276.627 I llama_model_loader: - type  f32:   37 tensors
0.00.276.631 I llama_model_loader: - type q8_0:  127 tensors
0.00.481.266 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.551.813 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.552.901 I llm_load_vocab: special tokens cache size = 5
0.00.658.376 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.658.450 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.658.451 I llm_load_print_meta: arch             = gemma
0.00.658.452 I llm_load_print_meta: vocab type       = SPM
0.00.658.453 I llm_load_print_meta: n_vocab          = 256000
0.00.658.456 I llm_load_print_meta: n_merges         = 0
0.00.658.456 I llm_load_print_meta: vocab_only       = 0
0.00.658.457 I llm_load_print_meta: n_ctx_train      = 8192
0.00.658.457 I llm_load_print_meta: n_embd           = 2048
0.00.658.457 I llm_load_print_meta: n_layer          = 18
0.00.658.523 I llm_load_print_meta: n_head           = 8
0.00.658.530 I llm_load_print_meta: n_head_kv        = 1
0.00.658.531 I llm_load_print_meta: n_rot            = 256
0.00.658.532 I llm_load_print_meta: n_swa            = 0
0.00.658.532 I llm_load_print_meta: n_embd_head_k    = 256
0.00.658.533 I llm_load_print_meta: n_embd_head_v    = 256
0.00.658.538 I llm_load_print_meta: n_gqa            = 8
0.00.658.542 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.658.547 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.658.548 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.658.550 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.658.551 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.658.556 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.658.557 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.658.561 I llm_load_print_meta: n_ff             = 16384
0.00.658.563 I llm_load_print_meta: n_expert         = 0
0.00.658.563 I llm_load_print_meta: n_expert_used    = 0
0.00.658.564 I llm_load_print_meta: causal attn      = 1
0.00.658.565 I llm_load_print_meta: pooling type     = 0
0.00.658.565 I llm_load_print_meta: rope type        = 2
0.00.658.565 I llm_load_print_meta: rope scaling     = linear
0.00.658.567 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.658.568 I llm_load_print_meta: freq_scale_train = 1
0.00.658.568 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.658.569 I llm_load_print_meta: rope_finetuned   = unknown
0.00.658.569 I llm_load_print_meta: ssm_d_conv       = 0
0.00.658.570 I llm_load_print_meta: ssm_d_inner      = 0
0.00.658.570 I llm_load_print_meta: ssm_d_state      = 0
0.00.658.570 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.658.571 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.658.571 I llm_load_print_meta: model type       = 2B
0.00.658.575 I llm_load_print_meta: model ftype      = Q8_0
0.00.658.576 I llm_load_print_meta: model params     = 2.51 B
0.00.658.577 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.658.577 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.658.578 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.658.578 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.658.579 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.658.580 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.658.580 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.658.580 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.658.586 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.658.587 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.658.588 I llm_load_print_meta: max token length = 93
0.00.658.773 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.753.411 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.759.170 I llama_new_context_with_model: n_ctx      = 8192
0.00.759.177 I llama_new_context_with_model: n_batch    = 2048
0.00.759.178 I llama_new_context_with_model: n_ubatch   = 512
0.00.759.178 I llama_new_context_with_model: flash_attn = 0
0.00.759.181 I llama_new_context_with_model: freq_base  = 10000.0
0.00.759.182 I llama_new_context_with_model: freq_scale = 1
0.00.791.279 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.791.324 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.791.435 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.792.813 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.792.818 I llama_new_context_with_model: graph nodes  = 601
0.00.792.818 I llama_new_context_with_model: graph splits = 1
0.00.792.833 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.408.452 I main: llama threadpool init, n_threads = 4
0.01.408.468 I 
0.01.408.578 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.408.578 I 
0.01.408.767 I sampler seed: 1505566744
0.01.408.784 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.408.792 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.408.793 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.408.793 I 
 increadibly!

I am so excited to see what the future holds!

I can't wait to see what the future holds! [end of text]


0.13.646.267 I llama_perf_sampler_print:    sampling time =      44.62 ms /    30 runs   (    1.49 ms per token,   672.30 tokens per second)
0.13.646.272 I llama_perf_context_print:        load time =    1405.49 ms
0.13.646.274 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.646.276 I llama_perf_context_print:        eval time =   12151.40 ms /    29 runs   (  419.01 ms per token,     2.39 tokens per second)
0.13.646.278 I llama_perf_context_print:       total time =   12237.83 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.651 I build: 3951 (dbd5f2f5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.886 I main: llama backend init
0.00.002.829 I main: load the model and apply lora adapter, if any
0.00.025.114 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.344 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.446 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.459 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.461 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.466 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.471 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.472 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.475 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.477 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.479 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.489 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.495 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.496 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.498 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.500 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.745 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.258.582 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.277.129 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.277.140 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.277.141 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.277.142 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.277.143 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.277.144 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.277.145 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.277.149 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.277.150 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.277.151 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.277.152 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.277.154 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.277.163 I llama_model_loader: - type  f32:   37 tensors
0.00.277.167 I llama_model_loader: - type q8_0:  127 tensors
0.00.469.295 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.539.143 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.540.173 I llm_load_vocab: special tokens cache size = 5
0.00.641.782 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.641.855 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.641.859 I llm_load_print_meta: arch             = gemma
0.00.641.860 I llm_load_print_meta: vocab type       = SPM
0.00.641.861 I llm_load_print_meta: n_vocab          = 256000
0.00.641.863 I llm_load_print_meta: n_merges         = 0
0.00.641.864 I llm_load_print_meta: vocab_only       = 0
0.00.641.864 I llm_load_print_meta: n_ctx_train      = 8192
0.00.641.865 I llm_load_print_meta: n_embd           = 2048
0.00.641.865 I llm_load_print_meta: n_layer          = 18
0.00.641.929 I llm_load_print_meta: n_head           = 8
0.00.641.938 I llm_load_print_meta: n_head_kv        = 1
0.00.641.940 I llm_load_print_meta: n_rot            = 256
0.00.641.940 I llm_load_print_meta: n_swa            = 0
0.00.641.941 I llm_load_print_meta: n_embd_head_k    = 256
0.00.641.941 I llm_load_print_meta: n_embd_head_v    = 256
0.00.641.946 I llm_load_print_meta: n_gqa            = 8
0.00.641.962 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.641.972 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.641.974 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.641.975 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.641.976 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.641.977 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.641.977 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.641.982 I llm_load_print_meta: n_ff             = 16384
0.00.641.982 I llm_load_print_meta: n_expert         = 0
0.00.641.983 I llm_load_print_meta: n_expert_used    = 0
0.00.641.995 I llm_load_print_meta: causal attn      = 1
0.00.641.996 I llm_load_print_meta: pooling type     = 0
0.00.641.996 I llm_load_print_meta: rope type        = 2
0.00.641.997 I llm_load_print_meta: rope scaling     = linear
0.00.641.999 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.641.999 I llm_load_print_meta: freq_scale_train = 1
0.00.642.008 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.642.008 I llm_load_print_meta: rope_finetuned   = unknown
0.00.642.009 I llm_load_print_meta: ssm_d_conv       = 0
0.00.642.016 I llm_load_print_meta: ssm_d_inner      = 0
0.00.642.016 I llm_load_print_meta: ssm_d_state      = 0
0.00.642.017 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.642.018 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.642.018 I llm_load_print_meta: model type       = 2B
0.00.642.020 I llm_load_print_meta: model ftype      = Q8_0
0.00.642.021 I llm_load_print_meta: model params     = 2.51 B
0.00.642.028 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.642.029 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.642.030 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.642.030 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.642.031 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.642.031 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.642.032 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.642.032 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.642.039 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.642.041 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.642.042 I llm_load_print_meta: max token length = 93
0.00.642.224 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.719.317 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.719.329 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.719.330 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.719.330 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.719.331 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.719.332 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.725.389 I llama_new_context_with_model: n_ctx      = 8192
0.00.725.397 I llama_new_context_with_model: n_batch    = 2048
0.00.725.397 I llama_new_context_with_model: n_ubatch   = 512
0.00.725.398 I llama_new_context_with_model: flash_attn = 0
0.00.725.401 I llama_new_context_with_model: freq_base  = 10000.0
0.00.725.402 I llama_new_context_with_model: freq_scale = 1
0.00.756.470 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.756.516 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.756.629 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.758.107 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.758.112 I llama_new_context_with_model: graph nodes  = 601
0.00.758.113 I llama_new_context_with_model: graph splits = 1
0.00.758.128 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.392.763 I main: llama threadpool init, n_threads = 4
0.01.392.777 I 
0.01.392.911 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.392.915 I 
0.01.393.101 I sampler seed: 908479173
0.01.393.113 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.393.120 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.393.121 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.393.121 I 
 increasities and the potential for unintended consequences. [end of text]


0.05.593.333 I llama_perf_sampler_print:    sampling time =      15.51 ms /    11 runs   (    1.41 ms per token,   709.45 tokens per second)
0.05.593.336 I llama_perf_context_print:        load time =    1389.83 ms
0.05.593.338 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.593.340 I llama_perf_context_print:        eval time =    4169.91 ms /    10 runs   (  416.99 ms per token,     2.40 tokens per second)
0.05.593.341 I llama_perf_context_print:       total time =    4200.58 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.725 I build: 3951 (dbd5f2f5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.931 I main: llama backend init
0.00.002.893 I main: load the model and apply lora adapter, if any
0.00.024.982 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.191 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.284 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.296 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.298 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.303 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.305 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.306 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.307 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.308 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.311 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.318 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.319 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.320 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.321 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.322 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.784 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.266.805 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.285.238 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.285.251 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.285.252 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.285.253 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.285.254 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.285.255 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.285.256 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.285.260 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.285.261 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.285.262 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.285.263 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.285.265 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.285.275 I llama_model_loader: - type  f32:   37 tensors
0.00.285.280 I llama_model_loader: - type q8_0:  127 tensors
0.00.485.205 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.556.201 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.557.249 I llm_load_vocab: special tokens cache size = 5
0.00.652.438 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.652.512 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.652.513 I llm_load_print_meta: arch             = gemma
0.00.652.514 I llm_load_print_meta: vocab type       = SPM
0.00.652.515 I llm_load_print_meta: n_vocab          = 256000
0.00.652.517 I llm_load_print_meta: n_merges         = 0
0.00.652.518 I llm_load_print_meta: vocab_only       = 0
0.00.652.518 I llm_load_print_meta: n_ctx_train      = 8192
0.00.652.519 I llm_load_print_meta: n_embd           = 2048
0.00.652.519 I llm_load_print_meta: n_layer          = 18
0.00.652.585 I llm_load_print_meta: n_head           = 8
0.00.652.592 I llm_load_print_meta: n_head_kv        = 1
0.00.652.592 I llm_load_print_meta: n_rot            = 256
0.00.652.593 I llm_load_print_meta: n_swa            = 0
0.00.652.593 I llm_load_print_meta: n_embd_head_k    = 256
0.00.652.593 I llm_load_print_meta: n_embd_head_v    = 256
0.00.652.598 I llm_load_print_meta: n_gqa            = 8
0.00.652.602 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.652.607 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.652.608 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.652.610 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.652.610 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.652.610 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.652.611 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.652.615 I llm_load_print_meta: n_ff             = 16384
0.00.652.616 I llm_load_print_meta: n_expert         = 0
0.00.652.616 I llm_load_print_meta: n_expert_used    = 0
0.00.652.617 I llm_load_print_meta: causal attn      = 1
0.00.652.617 I llm_load_print_meta: pooling type     = 0
0.00.652.617 I llm_load_print_meta: rope type        = 2
0.00.652.618 I llm_load_print_meta: rope scaling     = linear
0.00.652.619 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.652.620 I llm_load_print_meta: freq_scale_train = 1
0.00.652.621 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.652.621 I llm_load_print_meta: rope_finetuned   = unknown
0.00.652.644 I llm_load_print_meta: ssm_d_conv       = 0
0.00.652.645 I llm_load_print_meta: ssm_d_inner      = 0
0.00.652.645 I llm_load_print_meta: ssm_d_state      = 0
0.00.652.645 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.652.646 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.652.647 I llm_load_print_meta: model type       = 2B
0.00.652.647 I llm_load_print_meta: model ftype      = Q8_0
0.00.652.648 I llm_load_print_meta: model params     = 2.51 B
0.00.652.649 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.652.650 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.652.650 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.652.651 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.652.652 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.652.652 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.652.653 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.652.653 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.652.659 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.652.661 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.652.661 I llm_load_print_meta: max token length = 93
0.00.652.831 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.724.517 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.724.526 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.730.170 I llama_new_context_with_model: n_ctx      = 8192
0.00.730.179 I llama_new_context_with_model: n_batch    = 2048
0.00.730.180 I llama_new_context_with_model: n_ubatch   = 512
0.00.730.181 I llama_new_context_with_model: flash_attn = 0
0.00.730.184 I llama_new_context_with_model: freq_base  = 10000.0
0.00.730.185 I llama_new_context_with_model: freq_scale = 1
0.00.761.031 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.761.072 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.761.187 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.762.567 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.762.572 I llama_new_context_with_model: graph nodes  = 601
0.00.762.572 I llama_new_context_with_model: graph splits = 1
0.00.762.588 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.377.498 I main: llama threadpool init, n_threads = 4
0.01.377.513 I 
0.01.377.625 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.377.628 I 
0.01.377.809 I sampler seed: 3391604453
0.01.377.821 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.377.828 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.377.829 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.377.829 I 
 increasities.

I do not understand this context. Could you please provide more information? [end of text]


0.09.406.044 I llama_perf_sampler_print:    sampling time =      30.50 ms /    20 runs   (    1.52 ms per token,   655.78 tokens per second)
0.09.406.048 I llama_perf_context_print:        load time =    1374.49 ms
0.09.406.050 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.406.052 I llama_perf_context_print:        eval time =    7970.14 ms /    19 runs   (  419.48 ms per token,     2.38 tokens per second)
0.09.406.053 I llama_perf_context_print:       total time =    8028.56 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m53.724s
user	2m44.829s
sys	0m9.658s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3951 (dbd5f2f5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200044.48 ms
main:    total time = 200044.48 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.666 I build: 3951 (dbd5f2f5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.002.788 I main: load the model and apply lora adapter, if any
0.00.025.438 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.653 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.750 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.762 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.764 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.769 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.770 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.771 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.772 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.774 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.776 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.784 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.788 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.789 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.790 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.791 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.572 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.258.253 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.276.807 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.276.816 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.276.818 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.276.819 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.276.820 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.276.821 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.276.822 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.276.826 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.276.826 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.276.827 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.276.828 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.276.832 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.276.842 I llama_model_loader: - type  f32:   37 tensors
0.00.276.846 I llama_model_loader: - type q4_K:  108 tensors
0.00.276.847 I llama_model_loader: - type q6_K:   19 tensors
0.00.454.786 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.524.072 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.525.120 I llm_load_vocab: special tokens cache size = 5
0.00.620.558 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.620.630 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.620.634 I llm_load_print_meta: arch             = gemma
0.00.620.634 I llm_load_print_meta: vocab type       = SPM
0.00.620.635 I llm_load_print_meta: n_vocab          = 256000
0.00.620.638 I llm_load_print_meta: n_merges         = 0
0.00.620.638 I llm_load_print_meta: vocab_only       = 0
0.00.620.639 I llm_load_print_meta: n_ctx_train      = 8192
0.00.620.639 I llm_load_print_meta: n_embd           = 2048
0.00.620.639 I llm_load_print_meta: n_layer          = 18
0.00.620.702 I llm_load_print_meta: n_head           = 8
0.00.620.711 I llm_load_print_meta: n_head_kv        = 1
0.00.620.712 I llm_load_print_meta: n_rot            = 256
0.00.620.712 I llm_load_print_meta: n_swa            = 0
0.00.620.713 I llm_load_print_meta: n_embd_head_k    = 256
0.00.620.713 I llm_load_print_meta: n_embd_head_v    = 256
0.00.620.718 I llm_load_print_meta: n_gqa            = 8
0.00.620.723 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.620.728 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.620.729 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.620.731 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.620.732 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.620.733 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.620.733 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.620.739 I llm_load_print_meta: n_ff             = 16384
0.00.620.739 I llm_load_print_meta: n_expert         = 0
0.00.620.740 I llm_load_print_meta: n_expert_used    = 0
0.00.620.740 I llm_load_print_meta: causal attn      = 1
0.00.620.740 I llm_load_print_meta: pooling type     = 0
0.00.620.742 I llm_load_print_meta: rope type        = 2
0.00.620.743 I llm_load_print_meta: rope scaling     = linear
0.00.620.745 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.620.746 I llm_load_print_meta: freq_scale_train = 1
0.00.620.747 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.620.747 I llm_load_print_meta: rope_finetuned   = unknown
0.00.620.747 I llm_load_print_meta: ssm_d_conv       = 0
0.00.620.748 I llm_load_print_meta: ssm_d_inner      = 0
0.00.620.748 I llm_load_print_meta: ssm_d_state      = 0
0.00.620.749 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.620.749 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.620.750 I llm_load_print_meta: model type       = 2B
0.00.620.751 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.620.751 I llm_load_print_meta: model params     = 2.51 B
0.00.620.752 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.620.753 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.620.753 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.620.753 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.620.754 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.620.755 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.620.755 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.620.757 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.620.763 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.620.764 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.620.765 I llm_load_print_meta: max token length = 93
0.00.620.935 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.680.157 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.680.169 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.680.169 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.680.170 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.680.171 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.680.171 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.685.973 I llama_new_context_with_model: n_ctx      = 8192
0.00.685.983 I llama_new_context_with_model: n_batch    = 2048
0.00.685.983 I llama_new_context_with_model: n_ubatch   = 512
0.00.685.984 I llama_new_context_with_model: flash_attn = 0
0.00.685.988 I llama_new_context_with_model: freq_base  = 10000.0
0.00.685.989 I llama_new_context_with_model: freq_scale = 1
0.00.716.280 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.716.325 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.716.439 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.717.852 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.717.857 I llama_new_context_with_model: graph nodes  = 601
0.00.717.857 I llama_new_context_with_model: graph splits = 1
0.00.717.873 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.304.852 I main: llama threadpool init, n_threads = 4
0.01.304.867 I 
0.01.304.975 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.304.979 I 
0.01.305.152 I sampler seed: 829387535
0.01.305.163 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.305.170 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.305.171 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.305.172 I 
 squaRE 32

**Introduction**

The Squatre 32 is an FPGA design focused on high-performance embedded systems. It provides a flexible

0.12.249.734 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   671.07 tokens per second)
0.12.249.737 I llama_perf_context_print:        load time =    1301.98 ms
0.12.249.753 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.249.755 I llama_perf_context_print:        eval time =   10849.74 ms /    32 runs   (  339.05 ms per token,     2.95 tokens per second)
0.12.249.756 I llama_perf_context_print:       total time =   10944.89 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3951 (dbd5f2f5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200259.18 ms
main:    total time = 200259.18 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.644 I build: 3951 (dbd5f2f5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.002.792 I main: load the model and apply lora adapter, if any
0.00.025.105 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.204 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.219 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.224 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.229 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.230 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.231 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.232 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.234 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.236 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.252 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.253 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.261 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.266 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.267 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.593 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.270.474 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.288.946 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.288.957 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.288.958 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.288.959 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.288.960 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.288.962 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.288.963 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.288.967 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.288.967 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.288.976 I llama_model_loader: - type  f32:   37 tensors
0.00.288.981 I llama_model_loader: - type q4_K:  108 tensors
0.00.288.981 I llama_model_loader: - type q6_K:   19 tensors
0.00.490.037 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.557.481 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.558.459 I llm_load_vocab: special tokens cache size = 5
0.00.653.299 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.653.372 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.653.373 I llm_load_print_meta: arch             = gemma
0.00.653.373 I llm_load_print_meta: vocab type       = SPM
0.00.653.374 I llm_load_print_meta: n_vocab          = 256000
0.00.653.377 I llm_load_print_meta: n_merges         = 0
0.00.653.377 I llm_load_print_meta: vocab_only       = 0
0.00.653.378 I llm_load_print_meta: n_ctx_train      = 8192
0.00.653.378 I llm_load_print_meta: n_embd           = 2048
0.00.653.379 I llm_load_print_meta: n_layer          = 18
0.00.653.443 I llm_load_print_meta: n_head           = 8
0.00.653.450 I llm_load_print_meta: n_head_kv        = 1
0.00.653.450 I llm_load_print_meta: n_rot            = 256
0.00.653.451 I llm_load_print_meta: n_swa            = 0
0.00.653.451 I llm_load_print_meta: n_embd_head_k    = 256
0.00.653.451 I llm_load_print_meta: n_embd_head_v    = 256
0.00.653.456 I llm_load_print_meta: n_gqa            = 8
0.00.653.460 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.653.465 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.653.466 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.653.467 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.653.468 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.653.468 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.653.469 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.653.473 I llm_load_print_meta: n_ff             = 16384
0.00.653.474 I llm_load_print_meta: n_expert         = 0
0.00.653.474 I llm_load_print_meta: n_expert_used    = 0
0.00.653.475 I llm_load_print_meta: causal attn      = 1
0.00.653.475 I llm_load_print_meta: pooling type     = 0
0.00.653.476 I llm_load_print_meta: rope type        = 2
0.00.653.476 I llm_load_print_meta: rope scaling     = linear
0.00.653.478 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.653.479 I llm_load_print_meta: freq_scale_train = 1
0.00.653.487 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.653.487 I llm_load_print_meta: rope_finetuned   = unknown
0.00.653.487 I llm_load_print_meta: ssm_d_conv       = 0
0.00.653.488 I llm_load_print_meta: ssm_d_inner      = 0
0.00.653.488 I llm_load_print_meta: ssm_d_state      = 0
0.00.653.488 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.653.488 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.653.513 I llm_load_print_meta: model type       = 2B
0.00.653.515 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.653.516 I llm_load_print_meta: model params     = 2.51 B
0.00.653.516 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.653.517 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.653.517 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.653.525 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.653.526 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.653.527 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.653.527 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.653.528 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.653.535 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.653.536 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.653.537 I llm_load_print_meta: max token length = 93
0.00.653.707 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.711.562 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.717.467 I llama_new_context_with_model: n_ctx      = 8192
0.00.717.475 I llama_new_context_with_model: n_batch    = 2048
0.00.717.476 I llama_new_context_with_model: n_ubatch   = 512
0.00.717.477 I llama_new_context_with_model: flash_attn = 0
0.00.717.481 I llama_new_context_with_model: freq_base  = 10000.0
0.00.717.482 I llama_new_context_with_model: freq_scale = 1
0.00.747.751 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.747.798 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.747.914 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.749.332 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.749.338 I llama_new_context_with_model: graph nodes  = 601
0.00.749.338 I llama_new_context_with_model: graph splits = 1
0.00.749.355 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.333.397 I main: llama threadpool init, n_threads = 4
0.01.333.409 I 
0.01.333.510 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.333.514 I 
0.01.333.690 I sampler seed: 2438652081
0.01.333.706 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.333.714 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.333.715 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.333.715 I 
 seconally:
- The company has not been able to generate sufficient revenue to cover its operating expenses.
- The company's financial position is precarious.

0.12.305.024 I llama_perf_sampler_print:    sampling time =      48.86 ms /    33 runs   (    1.48 ms per token,   675.37 tokens per second)
0.12.305.039 I llama_perf_context_print:        load time =    1330.52 ms
0.12.305.041 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.305.042 I llama_perf_context_print:        eval time =   10876.71 ms /    32 runs   (  339.90 ms per token,     2.94 tokens per second)
0.12.305.043 I llama_perf_context_print:       total time =   10971.64 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m7.886s
user	50m21.214s
sys	0m6.515s
