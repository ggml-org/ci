+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.676 I build: 3885 (db8d018d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.886 I main: llama backend init
0.00.002.822 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.109 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.322 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.414 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.427 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.428 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.433 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.440 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.441 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.443 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.444 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.445 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.452 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.453 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.467 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.468 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.469 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.430 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.637 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.612 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.620 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.621 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.622 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.623 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.625 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.626 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.630 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.631 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.632 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.633 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.634 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.642 I llama_model_loader: - type  f32:   37 tensors
0.00.265.646 I llama_model_loader: - type q8_0:  127 tensors
0.00.428.429 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.455.466 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.456.528 I llm_load_vocab: special tokens cache size = 5
0.00.550.502 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.550.566 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.550.568 I llm_load_print_meta: arch             = gemma
0.00.550.568 I llm_load_print_meta: vocab type       = SPM
0.00.550.569 I llm_load_print_meta: n_vocab          = 256000
0.00.550.572 I llm_load_print_meta: n_merges         = 0
0.00.550.572 I llm_load_print_meta: vocab_only       = 0
0.00.550.573 I llm_load_print_meta: n_ctx_train      = 8192
0.00.550.574 I llm_load_print_meta: n_embd           = 2048
0.00.550.574 I llm_load_print_meta: n_layer          = 18
0.00.550.639 I llm_load_print_meta: n_head           = 8
0.00.550.646 I llm_load_print_meta: n_head_kv        = 1
0.00.550.646 I llm_load_print_meta: n_rot            = 256
0.00.550.647 I llm_load_print_meta: n_swa            = 0
0.00.550.647 I llm_load_print_meta: n_embd_head_k    = 256
0.00.550.647 I llm_load_print_meta: n_embd_head_v    = 256
0.00.550.652 I llm_load_print_meta: n_gqa            = 8
0.00.550.656 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.550.661 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.550.662 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.550.664 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.550.664 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.550.665 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.550.665 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.550.670 I llm_load_print_meta: n_ff             = 16384
0.00.550.670 I llm_load_print_meta: n_expert         = 0
0.00.550.671 I llm_load_print_meta: n_expert_used    = 0
0.00.550.671 I llm_load_print_meta: causal attn      = 1
0.00.550.671 I llm_load_print_meta: pooling type     = 0
0.00.550.672 I llm_load_print_meta: rope type        = 2
0.00.550.672 I llm_load_print_meta: rope scaling     = linear
0.00.550.673 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.550.674 I llm_load_print_meta: freq_scale_train = 1
0.00.550.674 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.550.675 I llm_load_print_meta: rope_finetuned   = unknown
0.00.550.675 I llm_load_print_meta: ssm_d_conv       = 0
0.00.550.675 I llm_load_print_meta: ssm_d_inner      = 0
0.00.550.676 I llm_load_print_meta: ssm_d_state      = 0
0.00.550.677 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.550.682 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.550.683 I llm_load_print_meta: model type       = 2B
0.00.550.693 I llm_load_print_meta: model ftype      = Q8_0
0.00.550.694 I llm_load_print_meta: model params     = 2.51 B
0.00.550.695 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.550.695 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.550.696 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.550.696 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.550.696 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.550.697 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.550.697 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.550.698 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.550.704 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.550.705 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.550.706 I llm_load_print_meta: max token length = 93
0.00.550.875 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.649.366 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.649.373 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.649.374 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.649.375 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.649.376 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.649.377 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.655.011 I llama_new_context_with_model: n_ctx      = 8192
0.00.655.019 I llama_new_context_with_model: n_batch    = 2048
0.00.655.019 I llama_new_context_with_model: n_ubatch   = 512
0.00.655.020 I llama_new_context_with_model: flash_attn = 0
0.00.655.022 I llama_new_context_with_model: freq_base  = 10000.0
0.00.655.023 I llama_new_context_with_model: freq_scale = 1
0.00.684.310 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.684.353 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.684.478 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.685.895 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.685.902 I llama_new_context_with_model: graph nodes  = 601
0.00.685.902 I llama_new_context_with_model: graph splits = 1
0.00.685.917 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.302.976 I main: llama threadpool init, n_threads = 4
0.01.302.988 I 
0.01.303.097 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.303.101 I 
0.01.303.263 I sampler seed: 1762729205
0.01.303.274 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.303.281 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.303.282 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.303.282 I 
 increasities. [end of text]


0.03.001.114 I llama_perf_sampler_print:    sampling time =       6.31 ms /     5 runs   (    1.26 ms per token,   791.89 tokens per second)
0.03.001.117 I llama_perf_context_print:        load time =    1299.97 ms
0.03.001.118 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.001.119 I llama_perf_context_print:        eval time =    1686.31 ms /     4 runs   (  421.58 ms per token,     2.37 tokens per second)
0.03.001.120 I llama_perf_context_print:       total time =    1698.15 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.672 I build: 3885 (db8d018d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.899 I main: llama backend init
0.00.002.873 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.055 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.162 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.176 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.178 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.183 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.189 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.191 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.192 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.194 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.195 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.203 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.205 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.206 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.208 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.209 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.594 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.432 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.353 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.362 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.363 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.364 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.365 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.367 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.369 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.374 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.376 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.378 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.380 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.264.382 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.391 I llama_model_loader: - type  f32:   37 tensors
0.00.264.395 I llama_model_loader: - type q8_0:  127 tensors
0.00.414.694 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.437.552 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.438.595 I llm_load_vocab: special tokens cache size = 5
0.00.531.569 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.531.629 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.531.631 I llm_load_print_meta: arch             = gemma
0.00.531.631 I llm_load_print_meta: vocab type       = SPM
0.00.531.632 I llm_load_print_meta: n_vocab          = 256000
0.00.531.634 I llm_load_print_meta: n_merges         = 0
0.00.531.635 I llm_load_print_meta: vocab_only       = 0
0.00.531.635 I llm_load_print_meta: n_ctx_train      = 8192
0.00.531.636 I llm_load_print_meta: n_embd           = 2048
0.00.531.636 I llm_load_print_meta: n_layer          = 18
0.00.531.702 I llm_load_print_meta: n_head           = 8
0.00.531.709 I llm_load_print_meta: n_head_kv        = 1
0.00.531.710 I llm_load_print_meta: n_rot            = 256
0.00.531.710 I llm_load_print_meta: n_swa            = 0
0.00.531.711 I llm_load_print_meta: n_embd_head_k    = 256
0.00.531.711 I llm_load_print_meta: n_embd_head_v    = 256
0.00.531.718 I llm_load_print_meta: n_gqa            = 8
0.00.531.724 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.531.732 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.531.733 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.531.735 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.531.736 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.531.737 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.531.738 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.531.745 I llm_load_print_meta: n_ff             = 16384
0.00.531.745 I llm_load_print_meta: n_expert         = 0
0.00.531.746 I llm_load_print_meta: n_expert_used    = 0
0.00.531.747 I llm_load_print_meta: causal attn      = 1
0.00.531.747 I llm_load_print_meta: pooling type     = 0
0.00.531.748 I llm_load_print_meta: rope type        = 2
0.00.531.753 I llm_load_print_meta: rope scaling     = linear
0.00.531.754 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.531.755 I llm_load_print_meta: freq_scale_train = 1
0.00.531.756 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.531.756 I llm_load_print_meta: rope_finetuned   = unknown
0.00.531.757 I llm_load_print_meta: ssm_d_conv       = 0
0.00.531.758 I llm_load_print_meta: ssm_d_inner      = 0
0.00.531.758 I llm_load_print_meta: ssm_d_state      = 0
0.00.531.759 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.531.760 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.531.760 I llm_load_print_meta: model type       = 2B
0.00.531.772 I llm_load_print_meta: model ftype      = Q8_0
0.00.531.773 I llm_load_print_meta: model params     = 2.51 B
0.00.531.775 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.531.775 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.531.776 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.531.777 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.531.777 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.531.778 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.531.779 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.531.780 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.531.787 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.531.789 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.531.790 I llm_load_print_meta: max token length = 93
0.00.531.966 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.626.173 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.632.040 I llama_new_context_with_model: n_ctx      = 8192
0.00.632.048 I llama_new_context_with_model: n_batch    = 2048
0.00.632.048 I llama_new_context_with_model: n_ubatch   = 512
0.00.632.049 I llama_new_context_with_model: flash_attn = 0
0.00.632.051 I llama_new_context_with_model: freq_base  = 10000.0
0.00.632.052 I llama_new_context_with_model: freq_scale = 1
0.00.661.183 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.661.231 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.661.353 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.662.768 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.662.776 I llama_new_context_with_model: graph nodes  = 601
0.00.662.776 I llama_new_context_with_model: graph splits = 1
0.00.662.795 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.280.980 I main: llama threadpool init, n_threads = 4
0.01.280.993 I 
0.01.281.118 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.281.122 I 
0.01.281.299 I sampler seed: 362039996
0.01.281.311 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.281.318 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.281.319 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.281.320 I 
 increamically with the size of the population.

This statement is about?

a) Population growth
b) Environmental sustainability
c) Economic development
d

0.14.743.716 I llama_perf_sampler_print:    sampling time =      49.36 ms /    33 runs   (    1.50 ms per token,   668.63 tokens per second)
0.14.743.719 I llama_perf_context_print:        load time =    1277.90 ms
0.14.743.721 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.743.724 I llama_perf_context_print:        eval time =   13380.36 ms /    32 runs   (  418.14 ms per token,     2.39 tokens per second)
0.14.743.726 I llama_perf_context_print:       total time =   13462.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.677 I build: 3885 (db8d018d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.904 I main: llama backend init
0.00.002.892 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.236 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.479 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.585 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.599 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.608 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.618 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.620 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.623 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.625 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.627 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.629 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.640 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.643 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.644 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.646 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.648 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.924 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.158 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.278 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.290 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.291 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.292 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.293 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.294 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.296 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.301 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.302 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.303 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.304 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.266.305 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.315 I llama_model_loader: - type  f32:   37 tensors
0.00.266.320 I llama_model_loader: - type q8_0:  127 tensors
0.00.437.974 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.465.697 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.466.824 I llm_load_vocab: special tokens cache size = 5
0.00.559.939 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.560.001 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.560.002 I llm_load_print_meta: arch             = gemma
0.00.560.003 I llm_load_print_meta: vocab type       = SPM
0.00.560.004 I llm_load_print_meta: n_vocab          = 256000
0.00.560.007 I llm_load_print_meta: n_merges         = 0
0.00.560.007 I llm_load_print_meta: vocab_only       = 0
0.00.560.008 I llm_load_print_meta: n_ctx_train      = 8192
0.00.560.008 I llm_load_print_meta: n_embd           = 2048
0.00.560.008 I llm_load_print_meta: n_layer          = 18
0.00.560.073 I llm_load_print_meta: n_head           = 8
0.00.560.080 I llm_load_print_meta: n_head_kv        = 1
0.00.560.080 I llm_load_print_meta: n_rot            = 256
0.00.560.080 I llm_load_print_meta: n_swa            = 0
0.00.560.081 I llm_load_print_meta: n_embd_head_k    = 256
0.00.560.081 I llm_load_print_meta: n_embd_head_v    = 256
0.00.560.085 I llm_load_print_meta: n_gqa            = 8
0.00.560.090 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.560.095 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.560.097 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.560.098 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.560.099 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.560.099 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.560.099 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.560.105 I llm_load_print_meta: n_ff             = 16384
0.00.560.105 I llm_load_print_meta: n_expert         = 0
0.00.560.105 I llm_load_print_meta: n_expert_used    = 0
0.00.560.106 I llm_load_print_meta: causal attn      = 1
0.00.560.106 I llm_load_print_meta: pooling type     = 0
0.00.560.107 I llm_load_print_meta: rope type        = 2
0.00.560.107 I llm_load_print_meta: rope scaling     = linear
0.00.560.108 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.560.109 I llm_load_print_meta: freq_scale_train = 1
0.00.560.109 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.560.110 I llm_load_print_meta: rope_finetuned   = unknown
0.00.560.110 I llm_load_print_meta: ssm_d_conv       = 0
0.00.560.110 I llm_load_print_meta: ssm_d_inner      = 0
0.00.560.111 I llm_load_print_meta: ssm_d_state      = 0
0.00.560.111 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.560.111 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.560.112 I llm_load_print_meta: model type       = 2B
0.00.560.142 I llm_load_print_meta: model ftype      = Q8_0
0.00.560.143 I llm_load_print_meta: model params     = 2.51 B
0.00.560.144 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.560.145 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.560.145 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.560.146 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.560.146 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.560.147 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.560.147 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.560.148 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.560.154 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.560.156 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.560.156 I llm_load_print_meta: max token length = 93
0.00.560.349 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.636.355 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.636.366 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.636.367 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.636.368 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.636.369 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.636.369 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.642.300 I llama_new_context_with_model: n_ctx      = 8192
0.00.642.309 I llama_new_context_with_model: n_batch    = 2048
0.00.642.309 I llama_new_context_with_model: n_ubatch   = 512
0.00.642.310 I llama_new_context_with_model: flash_attn = 0
0.00.642.314 I llama_new_context_with_model: freq_base  = 10000.0
0.00.642.314 I llama_new_context_with_model: freq_scale = 1
0.00.674.284 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.674.328 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.674.465 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.675.868 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.675.876 I llama_new_context_with_model: graph nodes  = 601
0.00.675.877 I llama_new_context_with_model: graph splits = 1
0.00.675.894 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.292.963 I main: llama threadpool init, n_threads = 4
0.01.292.975 I 
0.01.293.098 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.293.111 I 
0.01.293.275 I sampler seed: 699620781
0.01.293.286 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.293.291 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.293.292 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.293.293 I 
 increasively and with increasing fervor. [end of text]


0.04.682.157 I llama_perf_sampler_print:    sampling time =      12.46 ms /     9 runs   (    1.38 ms per token,   722.43 tokens per second)
0.04.682.160 I llama_perf_context_print:        load time =    1289.83 ms
0.04.682.162 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.682.176 I llama_perf_context_print:        eval time =    3367.09 ms /     8 runs   (  420.89 ms per token,     2.38 tokens per second)
0.04.682.178 I llama_perf_context_print:       total time =    3389.20 ms /     9 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.688 I build: 3885 (db8d018d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.887 I main: llama backend init
0.00.002.829 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.288 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.509 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.603 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.613 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.614 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.620 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.621 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.622 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.623 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.624 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.625 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.633 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.634 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.635 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.636 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.637 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.672 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.038 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.097 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.107 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.109 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.109 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.110 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.112 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.113 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.118 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.119 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.120 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.121 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.266.123 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.131 I llama_model_loader: - type  f32:   37 tensors
0.00.266.135 I llama_model_loader: - type q8_0:  127 tensors
0.00.450.401 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.478.815 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.479.952 I llm_load_vocab: special tokens cache size = 5
0.00.592.891 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.592.950 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.592.952 I llm_load_print_meta: arch             = gemma
0.00.592.952 I llm_load_print_meta: vocab type       = SPM
0.00.592.953 I llm_load_print_meta: n_vocab          = 256000
0.00.592.955 I llm_load_print_meta: n_merges         = 0
0.00.592.956 I llm_load_print_meta: vocab_only       = 0
0.00.592.957 I llm_load_print_meta: n_ctx_train      = 8192
0.00.592.957 I llm_load_print_meta: n_embd           = 2048
0.00.592.957 I llm_load_print_meta: n_layer          = 18
0.00.593.018 I llm_load_print_meta: n_head           = 8
0.00.593.025 I llm_load_print_meta: n_head_kv        = 1
0.00.593.026 I llm_load_print_meta: n_rot            = 256
0.00.593.026 I llm_load_print_meta: n_swa            = 0
0.00.593.026 I llm_load_print_meta: n_embd_head_k    = 256
0.00.593.027 I llm_load_print_meta: n_embd_head_v    = 256
0.00.593.031 I llm_load_print_meta: n_gqa            = 8
0.00.593.036 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.593.041 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.593.042 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.593.043 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.593.044 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.593.044 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.593.045 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.593.049 I llm_load_print_meta: n_ff             = 16384
0.00.593.050 I llm_load_print_meta: n_expert         = 0
0.00.593.050 I llm_load_print_meta: n_expert_used    = 0
0.00.593.051 I llm_load_print_meta: causal attn      = 1
0.00.593.052 I llm_load_print_meta: pooling type     = 0
0.00.593.052 I llm_load_print_meta: rope type        = 2
0.00.593.053 I llm_load_print_meta: rope scaling     = linear
0.00.593.054 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.593.055 I llm_load_print_meta: freq_scale_train = 1
0.00.593.055 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.593.055 I llm_load_print_meta: rope_finetuned   = unknown
0.00.593.057 I llm_load_print_meta: ssm_d_conv       = 0
0.00.593.057 I llm_load_print_meta: ssm_d_inner      = 0
0.00.593.058 I llm_load_print_meta: ssm_d_state      = 0
0.00.593.062 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.593.062 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.593.063 I llm_load_print_meta: model type       = 2B
0.00.593.072 I llm_load_print_meta: model ftype      = Q8_0
0.00.593.073 I llm_load_print_meta: model params     = 2.51 B
0.00.593.074 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.593.075 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.593.076 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.593.076 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.593.077 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.593.078 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.593.078 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.593.079 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.593.085 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.593.087 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.593.087 I llm_load_print_meta: max token length = 93
0.00.593.255 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.666.898 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.666.908 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.672.557 I llama_new_context_with_model: n_ctx      = 8192
0.00.672.564 I llama_new_context_with_model: n_batch    = 2048
0.00.672.565 I llama_new_context_with_model: n_ubatch   = 512
0.00.672.566 I llama_new_context_with_model: flash_attn = 0
0.00.672.568 I llama_new_context_with_model: freq_base  = 10000.0
0.00.672.569 I llama_new_context_with_model: freq_scale = 1
0.00.702.122 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.702.166 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.702.282 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.703.688 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.703.694 I llama_new_context_with_model: graph nodes  = 601
0.00.703.695 I llama_new_context_with_model: graph splits = 1
0.00.703.710 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.354.080 I main: llama threadpool init, n_threads = 4
0.01.354.093 I 
0.01.354.200 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.354.204 I 
0.01.354.367 I sampler seed: 1966413367
0.01.354.378 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.354.385 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.354.386 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.354.386 I 
 increamically, and then with a final burst of energy.

That's how I would describe the way I practice yoga.

**Benefits of yoga:**

0.14.928.425 I llama_perf_sampler_print:    sampling time =      49.24 ms /    33 runs   (    1.49 ms per token,   670.23 tokens per second)
0.14.928.428 I llama_perf_context_print:        load time =    1351.05 ms
0.14.928.429 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.928.431 I llama_perf_context_print:        eval time =   13492.25 ms /    32 runs   (  421.63 ms per token,     2.37 tokens per second)
0.14.928.432 I llama_perf_context_print:       total time =   13574.35 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m47.245s
user	2m21.259s
sys	0m9.538s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3885 (db8d018d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199139.36 ms
main:    total time = 199139.36 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.719 I build: 3885 (db8d018d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.943 I main: llama backend init
0.00.002.887 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.482 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.695 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.787 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.798 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.799 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.805 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.806 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.808 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.809 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.811 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.812 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.819 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.821 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.822 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.823 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.825 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.268 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.016 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.051 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.061 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.062 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.063 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.064 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.065 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.066 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.070 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.071 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.072 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.073 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.075 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.083 I llama_model_loader: - type  f32:   37 tensors
0.00.267.087 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.088 I llama_model_loader: - type q6_K:   19 tensors
0.00.444.285 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.470.123 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.471.131 I llm_load_vocab: special tokens cache size = 5
0.00.583.901 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.583.964 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.583.965 I llm_load_print_meta: arch             = gemma
0.00.583.966 I llm_load_print_meta: vocab type       = SPM
0.00.583.967 I llm_load_print_meta: n_vocab          = 256000
0.00.583.970 I llm_load_print_meta: n_merges         = 0
0.00.583.970 I llm_load_print_meta: vocab_only       = 0
0.00.583.971 I llm_load_print_meta: n_ctx_train      = 8192
0.00.583.971 I llm_load_print_meta: n_embd           = 2048
0.00.583.972 I llm_load_print_meta: n_layer          = 18
0.00.584.035 I llm_load_print_meta: n_head           = 8
0.00.584.042 I llm_load_print_meta: n_head_kv        = 1
0.00.584.057 I llm_load_print_meta: n_rot            = 256
0.00.584.058 I llm_load_print_meta: n_swa            = 0
0.00.584.059 I llm_load_print_meta: n_embd_head_k    = 256
0.00.584.059 I llm_load_print_meta: n_embd_head_v    = 256
0.00.584.064 I llm_load_print_meta: n_gqa            = 8
0.00.584.068 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.584.073 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.584.075 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.584.080 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.584.082 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.584.082 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.584.082 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.584.087 I llm_load_print_meta: n_ff             = 16384
0.00.584.088 I llm_load_print_meta: n_expert         = 0
0.00.584.088 I llm_load_print_meta: n_expert_used    = 0
0.00.584.089 I llm_load_print_meta: causal attn      = 1
0.00.584.090 I llm_load_print_meta: pooling type     = 0
0.00.584.090 I llm_load_print_meta: rope type        = 2
0.00.584.090 I llm_load_print_meta: rope scaling     = linear
0.00.584.092 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.584.092 I llm_load_print_meta: freq_scale_train = 1
0.00.584.093 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.584.094 I llm_load_print_meta: rope_finetuned   = unknown
0.00.584.094 I llm_load_print_meta: ssm_d_conv       = 0
0.00.584.094 I llm_load_print_meta: ssm_d_inner      = 0
0.00.584.095 I llm_load_print_meta: ssm_d_state      = 0
0.00.584.095 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.584.095 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.584.096 I llm_load_print_meta: model type       = 2B
0.00.584.106 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.584.107 I llm_load_print_meta: model params     = 2.51 B
0.00.584.107 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.584.108 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.584.108 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.584.109 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.584.113 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.584.114 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.584.114 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.584.115 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.584.122 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.584.124 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.584.125 I llm_load_print_meta: max token length = 93
0.00.584.293 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.644.369 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.644.378 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.644.379 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.644.380 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.644.381 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.644.381 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.650.025 I llama_new_context_with_model: n_ctx      = 8192
0.00.650.031 I llama_new_context_with_model: n_batch    = 2048
0.00.650.032 I llama_new_context_with_model: n_ubatch   = 512
0.00.650.032 I llama_new_context_with_model: flash_attn = 0
0.00.650.035 I llama_new_context_with_model: freq_base  = 10000.0
0.00.650.036 I llama_new_context_with_model: freq_scale = 1
0.00.679.039 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.679.085 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.679.203 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.680.634 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.680.640 I llama_new_context_with_model: graph nodes  = 601
0.00.680.640 I llama_new_context_with_model: graph splits = 1
0.00.680.655 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.258.874 I main: llama threadpool init, n_threads = 4
0.01.258.888 I 
0.01.258.995 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.258.999 I 
0.01.259.166 I sampler seed: 1150803157
0.01.259.176 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.259.183 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.259.184 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.259.184 I 
 squaRELLA, a powerful AI language model, generated a fascinating piece of fiction. Here is an excerpt:

**Excerpt:**

"The city pulsed with

0.12.129.447 I llama_perf_sampler_print:    sampling time =      49.76 ms /    33 runs   (    1.51 ms per token,   663.21 tokens per second)
0.12.129.450 I llama_perf_context_print:        load time =    1255.80 ms
0.12.129.452 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.129.454 I llama_perf_context_print:        eval time =   10787.37 ms /    32 runs   (  337.11 ms per token,     2.97 tokens per second)
0.12.129.456 I llama_perf_context_print:       total time =   10870.58 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3885 (db8d018d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199119.68 ms
main:    total time = 199119.68 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.672 I build: 3885 (db8d018d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.879 I main: llama backend init
0.00.002.829 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.795 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.895 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.910 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.914 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.920 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.922 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.923 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.924 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.925 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.926 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.932 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.934 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.935 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.936 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.937 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.223 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.268.553 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.286.504 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.286.512 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.286.513 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.286.514 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.286.516 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.286.517 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.286.519 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.286.523 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.286.525 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.286.532 I llama_model_loader: - type  f32:   37 tensors
0.00.286.536 I llama_model_loader: - type q4_K:  108 tensors
0.00.286.537 I llama_model_loader: - type q6_K:   19 tensors
0.00.466.302 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.492.875 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.493.889 I llm_load_vocab: special tokens cache size = 5
0.00.603.975 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.604.037 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.604.038 I llm_load_print_meta: arch             = gemma
0.00.604.039 I llm_load_print_meta: vocab type       = SPM
0.00.604.040 I llm_load_print_meta: n_vocab          = 256000
0.00.604.043 I llm_load_print_meta: n_merges         = 0
0.00.604.043 I llm_load_print_meta: vocab_only       = 0
0.00.604.044 I llm_load_print_meta: n_ctx_train      = 8192
0.00.604.044 I llm_load_print_meta: n_embd           = 2048
0.00.604.044 I llm_load_print_meta: n_layer          = 18
0.00.604.113 I llm_load_print_meta: n_head           = 8
0.00.604.120 I llm_load_print_meta: n_head_kv        = 1
0.00.604.120 I llm_load_print_meta: n_rot            = 256
0.00.604.121 I llm_load_print_meta: n_swa            = 0
0.00.604.121 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.121 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.126 I llm_load_print_meta: n_gqa            = 8
0.00.604.132 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.137 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.138 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.140 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.141 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.153 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.155 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.162 I llm_load_print_meta: n_ff             = 16384
0.00.604.162 I llm_load_print_meta: n_expert         = 0
0.00.604.163 I llm_load_print_meta: n_expert_used    = 0
0.00.604.163 I llm_load_print_meta: causal attn      = 1
0.00.604.164 I llm_load_print_meta: pooling type     = 0
0.00.604.165 I llm_load_print_meta: rope type        = 2
0.00.604.165 I llm_load_print_meta: rope scaling     = linear
0.00.604.166 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.167 I llm_load_print_meta: freq_scale_train = 1
0.00.604.167 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.168 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.168 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.169 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.169 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.170 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.170 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.171 I llm_load_print_meta: model type       = 2B
0.00.604.182 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.604.183 I llm_load_print_meta: model params     = 2.51 B
0.00.604.196 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.604.197 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.198 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.203 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.204 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.204 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.205 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.206 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.213 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.215 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.215 I llm_load_print_meta: max token length = 93
0.00.604.397 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.661.803 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.667.461 I llama_new_context_with_model: n_ctx      = 8192
0.00.667.468 I llama_new_context_with_model: n_batch    = 2048
0.00.667.469 I llama_new_context_with_model: n_ubatch   = 512
0.00.667.469 I llama_new_context_with_model: flash_attn = 0
0.00.667.473 I llama_new_context_with_model: freq_base  = 10000.0
0.00.667.474 I llama_new_context_with_model: freq_scale = 1
0.00.698.347 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.698.394 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.698.516 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.699.932 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.699.939 I llama_new_context_with_model: graph nodes  = 601
0.00.699.940 I llama_new_context_with_model: graph splits = 1
0.00.699.954 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.280.010 I main: llama threadpool init, n_threads = 4
0.01.280.023 I 
0.01.280.129 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.280.133 I 
0.01.280.296 I sampler seed: 1745591010
0.01.280.307 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.280.313 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.280.314 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.280.314 I 
 effe of the following sentence: "The man who is laughing is the man who will win the race."

a) The man who laughs is the man who

0.12.218.565 I llama_perf_sampler_print:    sampling time =      49.19 ms /    33 runs   (    1.49 ms per token,   670.88 tokens per second)
0.12.218.589 I llama_perf_context_print:        load time =    1276.99 ms
0.12.218.591 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.218.593 I llama_perf_context_print:        eval time =   10856.64 ms /    32 runs   (  339.27 ms per token,     2.95 tokens per second)
0.12.218.594 I llama_perf_context_print:       total time =   10938.57 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.527s
user	50m6.925s
sys	0m6.478s
