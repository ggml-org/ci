+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.643 I build: 4354 (0e70ba68) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.000.851 I main: load the model and apply lora adapter, if any
0.00.023.507 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.519 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.616 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.628 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.630 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.637 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.641 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.642 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.644 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.645 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.646 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.653 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.655 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.656 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.658 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.659 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.069 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.445 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.206 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.216 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.218 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.219 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.220 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.222 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.224 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.228 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.229 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.231 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.232 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.348.234 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.242 I llama_model_loader: - type  f32:   37 tensors
0.00.348.245 I llama_model_loader: - type q8_0:  127 tensors
0.00.574.664 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.634.562 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.635.477 I llm_load_vocab: special tokens cache size = 5
0.00.820.630 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.820.707 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.820.709 I llm_load_print_meta: arch             = gemma
0.00.820.709 I llm_load_print_meta: vocab type       = SPM
0.00.820.710 I llm_load_print_meta: n_vocab          = 256000
0.00.820.713 I llm_load_print_meta: n_merges         = 0
0.00.820.713 I llm_load_print_meta: vocab_only       = 0
0.00.820.714 I llm_load_print_meta: n_ctx_train      = 8192
0.00.820.714 I llm_load_print_meta: n_embd           = 2048
0.00.820.714 I llm_load_print_meta: n_layer          = 18
0.00.820.779 I llm_load_print_meta: n_head           = 8
0.00.820.788 I llm_load_print_meta: n_head_kv        = 1
0.00.820.789 I llm_load_print_meta: n_rot            = 256
0.00.820.791 I llm_load_print_meta: n_swa            = 0
0.00.820.792 I llm_load_print_meta: n_embd_head_k    = 256
0.00.820.793 I llm_load_print_meta: n_embd_head_v    = 256
0.00.820.800 I llm_load_print_meta: n_gqa            = 8
0.00.820.806 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.820.813 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.820.816 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.820.818 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.820.819 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.820.820 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.820.822 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.820.829 I llm_load_print_meta: n_ff             = 16384
0.00.820.833 I llm_load_print_meta: n_expert         = 0
0.00.820.834 I llm_load_print_meta: n_expert_used    = 0
0.00.820.834 I llm_load_print_meta: causal attn      = 1
0.00.820.846 I llm_load_print_meta: pooling type     = 0
0.00.820.847 I llm_load_print_meta: rope type        = 2
0.00.820.848 I llm_load_print_meta: rope scaling     = linear
0.00.820.851 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.820.852 I llm_load_print_meta: freq_scale_train = 1
0.00.820.852 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.820.853 I llm_load_print_meta: rope_finetuned   = unknown
0.00.820.854 I llm_load_print_meta: ssm_d_conv       = 0
0.00.820.855 I llm_load_print_meta: ssm_d_inner      = 0
0.00.820.856 I llm_load_print_meta: ssm_d_state      = 0
0.00.820.856 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.820.857 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.820.858 I llm_load_print_meta: model type       = 2B
0.00.820.860 I llm_load_print_meta: model ftype      = Q8_0
0.00.820.863 I llm_load_print_meta: model params     = 2.51 B
0.00.820.865 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.820.865 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.820.866 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.820.867 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.820.868 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.820.869 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.820.869 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.820.870 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.820.878 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.820.880 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.820.881 I llm_load_print_meta: max token length = 93
0.00.921.350 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.921.362 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.921.363 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.921.364 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.921.365 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.921.366 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.927.621 I llama_new_context_with_model: n_seq_max     = 1
0.00.927.628 I llama_new_context_with_model: n_ctx         = 4096
0.00.927.629 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.927.629 I llama_new_context_with_model: n_batch       = 2048
0.00.927.630 I llama_new_context_with_model: n_ubatch      = 512
0.00.927.630 I llama_new_context_with_model: flash_attn    = 0
0.00.927.633 I llama_new_context_with_model: freq_base     = 10000.0
0.00.927.634 I llama_new_context_with_model: freq_scale    = 1
0.00.927.635 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.942.131 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.942.175 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.942.306 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.945.112 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.945.117 I llama_new_context_with_model: graph nodes  = 601
0.00.945.117 I llama_new_context_with_model: graph splits = 1
0.00.945.141 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.945.145 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.552.085 I main: llama threadpool init, n_threads = 4
0.01.552.100 I 
0.01.552.222 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.552.226 I 
0.01.552.462 I sampler seed: 1197749985
0.01.552.476 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.552.485 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.552.489 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.552.489 I 
 increasively. I will upvote your answers. [end of text]


0.05.748.023 I llama_perf_sampler_print:    sampling time =      15.70 ms /    11 runs   (    1.43 ms per token,   700.68 tokens per second)
0.05.748.026 I llama_perf_context_print:        load time =    1551.14 ms
0.05.748.028 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.748.042 I llama_perf_context_print:        eval time =    4166.09 ms /    10 runs   (  416.61 ms per token,     2.40 tokens per second)
0.05.748.043 I llama_perf_context_print:       total time =    4195.95 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.689 I build: 4354 (0e70ba68) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.895 I main: llama backend init
0.00.000.903 I main: load the model and apply lora adapter, if any
0.00.023.986 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.091 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.107 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.112 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.119 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.121 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.123 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.124 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.126 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.127 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.134 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.138 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.139 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.141 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.142 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.583 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.908 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.508 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.517 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.519 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.520 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.521 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.523 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.524 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.529 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.530 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.531 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.533 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.351.534 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.542 I llama_model_loader: - type  f32:   37 tensors
0.00.351.544 I llama_model_loader: - type q8_0:  127 tensors
0.00.572.851 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.635.154 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.636.053 I llm_load_vocab: special tokens cache size = 5
0.00.829.312 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.829.381 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.829.382 I llm_load_print_meta: arch             = gemma
0.00.829.383 I llm_load_print_meta: vocab type       = SPM
0.00.829.384 I llm_load_print_meta: n_vocab          = 256000
0.00.829.386 I llm_load_print_meta: n_merges         = 0
0.00.829.387 I llm_load_print_meta: vocab_only       = 0
0.00.829.387 I llm_load_print_meta: n_ctx_train      = 8192
0.00.829.387 I llm_load_print_meta: n_embd           = 2048
0.00.829.388 I llm_load_print_meta: n_layer          = 18
0.00.829.453 I llm_load_print_meta: n_head           = 8
0.00.829.459 I llm_load_print_meta: n_head_kv        = 1
0.00.829.460 I llm_load_print_meta: n_rot            = 256
0.00.829.460 I llm_load_print_meta: n_swa            = 0
0.00.829.461 I llm_load_print_meta: n_embd_head_k    = 256
0.00.829.461 I llm_load_print_meta: n_embd_head_v    = 256
0.00.829.478 I llm_load_print_meta: n_gqa            = 8
0.00.829.484 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.829.489 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.829.490 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.829.492 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.829.492 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.829.493 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.829.499 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.829.504 I llm_load_print_meta: n_ff             = 16384
0.00.829.505 I llm_load_print_meta: n_expert         = 0
0.00.829.505 I llm_load_print_meta: n_expert_used    = 0
0.00.829.506 I llm_load_print_meta: causal attn      = 1
0.00.829.513 I llm_load_print_meta: pooling type     = 0
0.00.829.513 I llm_load_print_meta: rope type        = 2
0.00.829.514 I llm_load_print_meta: rope scaling     = linear
0.00.829.515 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.829.531 I llm_load_print_meta: freq_scale_train = 1
0.00.829.532 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.829.533 I llm_load_print_meta: rope_finetuned   = unknown
0.00.829.533 I llm_load_print_meta: ssm_d_conv       = 0
0.00.829.534 I llm_load_print_meta: ssm_d_inner      = 0
0.00.829.535 I llm_load_print_meta: ssm_d_state      = 0
0.00.829.535 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.829.536 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.829.536 I llm_load_print_meta: model type       = 2B
0.00.829.538 I llm_load_print_meta: model ftype      = Q8_0
0.00.829.538 I llm_load_print_meta: model params     = 2.51 B
0.00.829.540 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.829.540 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.829.541 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.829.542 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.829.542 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.829.543 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.829.543 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.829.544 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.829.550 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.829.551 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.829.552 I llm_load_print_meta: max token length = 93
0.00.927.029 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.932.927 I llama_new_context_with_model: n_seq_max     = 1
0.00.932.934 I llama_new_context_with_model: n_ctx         = 4096
0.00.932.934 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.932.934 I llama_new_context_with_model: n_batch       = 2048
0.00.932.935 I llama_new_context_with_model: n_ubatch      = 512
0.00.932.936 I llama_new_context_with_model: flash_attn    = 0
0.00.932.938 I llama_new_context_with_model: freq_base     = 10000.0
0.00.932.938 I llama_new_context_with_model: freq_scale    = 1
0.00.932.939 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.948.797 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.948.843 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.948.963 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.951.720 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.951.724 I llama_new_context_with_model: graph nodes  = 601
0.00.951.725 I llama_new_context_with_model: graph splits = 1
0.00.951.747 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.951.748 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.558.662 I main: llama threadpool init, n_threads = 4
0.01.558.678 I 
0.01.558.802 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.558.806 I 
0.01.559.040 I sampler seed: 3036556565
0.01.559.055 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.559.066 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.559.067 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.559.068 I 
 increasements? 

I cannot answer this question as it contains inappropriate and potentially offensive language. [end of text]


0.10.038.455 I llama_perf_sampler_print:    sampling time =      31.25 ms /    21 runs   (    1.49 ms per token,   672.11 tokens per second)
0.10.038.458 I llama_perf_context_print:        load time =    1557.65 ms
0.10.038.460 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.038.461 I llama_perf_context_print:        eval time =    8423.20 ms /    20 runs   (  421.16 ms per token,     2.37 tokens per second)
0.10.038.462 I llama_perf_context_print:       total time =    8479.80 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.647 I build: 4354 (0e70ba68) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.868 I main: llama backend init
0.00.000.877 I main: load the model and apply lora adapter, if any
0.00.023.270 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.281 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.382 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.395 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.397 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.404 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.406 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.408 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.410 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.413 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.416 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.424 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.430 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.432 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.434 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.437 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.240.343 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.343.007 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.366.661 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.366.671 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.366.672 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.366.673 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.366.675 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.366.676 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.366.677 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.366.681 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.366.683 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.366.684 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.366.686 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.366.688 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.366.697 I llama_model_loader: - type  f32:   37 tensors
0.00.366.699 I llama_model_loader: - type q8_0:  127 tensors
0.00.598.724 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.658.314 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.659.211 I llm_load_vocab: special tokens cache size = 5
0.00.858.467 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.858.547 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.858.548 I llm_load_print_meta: arch             = gemma
0.00.858.549 I llm_load_print_meta: vocab type       = SPM
0.00.858.550 I llm_load_print_meta: n_vocab          = 256000
0.00.858.552 I llm_load_print_meta: n_merges         = 0
0.00.858.553 I llm_load_print_meta: vocab_only       = 0
0.00.858.553 I llm_load_print_meta: n_ctx_train      = 8192
0.00.858.554 I llm_load_print_meta: n_embd           = 2048
0.00.858.554 I llm_load_print_meta: n_layer          = 18
0.00.858.621 I llm_load_print_meta: n_head           = 8
0.00.858.629 I llm_load_print_meta: n_head_kv        = 1
0.00.858.629 I llm_load_print_meta: n_rot            = 256
0.00.858.630 I llm_load_print_meta: n_swa            = 0
0.00.858.630 I llm_load_print_meta: n_embd_head_k    = 256
0.00.858.630 I llm_load_print_meta: n_embd_head_v    = 256
0.00.858.635 I llm_load_print_meta: n_gqa            = 8
0.00.858.640 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.858.646 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.858.648 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.858.649 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.858.650 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.858.650 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.858.651 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.858.656 I llm_load_print_meta: n_ff             = 16384
0.00.858.657 I llm_load_print_meta: n_expert         = 0
0.00.858.657 I llm_load_print_meta: n_expert_used    = 0
0.00.858.657 I llm_load_print_meta: causal attn      = 1
0.00.858.658 I llm_load_print_meta: pooling type     = 0
0.00.858.658 I llm_load_print_meta: rope type        = 2
0.00.858.658 I llm_load_print_meta: rope scaling     = linear
0.00.858.660 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.858.660 I llm_load_print_meta: freq_scale_train = 1
0.00.858.661 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.858.661 I llm_load_print_meta: rope_finetuned   = unknown
0.00.858.661 I llm_load_print_meta: ssm_d_conv       = 0
0.00.858.662 I llm_load_print_meta: ssm_d_inner      = 0
0.00.858.662 I llm_load_print_meta: ssm_d_state      = 0
0.00.858.662 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.858.663 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.858.663 I llm_load_print_meta: model type       = 2B
0.00.858.664 I llm_load_print_meta: model ftype      = Q8_0
0.00.858.665 I llm_load_print_meta: model params     = 2.51 B
0.00.858.666 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.858.666 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.858.666 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.858.667 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.858.667 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.858.668 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.858.668 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.858.679 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.858.686 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.858.687 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.858.688 I llm_load_print_meta: max token length = 93
0.00.937.996 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.938.009 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.938.010 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.938.010 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.938.011 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.938.012 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.944.342 I llama_new_context_with_model: n_seq_max     = 1
0.00.944.350 I llama_new_context_with_model: n_ctx         = 4096
0.00.944.351 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.944.351 I llama_new_context_with_model: n_batch       = 2048
0.00.944.352 I llama_new_context_with_model: n_ubatch      = 512
0.00.944.352 I llama_new_context_with_model: flash_attn    = 0
0.00.944.356 I llama_new_context_with_model: freq_base     = 10000.0
0.00.944.356 I llama_new_context_with_model: freq_scale    = 1
0.00.944.357 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.959.715 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.959.757 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.959.883 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.962.505 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.962.510 I llama_new_context_with_model: graph nodes  = 601
0.00.962.510 I llama_new_context_with_model: graph splits = 1
0.00.962.534 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.962.538 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.576.165 I main: llama threadpool init, n_threads = 4
0.01.576.180 I 
0.01.576.309 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.576.313 I 
0.01.576.548 I sampler seed: 3640267553
0.01.576.563 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.576.573 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.576.577 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.576.578 I 
 seconally:

**Step 1:** Identify the key components of the business.
**Step 2:** Analyze the market and identify target customers.


0.15.109.741 I llama_perf_sampler_print:    sampling time =      49.69 ms /    33 runs   (    1.51 ms per token,   664.16 tokens per second)
0.15.109.745 I llama_perf_context_print:        load time =    1575.18 ms
0.15.109.758 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.109.761 I llama_perf_context_print:        eval time =   13443.32 ms /    32 runs   (  420.10 ms per token,     2.38 tokens per second)
0.15.109.762 I llama_perf_context_print:       total time =   13533.59 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4354 (0e70ba68) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.844 I main: llama backend init
0.00.000.853 I main: load the model and apply lora adapter, if any
0.00.023.234 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.244 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.329 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.341 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.345 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.350 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.354 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.356 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.357 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.358 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.360 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.366 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.368 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.370 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.371 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.373 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.221.390 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.323.713 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.347.541 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.347.552 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.347.553 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.347.555 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.347.556 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.347.557 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.347.559 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.347.563 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.347.564 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.347.566 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.347.568 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.347.591 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.347.601 I llama_model_loader: - type  f32:   37 tensors
0.00.347.604 I llama_model_loader: - type q8_0:  127 tensors
0.00.575.928 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.635.605 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.636.588 I llm_load_vocab: special tokens cache size = 5
0.00.834.873 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.834.949 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.834.951 I llm_load_print_meta: arch             = gemma
0.00.834.951 I llm_load_print_meta: vocab type       = SPM
0.00.834.952 I llm_load_print_meta: n_vocab          = 256000
0.00.834.954 I llm_load_print_meta: n_merges         = 0
0.00.834.955 I llm_load_print_meta: vocab_only       = 0
0.00.834.955 I llm_load_print_meta: n_ctx_train      = 8192
0.00.834.955 I llm_load_print_meta: n_embd           = 2048
0.00.834.956 I llm_load_print_meta: n_layer          = 18
0.00.835.023 I llm_load_print_meta: n_head           = 8
0.00.835.030 I llm_load_print_meta: n_head_kv        = 1
0.00.835.031 I llm_load_print_meta: n_rot            = 256
0.00.835.031 I llm_load_print_meta: n_swa            = 0
0.00.835.033 I llm_load_print_meta: n_embd_head_k    = 256
0.00.835.033 I llm_load_print_meta: n_embd_head_v    = 256
0.00.835.038 I llm_load_print_meta: n_gqa            = 8
0.00.835.043 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.835.048 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.835.053 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.835.055 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.835.056 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.835.056 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.835.057 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.835.065 I llm_load_print_meta: n_ff             = 16384
0.00.835.065 I llm_load_print_meta: n_expert         = 0
0.00.835.065 I llm_load_print_meta: n_expert_used    = 0
0.00.835.066 I llm_load_print_meta: causal attn      = 1
0.00.835.066 I llm_load_print_meta: pooling type     = 0
0.00.835.066 I llm_load_print_meta: rope type        = 2
0.00.835.067 I llm_load_print_meta: rope scaling     = linear
0.00.835.068 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.835.069 I llm_load_print_meta: freq_scale_train = 1
0.00.835.070 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.835.070 I llm_load_print_meta: rope_finetuned   = unknown
0.00.835.082 I llm_load_print_meta: ssm_d_conv       = 0
0.00.835.083 I llm_load_print_meta: ssm_d_inner      = 0
0.00.835.083 I llm_load_print_meta: ssm_d_state      = 0
0.00.835.097 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.835.098 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.835.099 I llm_load_print_meta: model type       = 2B
0.00.835.101 I llm_load_print_meta: model ftype      = Q8_0
0.00.835.102 I llm_load_print_meta: model params     = 2.51 B
0.00.835.103 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.835.106 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.835.106 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.835.107 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.835.107 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.835.108 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.835.108 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.835.109 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.835.115 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.835.116 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.835.116 I llm_load_print_meta: max token length = 93
0.00.907.623 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.907.638 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.913.932 I llama_new_context_with_model: n_seq_max     = 1
0.00.913.940 I llama_new_context_with_model: n_ctx         = 4096
0.00.913.940 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.913.940 I llama_new_context_with_model: n_batch       = 2048
0.00.913.941 I llama_new_context_with_model: n_ubatch      = 512
0.00.913.941 I llama_new_context_with_model: flash_attn    = 0
0.00.913.945 I llama_new_context_with_model: freq_base     = 10000.0
0.00.913.945 I llama_new_context_with_model: freq_scale    = 1
0.00.913.946 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.928.481 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.928.521 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.928.639 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.931.291 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.931.295 I llama_new_context_with_model: graph nodes  = 601
0.00.931.295 I llama_new_context_with_model: graph splits = 1
0.00.931.318 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.931.322 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.536.160 I main: llama threadpool init, n_threads = 4
0.01.536.176 I 
0.01.536.319 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.536.324 I 
0.01.536.562 I sampler seed: 1394910289
0.01.536.577 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.536.592 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.536.595 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.536.596 I 
 increasities can be resolved through the application of a **set of criteria**.

This set of criteria can be based on a number of factors, including:



0.14.993.604 I llama_perf_sampler_print:    sampling time =      49.96 ms /    33 runs   (    1.51 ms per token,   660.52 tokens per second)
0.14.993.607 I llama_perf_context_print:        load time =    1535.20 ms
0.14.993.609 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.993.611 I llama_perf_context_print:        eval time =   13367.09 ms /    32 runs   (  417.72 ms per token,     2.39 tokens per second)
0.14.993.612 I llama_perf_context_print:       total time =   13457.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m55.448s
user	2m52.225s
sys	0m9.371s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4354 (0e70ba68)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186744.31 ms
main:    total time = 186744.31 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.666 I build: 4354 (0e70ba68) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.000.872 I main: load the model and apply lora adapter, if any
0.00.023.541 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.553 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.649 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.661 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.663 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.670 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.674 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.675 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.677 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.678 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.679 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.686 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.687 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.689 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.690 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.692 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.221.666 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.323.718 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.347.420 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.347.432 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.347.433 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.347.434 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.347.436 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.347.437 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.347.439 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.347.443 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.347.444 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.347.446 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.347.447 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.347.449 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.347.458 I llama_model_loader: - type  f32:   37 tensors
0.00.347.460 I llama_model_loader: - type q4_K:  108 tensors
0.00.347.461 I llama_model_loader: - type q6_K:   19 tensors
0.00.571.737 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.631.217 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.632.050 I llm_load_vocab: special tokens cache size = 5
0.00.819.466 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.819.536 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.819.538 I llm_load_print_meta: arch             = gemma
0.00.819.538 I llm_load_print_meta: vocab type       = SPM
0.00.819.539 I llm_load_print_meta: n_vocab          = 256000
0.00.819.541 I llm_load_print_meta: n_merges         = 0
0.00.819.542 I llm_load_print_meta: vocab_only       = 0
0.00.819.542 I llm_load_print_meta: n_ctx_train      = 8192
0.00.819.543 I llm_load_print_meta: n_embd           = 2048
0.00.819.543 I llm_load_print_meta: n_layer          = 18
0.00.819.605 I llm_load_print_meta: n_head           = 8
0.00.819.612 I llm_load_print_meta: n_head_kv        = 1
0.00.819.613 I llm_load_print_meta: n_rot            = 256
0.00.819.614 I llm_load_print_meta: n_swa            = 0
0.00.819.615 I llm_load_print_meta: n_embd_head_k    = 256
0.00.819.616 I llm_load_print_meta: n_embd_head_v    = 256
0.00.819.621 I llm_load_print_meta: n_gqa            = 8
0.00.819.626 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.819.631 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.819.633 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.819.635 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.819.635 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.819.640 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.819.641 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.819.646 I llm_load_print_meta: n_ff             = 16384
0.00.819.646 I llm_load_print_meta: n_expert         = 0
0.00.819.647 I llm_load_print_meta: n_expert_used    = 0
0.00.819.647 I llm_load_print_meta: causal attn      = 1
0.00.819.648 I llm_load_print_meta: pooling type     = 0
0.00.819.648 I llm_load_print_meta: rope type        = 2
0.00.819.649 I llm_load_print_meta: rope scaling     = linear
0.00.819.651 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.819.652 I llm_load_print_meta: freq_scale_train = 1
0.00.819.653 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.819.656 I llm_load_print_meta: rope_finetuned   = unknown
0.00.819.657 I llm_load_print_meta: ssm_d_conv       = 0
0.00.819.657 I llm_load_print_meta: ssm_d_inner      = 0
0.00.819.657 I llm_load_print_meta: ssm_d_state      = 0
0.00.819.658 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.819.658 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.819.659 I llm_load_print_meta: model type       = 2B
0.00.819.660 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.819.660 I llm_load_print_meta: model params     = 2.51 B
0.00.819.661 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.819.661 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.819.662 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.819.663 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.819.663 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.819.664 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.819.664 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.819.672 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.819.679 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.819.681 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.819.681 I llm_load_print_meta: max token length = 93
0.00.882.067 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.882.077 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.882.078 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.882.079 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.882.079 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.882.080 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.887.896 I llama_new_context_with_model: n_seq_max     = 1
0.00.887.903 I llama_new_context_with_model: n_ctx         = 4096
0.00.887.904 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.887.904 I llama_new_context_with_model: n_batch       = 2048
0.00.887.905 I llama_new_context_with_model: n_ubatch      = 512
0.00.887.906 I llama_new_context_with_model: flash_attn    = 0
0.00.887.909 I llama_new_context_with_model: freq_base     = 10000.0
0.00.887.910 I llama_new_context_with_model: freq_scale    = 1
0.00.887.910 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.902.693 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.902.733 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.902.857 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.905.582 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.905.586 I llama_new_context_with_model: graph nodes  = 601
0.00.905.587 I llama_new_context_with_model: graph splits = 1
0.00.905.609 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.905.612 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.487.927 I main: llama threadpool init, n_threads = 4
0.01.487.944 I 
0.01.488.083 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.488.086 I 
0.01.488.315 I sampler seed: 1256939704
0.01.488.330 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.488.340 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.488.344 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.488.344 I 
 seconded in an arrogant tone. "I shall now reveal to you my hidden truth. I will expose all your lies and deceit."

**Analysis:**



0.12.686.398 I llama_perf_sampler_print:    sampling time =      49.81 ms /    33 runs   (    1.51 ms per token,   662.50 tokens per second)
0.12.686.401 I llama_perf_context_print:        load time =    1486.96 ms
0.12.686.402 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.686.404 I llama_perf_context_print:        eval time =   11108.98 ms /    32 runs   (  347.16 ms per token,     2.88 tokens per second)
0.12.686.420 I llama_perf_context_print:       total time =   11198.48 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4354 (0e70ba68)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186689.07 ms
main:    total time = 186689.07 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 4354 (0e70ba68) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.835 I main: llama backend init
0.00.000.843 I main: load the model and apply lora adapter, if any
0.00.023.317 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.420 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.434 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.437 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.444 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.448 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.450 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.451 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.452 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.453 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.459 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.460 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.462 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.463 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.464 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.279 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.827 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.541 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.551 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.552 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.554 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.555 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.556 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.558 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.562 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.563 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.572 I llama_model_loader: - type  f32:   37 tensors
0.00.348.575 I llama_model_loader: - type q4_K:  108 tensors
0.00.348.576 I llama_model_loader: - type q6_K:   19 tensors
0.00.565.706 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.625.641 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.626.546 I llm_load_vocab: special tokens cache size = 5
0.00.817.357 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.817.429 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.817.430 I llm_load_print_meta: arch             = gemma
0.00.817.431 I llm_load_print_meta: vocab type       = SPM
0.00.817.432 I llm_load_print_meta: n_vocab          = 256000
0.00.817.434 I llm_load_print_meta: n_merges         = 0
0.00.817.435 I llm_load_print_meta: vocab_only       = 0
0.00.817.435 I llm_load_print_meta: n_ctx_train      = 8192
0.00.817.436 I llm_load_print_meta: n_embd           = 2048
0.00.817.436 I llm_load_print_meta: n_layer          = 18
0.00.817.500 I llm_load_print_meta: n_head           = 8
0.00.817.507 I llm_load_print_meta: n_head_kv        = 1
0.00.817.508 I llm_load_print_meta: n_rot            = 256
0.00.817.509 I llm_load_print_meta: n_swa            = 0
0.00.817.509 I llm_load_print_meta: n_embd_head_k    = 256
0.00.817.510 I llm_load_print_meta: n_embd_head_v    = 256
0.00.817.515 I llm_load_print_meta: n_gqa            = 8
0.00.817.519 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.817.524 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.817.525 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.817.527 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.817.527 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.817.528 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.817.528 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.817.533 I llm_load_print_meta: n_ff             = 16384
0.00.817.534 I llm_load_print_meta: n_expert         = 0
0.00.817.535 I llm_load_print_meta: n_expert_used    = 0
0.00.817.557 I llm_load_print_meta: causal attn      = 1
0.00.817.557 I llm_load_print_meta: pooling type     = 0
0.00.817.558 I llm_load_print_meta: rope type        = 2
0.00.817.558 I llm_load_print_meta: rope scaling     = linear
0.00.817.560 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.817.561 I llm_load_print_meta: freq_scale_train = 1
0.00.817.562 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.817.562 I llm_load_print_meta: rope_finetuned   = unknown
0.00.817.562 I llm_load_print_meta: ssm_d_conv       = 0
0.00.817.563 I llm_load_print_meta: ssm_d_inner      = 0
0.00.817.563 I llm_load_print_meta: ssm_d_state      = 0
0.00.817.564 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.817.564 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.817.574 I llm_load_print_meta: model type       = 2B
0.00.817.577 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.817.578 I llm_load_print_meta: model params     = 2.51 B
0.00.817.579 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.817.587 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.817.588 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.817.589 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.817.589 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.817.597 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.817.598 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.817.598 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.817.604 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.817.606 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.817.606 I llm_load_print_meta: max token length = 93
0.00.877.186 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.883.026 I llama_new_context_with_model: n_seq_max     = 1
0.00.883.034 I llama_new_context_with_model: n_ctx         = 4096
0.00.883.035 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.883.035 I llama_new_context_with_model: n_batch       = 2048
0.00.883.035 I llama_new_context_with_model: n_ubatch      = 512
0.00.883.036 I llama_new_context_with_model: flash_attn    = 0
0.00.883.039 I llama_new_context_with_model: freq_base     = 10000.0
0.00.883.039 I llama_new_context_with_model: freq_scale    = 1
0.00.883.040 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.898.756 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.898.800 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.898.918 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.901.546 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.901.550 I llama_new_context_with_model: graph nodes  = 601
0.00.901.550 I llama_new_context_with_model: graph splits = 1
0.00.901.573 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.901.576 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.478.598 I main: llama threadpool init, n_threads = 4
0.01.478.614 I 
0.01.478.736 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.478.740 I 
0.01.478.972 I sampler seed: 2209137390
0.01.478.986 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.478.996 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.478.998 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.478.998 I 
 seconally.

**Instructions:**
- Write the instructions in complete sentences.
- Use proper grammar and spelling.
- Keep your answer concise and within

0.12.604.678 I llama_perf_sampler_print:    sampling time =      49.79 ms /    33 runs   (    1.51 ms per token,   662.77 tokens per second)
0.12.604.695 I llama_perf_context_print:        load time =    1477.64 ms
0.12.604.696 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.604.698 I llama_perf_context_print:        eval time =   11036.18 ms /    32 runs   (  344.88 ms per token,     2.90 tokens per second)
0.12.604.699 I llama_perf_context_print:       total time =   11126.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m41.582s
user	46m46.747s
sys	0m6.219s
