+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.167 I build: 4354 (0e70ba68) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.388 I main: llama backend init
0.00.000.396 I main: load the model and apply lora adapter, if any
0.00.020.887 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.898 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.905 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.913 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.917 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.922 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.922 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.923 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.923 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.924 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.924 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.929 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.929 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.930 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.930 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.931 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.378 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.945 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.942 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.948 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.949 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.950 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.950 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.951 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.952 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.954 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.955 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.956 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.957 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.958 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.961 I llama_model_loader: - type  f32:   37 tensors
0.00.130.962 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.808 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.048 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.671 I llm_load_vocab: special tokens cache size = 5
0.00.263.030 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.052 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.052 I llm_load_print_meta: arch             = gemma
0.00.263.053 I llm_load_print_meta: vocab type       = SPM
0.00.263.054 I llm_load_print_meta: n_vocab          = 256000
0.00.263.054 I llm_load_print_meta: n_merges         = 0
0.00.263.055 I llm_load_print_meta: vocab_only       = 0
0.00.263.055 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.055 I llm_load_print_meta: n_embd           = 2048
0.00.263.056 I llm_load_print_meta: n_layer          = 18
0.00.263.067 I llm_load_print_meta: n_head           = 8
0.00.263.068 I llm_load_print_meta: n_head_kv        = 1
0.00.263.068 I llm_load_print_meta: n_rot            = 256
0.00.263.069 I llm_load_print_meta: n_swa            = 0
0.00.263.069 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.069 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.070 I llm_load_print_meta: n_gqa            = 8
0.00.263.071 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.072 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.073 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.075 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.075 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.075 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.076 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.077 I llm_load_print_meta: n_ff             = 16384
0.00.263.077 I llm_load_print_meta: n_expert         = 0
0.00.263.077 I llm_load_print_meta: n_expert_used    = 0
0.00.263.078 I llm_load_print_meta: causal attn      = 1
0.00.263.078 I llm_load_print_meta: pooling type     = 0
0.00.263.078 I llm_load_print_meta: rope type        = 2
0.00.263.078 I llm_load_print_meta: rope scaling     = linear
0.00.263.079 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.080 I llm_load_print_meta: freq_scale_train = 1
0.00.263.080 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.081 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.081 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.081 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.082 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.082 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.082 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.083 I llm_load_print_meta: model type       = 2B
0.00.263.083 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.084 I llm_load_print_meta: model params     = 2.51 B
0.00.263.085 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.085 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.086 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.086 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.086 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.086 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.087 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.087 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.088 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.088 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.089 I llm_load_print_meta: max token length = 93
0.00.363.521 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.363.529 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.363.530 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.363.530 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.363.531 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.363.532 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.368.680 I llama_new_context_with_model: n_seq_max     = 1
0.00.368.687 I llama_new_context_with_model: n_ctx         = 4096
0.00.368.687 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.368.688 I llama_new_context_with_model: n_batch       = 2048
0.00.368.688 I llama_new_context_with_model: n_ubatch      = 512
0.00.368.689 I llama_new_context_with_model: flash_attn    = 0
0.00.368.691 I llama_new_context_with_model: freq_base     = 10000.0
0.00.368.692 I llama_new_context_with_model: freq_scale    = 1
0.00.368.693 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.383.003 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.017 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.107 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.411 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.417 I llama_new_context_with_model: graph nodes  = 601
0.00.384.418 I llama_new_context_with_model: graph splits = 1
0.00.384.420 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.384.420 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.278 I main: llama threadpool init, n_threads = 4
0.00.469.293 I 
0.00.469.364 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.469.367 I 
0.00.469.408 I sampler seed: 3510903541
0.00.469.419 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.422 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.469.433 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.436 I 
 increamically.

I am not able to generate text that contains inappropriate or sexually suggestive content. [end of text]


0.01.881.419 I llama_perf_sampler_print:    sampling time =       3.15 ms /    21 runs   (    0.15 ms per token,  6666.67 tokens per second)
0.01.881.421 I llama_perf_context_print:        load time =     468.87 ms
0.01.881.422 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.881.424 I llama_perf_context_print:        eval time =    1400.03 ms /    20 runs   (   70.00 ms per token,    14.29 tokens per second)
0.01.881.425 I llama_perf_context_print:       total time =    1412.15 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.550 I build: 4354 (0e70ba68) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.743 I main: llama backend init
0.00.000.750 I main: load the model and apply lora adapter, if any
0.00.021.311 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.326 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.333 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.334 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.339 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.339 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.340 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.341 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.342 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.342 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.347 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.347 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.348 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.348 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.349 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.043 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.065 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.971 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.976 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.977 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.977 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.978 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.979 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.980 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.983 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.984 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.985 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.986 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.986 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.990 I llama_model_loader: - type  f32:   37 tensors
0.00.131.991 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.678 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.640 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.228 I llm_load_vocab: special tokens cache size = 5
0.00.274.301 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.317 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.318 I llm_load_print_meta: arch             = gemma
0.00.274.318 I llm_load_print_meta: vocab type       = SPM
0.00.274.319 I llm_load_print_meta: n_vocab          = 256000
0.00.274.320 I llm_load_print_meta: n_merges         = 0
0.00.274.320 I llm_load_print_meta: vocab_only       = 0
0.00.274.320 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.321 I llm_load_print_meta: n_embd           = 2048
0.00.274.321 I llm_load_print_meta: n_layer          = 18
0.00.274.333 I llm_load_print_meta: n_head           = 8
0.00.274.334 I llm_load_print_meta: n_head_kv        = 1
0.00.274.334 I llm_load_print_meta: n_rot            = 256
0.00.274.334 I llm_load_print_meta: n_swa            = 0
0.00.274.335 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.335 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.336 I llm_load_print_meta: n_gqa            = 8
0.00.274.337 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.338 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.338 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.340 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.340 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.340 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.341 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.342 I llm_load_print_meta: n_ff             = 16384
0.00.274.342 I llm_load_print_meta: n_expert         = 0
0.00.274.342 I llm_load_print_meta: n_expert_used    = 0
0.00.274.342 I llm_load_print_meta: causal attn      = 1
0.00.274.343 I llm_load_print_meta: pooling type     = 0
0.00.274.343 I llm_load_print_meta: rope type        = 2
0.00.274.343 I llm_load_print_meta: rope scaling     = linear
0.00.274.344 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.345 I llm_load_print_meta: freq_scale_train = 1
0.00.274.345 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.345 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.346 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.346 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.346 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.346 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.347 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.347 I llm_load_print_meta: model type       = 2B
0.00.274.348 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.349 I llm_load_print_meta: model params     = 2.51 B
0.00.274.350 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.350 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.350 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.351 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.351 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.351 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.351 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.352 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.352 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.353 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.353 I llm_load_print_meta: max token length = 93
0.00.367.279 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.372.627 I llama_new_context_with_model: n_seq_max     = 1
0.00.372.633 I llama_new_context_with_model: n_ctx         = 4096
0.00.372.634 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.372.634 I llama_new_context_with_model: n_batch       = 2048
0.00.372.635 I llama_new_context_with_model: n_ubatch      = 512
0.00.372.635 I llama_new_context_with_model: flash_attn    = 0
0.00.372.637 I llama_new_context_with_model: freq_base     = 10000.0
0.00.372.639 I llama_new_context_with_model: freq_scale    = 1
0.00.372.639 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.387.917 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.934 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.388.026 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.336 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.342 I llama_new_context_with_model: graph nodes  = 601
0.00.389.343 I llama_new_context_with_model: graph splits = 1
0.00.389.345 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.389.345 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.979 I main: llama threadpool init, n_threads = 4
0.00.471.994 I 
0.00.472.070 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.472.073 I 
0.00.472.119 I sampler seed: 4012568627
0.00.472.131 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.134 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.472.135 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.472.135 I 
 increasities to the level of discourse of a modern university.

I am unable to generate a response that meets the specified criteria as it would require accessing and analyzing

0.02.674.037 I llama_perf_sampler_print:    sampling time =       5.00 ms /    33 runs   (    0.15 ms per token,  6606.61 tokens per second)
0.02.674.040 I llama_perf_context_print:        load time =     471.21 ms
0.02.674.041 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.674.042 I llama_perf_context_print:        eval time =    2182.33 ms /    32 runs   (   68.20 ms per token,    14.66 tokens per second)
0.02.674.043 I llama_perf_context_print:       total time =    2202.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.207 I build: 4354 (0e70ba68) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.423 I main: llama backend init
0.00.000.429 I main: load the model and apply lora adapter, if any
0.00.020.831 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.841 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.853 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.862 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.863 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.867 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.869 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.870 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.871 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.872 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.873 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.877 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.878 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.889 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.893 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.894 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.833 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.119 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.159 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.166 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.167 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.168 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.169 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.170 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.171 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.174 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.175 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.176 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.176 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.178 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.182 I llama_model_loader: - type  f32:   37 tensors
0.00.132.183 I llama_model_loader: - type q8_0:  127 tensors
0.00.222.875 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.274.512 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.275.230 I llm_load_vocab: special tokens cache size = 5
0.00.296.603 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.296.622 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.296.622 I llm_load_print_meta: arch             = gemma
0.00.296.623 I llm_load_print_meta: vocab type       = SPM
0.00.296.633 I llm_load_print_meta: n_vocab          = 256000
0.00.296.634 I llm_load_print_meta: n_merges         = 0
0.00.296.634 I llm_load_print_meta: vocab_only       = 0
0.00.296.635 I llm_load_print_meta: n_ctx_train      = 8192
0.00.296.635 I llm_load_print_meta: n_embd           = 2048
0.00.296.636 I llm_load_print_meta: n_layer          = 18
0.00.296.647 I llm_load_print_meta: n_head           = 8
0.00.296.648 I llm_load_print_meta: n_head_kv        = 1
0.00.296.648 I llm_load_print_meta: n_rot            = 256
0.00.296.649 I llm_load_print_meta: n_swa            = 0
0.00.296.649 I llm_load_print_meta: n_embd_head_k    = 256
0.00.296.650 I llm_load_print_meta: n_embd_head_v    = 256
0.00.296.651 I llm_load_print_meta: n_gqa            = 8
0.00.296.652 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.296.653 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.296.654 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.296.655 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.296.656 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.296.656 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.296.657 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.296.665 I llm_load_print_meta: n_ff             = 16384
0.00.296.665 I llm_load_print_meta: n_expert         = 0
0.00.296.665 I llm_load_print_meta: n_expert_used    = 0
0.00.296.666 I llm_load_print_meta: causal attn      = 1
0.00.296.666 I llm_load_print_meta: pooling type     = 0
0.00.296.666 I llm_load_print_meta: rope type        = 2
0.00.296.666 I llm_load_print_meta: rope scaling     = linear
0.00.296.668 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.296.668 I llm_load_print_meta: freq_scale_train = 1
0.00.296.669 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.296.669 I llm_load_print_meta: rope_finetuned   = unknown
0.00.296.669 I llm_load_print_meta: ssm_d_conv       = 0
0.00.296.669 I llm_load_print_meta: ssm_d_inner      = 0
0.00.296.670 I llm_load_print_meta: ssm_d_state      = 0
0.00.296.670 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.296.671 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.296.671 I llm_load_print_meta: model type       = 2B
0.00.296.672 I llm_load_print_meta: model ftype      = Q8_0
0.00.296.673 I llm_load_print_meta: model params     = 2.51 B
0.00.296.673 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.296.674 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.296.674 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.296.674 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.296.675 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.296.675 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.296.676 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.296.676 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.296.677 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.296.677 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.296.678 I llm_load_print_meta: max token length = 93
0.00.373.357 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.373.362 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.373.363 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.373.364 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.373.364 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.373.365 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.378.509 I llama_new_context_with_model: n_seq_max     = 1
0.00.378.515 I llama_new_context_with_model: n_ctx         = 4096
0.00.378.515 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.378.516 I llama_new_context_with_model: n_batch       = 2048
0.00.378.516 I llama_new_context_with_model: n_ubatch      = 512
0.00.378.517 I llama_new_context_with_model: flash_attn    = 0
0.00.378.520 I llama_new_context_with_model: freq_base     = 10000.0
0.00.378.521 I llama_new_context_with_model: freq_scale    = 1
0.00.378.522 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.393.215 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.393.230 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.393.321 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.394.564 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.394.571 I llama_new_context_with_model: graph nodes  = 601
0.00.394.571 I llama_new_context_with_model: graph splits = 1
0.00.394.573 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.394.573 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.480.267 I main: llama threadpool init, n_threads = 4
0.00.480.282 I 
0.00.480.355 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.480.358 I 
0.00.480.399 I sampler seed: 4122193896
0.00.480.409 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.480.415 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.480.415 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.480.415 I 
 increasities of 2023.

**I. General Trends**

* **Focus on digital transformation:** Businesses prioritize digital strategies to enhance productivity,

0.02.769.631 I llama_perf_sampler_print:    sampling time =       5.02 ms /    33 runs   (    0.15 ms per token,  6571.09 tokens per second)
0.02.769.633 I llama_perf_context_print:        load time =     479.82 ms
0.02.769.634 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.769.636 I llama_perf_context_print:        eval time =    2270.55 ms /    32 runs   (   70.95 ms per token,    14.09 tokens per second)
0.02.769.636 I llama_perf_context_print:       total time =    2289.37 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.568 I build: 4354 (0e70ba68) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.761 I main: llama backend init
0.00.000.769 I main: load the model and apply lora adapter, if any
0.00.021.527 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.539 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.550 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.559 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.563 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.567 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.568 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.569 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.569 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.570 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.571 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.576 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.577 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.578 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.579 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.580 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.354 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.592 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.603 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.610 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.611 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.611 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.612 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.613 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.614 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.618 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.619 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.620 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.621 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.622 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.626 I llama_model_loader: - type  f32:   37 tensors
0.00.132.627 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.353 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.725 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.285 I llm_load_vocab: special tokens cache size = 5
0.00.272.370 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.385 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.386 I llm_load_print_meta: arch             = gemma
0.00.272.386 I llm_load_print_meta: vocab type       = SPM
0.00.272.387 I llm_load_print_meta: n_vocab          = 256000
0.00.272.387 I llm_load_print_meta: n_merges         = 0
0.00.272.388 I llm_load_print_meta: vocab_only       = 0
0.00.272.388 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.388 I llm_load_print_meta: n_embd           = 2048
0.00.272.389 I llm_load_print_meta: n_layer          = 18
0.00.272.399 I llm_load_print_meta: n_head           = 8
0.00.272.400 I llm_load_print_meta: n_head_kv        = 1
0.00.272.401 I llm_load_print_meta: n_rot            = 256
0.00.272.401 I llm_load_print_meta: n_swa            = 0
0.00.272.401 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.401 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.402 I llm_load_print_meta: n_gqa            = 8
0.00.272.403 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.404 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.405 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.407 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.408 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.408 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.409 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.410 I llm_load_print_meta: n_ff             = 16384
0.00.272.411 I llm_load_print_meta: n_expert         = 0
0.00.272.411 I llm_load_print_meta: n_expert_used    = 0
0.00.272.412 I llm_load_print_meta: causal attn      = 1
0.00.272.412 I llm_load_print_meta: pooling type     = 0
0.00.272.413 I llm_load_print_meta: rope type        = 2
0.00.272.413 I llm_load_print_meta: rope scaling     = linear
0.00.272.415 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.416 I llm_load_print_meta: freq_scale_train = 1
0.00.272.417 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.417 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.418 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.418 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.419 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.419 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.419 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.420 I llm_load_print_meta: model type       = 2B
0.00.272.421 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.421 I llm_load_print_meta: model params     = 2.51 B
0.00.272.422 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.423 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.423 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.424 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.424 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.424 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.428 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.428 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.428 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.429 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.430 I llm_load_print_meta: max token length = 93
0.00.343.430 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.343.439 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.348.758 I llama_new_context_with_model: n_seq_max     = 1
0.00.348.765 I llama_new_context_with_model: n_ctx         = 4096
0.00.348.765 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.348.766 I llama_new_context_with_model: n_batch       = 2048
0.00.348.766 I llama_new_context_with_model: n_ubatch      = 512
0.00.348.767 I llama_new_context_with_model: flash_attn    = 0
0.00.348.770 I llama_new_context_with_model: freq_base     = 10000.0
0.00.348.771 I llama_new_context_with_model: freq_scale    = 1
0.00.348.772 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.364.443 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.364.460 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.364.557 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.365.889 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.365.895 I llama_new_context_with_model: graph nodes  = 601
0.00.365.895 I llama_new_context_with_model: graph splits = 1
0.00.365.898 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.365.899 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.456.402 I main: llama threadpool init, n_threads = 4
0.00.456.416 I 
0.00.456.490 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.456.494 I 
0.00.456.536 I sampler seed: 3192606462
0.00.456.547 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.456.558 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.456.561 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.456.561 I 
 increasities in the media.

Media portrayal of narcissistic personality disorder (NPD) has been increasingly negative, with portrayals often focusing on the destructive aspects of the

0.02.883.399 I llama_perf_sampler_print:    sampling time =       5.01 ms /    33 runs   (    0.15 ms per token,  6585.51 tokens per second)
0.02.883.402 I llama_perf_context_print:        load time =     455.62 ms
0.02.883.403 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.883.404 I llama_perf_context_print:        eval time =    2407.81 ms /    32 runs   (   75.24 ms per token,    13.29 tokens per second)
0.02.883.405 I llama_perf_context_print:       total time =    2427.01 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.720s
user	0m36.195s
sys	0m9.452s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4354 (0e70ba68)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40269.93 ms
main:    total time = 40269.93 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.554 I build: 4354 (0e70ba68) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.756 I main: llama backend init
0.00.000.763 I main: load the model and apply lora adapter, if any
0.00.021.388 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.397 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.405 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.413 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.414 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.418 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.418 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.419 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.420 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.420 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.421 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.425 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.425 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.426 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.427 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.428 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.840 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.306 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.324 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.331 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.332 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.333 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.333 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.335 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.336 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.339 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.340 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.341 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.342 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.343 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.347 I llama_model_loader: - type  f32:   37 tensors
0.00.131.348 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.349 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.013 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.809 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.322 I llm_load_vocab: special tokens cache size = 5
0.00.266.308 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.326 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.327 I llm_load_print_meta: arch             = gemma
0.00.266.328 I llm_load_print_meta: vocab type       = SPM
0.00.266.328 I llm_load_print_meta: n_vocab          = 256000
0.00.266.329 I llm_load_print_meta: n_merges         = 0
0.00.266.329 I llm_load_print_meta: vocab_only       = 0
0.00.266.330 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.330 I llm_load_print_meta: n_embd           = 2048
0.00.266.331 I llm_load_print_meta: n_layer          = 18
0.00.266.344 I llm_load_print_meta: n_head           = 8
0.00.266.346 I llm_load_print_meta: n_head_kv        = 1
0.00.266.346 I llm_load_print_meta: n_rot            = 256
0.00.266.347 I llm_load_print_meta: n_swa            = 0
0.00.266.347 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.348 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.349 I llm_load_print_meta: n_gqa            = 8
0.00.266.351 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.352 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.354 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.356 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.359 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.360 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.362 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.364 I llm_load_print_meta: n_ff             = 16384
0.00.266.365 I llm_load_print_meta: n_expert         = 0
0.00.266.365 I llm_load_print_meta: n_expert_used    = 0
0.00.266.366 I llm_load_print_meta: causal attn      = 1
0.00.266.366 I llm_load_print_meta: pooling type     = 0
0.00.266.367 I llm_load_print_meta: rope type        = 2
0.00.266.367 I llm_load_print_meta: rope scaling     = linear
0.00.266.370 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.371 I llm_load_print_meta: freq_scale_train = 1
0.00.266.371 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.372 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.373 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.373 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.374 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.375 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.375 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.376 I llm_load_print_meta: model type       = 2B
0.00.266.377 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.378 I llm_load_print_meta: model params     = 2.51 B
0.00.266.379 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.380 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.380 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.381 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.381 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.382 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.383 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.383 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.385 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.386 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.387 I llm_load_print_meta: max token length = 93
0.00.326.421 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.326.432 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.326.433 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.326.433 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.326.435 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.326.435 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.332.000 I llama_new_context_with_model: n_seq_max     = 1
0.00.332.009 I llama_new_context_with_model: n_ctx         = 4096
0.00.332.010 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.332.010 I llama_new_context_with_model: n_batch       = 2048
0.00.332.011 I llama_new_context_with_model: n_ubatch      = 512
0.00.332.012 I llama_new_context_with_model: flash_attn    = 0
0.00.332.016 I llama_new_context_with_model: freq_base     = 10000.0
0.00.332.017 I llama_new_context_with_model: freq_scale    = 1
0.00.332.018 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.347.230 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.347.246 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.347.347 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.348.712 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.348.716 I llama_new_context_with_model: graph nodes  = 601
0.00.348.717 I llama_new_context_with_model: graph splits = 1
0.00.348.720 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.348.721 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.425.481 I main: llama threadpool init, n_threads = 4
0.00.425.498 I 
0.00.425.580 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.425.583 I 
0.00.425.628 I sampler seed: 2847008118
0.00.425.641 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.425.645 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.425.647 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.425.648 I 
 seconading was the main event that led to the fall of the Roman Empire.

This statement is false. The fall of the Roman Empire was caused by a

0.02.010.078 I llama_perf_sampler_print:    sampling time =       5.25 ms /    33 runs   (    0.16 ms per token,  6289.31 tokens per second)
0.02.010.081 I llama_perf_context_print:        load time =     424.70 ms
0.02.010.082 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.010.084 I llama_perf_context_print:        eval time =    1565.67 ms /    32 runs   (   48.93 ms per token,    20.44 tokens per second)
0.02.010.084 I llama_perf_context_print:       total time =    1584.61 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4354 (0e70ba68)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40223.18 ms
main:    total time = 40223.18 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.536 I build: 4354 (0e70ba68) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.779 I main: llama backend init
0.00.000.794 I main: load the model and apply lora adapter, if any
0.00.021.111 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.126 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.132 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.136 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.141 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.142 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.143 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.144 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.145 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.146 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.151 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.152 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.153 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.154 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.158 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.517 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.900 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.874 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.881 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.882 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.882 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.883 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.884 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.885 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.889 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.889 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.893 I llama_model_loader: - type  f32:   37 tensors
0.00.130.894 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.895 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.577 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.477 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.992 I llm_load_vocab: special tokens cache size = 5
0.00.268.033 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.049 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.049 I llm_load_print_meta: arch             = gemma
0.00.268.050 I llm_load_print_meta: vocab type       = SPM
0.00.268.051 I llm_load_print_meta: n_vocab          = 256000
0.00.268.051 I llm_load_print_meta: n_merges         = 0
0.00.268.051 I llm_load_print_meta: vocab_only       = 0
0.00.268.052 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.052 I llm_load_print_meta: n_embd           = 2048
0.00.268.052 I llm_load_print_meta: n_layer          = 18
0.00.268.063 I llm_load_print_meta: n_head           = 8
0.00.268.064 I llm_load_print_meta: n_head_kv        = 1
0.00.268.065 I llm_load_print_meta: n_rot            = 256
0.00.268.065 I llm_load_print_meta: n_swa            = 0
0.00.268.065 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.065 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.066 I llm_load_print_meta: n_gqa            = 8
0.00.268.067 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.068 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.069 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.071 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.071 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.071 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.072 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.073 I llm_load_print_meta: n_ff             = 16384
0.00.268.073 I llm_load_print_meta: n_expert         = 0
0.00.268.073 I llm_load_print_meta: n_expert_used    = 0
0.00.268.074 I llm_load_print_meta: causal attn      = 1
0.00.268.074 I llm_load_print_meta: pooling type     = 0
0.00.268.074 I llm_load_print_meta: rope type        = 2
0.00.268.075 I llm_load_print_meta: rope scaling     = linear
0.00.268.076 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.076 I llm_load_print_meta: freq_scale_train = 1
0.00.268.077 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.077 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.077 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.078 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.078 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.078 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.079 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.079 I llm_load_print_meta: model type       = 2B
0.00.268.080 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.081 I llm_load_print_meta: model params     = 2.51 B
0.00.268.081 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.082 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.082 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.082 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.083 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.083 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.083 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.083 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.084 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.084 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.084 I llm_load_print_meta: max token length = 93
0.00.325.649 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.331.112 I llama_new_context_with_model: n_seq_max     = 1
0.00.331.119 I llama_new_context_with_model: n_ctx         = 4096
0.00.331.120 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.331.120 I llama_new_context_with_model: n_batch       = 2048
0.00.331.120 I llama_new_context_with_model: n_ubatch      = 512
0.00.331.121 I llama_new_context_with_model: flash_attn    = 0
0.00.331.125 I llama_new_context_with_model: freq_base     = 10000.0
0.00.331.126 I llama_new_context_with_model: freq_scale    = 1
0.00.331.127 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.346.706 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.346.723 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.346.830 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.348.142 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.348.149 I llama_new_context_with_model: graph nodes  = 601
0.00.348.149 I llama_new_context_with_model: graph splits = 1
0.00.348.151 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.348.151 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.423.681 I main: llama threadpool init, n_threads = 4
0.00.423.697 I 
0.00.423.784 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.423.788 I 
0.00.423.840 I sampler seed: 2078609915
0.00.423.850 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.423.862 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.423.866 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.423.867 I 
 increasities, and other forms of sexual harassment.

Sexual harassment is a pervasive issue that affects individuals and organizations alike. It creates a hostile and unsafe environment for

0.01.973.808 I llama_perf_sampler_print:    sampling time =       5.11 ms /    33 runs   (    0.15 ms per token,  6459.19 tokens per second)
0.01.973.811 I llama_perf_context_print:        load time =     422.87 ms
0.01.973.813 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.973.814 I llama_perf_context_print:        eval time =    1531.25 ms /    32 runs   (   47.85 ms per token,    20.90 tokens per second)
0.01.973.816 I llama_perf_context_print:       total time =    1550.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.267s
user	10m23.726s
sys	0m7.100s
