+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.704 I build: 3905 (0e9f760e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.901 I main: llama backend init
0.00.002.871 I main: load the model and apply lora adapter, if any
0.00.025.400 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.608 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.704 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.717 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.718 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.724 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.730 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.731 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.732 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.733 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.734 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.742 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.743 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.744 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.745 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.746 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.011 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.401 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.973 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.983 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.984 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.985 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.986 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.988 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.990 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.993 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.994 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.995 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.996 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.274.998 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.006 I llama_model_loader: - type  f32:   37 tensors
0.00.275.011 I llama_model_loader: - type q8_0:  127 tensors
0.00.444.462 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.473.202 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.474.308 I llm_load_vocab: special tokens cache size = 5
0.00.570.046 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.570.108 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.570.110 I llm_load_print_meta: arch             = gemma
0.00.570.110 I llm_load_print_meta: vocab type       = SPM
0.00.570.111 I llm_load_print_meta: n_vocab          = 256000
0.00.570.113 I llm_load_print_meta: n_merges         = 0
0.00.570.114 I llm_load_print_meta: vocab_only       = 0
0.00.570.114 I llm_load_print_meta: n_ctx_train      = 8192
0.00.570.115 I llm_load_print_meta: n_embd           = 2048
0.00.570.115 I llm_load_print_meta: n_layer          = 18
0.00.570.178 I llm_load_print_meta: n_head           = 8
0.00.570.186 I llm_load_print_meta: n_head_kv        = 1
0.00.570.186 I llm_load_print_meta: n_rot            = 256
0.00.570.186 I llm_load_print_meta: n_swa            = 0
0.00.570.187 I llm_load_print_meta: n_embd_head_k    = 256
0.00.570.187 I llm_load_print_meta: n_embd_head_v    = 256
0.00.570.192 I llm_load_print_meta: n_gqa            = 8
0.00.570.196 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.570.201 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.570.202 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.570.204 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.570.204 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.570.204 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.570.205 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.570.210 I llm_load_print_meta: n_ff             = 16384
0.00.570.212 I llm_load_print_meta: n_expert         = 0
0.00.570.213 I llm_load_print_meta: n_expert_used    = 0
0.00.570.226 I llm_load_print_meta: causal attn      = 1
0.00.570.230 I llm_load_print_meta: pooling type     = 0
0.00.570.231 I llm_load_print_meta: rope type        = 2
0.00.570.231 I llm_load_print_meta: rope scaling     = linear
0.00.570.245 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.570.254 I llm_load_print_meta: freq_scale_train = 1
0.00.570.257 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.570.258 I llm_load_print_meta: rope_finetuned   = unknown
0.00.570.258 I llm_load_print_meta: ssm_d_conv       = 0
0.00.570.258 I llm_load_print_meta: ssm_d_inner      = 0
0.00.570.259 I llm_load_print_meta: ssm_d_state      = 0
0.00.570.259 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.570.259 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.570.260 I llm_load_print_meta: model type       = 2B
0.00.570.261 I llm_load_print_meta: model ftype      = Q8_0
0.00.570.262 I llm_load_print_meta: model params     = 2.51 B
0.00.570.263 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.570.263 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.570.264 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.570.264 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.570.265 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.570.265 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.570.266 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.570.266 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.570.273 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.570.274 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.570.274 I llm_load_print_meta: max token length = 93
0.00.570.445 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.670.881 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.670.889 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.670.890 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.670.891 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.670.892 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.670.892 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.676.658 I llama_new_context_with_model: n_ctx      = 8192
0.00.676.667 I llama_new_context_with_model: n_batch    = 2048
0.00.676.667 I llama_new_context_with_model: n_ubatch   = 512
0.00.676.668 I llama_new_context_with_model: flash_attn = 0
0.00.676.671 I llama_new_context_with_model: freq_base  = 10000.0
0.00.676.672 I llama_new_context_with_model: freq_scale = 1
0.00.708.467 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.708.512 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.708.631 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.710.085 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.710.092 I llama_new_context_with_model: graph nodes  = 601
0.00.710.092 I llama_new_context_with_model: graph splits = 1
0.00.710.107 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.326.619 I main: llama threadpool init, n_threads = 4
0.01.326.631 I 
0.01.326.741 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.326.745 I 
0.01.326.915 I sampler seed: 2353726025
0.01.326.925 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.326.932 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.326.933 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.326.933 I 
 increasities! [end of text]


0.03.025.101 I llama_perf_sampler_print:    sampling time =       6.21 ms /     5 runs   (    1.24 ms per token,   804.51 tokens per second)
0.03.025.116 I llama_perf_context_print:        load time =    1323.65 ms
0.03.025.118 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.025.119 I llama_perf_context_print:        eval time =    1686.82 ms /     4 runs   (  421.71 ms per token,     2.37 tokens per second)
0.03.025.120 I llama_perf_context_print:       total time =    1698.49 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.644 I build: 3905 (0e9f760e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.002.776 I main: load the model and apply lora adapter, if any
0.00.025.201 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.301 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.316 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.320 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.324 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.326 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.336 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.338 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.347 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.351 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.358 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.359 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.360 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.362 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.363 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.154.880 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.255.374 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.868 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.877 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.878 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.880 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.881 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.882 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.883 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.887 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.888 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.890 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.273.892 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.273.893 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.273.901 I llama_model_loader: - type  f32:   37 tensors
0.00.273.905 I llama_model_loader: - type q8_0:  127 tensors
0.00.445.349 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.475.346 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.476.403 I llm_load_vocab: special tokens cache size = 5
0.00.571.985 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.572.049 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.572.050 I llm_load_print_meta: arch             = gemma
0.00.572.051 I llm_load_print_meta: vocab type       = SPM
0.00.572.051 I llm_load_print_meta: n_vocab          = 256000
0.00.572.054 I llm_load_print_meta: n_merges         = 0
0.00.572.054 I llm_load_print_meta: vocab_only       = 0
0.00.572.055 I llm_load_print_meta: n_ctx_train      = 8192
0.00.572.055 I llm_load_print_meta: n_embd           = 2048
0.00.572.056 I llm_load_print_meta: n_layer          = 18
0.00.572.122 I llm_load_print_meta: n_head           = 8
0.00.572.129 I llm_load_print_meta: n_head_kv        = 1
0.00.572.129 I llm_load_print_meta: n_rot            = 256
0.00.572.130 I llm_load_print_meta: n_swa            = 0
0.00.572.130 I llm_load_print_meta: n_embd_head_k    = 256
0.00.572.131 I llm_load_print_meta: n_embd_head_v    = 256
0.00.572.135 I llm_load_print_meta: n_gqa            = 8
0.00.572.139 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.572.144 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.572.146 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.572.147 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.572.147 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.572.147 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.572.148 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.572.152 I llm_load_print_meta: n_ff             = 16384
0.00.572.153 I llm_load_print_meta: n_expert         = 0
0.00.572.153 I llm_load_print_meta: n_expert_used    = 0
0.00.572.154 I llm_load_print_meta: causal attn      = 1
0.00.572.154 I llm_load_print_meta: pooling type     = 0
0.00.572.154 I llm_load_print_meta: rope type        = 2
0.00.572.155 I llm_load_print_meta: rope scaling     = linear
0.00.572.157 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.572.157 I llm_load_print_meta: freq_scale_train = 1
0.00.572.158 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.572.158 I llm_load_print_meta: rope_finetuned   = unknown
0.00.572.158 I llm_load_print_meta: ssm_d_conv       = 0
0.00.572.159 I llm_load_print_meta: ssm_d_inner      = 0
0.00.572.159 I llm_load_print_meta: ssm_d_state      = 0
0.00.572.160 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.572.160 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.572.161 I llm_load_print_meta: model type       = 2B
0.00.572.162 I llm_load_print_meta: model ftype      = Q8_0
0.00.572.162 I llm_load_print_meta: model params     = 2.51 B
0.00.572.163 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.572.163 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.572.164 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.572.164 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.572.165 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.572.165 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.572.166 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.572.166 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.572.171 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.572.173 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.572.173 I llm_load_print_meta: max token length = 93
0.00.572.341 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.665.781 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.671.586 I llama_new_context_with_model: n_ctx      = 8192
0.00.671.594 I llama_new_context_with_model: n_batch    = 2048
0.00.671.594 I llama_new_context_with_model: n_ubatch   = 512
0.00.671.595 I llama_new_context_with_model: flash_attn = 0
0.00.671.600 I llama_new_context_with_model: freq_base  = 10000.0
0.00.671.600 I llama_new_context_with_model: freq_scale = 1
0.00.702.292 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.702.339 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.702.455 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.703.818 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.703.824 I llama_new_context_with_model: graph nodes  = 601
0.00.703.825 I llama_new_context_with_model: graph splits = 1
0.00.703.840 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.315.921 I main: llama threadpool init, n_threads = 4
0.01.315.933 I 
0.01.316.061 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.316.065 I 
0.01.316.231 I sampler seed: 2667609753
0.01.316.242 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.316.251 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.316.252 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.316.252 I 
 increasels:

**a) Explain the term "reconstruction".**

Reconstruction refers to the process of restoring something to its original state, condition, or

0.14.794.422 I llama_perf_sampler_print:    sampling time =      49.30 ms /    33 runs   (    1.49 ms per token,   669.43 tokens per second)
0.14.794.424 I llama_perf_context_print:        load time =    1313.05 ms
0.14.794.426 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.794.427 I llama_perf_context_print:        eval time =   13396.42 ms /    32 runs   (  418.64 ms per token,     2.39 tokens per second)
0.14.794.428 I llama_perf_context_print:       total time =   13478.51 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.701 I build: 3905 (0e9f760e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.907 I main: llama backend init
0.00.002.856 I main: load the model and apply lora adapter, if any
0.00.027.259 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.027.473 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.027.575 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.027.587 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.027.589 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.027.594 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.027.598 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.027.599 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.027.601 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.027.602 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.027.603 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.027.611 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.027.612 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.027.623 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.027.624 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.027.625 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.159.373 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.260.057 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.278.516 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.278.525 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.278.527 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.278.528 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.278.529 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.278.530 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.278.531 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.278.537 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.278.538 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.278.539 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.278.540 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.278.541 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.278.550 I llama_model_loader: - type  f32:   37 tensors
0.00.278.554 I llama_model_loader: - type q8_0:  127 tensors
0.00.451.967 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.480.524 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.481.563 I llm_load_vocab: special tokens cache size = 5
0.00.578.473 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.578.536 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.578.538 I llm_load_print_meta: arch             = gemma
0.00.578.538 I llm_load_print_meta: vocab type       = SPM
0.00.578.539 I llm_load_print_meta: n_vocab          = 256000
0.00.578.541 I llm_load_print_meta: n_merges         = 0
0.00.578.542 I llm_load_print_meta: vocab_only       = 0
0.00.578.542 I llm_load_print_meta: n_ctx_train      = 8192
0.00.578.543 I llm_load_print_meta: n_embd           = 2048
0.00.578.543 I llm_load_print_meta: n_layer          = 18
0.00.578.606 I llm_load_print_meta: n_head           = 8
0.00.578.613 I llm_load_print_meta: n_head_kv        = 1
0.00.578.614 I llm_load_print_meta: n_rot            = 256
0.00.578.614 I llm_load_print_meta: n_swa            = 0
0.00.578.615 I llm_load_print_meta: n_embd_head_k    = 256
0.00.578.615 I llm_load_print_meta: n_embd_head_v    = 256
0.00.578.620 I llm_load_print_meta: n_gqa            = 8
0.00.578.625 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.578.630 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.578.631 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.578.632 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.578.633 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.578.633 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.578.634 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.578.638 I llm_load_print_meta: n_ff             = 16384
0.00.578.640 I llm_load_print_meta: n_expert         = 0
0.00.578.640 I llm_load_print_meta: n_expert_used    = 0
0.00.578.662 I llm_load_print_meta: causal attn      = 1
0.00.578.663 I llm_load_print_meta: pooling type     = 0
0.00.578.663 I llm_load_print_meta: rope type        = 2
0.00.578.664 I llm_load_print_meta: rope scaling     = linear
0.00.578.665 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.578.666 I llm_load_print_meta: freq_scale_train = 1
0.00.578.666 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.578.666 I llm_load_print_meta: rope_finetuned   = unknown
0.00.578.667 I llm_load_print_meta: ssm_d_conv       = 0
0.00.578.667 I llm_load_print_meta: ssm_d_inner      = 0
0.00.578.668 I llm_load_print_meta: ssm_d_state      = 0
0.00.578.668 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.578.668 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.578.669 I llm_load_print_meta: model type       = 2B
0.00.578.670 I llm_load_print_meta: model ftype      = Q8_0
0.00.578.671 I llm_load_print_meta: model params     = 2.51 B
0.00.578.672 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.578.673 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.578.673 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.578.674 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.578.674 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.578.682 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.578.683 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.578.684 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.578.689 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.578.690 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.578.691 I llm_load_print_meta: max token length = 93
0.00.578.865 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.655.709 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.655.719 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.655.719 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.655.720 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.655.721 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.655.721 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.661.500 I llama_new_context_with_model: n_ctx      = 8192
0.00.661.508 I llama_new_context_with_model: n_batch    = 2048
0.00.661.508 I llama_new_context_with_model: n_ubatch   = 512
0.00.661.509 I llama_new_context_with_model: flash_attn = 0
0.00.661.513 I llama_new_context_with_model: freq_base  = 10000.0
0.00.661.514 I llama_new_context_with_model: freq_scale = 1
0.00.691.672 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.691.715 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.691.830 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.693.208 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.693.214 I llama_new_context_with_model: graph nodes  = 601
0.00.693.214 I llama_new_context_with_model: graph splits = 1
0.00.693.231 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.309.339 I main: llama threadpool init, n_threads = 4
0.01.309.353 I 
0.01.309.465 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.309.469 I 
0.01.309.641 I sampler seed: 1295818420
0.01.309.652 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.309.659 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.309.660 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.309.660 I 
 increasities of the past, and the anxieties that haunt us in the present.

This is the essence of my art, a tapestry woven from the threads of

0.15.025.296 I llama_perf_sampler_print:    sampling time =      49.58 ms /    33 runs   (    1.50 ms per token,   665.56 tokens per second)
0.15.025.298 I llama_perf_context_print:        load time =    1306.38 ms
0.15.025.300 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.025.302 I llama_perf_context_print:        eval time =   13632.75 ms /    32 runs   (  426.02 ms per token,     2.35 tokens per second)
0.15.025.302 I llama_perf_context_print:       total time =   13715.97 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 3905 (0e9f760e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.775 I main: load the model and apply lora adapter, if any
0.00.024.852 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.068 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.164 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.176 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.180 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.184 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.186 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.187 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.188 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.189 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.190 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.198 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.199 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.200 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.201 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.202 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.154.943 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.255.194 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.618 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.628 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.629 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.630 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.631 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.632 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.634 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.637 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.638 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.639 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.273.640 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.273.642 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.273.650 I llama_model_loader: - type  f32:   37 tensors
0.00.273.655 I llama_model_loader: - type q8_0:  127 tensors
0.00.436.487 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.463.192 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.464.264 I llm_load_vocab: special tokens cache size = 5
0.00.563.011 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.563.078 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.563.079 I llm_load_print_meta: arch             = gemma
0.00.563.080 I llm_load_print_meta: vocab type       = SPM
0.00.563.081 I llm_load_print_meta: n_vocab          = 256000
0.00.563.083 I llm_load_print_meta: n_merges         = 0
0.00.563.084 I llm_load_print_meta: vocab_only       = 0
0.00.563.084 I llm_load_print_meta: n_ctx_train      = 8192
0.00.563.085 I llm_load_print_meta: n_embd           = 2048
0.00.563.085 I llm_load_print_meta: n_layer          = 18
0.00.563.149 I llm_load_print_meta: n_head           = 8
0.00.563.183 I llm_load_print_meta: n_head_kv        = 1
0.00.563.184 I llm_load_print_meta: n_rot            = 256
0.00.563.184 I llm_load_print_meta: n_swa            = 0
0.00.563.185 I llm_load_print_meta: n_embd_head_k    = 256
0.00.563.185 I llm_load_print_meta: n_embd_head_v    = 256
0.00.563.191 I llm_load_print_meta: n_gqa            = 8
0.00.563.196 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.563.201 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.563.203 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.563.204 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.563.205 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.563.206 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.563.206 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.563.211 I llm_load_print_meta: n_ff             = 16384
0.00.563.212 I llm_load_print_meta: n_expert         = 0
0.00.563.212 I llm_load_print_meta: n_expert_used    = 0
0.00.563.221 I llm_load_print_meta: causal attn      = 1
0.00.563.221 I llm_load_print_meta: pooling type     = 0
0.00.563.222 I llm_load_print_meta: rope type        = 2
0.00.563.222 I llm_load_print_meta: rope scaling     = linear
0.00.563.223 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.563.224 I llm_load_print_meta: freq_scale_train = 1
0.00.563.232 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.563.233 I llm_load_print_meta: rope_finetuned   = unknown
0.00.563.234 I llm_load_print_meta: ssm_d_conv       = 0
0.00.563.234 I llm_load_print_meta: ssm_d_inner      = 0
0.00.563.239 I llm_load_print_meta: ssm_d_state      = 0
0.00.563.239 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.563.240 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.563.240 I llm_load_print_meta: model type       = 2B
0.00.563.241 I llm_load_print_meta: model ftype      = Q8_0
0.00.563.242 I llm_load_print_meta: model params     = 2.51 B
0.00.563.243 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.563.243 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.563.244 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.563.244 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.563.247 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.563.248 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.563.260 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.563.263 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.563.271 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.563.273 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.563.273 I llm_load_print_meta: max token length = 93
0.00.563.446 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.634.361 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.634.373 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.640.214 I llama_new_context_with_model: n_ctx      = 8192
0.00.640.223 I llama_new_context_with_model: n_batch    = 2048
0.00.640.223 I llama_new_context_with_model: n_ubatch   = 512
0.00.640.224 I llama_new_context_with_model: flash_attn = 0
0.00.640.228 I llama_new_context_with_model: freq_base  = 10000.0
0.00.640.229 I llama_new_context_with_model: freq_scale = 1
0.00.670.421 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.670.464 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.670.576 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.672.002 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.672.008 I llama_new_context_with_model: graph nodes  = 601
0.00.672.009 I llama_new_context_with_model: graph splits = 1
0.00.672.024 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.285.927 I main: llama threadpool init, n_threads = 4
0.01.285.942 I 
0.01.286.048 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.286.052 I 
0.01.286.224 I sampler seed: 2430951471
0.01.286.234 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.286.241 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.286.242 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.286.243 I 
 increasities for a brief period of time. [end of text]


0.05.519.646 I llama_perf_sampler_print:    sampling time =      15.50 ms /    11 runs   (    1.41 ms per token,   709.59 tokens per second)
0.05.519.649 I llama_perf_context_print:        load time =    1283.06 ms
0.05.519.651 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.519.653 I llama_perf_context_print:        eval time =    4206.49 ms /    10 runs   (  420.65 ms per token,     2.38 tokens per second)
0.05.519.654 I llama_perf_context_print:       total time =    4233.73 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m48.251s
user	2m25.117s
sys	0m9.626s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3905 (0e9f760e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200503.12 ms
main:    total time = 200503.12 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.681 I build: 3905 (0e9f760e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.879 I main: llama backend init
0.00.002.814 I main: load the model and apply lora adapter, if any
0.00.025.224 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.441 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.540 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.552 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.554 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.558 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.561 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.563 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.564 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.564 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.565 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.573 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.574 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.575 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.576 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.577 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.328 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.255.716 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.185 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.194 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.195 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.197 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.198 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.199 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.200 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.205 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.206 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.207 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.208 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.274.210 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.217 I llama_model_loader: - type  f32:   37 tensors
0.00.274.222 I llama_model_loader: - type q4_K:  108 tensors
0.00.274.223 I llama_model_loader: - type q6_K:   19 tensors
0.00.426.969 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.454.703 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.455.790 I llm_load_vocab: special tokens cache size = 5
0.00.551.280 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.551.342 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.551.344 I llm_load_print_meta: arch             = gemma
0.00.551.344 I llm_load_print_meta: vocab type       = SPM
0.00.551.345 I llm_load_print_meta: n_vocab          = 256000
0.00.551.347 I llm_load_print_meta: n_merges         = 0
0.00.551.348 I llm_load_print_meta: vocab_only       = 0
0.00.551.348 I llm_load_print_meta: n_ctx_train      = 8192
0.00.551.348 I llm_load_print_meta: n_embd           = 2048
0.00.551.349 I llm_load_print_meta: n_layer          = 18
0.00.551.413 I llm_load_print_meta: n_head           = 8
0.00.551.420 I llm_load_print_meta: n_head_kv        = 1
0.00.551.420 I llm_load_print_meta: n_rot            = 256
0.00.551.421 I llm_load_print_meta: n_swa            = 0
0.00.551.421 I llm_load_print_meta: n_embd_head_k    = 256
0.00.551.421 I llm_load_print_meta: n_embd_head_v    = 256
0.00.551.426 I llm_load_print_meta: n_gqa            = 8
0.00.551.431 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.551.437 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.551.438 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.551.440 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.551.441 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.551.441 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.551.442 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.551.447 I llm_load_print_meta: n_ff             = 16384
0.00.551.447 I llm_load_print_meta: n_expert         = 0
0.00.551.448 I llm_load_print_meta: n_expert_used    = 0
0.00.551.449 I llm_load_print_meta: causal attn      = 1
0.00.551.449 I llm_load_print_meta: pooling type     = 0
0.00.551.450 I llm_load_print_meta: rope type        = 2
0.00.551.450 I llm_load_print_meta: rope scaling     = linear
0.00.551.452 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.551.453 I llm_load_print_meta: freq_scale_train = 1
0.00.551.453 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.551.454 I llm_load_print_meta: rope_finetuned   = unknown
0.00.551.454 I llm_load_print_meta: ssm_d_conv       = 0
0.00.551.454 I llm_load_print_meta: ssm_d_inner      = 0
0.00.551.456 I llm_load_print_meta: ssm_d_state      = 0
0.00.551.456 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.551.457 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.551.481 I llm_load_print_meta: model type       = 2B
0.00.551.484 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.551.485 I llm_load_print_meta: model params     = 2.51 B
0.00.551.485 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.551.486 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.551.487 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.551.488 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.551.488 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.551.495 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.551.496 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.551.497 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.551.504 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.551.506 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.551.506 I llm_load_print_meta: max token length = 93
0.00.551.678 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.609.884 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.609.894 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.609.895 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.609.896 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.609.896 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.609.897 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.615.585 I llama_new_context_with_model: n_ctx      = 8192
0.00.615.592 I llama_new_context_with_model: n_batch    = 2048
0.00.615.592 I llama_new_context_with_model: n_ubatch   = 512
0.00.615.593 I llama_new_context_with_model: flash_attn = 0
0.00.615.596 I llama_new_context_with_model: freq_base  = 10000.0
0.00.615.597 I llama_new_context_with_model: freq_scale = 1
0.00.645.533 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.645.578 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.645.695 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.647.119 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.647.125 I llama_new_context_with_model: graph nodes  = 601
0.00.647.125 I llama_new_context_with_model: graph splits = 1
0.00.647.140 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.227.234 I main: llama threadpool init, n_threads = 4
0.01.227.247 I 
0.01.227.357 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.227.361 I 
0.01.227.531 I sampler seed: 3007792707
0.01.227.542 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.227.548 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.227.549 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.227.549 I 
 encompases that the system is not working properly and needs to be investigated.

**Additional Information:**

- The system is a complex web-based application with

0.12.175.552 I llama_perf_sampler_print:    sampling time =      49.12 ms /    33 runs   (    1.49 ms per token,   671.85 tokens per second)
0.12.175.554 I llama_perf_context_print:        load time =    1224.32 ms
0.12.175.556 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.175.557 I llama_perf_context_print:        eval time =   10866.65 ms /    32 runs   (  339.58 ms per token,     2.94 tokens per second)
0.12.175.558 I llama_perf_context_print:       total time =   10948.33 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3905 (0e9f760e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200725.41 ms
main:    total time = 200725.41 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.647 I build: 3905 (0e9f760e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.790 I main: load the model and apply lora adapter, if any
0.00.024.819 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.924 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.940 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.944 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.950 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.951 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.952 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.953 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.954 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.955 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.962 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.963 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.965 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.966 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.975 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.515 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.259.415 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.278.007 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.278.018 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.278.019 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.278.020 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.278.021 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.278.023 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.278.024 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.278.028 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.278.029 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.278.039 I llama_model_loader: - type  f32:   37 tensors
0.00.278.043 I llama_model_loader: - type q4_K:  108 tensors
0.00.278.044 I llama_model_loader: - type q6_K:   19 tensors
0.00.448.948 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.477.276 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.478.261 I llm_load_vocab: special tokens cache size = 5
0.00.573.739 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.573.806 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.573.807 I llm_load_print_meta: arch             = gemma
0.00.573.808 I llm_load_print_meta: vocab type       = SPM
0.00.573.808 I llm_load_print_meta: n_vocab          = 256000
0.00.573.810 I llm_load_print_meta: n_merges         = 0
0.00.573.811 I llm_load_print_meta: vocab_only       = 0
0.00.573.811 I llm_load_print_meta: n_ctx_train      = 8192
0.00.573.812 I llm_load_print_meta: n_embd           = 2048
0.00.573.812 I llm_load_print_meta: n_layer          = 18
0.00.573.876 I llm_load_print_meta: n_head           = 8
0.00.573.882 I llm_load_print_meta: n_head_kv        = 1
0.00.573.883 I llm_load_print_meta: n_rot            = 256
0.00.573.883 I llm_load_print_meta: n_swa            = 0
0.00.573.884 I llm_load_print_meta: n_embd_head_k    = 256
0.00.573.884 I llm_load_print_meta: n_embd_head_v    = 256
0.00.573.888 I llm_load_print_meta: n_gqa            = 8
0.00.573.893 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.573.898 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.573.899 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.573.900 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.573.901 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.573.901 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.573.901 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.573.906 I llm_load_print_meta: n_ff             = 16384
0.00.573.907 I llm_load_print_meta: n_expert         = 0
0.00.573.907 I llm_load_print_meta: n_expert_used    = 0
0.00.573.907 I llm_load_print_meta: causal attn      = 1
0.00.573.908 I llm_load_print_meta: pooling type     = 0
0.00.573.908 I llm_load_print_meta: rope type        = 2
0.00.573.908 I llm_load_print_meta: rope scaling     = linear
0.00.573.909 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.573.910 I llm_load_print_meta: freq_scale_train = 1
0.00.573.910 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.573.911 I llm_load_print_meta: rope_finetuned   = unknown
0.00.573.911 I llm_load_print_meta: ssm_d_conv       = 0
0.00.573.911 I llm_load_print_meta: ssm_d_inner      = 0
0.00.573.912 I llm_load_print_meta: ssm_d_state      = 0
0.00.573.912 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.573.912 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.573.913 I llm_load_print_meta: model type       = 2B
0.00.573.914 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.573.915 I llm_load_print_meta: model params     = 2.51 B
0.00.573.915 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.573.915 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.573.916 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.573.916 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.573.917 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.573.917 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.573.918 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.573.918 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.573.924 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.573.926 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.573.926 I llm_load_print_meta: max token length = 93
0.00.574.099 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.631.641 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.636.989 I llama_new_context_with_model: n_ctx      = 8192
0.00.636.996 I llama_new_context_with_model: n_batch    = 2048
0.00.636.997 I llama_new_context_with_model: n_ubatch   = 512
0.00.636.997 I llama_new_context_with_model: flash_attn = 0
0.00.637.000 I llama_new_context_with_model: freq_base  = 10000.0
0.00.637.001 I llama_new_context_with_model: freq_scale = 1
0.00.669.718 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.669.762 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.669.876 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.671.265 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.671.271 I llama_new_context_with_model: graph nodes  = 601
0.00.671.271 I llama_new_context_with_model: graph splits = 1
0.00.671.286 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.250.200 I main: llama threadpool init, n_threads = 4
0.01.250.213 I 
0.01.250.318 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.250.322 I 
0.01.250.489 I sampler seed: 3322601177
0.01.250.500 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.250.507 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.250.507 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.250.509 I 
 increamically, and then settled.

What happened?

The answer is: The speaker was talking.

The speaker was talking when they began to speak.

0.12.275.879 I llama_perf_sampler_print:    sampling time =      49.23 ms /    33 runs   (    1.49 ms per token,   670.28 tokens per second)
0.12.275.893 I llama_perf_context_print:        load time =    1247.32 ms
0.12.275.895 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.275.897 I llama_perf_context_print:        eval time =   10942.52 ms /    32 runs   (  341.95 ms per token,     2.92 tokens per second)
0.12.275.899 I llama_perf_context_print:       total time =   11025.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m8.641s
user	50m33.463s
sys	0m6.467s
