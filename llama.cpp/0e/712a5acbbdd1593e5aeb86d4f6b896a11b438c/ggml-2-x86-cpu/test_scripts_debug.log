+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.666 I build: 4071 (0e712a5a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.890 I main: llama backend init
0.00.001.153 I main: load the model and apply lora adapter, if any
0.00.024.011 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.022 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.125 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.138 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.139 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.145 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.147 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.148 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.149 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.150 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.151 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.162 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.165 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.167 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.168 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.169 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.384 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.254.995 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.011 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.019 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.020 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.021 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.022 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.024 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.025 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.029 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.030 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.031 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.273.032 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.273.033 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.273.041 I llama_model_loader: - type  f32:   37 tensors
0.00.273.043 I llama_model_loader: - type q8_0:  127 tensors
0.00.433.949 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.492.784 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.493.809 I llm_load_vocab: special tokens cache size = 5
0.00.589.475 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.589.546 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.589.547 I llm_load_print_meta: arch             = gemma
0.00.589.548 I llm_load_print_meta: vocab type       = SPM
0.00.589.549 I llm_load_print_meta: n_vocab          = 256000
0.00.589.551 I llm_load_print_meta: n_merges         = 0
0.00.589.552 I llm_load_print_meta: vocab_only       = 0
0.00.589.553 I llm_load_print_meta: n_ctx_train      = 8192
0.00.589.553 I llm_load_print_meta: n_embd           = 2048
0.00.589.553 I llm_load_print_meta: n_layer          = 18
0.00.589.618 I llm_load_print_meta: n_head           = 8
0.00.589.625 I llm_load_print_meta: n_head_kv        = 1
0.00.589.626 I llm_load_print_meta: n_rot            = 256
0.00.589.626 I llm_load_print_meta: n_swa            = 0
0.00.589.627 I llm_load_print_meta: n_embd_head_k    = 256
0.00.589.627 I llm_load_print_meta: n_embd_head_v    = 256
0.00.589.650 I llm_load_print_meta: n_gqa            = 8
0.00.589.656 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.589.661 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.589.670 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.589.672 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.589.673 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.589.674 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.589.674 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.589.680 I llm_load_print_meta: n_ff             = 16384
0.00.589.681 I llm_load_print_meta: n_expert         = 0
0.00.589.682 I llm_load_print_meta: n_expert_used    = 0
0.00.589.682 I llm_load_print_meta: causal attn      = 1
0.00.589.683 I llm_load_print_meta: pooling type     = 0
0.00.589.683 I llm_load_print_meta: rope type        = 2
0.00.589.684 I llm_load_print_meta: rope scaling     = linear
0.00.589.686 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.589.687 I llm_load_print_meta: freq_scale_train = 1
0.00.589.688 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.589.688 I llm_load_print_meta: rope_finetuned   = unknown
0.00.589.688 I llm_load_print_meta: ssm_d_conv       = 0
0.00.589.688 I llm_load_print_meta: ssm_d_inner      = 0
0.00.589.689 I llm_load_print_meta: ssm_d_state      = 0
0.00.589.690 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.589.690 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.589.691 I llm_load_print_meta: model type       = 2B
0.00.589.692 I llm_load_print_meta: model ftype      = Q8_0
0.00.589.693 I llm_load_print_meta: model params     = 2.51 B
0.00.589.706 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.589.707 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.589.708 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.589.708 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.589.709 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.589.710 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.589.713 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.589.714 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.589.727 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.589.729 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.589.730 I llm_load_print_meta: max token length = 93
0.00.694.015 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.694.025 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.694.026 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.694.027 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.694.028 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.694.029 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.699.905 I llama_new_context_with_model: n_seq_max     = 1
0.00.699.910 I llama_new_context_with_model: n_ctx         = 4096
0.00.699.910 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.699.911 I llama_new_context_with_model: n_batch       = 2048
0.00.699.911 I llama_new_context_with_model: n_ubatch      = 512
0.00.699.912 I llama_new_context_with_model: flash_attn    = 0
0.00.699.914 I llama_new_context_with_model: freq_base     = 10000.0
0.00.699.915 I llama_new_context_with_model: freq_scale    = 1
0.00.699.915 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.716.549 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.716.591 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.716.711 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.719.224 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.719.228 I llama_new_context_with_model: graph nodes  = 601
0.00.719.228 I llama_new_context_with_model: graph splits = 1
0.00.719.252 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.325.321 I main: llama threadpool init, n_threads = 4
0.01.325.333 I 
0.01.325.442 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.325.442 I 
0.01.325.679 I sampler seed: 175728103
0.01.325.692 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.325.699 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.325.700 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.325.700 I 
 increasities in the 1980s, leading to a surge in popularity for music videos.

**Identify the cause and effect of the increasities

0.14.829.101 I llama_perf_sampler_print:    sampling time =      47.46 ms /    33 runs   (    1.44 ms per token,   695.35 tokens per second)
0.14.829.103 I llama_perf_context_print:        load time =    1324.06 ms
0.14.829.118 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.829.120 I llama_perf_context_print:        eval time =   13415.13 ms /    32 runs   (  419.22 ms per token,     2.39 tokens per second)
0.14.829.121 I llama_perf_context_print:       total time =   13503.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.662 I build: 4071 (0e712a5a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.890 I main: llama backend init
0.00.001.166 I main: load the model and apply lora adapter, if any
0.00.023.487 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.580 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.593 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.595 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.599 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.603 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.604 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.605 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.606 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.607 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.615 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.617 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.618 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.619 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.621 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.644 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.255.549 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.888 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.896 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.898 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.899 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.900 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.901 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.902 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.908 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.909 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.911 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.273.912 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.273.913 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.273.920 I llama_model_loader: - type  f32:   37 tensors
0.00.273.922 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.101 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.508.078 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.509.133 I llm_load_vocab: special tokens cache size = 5
0.00.604.922 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.604.996 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.604.999 I llm_load_print_meta: arch             = gemma
0.00.605.001 I llm_load_print_meta: vocab type       = SPM
0.00.605.001 I llm_load_print_meta: n_vocab          = 256000
0.00.605.004 I llm_load_print_meta: n_merges         = 0
0.00.605.005 I llm_load_print_meta: vocab_only       = 0
0.00.605.005 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.006 I llm_load_print_meta: n_embd           = 2048
0.00.605.006 I llm_load_print_meta: n_layer          = 18
0.00.605.076 I llm_load_print_meta: n_head           = 8
0.00.605.087 I llm_load_print_meta: n_head_kv        = 1
0.00.605.089 I llm_load_print_meta: n_rot            = 256
0.00.605.089 I llm_load_print_meta: n_swa            = 0
0.00.605.089 I llm_load_print_meta: n_embd_head_k    = 256
0.00.605.090 I llm_load_print_meta: n_embd_head_v    = 256
0.00.605.095 I llm_load_print_meta: n_gqa            = 8
0.00.605.100 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.605.106 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.605.108 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.605.109 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.605.110 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.605.111 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.605.111 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.605.116 I llm_load_print_meta: n_ff             = 16384
0.00.605.117 I llm_load_print_meta: n_expert         = 0
0.00.605.126 I llm_load_print_meta: n_expert_used    = 0
0.00.605.126 I llm_load_print_meta: causal attn      = 1
0.00.605.127 I llm_load_print_meta: pooling type     = 0
0.00.605.139 I llm_load_print_meta: rope type        = 2
0.00.605.140 I llm_load_print_meta: rope scaling     = linear
0.00.605.146 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.605.147 I llm_load_print_meta: freq_scale_train = 1
0.00.605.148 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.605.149 I llm_load_print_meta: rope_finetuned   = unknown
0.00.605.149 I llm_load_print_meta: ssm_d_conv       = 0
0.00.605.149 I llm_load_print_meta: ssm_d_inner      = 0
0.00.605.150 I llm_load_print_meta: ssm_d_state      = 0
0.00.605.150 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.605.157 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.605.159 I llm_load_print_meta: model type       = 2B
0.00.605.163 I llm_load_print_meta: model ftype      = Q8_0
0.00.605.163 I llm_load_print_meta: model params     = 2.51 B
0.00.605.194 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.605.198 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.605.199 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.605.199 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.605.200 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.605.201 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.605.201 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.605.202 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.605.209 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.605.210 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.605.211 I llm_load_print_meta: max token length = 93
0.00.703.630 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.709.452 I llama_new_context_with_model: n_seq_max     = 1
0.00.709.459 I llama_new_context_with_model: n_ctx         = 4096
0.00.709.460 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.709.460 I llama_new_context_with_model: n_batch       = 2048
0.00.709.461 I llama_new_context_with_model: n_ubatch      = 512
0.00.709.461 I llama_new_context_with_model: flash_attn    = 0
0.00.709.463 I llama_new_context_with_model: freq_base     = 10000.0
0.00.709.464 I llama_new_context_with_model: freq_scale    = 1
0.00.709.465 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.726.120 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.726.160 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.726.277 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.728.739 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.728.743 I llama_new_context_with_model: graph nodes  = 601
0.00.728.744 I llama_new_context_with_model: graph splits = 1
0.00.728.767 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.356.636 I main: llama threadpool init, n_threads = 4
0.01.356.650 I 
0.01.356.756 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.356.760 I 
0.01.356.991 I sampler seed: 3482776830
0.01.357.003 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.357.012 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.357.013 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.357.013 I 
 increasities and how the society should respond to them.

**1. Definition and Characteristics of Sexual Harassment**

Sexual harassment is a form of gender-based

0.14.921.083 I llama_perf_sampler_print:    sampling time =      46.55 ms /    33 runs   (    1.41 ms per token,   708.93 tokens per second)
0.14.921.087 I llama_perf_context_print:        load time =    1355.37 ms
0.14.921.101 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.921.103 I llama_perf_context_print:        eval time =   13476.13 ms /    32 runs   (  421.13 ms per token,     2.37 tokens per second)
0.14.921.104 I llama_perf_context_print:       total time =   13564.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.659 I build: 4071 (0e712a5a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.880 I main: llama backend init
0.00.001.155 I main: load the model and apply lora adapter, if any
0.00.023.630 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.641 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.724 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.735 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.737 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.741 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.743 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.745 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.746 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.747 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.748 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.756 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.761 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.763 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.765 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.767 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.674 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.659 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.756 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.770 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.771 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.773 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.774 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.775 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.776 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.780 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.781 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.782 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.783 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.267.784 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.792 I llama_model_loader: - type  f32:   37 tensors
0.00.267.794 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.918 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.905 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.925 I llm_load_vocab: special tokens cache size = 5
0.00.601.338 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.601.413 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.601.414 I llm_load_print_meta: arch             = gemma
0.00.601.415 I llm_load_print_meta: vocab type       = SPM
0.00.601.416 I llm_load_print_meta: n_vocab          = 256000
0.00.601.418 I llm_load_print_meta: n_merges         = 0
0.00.601.419 I llm_load_print_meta: vocab_only       = 0
0.00.601.419 I llm_load_print_meta: n_ctx_train      = 8192
0.00.601.420 I llm_load_print_meta: n_embd           = 2048
0.00.601.420 I llm_load_print_meta: n_layer          = 18
0.00.601.486 I llm_load_print_meta: n_head           = 8
0.00.601.493 I llm_load_print_meta: n_head_kv        = 1
0.00.601.497 I llm_load_print_meta: n_rot            = 256
0.00.601.498 I llm_load_print_meta: n_swa            = 0
0.00.601.498 I llm_load_print_meta: n_embd_head_k    = 256
0.00.601.498 I llm_load_print_meta: n_embd_head_v    = 256
0.00.601.506 I llm_load_print_meta: n_gqa            = 8
0.00.601.513 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.601.522 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.601.526 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.601.528 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.601.529 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.601.529 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.601.531 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.601.538 I llm_load_print_meta: n_ff             = 16384
0.00.601.541 I llm_load_print_meta: n_expert         = 0
0.00.601.542 I llm_load_print_meta: n_expert_used    = 0
0.00.601.542 I llm_load_print_meta: causal attn      = 1
0.00.601.543 I llm_load_print_meta: pooling type     = 0
0.00.601.543 I llm_load_print_meta: rope type        = 2
0.00.601.544 I llm_load_print_meta: rope scaling     = linear
0.00.601.546 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.601.547 I llm_load_print_meta: freq_scale_train = 1
0.00.601.548 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.601.549 I llm_load_print_meta: rope_finetuned   = unknown
0.00.601.549 I llm_load_print_meta: ssm_d_conv       = 0
0.00.601.550 I llm_load_print_meta: ssm_d_inner      = 0
0.00.601.551 I llm_load_print_meta: ssm_d_state      = 0
0.00.601.552 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.601.553 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.601.554 I llm_load_print_meta: model type       = 2B
0.00.601.556 I llm_load_print_meta: model ftype      = Q8_0
0.00.601.557 I llm_load_print_meta: model params     = 2.51 B
0.00.601.570 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.601.571 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.601.571 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.601.572 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.601.575 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.601.576 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.601.576 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.601.577 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.601.583 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.601.586 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.601.586 I llm_load_print_meta: max token length = 93
0.00.685.185 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.685.196 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.685.197 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.685.198 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.685.198 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.685.199 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.691.141 I llama_new_context_with_model: n_seq_max     = 1
0.00.691.147 I llama_new_context_with_model: n_ctx         = 4096
0.00.691.148 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.691.148 I llama_new_context_with_model: n_batch       = 2048
0.00.691.148 I llama_new_context_with_model: n_ubatch      = 512
0.00.691.149 I llama_new_context_with_model: flash_attn    = 0
0.00.691.151 I llama_new_context_with_model: freq_base     = 10000.0
0.00.691.151 I llama_new_context_with_model: freq_scale    = 1
0.00.691.152 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.707.561 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.707.601 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.707.719 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.710.187 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.710.192 I llama_new_context_with_model: graph nodes  = 601
0.00.710.192 I llama_new_context_with_model: graph splits = 1
0.00.710.217 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.315.636 I main: llama threadpool init, n_threads = 4
0.01.315.650 I 
0.01.315.771 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.315.776 I 
0.01.316.013 I sampler seed: 3927129477
0.01.316.026 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.316.032 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.316.036 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.316.036 I 
 increasities as the narrator of my story.

I was born beneath the watchful eye of the cosmos, a celestial tapestry woven from stardust and nebulae.

0.14.719.050 I llama_perf_sampler_print:    sampling time =      47.70 ms /    33 runs   (    1.45 ms per token,   691.81 tokens per second)
0.14.719.057 I llama_perf_context_print:        load time =    1314.38 ms
0.14.719.058 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.719.071 I llama_perf_context_print:        eval time =   13314.71 ms /    32 runs   (  416.08 ms per token,     2.40 tokens per second)
0.14.719.073 I llama_perf_context_print:       total time =   13403.43 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 4071 (0e712a5a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.895 I main: llama backend init
0.00.001.166 I main: load the model and apply lora adapter, if any
0.00.023.566 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.578 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.672 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.684 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.686 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.690 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.694 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.695 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.696 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.697 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.698 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.707 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.710 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.715 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.716 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.718 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.115 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.769 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.263.870 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.263.882 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.263.883 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.263.884 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.263.885 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.263.886 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.263.888 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.263.891 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.263.892 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.263.893 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.263.894 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.263.895 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.263.903 I llama_model_loader: - type  f32:   37 tensors
0.00.263.906 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.434 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.626 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.594 I llm_load_vocab: special tokens cache size = 5
0.00.604.090 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.604.163 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.604.165 I llm_load_print_meta: arch             = gemma
0.00.604.166 I llm_load_print_meta: vocab type       = SPM
0.00.604.167 I llm_load_print_meta: n_vocab          = 256000
0.00.604.169 I llm_load_print_meta: n_merges         = 0
0.00.604.169 I llm_load_print_meta: vocab_only       = 0
0.00.604.170 I llm_load_print_meta: n_ctx_train      = 8192
0.00.604.170 I llm_load_print_meta: n_embd           = 2048
0.00.604.170 I llm_load_print_meta: n_layer          = 18
0.00.604.241 I llm_load_print_meta: n_head           = 8
0.00.604.248 I llm_load_print_meta: n_head_kv        = 1
0.00.604.249 I llm_load_print_meta: n_rot            = 256
0.00.604.250 I llm_load_print_meta: n_swa            = 0
0.00.604.251 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.251 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.265 I llm_load_print_meta: n_gqa            = 8
0.00.604.270 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.275 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.276 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.278 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.280 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.281 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.281 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.286 I llm_load_print_meta: n_ff             = 16384
0.00.604.287 I llm_load_print_meta: n_expert         = 0
0.00.604.287 I llm_load_print_meta: n_expert_used    = 0
0.00.604.290 I llm_load_print_meta: causal attn      = 1
0.00.604.290 I llm_load_print_meta: pooling type     = 0
0.00.604.290 I llm_load_print_meta: rope type        = 2
0.00.604.291 I llm_load_print_meta: rope scaling     = linear
0.00.604.292 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.293 I llm_load_print_meta: freq_scale_train = 1
0.00.604.293 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.293 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.294 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.294 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.294 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.294 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.295 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.295 I llm_load_print_meta: model type       = 2B
0.00.604.297 I llm_load_print_meta: model ftype      = Q8_0
0.00.604.318 I llm_load_print_meta: model params     = 2.51 B
0.00.604.327 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.604.327 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.328 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.329 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.330 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.330 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.331 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.331 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.338 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.340 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.340 I llm_load_print_meta: max token length = 93
0.00.676.469 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.676.481 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.682.539 I llama_new_context_with_model: n_seq_max     = 1
0.00.682.546 I llama_new_context_with_model: n_ctx         = 4096
0.00.682.547 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.682.547 I llama_new_context_with_model: n_batch       = 2048
0.00.682.548 I llama_new_context_with_model: n_ubatch      = 512
0.00.682.548 I llama_new_context_with_model: flash_attn    = 0
0.00.682.551 I llama_new_context_with_model: freq_base     = 10000.0
0.00.682.552 I llama_new_context_with_model: freq_scale    = 1
0.00.682.553 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.698.519 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.698.556 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.698.674 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.701.198 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.701.202 I llama_new_context_with_model: graph nodes  = 601
0.00.701.203 I llama_new_context_with_model: graph splits = 1
0.00.701.227 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.305.881 I main: llama threadpool init, n_threads = 4
0.01.305.894 I 
0.01.306.000 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.306.003 I 
0.01.306.239 I sampler seed: 2291457574
0.01.306.252 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.306.261 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.306.262 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.306.262 I 
 increasities that threaten to engulf the entire universe.

A desperate scientist, Professor Amelia Blackwood, delves into forbidden knowledge, seeking a solution to prevent this catastrophic

0.14.720.782 I llama_perf_sampler_print:    sampling time =      47.75 ms /    33 runs   (    1.45 ms per token,   691.11 tokens per second)
0.14.720.785 I llama_perf_context_print:        load time =    1304.61 ms
0.14.720.807 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.720.809 I llama_perf_context_print:        eval time =   13326.38 ms /    32 runs   (  416.45 ms per token,     2.40 tokens per second)
0.14.720.810 I llama_perf_context_print:       total time =   13414.91 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.455s
user	3m48.162s
sys	0m9.361s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4071 (0e712a5a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198614.99 ms
main:    total time = 198614.99 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 4071 (0e712a5a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.840 I main: llama backend init
0.00.001.095 I main: load the model and apply lora adapter, if any
0.00.023.826 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.837 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.924 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.934 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.937 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.942 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.943 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.944 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.945 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.946 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.947 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.953 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.954 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.955 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.956 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.957 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.716 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.432 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.429 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.437 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.439 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.440 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.441 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.442 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.445 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.448 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.449 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.459 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.463 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.264.465 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.473 I llama_model_loader: - type  f32:   37 tensors
0.00.264.475 I llama_model_loader: - type q4_K:  108 tensors
0.00.264.477 I llama_model_loader: - type q6_K:   19 tensors
0.00.439.027 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.460 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.362 I llm_load_vocab: special tokens cache size = 5
0.00.594.732 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.594.800 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.594.801 I llm_load_print_meta: arch             = gemma
0.00.594.801 I llm_load_print_meta: vocab type       = SPM
0.00.594.802 I llm_load_print_meta: n_vocab          = 256000
0.00.594.804 I llm_load_print_meta: n_merges         = 0
0.00.594.805 I llm_load_print_meta: vocab_only       = 0
0.00.594.806 I llm_load_print_meta: n_ctx_train      = 8192
0.00.594.806 I llm_load_print_meta: n_embd           = 2048
0.00.594.806 I llm_load_print_meta: n_layer          = 18
0.00.594.870 I llm_load_print_meta: n_head           = 8
0.00.594.877 I llm_load_print_meta: n_head_kv        = 1
0.00.594.878 I llm_load_print_meta: n_rot            = 256
0.00.594.878 I llm_load_print_meta: n_swa            = 0
0.00.594.878 I llm_load_print_meta: n_embd_head_k    = 256
0.00.594.879 I llm_load_print_meta: n_embd_head_v    = 256
0.00.594.883 I llm_load_print_meta: n_gqa            = 8
0.00.594.888 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.594.894 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.594.896 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.594.897 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.594.917 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.594.918 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.594.919 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.594.924 I llm_load_print_meta: n_ff             = 16384
0.00.594.925 I llm_load_print_meta: n_expert         = 0
0.00.594.926 I llm_load_print_meta: n_expert_used    = 0
0.00.594.927 I llm_load_print_meta: causal attn      = 1
0.00.594.927 I llm_load_print_meta: pooling type     = 0
0.00.594.927 I llm_load_print_meta: rope type        = 2
0.00.594.928 I llm_load_print_meta: rope scaling     = linear
0.00.594.929 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.594.930 I llm_load_print_meta: freq_scale_train = 1
0.00.594.931 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.594.931 I llm_load_print_meta: rope_finetuned   = unknown
0.00.594.931 I llm_load_print_meta: ssm_d_conv       = 0
0.00.594.932 I llm_load_print_meta: ssm_d_inner      = 0
0.00.594.932 I llm_load_print_meta: ssm_d_state      = 0
0.00.594.933 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.594.933 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.594.934 I llm_load_print_meta: model type       = 2B
0.00.594.935 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.594.936 I llm_load_print_meta: model params     = 2.51 B
0.00.594.946 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.594.946 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.594.947 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.594.948 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.594.948 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.594.949 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.594.950 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.594.950 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.594.956 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.594.957 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.594.958 I llm_load_print_meta: max token length = 93
0.00.659.048 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.659.056 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.659.057 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.659.058 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.659.059 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.659.059 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.664.806 I llama_new_context_with_model: n_seq_max     = 1
0.00.664.813 I llama_new_context_with_model: n_ctx         = 4096
0.00.664.814 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.664.814 I llama_new_context_with_model: n_batch       = 2048
0.00.664.814 I llama_new_context_with_model: n_ubatch      = 512
0.00.664.815 I llama_new_context_with_model: flash_attn    = 0
0.00.664.817 I llama_new_context_with_model: freq_base     = 10000.0
0.00.664.818 I llama_new_context_with_model: freq_scale    = 1
0.00.664.818 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.682.315 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.682.359 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.682.506 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.685.112 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.685.116 I llama_new_context_with_model: graph nodes  = 601
0.00.685.116 I llama_new_context_with_model: graph splits = 1
0.00.685.158 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.256.717 I main: llama threadpool init, n_threads = 4
0.01.256.730 I 
0.01.256.830 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.256.834 I 
0.01.257.062 I sampler seed: 4192882031
0.01.257.075 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.257.081 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.257.085 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.257.085 I 
 maneuvously.

This is a riddle. I apologize for the unconventional wording. Can you solve it?

I have cities, but no houses. I

0.12.135.661 I llama_perf_sampler_print:    sampling time =      47.33 ms /    33 runs   (    1.43 ms per token,   697.23 tokens per second)
0.12.135.665 I llama_perf_context_print:        load time =    1255.36 ms
0.12.135.677 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.135.679 I llama_perf_context_print:        eval time =   10789.68 ms /    32 runs   (  337.18 ms per token,     2.97 tokens per second)
0.12.135.680 I llama_perf_context_print:       total time =   10878.95 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4071 (0e712a5a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198624.27 ms
main:    total time = 198624.28 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 4071 (0e712a5a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.819 I main: llama backend init
0.00.001.081 I main: load the model and apply lora adapter, if any
0.00.023.335 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.430 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.443 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.445 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.449 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.453 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.454 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.455 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.457 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.458 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.466 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.468 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.469 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.470 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.474 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.111 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.078 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.313 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.324 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.326 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.327 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.328 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.329 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.330 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.334 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.354 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.363 I llama_model_loader: - type  f32:   37 tensors
0.00.264.366 I llama_model_loader: - type q4_K:  108 tensors
0.00.264.366 I llama_model_loader: - type q6_K:   19 tensors
0.00.445.434 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.507.764 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.508.718 I llm_load_vocab: special tokens cache size = 5
0.00.618.308 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.618.375 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.618.376 I llm_load_print_meta: arch             = gemma
0.00.618.377 I llm_load_print_meta: vocab type       = SPM
0.00.618.378 I llm_load_print_meta: n_vocab          = 256000
0.00.618.381 I llm_load_print_meta: n_merges         = 0
0.00.618.381 I llm_load_print_meta: vocab_only       = 0
0.00.618.382 I llm_load_print_meta: n_ctx_train      = 8192
0.00.618.382 I llm_load_print_meta: n_embd           = 2048
0.00.618.383 I llm_load_print_meta: n_layer          = 18
0.00.618.448 I llm_load_print_meta: n_head           = 8
0.00.618.455 I llm_load_print_meta: n_head_kv        = 1
0.00.618.456 I llm_load_print_meta: n_rot            = 256
0.00.618.457 I llm_load_print_meta: n_swa            = 0
0.00.618.458 I llm_load_print_meta: n_embd_head_k    = 256
0.00.618.459 I llm_load_print_meta: n_embd_head_v    = 256
0.00.618.464 I llm_load_print_meta: n_gqa            = 8
0.00.618.468 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.618.473 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.618.474 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.618.476 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.618.477 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.618.477 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.618.478 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.618.483 I llm_load_print_meta: n_ff             = 16384
0.00.618.483 I llm_load_print_meta: n_expert         = 0
0.00.618.484 I llm_load_print_meta: n_expert_used    = 0
0.00.618.484 I llm_load_print_meta: causal attn      = 1
0.00.618.485 I llm_load_print_meta: pooling type     = 0
0.00.618.485 I llm_load_print_meta: rope type        = 2
0.00.618.494 I llm_load_print_meta: rope scaling     = linear
0.00.618.496 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.618.497 I llm_load_print_meta: freq_scale_train = 1
0.00.618.497 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.618.497 I llm_load_print_meta: rope_finetuned   = unknown
0.00.618.498 I llm_load_print_meta: ssm_d_conv       = 0
0.00.618.498 I llm_load_print_meta: ssm_d_inner      = 0
0.00.618.499 I llm_load_print_meta: ssm_d_state      = 0
0.00.618.499 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.618.499 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.618.500 I llm_load_print_meta: model type       = 2B
0.00.618.501 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.618.502 I llm_load_print_meta: model params     = 2.51 B
0.00.618.511 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.618.513 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.618.513 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.618.514 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.618.514 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.618.515 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.618.515 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.618.516 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.618.523 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.618.524 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.618.524 I llm_load_print_meta: max token length = 93
0.00.680.083 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.685.805 I llama_new_context_with_model: n_seq_max     = 1
0.00.685.811 I llama_new_context_with_model: n_ctx         = 4096
0.00.685.811 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.685.812 I llama_new_context_with_model: n_batch       = 2048
0.00.685.812 I llama_new_context_with_model: n_ubatch      = 512
0.00.685.813 I llama_new_context_with_model: flash_attn    = 0
0.00.685.815 I llama_new_context_with_model: freq_base     = 10000.0
0.00.685.816 I llama_new_context_with_model: freq_scale    = 1
0.00.685.816 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.702.544 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.702.584 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.702.703 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.705.224 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.705.228 I llama_new_context_with_model: graph nodes  = 601
0.00.705.228 I llama_new_context_with_model: graph splits = 1
0.00.705.251 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.278.419 I main: llama threadpool init, n_threads = 4
0.01.278.433 I 
0.01.278.547 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.278.551 I 
0.01.278.797 I sampler seed: 2314124218
0.01.278.809 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.278.816 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.278.819 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.278.820 I 
 seconded sentences and provide transitions between them.

**The importance of education transcends the mere acquisition of knowledge and skills. It fosters critical thinking, promotes lifelong learning

0.12.147.579 I llama_perf_sampler_print:    sampling time =      46.60 ms /    33 runs   (    1.41 ms per token,   708.18 tokens per second)
0.12.147.582 I llama_perf_context_print:        load time =    1277.25 ms
0.12.147.584 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.147.599 I llama_perf_context_print:        eval time =   10782.06 ms /    32 runs   (  336.94 ms per token,     2.97 tokens per second)
0.12.147.601 I llama_perf_context_print:       total time =   10869.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.374s
user	50m8.357s
sys	0m6.195s
