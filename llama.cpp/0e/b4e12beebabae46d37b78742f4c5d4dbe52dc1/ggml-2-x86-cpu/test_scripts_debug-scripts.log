+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.647 I build: 4174 (0eb4e12b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.873 I main: llama backend init
0.00.000.881 I main: load the model and apply lora adapter, if any
0.00.023.532 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.542 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.633 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.645 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.647 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.653 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.655 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.656 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.658 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.660 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.661 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.670 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.671 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.673 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.680 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.681 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.239.093 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.340.691 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.364.524 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.364.532 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.364.534 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.364.535 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.364.536 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.364.538 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.364.539 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.364.544 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.364.545 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.364.546 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.364.548 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.364.549 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.364.558 I llama_model_loader: - type  f32:   37 tensors
0.00.364.560 I llama_model_loader: - type q8_0:  127 tensors
0.00.589.218 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.647.069 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.648.044 I llm_load_vocab: special tokens cache size = 5
0.00.857.190 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.857.271 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.857.272 I llm_load_print_meta: arch             = gemma
0.00.857.273 I llm_load_print_meta: vocab type       = SPM
0.00.857.274 I llm_load_print_meta: n_vocab          = 256000
0.00.857.276 I llm_load_print_meta: n_merges         = 0
0.00.857.277 I llm_load_print_meta: vocab_only       = 0
0.00.857.278 I llm_load_print_meta: n_ctx_train      = 8192
0.00.857.278 I llm_load_print_meta: n_embd           = 2048
0.00.857.279 I llm_load_print_meta: n_layer          = 18
0.00.857.343 I llm_load_print_meta: n_head           = 8
0.00.857.350 I llm_load_print_meta: n_head_kv        = 1
0.00.857.352 I llm_load_print_meta: n_rot            = 256
0.00.857.353 I llm_load_print_meta: n_swa            = 0
0.00.857.354 I llm_load_print_meta: n_embd_head_k    = 256
0.00.857.355 I llm_load_print_meta: n_embd_head_v    = 256
0.00.857.360 I llm_load_print_meta: n_gqa            = 8
0.00.857.365 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.857.380 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.857.382 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.857.384 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.857.385 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.857.385 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.857.385 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.857.390 I llm_load_print_meta: n_ff             = 16384
0.00.857.391 I llm_load_print_meta: n_expert         = 0
0.00.857.391 I llm_load_print_meta: n_expert_used    = 0
0.00.857.392 I llm_load_print_meta: causal attn      = 1
0.00.857.396 I llm_load_print_meta: pooling type     = 0
0.00.857.397 I llm_load_print_meta: rope type        = 2
0.00.857.397 I llm_load_print_meta: rope scaling     = linear
0.00.857.414 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.857.415 I llm_load_print_meta: freq_scale_train = 1
0.00.857.416 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.857.416 I llm_load_print_meta: rope_finetuned   = unknown
0.00.857.416 I llm_load_print_meta: ssm_d_conv       = 0
0.00.857.426 I llm_load_print_meta: ssm_d_inner      = 0
0.00.857.426 I llm_load_print_meta: ssm_d_state      = 0
0.00.857.435 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.857.436 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.857.437 I llm_load_print_meta: model type       = 2B
0.00.857.438 I llm_load_print_meta: model ftype      = Q8_0
0.00.857.439 I llm_load_print_meta: model params     = 2.51 B
0.00.857.448 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.857.448 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.857.449 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.857.450 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.857.450 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.857.458 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.857.459 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.857.460 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.857.465 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.857.467 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.857.467 I llm_load_print_meta: max token length = 93
0.00.958.466 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.958.477 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.958.478 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.958.479 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.958.480 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.958.480 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.964.377 I llama_new_context_with_model: n_seq_max     = 1
0.00.964.385 I llama_new_context_with_model: n_ctx         = 4096
0.00.964.386 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.964.386 I llama_new_context_with_model: n_batch       = 2048
0.00.964.387 I llama_new_context_with_model: n_ubatch      = 512
0.00.964.387 I llama_new_context_with_model: flash_attn    = 0
0.00.964.389 I llama_new_context_with_model: freq_base     = 10000.0
0.00.964.390 I llama_new_context_with_model: freq_scale    = 1
0.00.964.390 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.978.895 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.978.933 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.979.058 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.981.611 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.981.616 I llama_new_context_with_model: graph nodes  = 601
0.00.981.616 I llama_new_context_with_model: graph splits = 1
0.00.981.639 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.614.138 I main: llama threadpool init, n_threads = 4
0.01.614.155 I 
0.01.614.270 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.614.274 I 
0.01.614.513 I sampler seed: 393043119
0.01.614.528 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.614.538 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.614.540 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.614.540 I 
 increasities in the modern world.

**Answer:**

**The rapid advancements and transformations in modern society have brought about significant increases in the occurrence and prevalence of

0.15.258.785 I llama_perf_sampler_print:    sampling time =      49.23 ms /    33 runs   (    1.49 ms per token,   670.35 tokens per second)
0.15.258.788 I llama_perf_context_print:        load time =    1613.16 ms
0.15.258.789 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.258.791 I llama_perf_context_print:        eval time =   13555.23 ms /    32 runs   (  423.60 ms per token,     2.36 tokens per second)
0.15.258.792 I llama_perf_context_print:       total time =   13644.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.629 I build: 4174 (0eb4e12b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.823 I main: llama backend init
0.00.000.831 I main: load the model and apply lora adapter, if any
0.00.023.265 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.360 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.374 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.379 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.385 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.389 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.391 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.392 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.393 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.394 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.401 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.403 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.404 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.405 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.407 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.726 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.886 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.780 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.788 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.789 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.790 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.792 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.793 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.795 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.799 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.800 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.802 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.803 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.348.805 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.813 I llama_model_loader: - type  f32:   37 tensors
0.00.348.815 I llama_model_loader: - type q8_0:  127 tensors
0.00.571.350 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.641.458 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.642.515 I llm_load_vocab: special tokens cache size = 5
0.00.828.908 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.828.982 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.828.986 I llm_load_print_meta: arch             = gemma
0.00.828.987 I llm_load_print_meta: vocab type       = SPM
0.00.828.988 I llm_load_print_meta: n_vocab          = 256000
0.00.828.990 I llm_load_print_meta: n_merges         = 0
0.00.828.991 I llm_load_print_meta: vocab_only       = 0
0.00.828.991 I llm_load_print_meta: n_ctx_train      = 8192
0.00.828.991 I llm_load_print_meta: n_embd           = 2048
0.00.828.992 I llm_load_print_meta: n_layer          = 18
0.00.829.057 I llm_load_print_meta: n_head           = 8
0.00.829.067 I llm_load_print_meta: n_head_kv        = 1
0.00.829.067 I llm_load_print_meta: n_rot            = 256
0.00.829.069 I llm_load_print_meta: n_swa            = 0
0.00.829.069 I llm_load_print_meta: n_embd_head_k    = 256
0.00.829.070 I llm_load_print_meta: n_embd_head_v    = 256
0.00.829.075 I llm_load_print_meta: n_gqa            = 8
0.00.829.079 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.829.085 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.829.089 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.829.090 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.829.090 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.829.091 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.829.091 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.829.096 I llm_load_print_meta: n_ff             = 16384
0.00.829.097 I llm_load_print_meta: n_expert         = 0
0.00.829.097 I llm_load_print_meta: n_expert_used    = 0
0.00.829.097 I llm_load_print_meta: causal attn      = 1
0.00.829.098 I llm_load_print_meta: pooling type     = 0
0.00.829.098 I llm_load_print_meta: rope type        = 2
0.00.829.098 I llm_load_print_meta: rope scaling     = linear
0.00.829.100 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.829.101 I llm_load_print_meta: freq_scale_train = 1
0.00.829.102 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.829.103 I llm_load_print_meta: rope_finetuned   = unknown
0.00.829.103 I llm_load_print_meta: ssm_d_conv       = 0
0.00.829.103 I llm_load_print_meta: ssm_d_inner      = 0
0.00.829.104 I llm_load_print_meta: ssm_d_state      = 0
0.00.829.104 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.829.105 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.829.105 I llm_load_print_meta: model type       = 2B
0.00.829.107 I llm_load_print_meta: model ftype      = Q8_0
0.00.829.108 I llm_load_print_meta: model params     = 2.51 B
0.00.829.136 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.829.137 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.829.139 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.829.140 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.829.141 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.829.141 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.829.142 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.829.142 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.829.148 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.829.149 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.829.150 I llm_load_print_meta: max token length = 93
0.00.925.077 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.931.072 I llama_new_context_with_model: n_seq_max     = 1
0.00.931.080 I llama_new_context_with_model: n_ctx         = 4096
0.00.931.080 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.931.081 I llama_new_context_with_model: n_batch       = 2048
0.00.931.081 I llama_new_context_with_model: n_ubatch      = 512
0.00.931.082 I llama_new_context_with_model: flash_attn    = 0
0.00.931.084 I llama_new_context_with_model: freq_base     = 10000.0
0.00.931.086 I llama_new_context_with_model: freq_scale    = 1
0.00.931.086 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.945.822 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.945.866 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.945.989 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.948.568 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.948.573 I llama_new_context_with_model: graph nodes  = 601
0.00.948.573 I llama_new_context_with_model: graph splits = 1
0.00.948.595 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.557.886 I main: llama threadpool init, n_threads = 4
0.01.557.902 I 
0.01.558.011 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.558.015 I 
0.01.558.248 I sampler seed: 3170191829
0.01.558.263 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.558.274 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.558.275 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.558.275 I 
 increasities by saying that they are inappropriate, offensive, or harmful. [end of text]


0.07.918.163 I llama_perf_sampler_print:    sampling time =      23.14 ms /    16 runs   (    1.45 ms per token,   691.50 tokens per second)
0.07.918.166 I llama_perf_context_print:        load time =    1556.97 ms
0.07.918.167 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.918.168 I llama_perf_context_print:        eval time =    6317.86 ms /    15 runs   (  421.19 ms per token,     2.37 tokens per second)
0.07.918.169 I llama_perf_context_print:       total time =    6360.29 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.653 I build: 4174 (0eb4e12b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.853 I main: llama backend init
0.00.000.861 I main: load the model and apply lora adapter, if any
0.00.023.531 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.542 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.633 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.646 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.648 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.655 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.671 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.676 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.677 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.678 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.679 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.690 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.691 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.692 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.693 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.695 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.826 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.222 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.039 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.047 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.048 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.050 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.051 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.052 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.054 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.058 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.059 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.061 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.062 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.348.063 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.072 I llama_model_loader: - type  f32:   37 tensors
0.00.348.074 I llama_model_loader: - type q8_0:  127 tensors
0.00.560.972 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.626.461 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.627.501 I llm_load_vocab: special tokens cache size = 5
0.00.808.255 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.808.326 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.808.328 I llm_load_print_meta: arch             = gemma
0.00.808.328 I llm_load_print_meta: vocab type       = SPM
0.00.808.329 I llm_load_print_meta: n_vocab          = 256000
0.00.808.331 I llm_load_print_meta: n_merges         = 0
0.00.808.331 I llm_load_print_meta: vocab_only       = 0
0.00.808.332 I llm_load_print_meta: n_ctx_train      = 8192
0.00.808.332 I llm_load_print_meta: n_embd           = 2048
0.00.808.332 I llm_load_print_meta: n_layer          = 18
0.00.808.395 I llm_load_print_meta: n_head           = 8
0.00.808.422 I llm_load_print_meta: n_head_kv        = 1
0.00.808.423 I llm_load_print_meta: n_rot            = 256
0.00.808.424 I llm_load_print_meta: n_swa            = 0
0.00.808.424 I llm_load_print_meta: n_embd_head_k    = 256
0.00.808.424 I llm_load_print_meta: n_embd_head_v    = 256
0.00.808.430 I llm_load_print_meta: n_gqa            = 8
0.00.808.434 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.808.447 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.808.449 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.808.456 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.808.456 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.808.459 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.808.460 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.808.468 I llm_load_print_meta: n_ff             = 16384
0.00.808.469 I llm_load_print_meta: n_expert         = 0
0.00.808.469 I llm_load_print_meta: n_expert_used    = 0
0.00.808.470 I llm_load_print_meta: causal attn      = 1
0.00.808.470 I llm_load_print_meta: pooling type     = 0
0.00.808.470 I llm_load_print_meta: rope type        = 2
0.00.808.471 I llm_load_print_meta: rope scaling     = linear
0.00.808.473 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.808.480 I llm_load_print_meta: freq_scale_train = 1
0.00.808.481 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.808.481 I llm_load_print_meta: rope_finetuned   = unknown
0.00.808.481 I llm_load_print_meta: ssm_d_conv       = 0
0.00.808.488 I llm_load_print_meta: ssm_d_inner      = 0
0.00.808.489 I llm_load_print_meta: ssm_d_state      = 0
0.00.808.489 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.808.490 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.808.497 I llm_load_print_meta: model type       = 2B
0.00.808.498 I llm_load_print_meta: model ftype      = Q8_0
0.00.808.499 I llm_load_print_meta: model params     = 2.51 B
0.00.808.507 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.808.507 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.808.515 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.808.522 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.808.523 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.808.524 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.808.524 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.808.525 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.808.530 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.808.531 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.808.532 I llm_load_print_meta: max token length = 93
0.00.883.468 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.883.474 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.883.476 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.883.476 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.883.477 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.883.478 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.889.300 I llama_new_context_with_model: n_seq_max     = 1
0.00.889.307 I llama_new_context_with_model: n_ctx         = 4096
0.00.889.308 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.889.308 I llama_new_context_with_model: n_batch       = 2048
0.00.889.309 I llama_new_context_with_model: n_ubatch      = 512
0.00.889.310 I llama_new_context_with_model: flash_attn    = 0
0.00.889.312 I llama_new_context_with_model: freq_base     = 10000.0
0.00.889.313 I llama_new_context_with_model: freq_scale    = 1
0.00.889.314 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.903.948 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.903.989 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.904.112 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.906.630 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.906.634 I llama_new_context_with_model: graph nodes  = 601
0.00.906.634 I llama_new_context_with_model: graph splits = 1
0.00.906.658 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.518.035 I main: llama threadpool init, n_threads = 4
0.01.518.049 I 
0.01.518.162 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.518.166 I 
0.01.518.400 I sampler seed: 2115895255
0.01.518.414 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.518.426 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.518.426 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.518.427 I 
 seconally.

The question is about writing a paragraph about the importance of music in our lives.

Music plays a vital role in shaping our emotional experiences and

0.15.235.386 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.25 tokens per second)
0.15.235.391 I llama_perf_context_print:        load time =    1517.08 ms
0.15.235.392 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.235.394 I llama_perf_context_print:        eval time =   13628.35 ms /    32 runs   (  425.89 ms per token,     2.35 tokens per second)
0.15.235.395 I llama_perf_context_print:       total time =   13717.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.653 I build: 4174 (0eb4e12b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.863 I main: llama backend init
0.00.000.871 I main: load the model and apply lora adapter, if any
0.00.023.722 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.733 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.833 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.847 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.850 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.858 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.864 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.866 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.878 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.882 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.884 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.895 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.901 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.903 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.906 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.913 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.319 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.774 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.614 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.626 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.627 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.628 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.630 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.631 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.633 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.637 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.639 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.640 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.641 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.348.643 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.653 I llama_model_loader: - type  f32:   37 tensors
0.00.348.655 I llama_model_loader: - type q8_0:  127 tensors
0.00.598.201 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.661.426 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.662.418 I llm_load_vocab: special tokens cache size = 5
0.00.856.397 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.856.470 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.856.471 I llm_load_print_meta: arch             = gemma
0.00.856.471 I llm_load_print_meta: vocab type       = SPM
0.00.856.472 I llm_load_print_meta: n_vocab          = 256000
0.00.856.474 I llm_load_print_meta: n_merges         = 0
0.00.856.475 I llm_load_print_meta: vocab_only       = 0
0.00.856.475 I llm_load_print_meta: n_ctx_train      = 8192
0.00.856.476 I llm_load_print_meta: n_embd           = 2048
0.00.856.476 I llm_load_print_meta: n_layer          = 18
0.00.856.543 I llm_load_print_meta: n_head           = 8
0.00.856.551 I llm_load_print_meta: n_head_kv        = 1
0.00.856.551 I llm_load_print_meta: n_rot            = 256
0.00.856.552 I llm_load_print_meta: n_swa            = 0
0.00.856.552 I llm_load_print_meta: n_embd_head_k    = 256
0.00.856.552 I llm_load_print_meta: n_embd_head_v    = 256
0.00.856.568 I llm_load_print_meta: n_gqa            = 8
0.00.856.575 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.856.582 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.856.584 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.856.586 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.856.588 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.856.598 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.856.599 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.856.605 I llm_load_print_meta: n_ff             = 16384
0.00.856.606 I llm_load_print_meta: n_expert         = 0
0.00.856.608 I llm_load_print_meta: n_expert_used    = 0
0.00.856.608 I llm_load_print_meta: causal attn      = 1
0.00.856.609 I llm_load_print_meta: pooling type     = 0
0.00.856.610 I llm_load_print_meta: rope type        = 2
0.00.856.611 I llm_load_print_meta: rope scaling     = linear
0.00.856.612 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.856.613 I llm_load_print_meta: freq_scale_train = 1
0.00.856.614 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.856.615 I llm_load_print_meta: rope_finetuned   = unknown
0.00.856.616 I llm_load_print_meta: ssm_d_conv       = 0
0.00.856.617 I llm_load_print_meta: ssm_d_inner      = 0
0.00.856.617 I llm_load_print_meta: ssm_d_state      = 0
0.00.856.618 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.856.619 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.856.620 I llm_load_print_meta: model type       = 2B
0.00.856.622 I llm_load_print_meta: model ftype      = Q8_0
0.00.856.623 I llm_load_print_meta: model params     = 2.51 B
0.00.856.636 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.856.637 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.856.638 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.856.639 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.856.643 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.856.644 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.856.644 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.856.645 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.856.652 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.856.656 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.856.657 I llm_load_print_meta: max token length = 93
0.00.932.968 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.932.978 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.939.156 I llama_new_context_with_model: n_seq_max     = 1
0.00.939.163 I llama_new_context_with_model: n_ctx         = 4096
0.00.939.164 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.939.164 I llama_new_context_with_model: n_batch       = 2048
0.00.939.165 I llama_new_context_with_model: n_ubatch      = 512
0.00.939.165 I llama_new_context_with_model: flash_attn    = 0
0.00.939.168 I llama_new_context_with_model: freq_base     = 10000.0
0.00.939.168 I llama_new_context_with_model: freq_scale    = 1
0.00.939.169 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.953.750 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.953.792 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.953.930 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.956.557 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.956.561 I llama_new_context_with_model: graph nodes  = 601
0.00.956.561 I llama_new_context_with_model: graph splits = 1
0.00.956.586 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.598.364 I main: llama threadpool init, n_threads = 4
0.01.598.380 I 
0.01.598.507 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.598.510 I 
0.01.598.758 I sampler seed: 658502997
0.01.598.772 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.598.784 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.598.785 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.598.785 I 
 increably.

I am unable to generate a response as requested because the provided context does not contain any information regarding the capability to generate creative or original content.

0.15.189.286 I llama_perf_sampler_print:    sampling time =      49.01 ms /    33 runs   (    1.49 ms per token,   673.29 tokens per second)
0.15.189.288 I llama_perf_context_print:        load time =    1597.39 ms
0.15.189.290 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.189.292 I llama_perf_context_print:        eval time =   13502.03 ms /    32 runs   (  421.94 ms per token,     2.37 tokens per second)
0.15.189.316 I llama_perf_context_print:       total time =   13590.93 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m3.181s
user	3m23.078s
sys	0m9.355s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4174 (0eb4e12b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186564.36 ms
main:    total time = 186564.36 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.646 I build: 4174 (0eb4e12b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.000.847 I main: load the model and apply lora adapter, if any
0.00.023.507 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.516 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.611 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.623 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.625 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.632 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.636 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.637 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.639 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.640 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.641 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.651 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.654 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.655 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.657 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.658 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.900 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.413 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.374 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.383 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.385 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.386 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.387 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.389 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.390 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.395 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.396 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.397 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.399 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.348.400 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.409 I llama_model_loader: - type  f32:   37 tensors
0.00.348.411 I llama_model_loader: - type q4_K:  108 tensors
0.00.348.412 I llama_model_loader: - type q6_K:   19 tensors
0.00.567.625 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.626.295 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.627.251 I llm_load_vocab: special tokens cache size = 5
0.00.819.742 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.819.818 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.819.819 I llm_load_print_meta: arch             = gemma
0.00.819.820 I llm_load_print_meta: vocab type       = SPM
0.00.819.821 I llm_load_print_meta: n_vocab          = 256000
0.00.819.823 I llm_load_print_meta: n_merges         = 0
0.00.819.823 I llm_load_print_meta: vocab_only       = 0
0.00.819.824 I llm_load_print_meta: n_ctx_train      = 8192
0.00.819.824 I llm_load_print_meta: n_embd           = 2048
0.00.819.824 I llm_load_print_meta: n_layer          = 18
0.00.819.888 I llm_load_print_meta: n_head           = 8
0.00.819.895 I llm_load_print_meta: n_head_kv        = 1
0.00.819.896 I llm_load_print_meta: n_rot            = 256
0.00.819.897 I llm_load_print_meta: n_swa            = 0
0.00.819.897 I llm_load_print_meta: n_embd_head_k    = 256
0.00.819.897 I llm_load_print_meta: n_embd_head_v    = 256
0.00.819.902 I llm_load_print_meta: n_gqa            = 8
0.00.819.907 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.819.912 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.819.914 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.819.916 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.819.917 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.819.917 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.819.929 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.819.934 I llm_load_print_meta: n_ff             = 16384
0.00.819.935 I llm_load_print_meta: n_expert         = 0
0.00.819.937 I llm_load_print_meta: n_expert_used    = 0
0.00.819.937 I llm_load_print_meta: causal attn      = 1
0.00.819.938 I llm_load_print_meta: pooling type     = 0
0.00.819.938 I llm_load_print_meta: rope type        = 2
0.00.819.951 I llm_load_print_meta: rope scaling     = linear
0.00.819.957 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.819.957 I llm_load_print_meta: freq_scale_train = 1
0.00.819.965 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.819.966 I llm_load_print_meta: rope_finetuned   = unknown
0.00.819.969 I llm_load_print_meta: ssm_d_conv       = 0
0.00.819.969 I llm_load_print_meta: ssm_d_inner      = 0
0.00.819.970 I llm_load_print_meta: ssm_d_state      = 0
0.00.819.970 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.819.970 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.819.971 I llm_load_print_meta: model type       = 2B
0.00.819.972 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.819.972 I llm_load_print_meta: model params     = 2.51 B
0.00.819.982 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.819.982 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.819.983 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.819.984 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.819.984 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.819.985 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.819.986 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.819.987 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.819.993 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.819.995 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.819.996 I llm_load_print_meta: max token length = 93
0.00.882.357 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.882.369 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.882.370 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.882.370 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.882.371 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.882.372 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.888.149 I llama_new_context_with_model: n_seq_max     = 1
0.00.888.157 I llama_new_context_with_model: n_ctx         = 4096
0.00.888.158 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.888.158 I llama_new_context_with_model: n_batch       = 2048
0.00.888.158 I llama_new_context_with_model: n_ubatch      = 512
0.00.888.159 I llama_new_context_with_model: flash_attn    = 0
0.00.888.162 I llama_new_context_with_model: freq_base     = 10000.0
0.00.888.163 I llama_new_context_with_model: freq_scale    = 1
0.00.888.164 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.903.762 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.903.807 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.903.938 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.906.527 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.906.530 I llama_new_context_with_model: graph nodes  = 601
0.00.906.530 I llama_new_context_with_model: graph splits = 1
0.00.906.553 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.489.301 I main: llama threadpool init, n_threads = 4
0.01.489.317 I 
0.01.489.434 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.489.438 I 
0.01.489.673 I sampler seed: 938207513
0.01.489.687 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.489.700 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.489.701 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.489.702 I 
 seconally with an umbrella.

The sentence is from a poem and I am having trouble understanding the meaning.

Could you paraphrase the sentence for me?



0.12.619.644 I llama_perf_sampler_print:    sampling time =      49.13 ms /    33 runs   (    1.49 ms per token,   671.65 tokens per second)
0.12.619.646 I llama_perf_context_print:        load time =    1488.36 ms
0.12.619.648 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.619.662 I llama_perf_context_print:        eval time =   11041.34 ms /    32 runs   (  345.04 ms per token,     2.90 tokens per second)
0.12.619.664 I llama_perf_context_print:       total time =   11130.35 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4174 (0eb4e12b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186376.97 ms
main:    total time = 186376.97 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 4174 (0eb4e12b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.831 I main: llama backend init
0.00.000.839 I main: load the model and apply lora adapter, if any
0.00.023.169 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.273 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.288 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.290 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.296 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.301 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.302 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.303 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.305 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.306 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.311 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.312 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.314 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.316 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.324 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.531 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.957 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.808 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.815 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.817 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.818 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.819 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.821 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.822 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.826 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.828 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.835 I llama_model_loader: - type  f32:   37 tensors
0.00.349.838 I llama_model_loader: - type q4_K:  108 tensors
0.00.349.839 I llama_model_loader: - type q6_K:   19 tensors
0.00.568.296 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.624.457 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.625.391 I llm_load_vocab: special tokens cache size = 5
0.00.824.153 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.824.228 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.824.229 I llm_load_print_meta: arch             = gemma
0.00.824.230 I llm_load_print_meta: vocab type       = SPM
0.00.824.231 I llm_load_print_meta: n_vocab          = 256000
0.00.824.234 I llm_load_print_meta: n_merges         = 0
0.00.824.234 I llm_load_print_meta: vocab_only       = 0
0.00.824.234 I llm_load_print_meta: n_ctx_train      = 8192
0.00.824.235 I llm_load_print_meta: n_embd           = 2048
0.00.824.235 I llm_load_print_meta: n_layer          = 18
0.00.824.299 I llm_load_print_meta: n_head           = 8
0.00.824.309 I llm_load_print_meta: n_head_kv        = 1
0.00.824.310 I llm_load_print_meta: n_rot            = 256
0.00.824.312 I llm_load_print_meta: n_swa            = 0
0.00.824.313 I llm_load_print_meta: n_embd_head_k    = 256
0.00.824.313 I llm_load_print_meta: n_embd_head_v    = 256
0.00.824.318 I llm_load_print_meta: n_gqa            = 8
0.00.824.323 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.824.328 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.824.331 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.824.332 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.824.333 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.824.333 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.824.334 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.824.347 I llm_load_print_meta: n_ff             = 16384
0.00.824.349 I llm_load_print_meta: n_expert         = 0
0.00.824.349 I llm_load_print_meta: n_expert_used    = 0
0.00.824.349 I llm_load_print_meta: causal attn      = 1
0.00.824.361 I llm_load_print_meta: pooling type     = 0
0.00.824.361 I llm_load_print_meta: rope type        = 2
0.00.824.370 I llm_load_print_meta: rope scaling     = linear
0.00.824.375 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.824.376 I llm_load_print_meta: freq_scale_train = 1
0.00.824.376 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.824.377 I llm_load_print_meta: rope_finetuned   = unknown
0.00.824.377 I llm_load_print_meta: ssm_d_conv       = 0
0.00.824.378 I llm_load_print_meta: ssm_d_inner      = 0
0.00.824.378 I llm_load_print_meta: ssm_d_state      = 0
0.00.824.378 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.824.379 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.824.379 I llm_load_print_meta: model type       = 2B
0.00.824.380 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.824.381 I llm_load_print_meta: model params     = 2.51 B
0.00.824.391 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.824.391 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.824.392 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.824.393 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.824.393 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.824.396 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.824.397 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.824.397 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.824.404 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.824.405 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.824.406 I llm_load_print_meta: max token length = 93
0.00.880.464 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.886.275 I llama_new_context_with_model: n_seq_max     = 1
0.00.886.284 I llama_new_context_with_model: n_ctx         = 4096
0.00.886.284 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.886.285 I llama_new_context_with_model: n_batch       = 2048
0.00.886.285 I llama_new_context_with_model: n_ubatch      = 512
0.00.886.286 I llama_new_context_with_model: flash_attn    = 0
0.00.886.289 I llama_new_context_with_model: freq_base     = 10000.0
0.00.886.289 I llama_new_context_with_model: freq_scale    = 1
0.00.886.290 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.901.075 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.901.120 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.901.241 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.903.833 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.903.838 I llama_new_context_with_model: graph nodes  = 601
0.00.903.838 I llama_new_context_with_model: graph splits = 1
0.00.903.862 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.490.033 I main: llama threadpool init, n_threads = 4
0.01.490.048 I 
0.01.490.163 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.490.168 I 
0.01.490.405 I sampler seed: 2101535522
0.01.490.419 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.490.431 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.490.432 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.490.432 I 
 squaRELLA: A poem about the power of silence

**Silence**

The hush of wind beneath withered leaves,
Echoes in the caverns deep and

0.12.589.034 I llama_perf_sampler_print:    sampling time =      49.15 ms /    33 runs   (    1.49 ms per token,   671.40 tokens per second)
0.12.589.037 I llama_perf_context_print:        load time =    1489.11 ms
0.12.589.038 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.589.040 I llama_perf_context_print:        eval time =   11010.22 ms /    32 runs   (  344.07 ms per token,     2.91 tokens per second)
0.12.589.041 I llama_perf_context_print:       total time =   11099.01 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m41.032s
user	46m43.664s
sys	0m6.356s
