+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.563 I build: 4174 (0eb4e12b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.760 I main: llama backend init
0.00.000.767 I main: load the model and apply lora adapter, if any
0.00.022.180 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.190 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.197 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.201 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.202 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.205 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.205 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.206 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.207 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.208 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.208 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.212 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.212 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.213 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.214 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.215 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.687 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.885 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.718 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.725 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.726 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.726 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.727 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.728 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.730 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.733 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.734 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.735 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.736 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.737 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.741 I llama_model_loader: - type  f32:   37 tensors
0.00.132.742 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.110 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.639 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.190 I llm_load_vocab: special tokens cache size = 5
0.00.263.264 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.287 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.288 I llm_load_print_meta: arch             = gemma
0.00.263.289 I llm_load_print_meta: vocab type       = SPM
0.00.263.289 I llm_load_print_meta: n_vocab          = 256000
0.00.263.290 I llm_load_print_meta: n_merges         = 0
0.00.263.290 I llm_load_print_meta: vocab_only       = 0
0.00.263.290 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.291 I llm_load_print_meta: n_embd           = 2048
0.00.263.291 I llm_load_print_meta: n_layer          = 18
0.00.263.302 I llm_load_print_meta: n_head           = 8
0.00.263.302 I llm_load_print_meta: n_head_kv        = 1
0.00.263.303 I llm_load_print_meta: n_rot            = 256
0.00.263.303 I llm_load_print_meta: n_swa            = 0
0.00.263.304 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.304 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.305 I llm_load_print_meta: n_gqa            = 8
0.00.263.306 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.307 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.308 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.309 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.309 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.310 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.310 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.311 I llm_load_print_meta: n_ff             = 16384
0.00.263.311 I llm_load_print_meta: n_expert         = 0
0.00.263.312 I llm_load_print_meta: n_expert_used    = 0
0.00.263.312 I llm_load_print_meta: causal attn      = 1
0.00.263.312 I llm_load_print_meta: pooling type     = 0
0.00.263.313 I llm_load_print_meta: rope type        = 2
0.00.263.313 I llm_load_print_meta: rope scaling     = linear
0.00.263.315 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.316 I llm_load_print_meta: freq_scale_train = 1
0.00.263.316 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.317 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.317 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.317 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.317 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.318 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.318 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.318 I llm_load_print_meta: model type       = 2B
0.00.263.319 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.320 I llm_load_print_meta: model params     = 2.51 B
0.00.263.321 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.321 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.322 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.322 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.323 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.323 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.324 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.324 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.324 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.325 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.325 I llm_load_print_meta: max token length = 93
0.00.363.972 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.363.978 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.363.980 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.363.980 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.363.981 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.363.981 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.370.147 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.153 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.154 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.154 I llama_new_context_with_model: n_batch       = 2048
0.00.370.155 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.155 I llama_new_context_with_model: flash_attn    = 0
0.00.370.157 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.158 I llama_new_context_with_model: freq_scale    = 1
0.00.370.159 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.384.469 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.483 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.570 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.863 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.870 I llama_new_context_with_model: graph nodes  = 601
0.00.385.871 I llama_new_context_with_model: graph splits = 1
0.00.385.873 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.813 I main: llama threadpool init, n_threads = 4
0.00.470.828 I 
0.00.470.900 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.470.903 I 
0.00.470.944 I sampler seed: 3300813501
0.00.470.955 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.966 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.969 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.969 I 
 increasities. 

I am unable to generate a response that contains sexually suggestive or explicit language. [end of text]


0.01.945.711 I llama_perf_sampler_print:    sampling time =       3.32 ms /    22 runs   (    0.15 ms per token,  6634.50 tokens per second)
0.01.945.714 I llama_perf_context_print:        load time =     470.03 ms
0.01.945.715 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.945.716 I llama_perf_context_print:        eval time =    1462.21 ms /    21 runs   (   69.63 ms per token,    14.36 tokens per second)
0.01.945.717 I llama_perf_context_print:       total time =    1474.91 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.587 I build: 4174 (0eb4e12b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.783 I main: llama backend init
0.00.000.790 I main: load the model and apply lora adapter, if any
0.00.021.299 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.314 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.324 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.328 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.332 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.332 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.333 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.334 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.335 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.335 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.339 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.339 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.340 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.340 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.341 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.604 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.641 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.819 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.825 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.825 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.826 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.826 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.827 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.828 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.830 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.831 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.831 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.833 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.834 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.837 I llama_model_loader: - type  f32:   37 tensors
0.00.133.838 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.505 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.558 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.062 I llm_load_vocab: special tokens cache size = 5
0.00.262.032 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.045 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.045 I llm_load_print_meta: arch             = gemma
0.00.262.046 I llm_load_print_meta: vocab type       = SPM
0.00.262.047 I llm_load_print_meta: n_vocab          = 256000
0.00.262.047 I llm_load_print_meta: n_merges         = 0
0.00.262.047 I llm_load_print_meta: vocab_only       = 0
0.00.262.047 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.048 I llm_load_print_meta: n_embd           = 2048
0.00.262.048 I llm_load_print_meta: n_layer          = 18
0.00.262.059 I llm_load_print_meta: n_head           = 8
0.00.262.060 I llm_load_print_meta: n_head_kv        = 1
0.00.262.061 I llm_load_print_meta: n_rot            = 256
0.00.262.061 I llm_load_print_meta: n_swa            = 0
0.00.262.061 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.062 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.063 I llm_load_print_meta: n_gqa            = 8
0.00.262.064 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.065 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.065 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.066 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.067 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.067 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.068 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.068 I llm_load_print_meta: n_ff             = 16384
0.00.262.069 I llm_load_print_meta: n_expert         = 0
0.00.262.069 I llm_load_print_meta: n_expert_used    = 0
0.00.262.069 I llm_load_print_meta: causal attn      = 1
0.00.262.070 I llm_load_print_meta: pooling type     = 0
0.00.262.070 I llm_load_print_meta: rope type        = 2
0.00.262.070 I llm_load_print_meta: rope scaling     = linear
0.00.262.072 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.072 I llm_load_print_meta: freq_scale_train = 1
0.00.262.072 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.073 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.073 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.073 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.074 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.074 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.074 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.075 I llm_load_print_meta: model type       = 2B
0.00.262.075 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.076 I llm_load_print_meta: model params     = 2.51 B
0.00.262.077 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.078 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.078 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.079 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.079 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.079 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.080 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.080 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.080 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.081 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.081 I llm_load_print_meta: max token length = 93
0.00.357.124 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.362.331 I llama_new_context_with_model: n_seq_max     = 1
0.00.362.337 I llama_new_context_with_model: n_ctx         = 4096
0.00.362.337 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.362.338 I llama_new_context_with_model: n_batch       = 2048
0.00.362.338 I llama_new_context_with_model: n_ubatch      = 512
0.00.362.338 I llama_new_context_with_model: flash_attn    = 0
0.00.362.340 I llama_new_context_with_model: freq_base     = 10000.0
0.00.362.341 I llama_new_context_with_model: freq_scale    = 1
0.00.362.342 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.376.845 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.376.859 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.376.950 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.378.216 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.378.220 I llama_new_context_with_model: graph nodes  = 601
0.00.378.220 I llama_new_context_with_model: graph splits = 1
0.00.378.222 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.458.283 I main: llama threadpool init, n_threads = 4
0.00.458.298 I 
0.00.458.367 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.458.371 I 
0.00.458.417 I sampler seed: 2597617218
0.00.458.428 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.458.440 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.458.443 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.458.444 I 
 increadibly and ask the question.

What are some practical ways to improve the security of a website?

**Practical ways to improve the security of a website

0.02.620.371 I llama_perf_sampler_print:    sampling time =       4.85 ms /    33 runs   (    0.15 ms per token,  6801.32 tokens per second)
0.02.620.373 I llama_perf_context_print:        load time =     457.47 ms
0.02.620.375 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.620.376 I llama_perf_context_print:        eval time =    2142.76 ms /    32 runs   (   66.96 ms per token,    14.93 tokens per second)
0.02.620.377 I llama_perf_context_print:       total time =    2162.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.575 I build: 4174 (0eb4e12b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.775 I main: llama backend init
0.00.000.782 I main: load the model and apply lora adapter, if any
0.00.021.213 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.224 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.231 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.236 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.237 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.242 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.242 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.243 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.243 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.244 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.244 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.248 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.249 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.249 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.250 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.250 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.153 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.296 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.125 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.131 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.132 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.133 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.133 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.134 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.135 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.137 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.137 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.139 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.139 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.140 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.144 I llama_model_loader: - type  f32:   37 tensors
0.00.132.145 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.399 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.891 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.601 I llm_load_vocab: special tokens cache size = 5
0.00.267.045 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.064 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.065 I llm_load_print_meta: arch             = gemma
0.00.267.065 I llm_load_print_meta: vocab type       = SPM
0.00.267.066 I llm_load_print_meta: n_vocab          = 256000
0.00.267.066 I llm_load_print_meta: n_merges         = 0
0.00.267.067 I llm_load_print_meta: vocab_only       = 0
0.00.267.067 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.067 I llm_load_print_meta: n_embd           = 2048
0.00.267.068 I llm_load_print_meta: n_layer          = 18
0.00.267.080 I llm_load_print_meta: n_head           = 8
0.00.267.081 I llm_load_print_meta: n_head_kv        = 1
0.00.267.082 I llm_load_print_meta: n_rot            = 256
0.00.267.082 I llm_load_print_meta: n_swa            = 0
0.00.267.082 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.082 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.083 I llm_load_print_meta: n_gqa            = 8
0.00.267.084 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.085 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.086 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.088 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.088 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.088 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.089 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.090 I llm_load_print_meta: n_ff             = 16384
0.00.267.090 I llm_load_print_meta: n_expert         = 0
0.00.267.090 I llm_load_print_meta: n_expert_used    = 0
0.00.267.090 I llm_load_print_meta: causal attn      = 1
0.00.267.091 I llm_load_print_meta: pooling type     = 0
0.00.267.091 I llm_load_print_meta: rope type        = 2
0.00.267.091 I llm_load_print_meta: rope scaling     = linear
0.00.267.093 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.094 I llm_load_print_meta: freq_scale_train = 1
0.00.267.094 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.094 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.095 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.095 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.095 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.095 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.095 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.096 I llm_load_print_meta: model type       = 2B
0.00.267.096 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.097 I llm_load_print_meta: model params     = 2.51 B
0.00.267.098 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.098 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.099 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.099 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.100 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.100 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.100 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.101 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.101 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.102 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.102 I llm_load_print_meta: max token length = 93
0.00.340.643 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.340.648 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.340.649 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.340.650 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.340.650 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.340.651 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.345.830 I llama_new_context_with_model: n_seq_max     = 1
0.00.345.837 I llama_new_context_with_model: n_ctx         = 4096
0.00.345.837 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.345.838 I llama_new_context_with_model: n_batch       = 2048
0.00.345.838 I llama_new_context_with_model: n_ubatch      = 512
0.00.345.839 I llama_new_context_with_model: flash_attn    = 0
0.00.345.841 I llama_new_context_with_model: freq_base     = 10000.0
0.00.345.842 I llama_new_context_with_model: freq_scale    = 1
0.00.345.843 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.360.331 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.360.344 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.360.442 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.665 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.671 I llama_new_context_with_model: graph nodes  = 601
0.00.361.672 I llama_new_context_with_model: graph splits = 1
0.00.361.674 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.449.327 I main: llama threadpool init, n_threads = 4
0.00.449.344 I 
0.00.449.416 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.449.420 I 
0.00.449.461 I sampler seed: 1922790741
0.00.449.471 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.449.482 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.449.485 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.449.485 I 
 increasities as the main or primary focus in the research, rather than the individual characteristics and their interactions. [end of text]


0.02.006.294 I llama_perf_sampler_print:    sampling time =       3.44 ms /    23 runs   (    0.15 ms per token,  6684.10 tokens per second)
0.02.006.297 I llama_perf_context_print:        load time =     448.53 ms
0.02.006.298 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.006.300 I llama_perf_context_print:        eval time =    1543.90 ms /    22 runs   (   70.18 ms per token,    14.25 tokens per second)
0.02.006.300 I llama_perf_context_print:       total time =    1556.98 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.587 I build: 4174 (0eb4e12b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.783 I main: llama backend init
0.00.000.789 I main: load the model and apply lora adapter, if any
0.00.021.238 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.247 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.254 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.259 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.260 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.263 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.264 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.265 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.266 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.266 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.267 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.270 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.271 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.272 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.272 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.272 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.013 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.972 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.800 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.806 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.807 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.808 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.808 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.809 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.810 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.812 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.813 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.814 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.815 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.816 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.819 I llama_model_loader: - type  f32:   37 tensors
0.00.131.821 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.618 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.110 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.599 I llm_load_vocab: special tokens cache size = 5
0.00.267.492 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.511 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.512 I llm_load_print_meta: arch             = gemma
0.00.267.512 I llm_load_print_meta: vocab type       = SPM
0.00.267.513 I llm_load_print_meta: n_vocab          = 256000
0.00.267.513 I llm_load_print_meta: n_merges         = 0
0.00.267.514 I llm_load_print_meta: vocab_only       = 0
0.00.267.514 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.514 I llm_load_print_meta: n_embd           = 2048
0.00.267.514 I llm_load_print_meta: n_layer          = 18
0.00.267.526 I llm_load_print_meta: n_head           = 8
0.00.267.527 I llm_load_print_meta: n_head_kv        = 1
0.00.267.527 I llm_load_print_meta: n_rot            = 256
0.00.267.528 I llm_load_print_meta: n_swa            = 0
0.00.267.528 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.528 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.529 I llm_load_print_meta: n_gqa            = 8
0.00.267.530 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.531 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.532 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.533 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.534 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.535 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.535 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.536 I llm_load_print_meta: n_ff             = 16384
0.00.267.536 I llm_load_print_meta: n_expert         = 0
0.00.267.536 I llm_load_print_meta: n_expert_used    = 0
0.00.267.537 I llm_load_print_meta: causal attn      = 1
0.00.267.537 I llm_load_print_meta: pooling type     = 0
0.00.267.537 I llm_load_print_meta: rope type        = 2
0.00.267.539 I llm_load_print_meta: rope scaling     = linear
0.00.267.540 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.541 I llm_load_print_meta: freq_scale_train = 1
0.00.267.541 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.542 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.542 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.542 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.542 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.542 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.543 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.543 I llm_load_print_meta: model type       = 2B
0.00.267.544 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.545 I llm_load_print_meta: model params     = 2.51 B
0.00.267.546 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.546 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.547 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.550 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.551 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.551 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.551 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.552 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.552 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.553 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.553 I llm_load_print_meta: max token length = 93
0.00.338.705 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.338.715 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.344.026 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.034 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.035 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.035 I llama_new_context_with_model: n_batch       = 2048
0.00.344.036 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.036 I llama_new_context_with_model: flash_attn    = 0
0.00.344.039 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.040 I llama_new_context_with_model: freq_scale    = 1
0.00.344.042 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.359.083 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.359.097 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.359.190 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.497 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.360.501 I llama_new_context_with_model: graph nodes  = 601
0.00.360.502 I llama_new_context_with_model: graph splits = 1
0.00.360.503 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.448.586 I main: llama threadpool init, n_threads = 4
0.00.448.602 I 
0.00.448.673 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.448.677 I 
0.00.448.722 I sampler seed: 4070068689
0.00.448.734 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.448.736 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.448.737 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.448.747 I 
 increasities with a dash of humor!

I am unable to provide sexually explicit or inappropriate responses. [end of text]


0.02.034.242 I llama_perf_sampler_print:    sampling time =       3.40 ms /    22 runs   (    0.15 ms per token,  6464.88 tokens per second)
0.02.034.244 I llama_perf_context_print:        load time =     447.78 ms
0.02.034.245 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.034.247 I llama_perf_context_print:        eval time =    1572.22 ms /    21 runs   (   74.87 ms per token,    13.36 tokens per second)
0.02.034.247 I llama_perf_context_print:       total time =    1585.66 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.164s
user	0m29.955s
sys	0m9.273s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4174 (0eb4e12b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40197.89 ms
main:    total time = 40197.89 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.185 I build: 4174 (0eb4e12b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.422 I main: llama backend init
0.00.000.428 I main: load the model and apply lora adapter, if any
0.00.020.744 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.756 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.766 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.771 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.772 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.777 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.778 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.779 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.780 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.780 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.781 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.787 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.788 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.789 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.790 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.792 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.945 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.307 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.162 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.168 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.169 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.170 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.170 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.172 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.172 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.176 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.177 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.178 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.178 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.179 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.183 I llama_model_loader: - type  f32:   37 tensors
0.00.132.185 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.185 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.664 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.014 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.566 I llm_load_vocab: special tokens cache size = 5
0.00.266.525 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.539 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.540 I llm_load_print_meta: arch             = gemma
0.00.266.540 I llm_load_print_meta: vocab type       = SPM
0.00.266.541 I llm_load_print_meta: n_vocab          = 256000
0.00.266.541 I llm_load_print_meta: n_merges         = 0
0.00.266.542 I llm_load_print_meta: vocab_only       = 0
0.00.266.542 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.542 I llm_load_print_meta: n_embd           = 2048
0.00.266.543 I llm_load_print_meta: n_layer          = 18
0.00.266.554 I llm_load_print_meta: n_head           = 8
0.00.266.555 I llm_load_print_meta: n_head_kv        = 1
0.00.266.556 I llm_load_print_meta: n_rot            = 256
0.00.266.556 I llm_load_print_meta: n_swa            = 0
0.00.266.556 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.556 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.557 I llm_load_print_meta: n_gqa            = 8
0.00.266.558 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.559 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.560 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.561 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.562 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.562 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.562 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.563 I llm_load_print_meta: n_ff             = 16384
0.00.266.565 I llm_load_print_meta: n_expert         = 0
0.00.266.565 I llm_load_print_meta: n_expert_used    = 0
0.00.266.566 I llm_load_print_meta: causal attn      = 1
0.00.266.566 I llm_load_print_meta: pooling type     = 0
0.00.266.567 I llm_load_print_meta: rope type        = 2
0.00.266.567 I llm_load_print_meta: rope scaling     = linear
0.00.266.586 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.586 I llm_load_print_meta: freq_scale_train = 1
0.00.266.587 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.587 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.587 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.588 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.588 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.588 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.589 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.589 I llm_load_print_meta: model type       = 2B
0.00.266.590 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.591 I llm_load_print_meta: model params     = 2.51 B
0.00.266.592 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.592 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.592 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.593 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.593 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.594 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.594 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.594 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.595 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.595 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.595 I llm_load_print_meta: max token length = 93
0.00.326.198 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.326.204 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.326.205 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.326.206 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.326.206 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.326.207 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.331.372 I llama_new_context_with_model: n_seq_max     = 1
0.00.331.377 I llama_new_context_with_model: n_ctx         = 4096
0.00.331.377 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.331.377 I llama_new_context_with_model: n_batch       = 2048
0.00.331.378 I llama_new_context_with_model: n_ubatch      = 512
0.00.331.378 I llama_new_context_with_model: flash_attn    = 0
0.00.331.381 I llama_new_context_with_model: freq_base     = 10000.0
0.00.331.382 I llama_new_context_with_model: freq_scale    = 1
0.00.331.383 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.345.713 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.345.726 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.345.815 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.132 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.347.136 I llama_new_context_with_model: graph nodes  = 601
0.00.347.136 I llama_new_context_with_model: graph splits = 1
0.00.347.138 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.977 I main: llama threadpool init, n_threads = 4
0.00.421.992 I 
0.00.422.079 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.422.083 I 
0.00.422.133 I sampler seed: 1102160538
0.00.422.144 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.157 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.422.161 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.422.162 I 
 seconded in the context of an emergency response.

**Definition:**

A response that is coordinated to address multiple types of emergencies that require prompt attention and requires

0.01.975.070 I llama_perf_sampler_print:    sampling time =       4.87 ms /    33 runs   (    0.15 ms per token,  6778.96 tokens per second)
0.01.975.073 I llama_perf_context_print:        load time =     421.53 ms
0.01.975.074 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.975.076 I llama_perf_context_print:        eval time =    1534.86 ms /    32 runs   (   47.96 ms per token,    20.85 tokens per second)
0.01.975.077 I llama_perf_context_print:       total time =    1553.10 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4174 (0eb4e12b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40172.46 ms
main:    total time = 40172.46 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.537 I build: 4174 (0eb4e12b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.728 I main: llama backend init
0.00.000.734 I main: load the model and apply lora adapter, if any
0.00.021.474 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.489 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.495 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.499 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.503 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.504 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.505 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.506 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.507 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.507 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.511 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.512 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.512 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.513 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.513 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.230 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.597 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.505 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.514 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.515 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.516 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.516 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.517 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.518 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.521 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.521 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.526 I llama_model_loader: - type  f32:   37 tensors
0.00.132.527 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.528 I llama_model_loader: - type q6_K:   19 tensors
0.00.210.417 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.221 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.727 I llm_load_vocab: special tokens cache size = 5
0.00.272.601 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.616 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.616 I llm_load_print_meta: arch             = gemma
0.00.272.617 I llm_load_print_meta: vocab type       = SPM
0.00.272.617 I llm_load_print_meta: n_vocab          = 256000
0.00.272.618 I llm_load_print_meta: n_merges         = 0
0.00.272.618 I llm_load_print_meta: vocab_only       = 0
0.00.272.619 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.619 I llm_load_print_meta: n_embd           = 2048
0.00.272.619 I llm_load_print_meta: n_layer          = 18
0.00.272.629 I llm_load_print_meta: n_head           = 8
0.00.272.630 I llm_load_print_meta: n_head_kv        = 1
0.00.272.631 I llm_load_print_meta: n_rot            = 256
0.00.272.631 I llm_load_print_meta: n_swa            = 0
0.00.272.631 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.631 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.632 I llm_load_print_meta: n_gqa            = 8
0.00.272.633 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.634 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.635 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.637 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.638 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.638 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.638 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.639 I llm_load_print_meta: n_ff             = 16384
0.00.272.639 I llm_load_print_meta: n_expert         = 0
0.00.272.639 I llm_load_print_meta: n_expert_used    = 0
0.00.272.640 I llm_load_print_meta: causal attn      = 1
0.00.272.640 I llm_load_print_meta: pooling type     = 0
0.00.272.640 I llm_load_print_meta: rope type        = 2
0.00.272.641 I llm_load_print_meta: rope scaling     = linear
0.00.272.642 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.643 I llm_load_print_meta: freq_scale_train = 1
0.00.272.643 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.644 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.644 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.644 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.644 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.645 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.645 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.645 I llm_load_print_meta: model type       = 2B
0.00.272.646 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.272.646 I llm_load_print_meta: model params     = 2.51 B
0.00.272.647 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.272.647 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.648 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.649 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.649 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.649 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.650 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.650 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.650 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.651 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.651 I llm_load_print_meta: max token length = 93
0.00.327.693 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.333.561 I llama_new_context_with_model: n_seq_max     = 1
0.00.333.567 I llama_new_context_with_model: n_ctx         = 4096
0.00.333.568 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.333.568 I llama_new_context_with_model: n_batch       = 2048
0.00.333.569 I llama_new_context_with_model: n_ubatch      = 512
0.00.333.570 I llama_new_context_with_model: flash_attn    = 0
0.00.333.572 I llama_new_context_with_model: freq_base     = 10000.0
0.00.333.573 I llama_new_context_with_model: freq_scale    = 1
0.00.333.574 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.348.640 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.348.654 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.348.745 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.978 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.349.983 I llama_new_context_with_model: graph nodes  = 601
0.00.349.984 I llama_new_context_with_model: graph splits = 1
0.00.349.986 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.424.203 I main: llama threadpool init, n_threads = 4
0.00.424.220 I 
0.00.424.295 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.424.298 I 
0.00.424.346 I sampler seed: 3735271856
0.00.424.359 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.424.373 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.424.376 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.424.377 I 
 maneuvously.

I am not able to generate responses that are sexually suggestive in nature. [end of text]


0.01.389.518 I llama_perf_sampler_print:    sampling time =       3.06 ms /    21 runs   (    0.15 ms per token,  6871.73 tokens per second)
0.01.389.521 I llama_perf_context_print:        load time =     423.45 ms
0.01.389.522 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.389.524 I llama_perf_context_print:        eval time =     953.70 ms /    20 runs   (   47.69 ms per token,    20.97 tokens per second)
0.01.389.525 I llama_perf_context_print:       total time =     965.32 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.521s
user	10m21.491s
sys	0m6.874s
