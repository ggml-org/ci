+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.562 I build: 3995 (61408e7f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.001.833 I main: load the model and apply lora adapter, if any
0.00.021.825 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.875 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.889 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.900 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.904 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.908 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.909 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.910 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.910 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.911 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.911 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.916 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.916 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.917 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.917 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.918 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.550 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.093 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.051 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.057 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.058 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.058 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.059 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.060 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.060 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.063 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.063 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.063 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.064 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.065 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.068 I llama_model_loader: - type  f32:   37 tensors
0.00.133.071 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.398 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.302 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.006 I llm_load_vocab: special tokens cache size = 5
0.00.274.820 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.841 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.842 I llm_load_print_meta: arch             = gemma
0.00.274.842 I llm_load_print_meta: vocab type       = SPM
0.00.274.843 I llm_load_print_meta: n_vocab          = 256000
0.00.274.844 I llm_load_print_meta: n_merges         = 0
0.00.274.844 I llm_load_print_meta: vocab_only       = 0
0.00.274.844 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.845 I llm_load_print_meta: n_embd           = 2048
0.00.274.845 I llm_load_print_meta: n_layer          = 18
0.00.274.858 I llm_load_print_meta: n_head           = 8
0.00.274.859 I llm_load_print_meta: n_head_kv        = 1
0.00.274.859 I llm_load_print_meta: n_rot            = 256
0.00.274.860 I llm_load_print_meta: n_swa            = 0
0.00.274.860 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.860 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.861 I llm_load_print_meta: n_gqa            = 8
0.00.274.862 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.863 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.864 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.866 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.866 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.867 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.867 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.868 I llm_load_print_meta: n_ff             = 16384
0.00.274.868 I llm_load_print_meta: n_expert         = 0
0.00.274.869 I llm_load_print_meta: n_expert_used    = 0
0.00.274.869 I llm_load_print_meta: causal attn      = 1
0.00.274.869 I llm_load_print_meta: pooling type     = 0
0.00.274.870 I llm_load_print_meta: rope type        = 2
0.00.274.870 I llm_load_print_meta: rope scaling     = linear
0.00.274.871 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.872 I llm_load_print_meta: freq_scale_train = 1
0.00.274.872 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.873 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.873 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.873 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.873 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.874 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.874 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.875 I llm_load_print_meta: model type       = 2B
0.00.274.875 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.876 I llm_load_print_meta: model params     = 2.51 B
0.00.274.877 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.877 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.878 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.878 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.879 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.879 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.880 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.880 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.881 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.881 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.881 I llm_load_print_meta: max token length = 93
0.00.383.220 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.383.230 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.383.231 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.383.231 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.383.232 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.383.233 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.388.266 I llama_new_context_with_model: n_ctx      = 8192
0.00.388.272 I llama_new_context_with_model: n_batch    = 2048
0.00.388.273 I llama_new_context_with_model: n_ubatch   = 512
0.00.388.273 I llama_new_context_with_model: flash_attn = 0
0.00.388.276 I llama_new_context_with_model: freq_base  = 10000.0
0.00.388.277 I llama_new_context_with_model: freq_scale = 1
0.00.416.829 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.416.844 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.416.937 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.418.770 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.418.775 I llama_new_context_with_model: graph nodes  = 601
0.00.418.776 I llama_new_context_with_model: graph splits = 1
0.00.418.777 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.508.520 I main: llama threadpool init, n_threads = 4
0.00.508.534 I 
0.00.508.611 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.508.614 I 
0.00.508.661 I sampler seed: 1984757120
0.00.508.673 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.508.675 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.508.676 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.508.677 I 
 increasities in the realm of artificial intelligence.

**Answer:**

**Artificial Intelligence (AI) is brimming with exciting possibilities, and one such field of immense

0.02.840.368 I llama_perf_sampler_print:    sampling time =       4.67 ms /    33 runs   (    0.14 ms per token,  7061.84 tokens per second)
0.02.840.370 I llama_perf_context_print:        load time =     506.67 ms
0.02.840.371 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.840.373 I llama_perf_context_print:        eval time =    2312.19 ms /    32 runs   (   72.26 ms per token,    13.84 tokens per second)
0.02.840.374 I llama_perf_context_print:       total time =    2331.85 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.537 I build: 3995 (61408e7f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.731 I main: llama backend init
0.00.001.830 I main: load the model and apply lora adapter, if any
0.00.022.373 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.388 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.399 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.400 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.406 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.409 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.410 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.410 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.411 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.411 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.416 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.417 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.418 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.418 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.419 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.700 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.740 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.652 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.658 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.659 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.659 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.660 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.660 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.661 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.663 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.664 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.664 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.665 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.666 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.669 I llama_model_loader: - type  f32:   37 tensors
0.00.132.672 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.719 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.130 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.693 I llm_load_vocab: special tokens cache size = 5
0.00.268.626 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.646 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.647 I llm_load_print_meta: arch             = gemma
0.00.268.647 I llm_load_print_meta: vocab type       = SPM
0.00.268.648 I llm_load_print_meta: n_vocab          = 256000
0.00.268.649 I llm_load_print_meta: n_merges         = 0
0.00.268.649 I llm_load_print_meta: vocab_only       = 0
0.00.268.649 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.650 I llm_load_print_meta: n_embd           = 2048
0.00.268.650 I llm_load_print_meta: n_layer          = 18
0.00.268.663 I llm_load_print_meta: n_head           = 8
0.00.268.664 I llm_load_print_meta: n_head_kv        = 1
0.00.268.664 I llm_load_print_meta: n_rot            = 256
0.00.268.665 I llm_load_print_meta: n_swa            = 0
0.00.268.665 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.665 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.666 I llm_load_print_meta: n_gqa            = 8
0.00.268.667 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.668 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.669 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.670 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.671 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.671 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.671 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.672 I llm_load_print_meta: n_ff             = 16384
0.00.268.672 I llm_load_print_meta: n_expert         = 0
0.00.268.673 I llm_load_print_meta: n_expert_used    = 0
0.00.268.673 I llm_load_print_meta: causal attn      = 1
0.00.268.673 I llm_load_print_meta: pooling type     = 0
0.00.268.674 I llm_load_print_meta: rope type        = 2
0.00.268.674 I llm_load_print_meta: rope scaling     = linear
0.00.268.675 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.676 I llm_load_print_meta: freq_scale_train = 1
0.00.268.676 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.676 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.677 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.677 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.678 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.678 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.678 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.679 I llm_load_print_meta: model type       = 2B
0.00.268.679 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.680 I llm_load_print_meta: model params     = 2.51 B
0.00.268.681 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.681 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.681 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.682 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.682 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.682 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.683 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.683 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.684 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.684 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.684 I llm_load_print_meta: max token length = 93
0.00.365.716 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.370.768 I llama_new_context_with_model: n_ctx      = 8192
0.00.370.776 I llama_new_context_with_model: n_batch    = 2048
0.00.370.776 I llama_new_context_with_model: n_ubatch   = 512
0.00.370.777 I llama_new_context_with_model: flash_attn = 0
0.00.370.779 I llama_new_context_with_model: freq_base  = 10000.0
0.00.370.780 I llama_new_context_with_model: freq_scale = 1
0.00.399.886 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.399.902 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.399.997 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.401.940 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.401.947 I llama_new_context_with_model: graph nodes  = 601
0.00.401.948 I llama_new_context_with_model: graph splits = 1
0.00.401.949 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.487.665 I main: llama threadpool init, n_threads = 4
0.00.487.679 I 
0.00.487.752 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.487.755 I 
0.00.487.799 I sampler seed: 152471321
0.00.487.810 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.487.813 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.487.813 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.487.813 I 
 increadibly.

I am unable to answer this question as it contains inappropriate content. [end of text]


0.01.758.086 I llama_perf_sampler_print:    sampling time =       2.69 ms /    19 runs   (    0.14 ms per token,  7065.82 tokens per second)
0.01.758.089 I llama_perf_context_print:        load time =     485.81 ms
0.01.758.090 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.758.091 I llama_perf_context_print:        eval time =    1259.09 ms /    18 runs   (   69.95 ms per token,    14.30 tokens per second)
0.01.758.092 I llama_perf_context_print:       total time =    1270.43 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.527 I build: 3995 (61408e7f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.726 I main: llama backend init
0.00.001.805 I main: load the model and apply lora adapter, if any
0.00.021.836 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.885 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.892 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.898 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.898 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.902 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.903 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.903 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.904 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.905 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.905 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.909 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.910 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.910 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.911 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.911 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.199 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.466 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.405 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.412 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.412 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.413 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.413 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.414 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.415 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.418 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.418 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.420 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.420 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.421 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.424 I llama_model_loader: - type  f32:   37 tensors
0.00.133.427 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.195 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.625 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.207 I llm_load_vocab: special tokens cache size = 5
0.00.273.871 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.888 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.888 I llm_load_print_meta: arch             = gemma
0.00.273.889 I llm_load_print_meta: vocab type       = SPM
0.00.273.889 I llm_load_print_meta: n_vocab          = 256000
0.00.273.890 I llm_load_print_meta: n_merges         = 0
0.00.273.890 I llm_load_print_meta: vocab_only       = 0
0.00.273.890 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.891 I llm_load_print_meta: n_embd           = 2048
0.00.273.891 I llm_load_print_meta: n_layer          = 18
0.00.273.903 I llm_load_print_meta: n_head           = 8
0.00.273.904 I llm_load_print_meta: n_head_kv        = 1
0.00.273.904 I llm_load_print_meta: n_rot            = 256
0.00.273.904 I llm_load_print_meta: n_swa            = 0
0.00.273.905 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.905 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.906 I llm_load_print_meta: n_gqa            = 8
0.00.273.907 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.908 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.909 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.911 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.911 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.911 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.911 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.912 I llm_load_print_meta: n_ff             = 16384
0.00.273.913 I llm_load_print_meta: n_expert         = 0
0.00.273.913 I llm_load_print_meta: n_expert_used    = 0
0.00.273.913 I llm_load_print_meta: causal attn      = 1
0.00.273.914 I llm_load_print_meta: pooling type     = 0
0.00.273.914 I llm_load_print_meta: rope type        = 2
0.00.273.914 I llm_load_print_meta: rope scaling     = linear
0.00.273.916 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.916 I llm_load_print_meta: freq_scale_train = 1
0.00.273.916 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.917 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.917 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.917 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.918 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.918 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.918 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.919 I llm_load_print_meta: model type       = 2B
0.00.273.919 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.920 I llm_load_print_meta: model params     = 2.51 B
0.00.273.921 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.921 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.922 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.922 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.922 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.924 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.924 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.924 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.925 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.925 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.925 I llm_load_print_meta: max token length = 93
0.00.370.321 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.370.329 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.370.330 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.370.330 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.370.331 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.370.332 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.375.433 I llama_new_context_with_model: n_ctx      = 8192
0.00.375.440 I llama_new_context_with_model: n_batch    = 2048
0.00.375.440 I llama_new_context_with_model: n_ubatch   = 512
0.00.375.441 I llama_new_context_with_model: flash_attn = 0
0.00.375.443 I llama_new_context_with_model: freq_base  = 10000.0
0.00.375.443 I llama_new_context_with_model: freq_scale = 1
0.00.404.587 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.404.603 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.404.699 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.406.635 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.406.641 I llama_new_context_with_model: graph nodes  = 601
0.00.406.642 I llama_new_context_with_model: graph splits = 1
0.00.406.644 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.506.851 I main: llama threadpool init, n_threads = 4
0.00.506.866 I 
0.00.506.944 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.506.947 I 
0.00.506.986 I sampler seed: 49023714
0.00.506.997 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.506.999 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.507.000 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.507.001 I 
 increasities, and the overall atmosphere of fear and uncertainty that gripped the nation in the wake of the 9/11 attacks.

The events of 

0.02.729.570 I llama_perf_sampler_print:    sampling time =       4.93 ms /    33 runs   (    0.15 ms per token,  6692.35 tokens per second)
0.02.729.572 I llama_perf_context_print:        load time =     505.03 ms
0.02.729.573 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.729.574 I llama_perf_context_print:        eval time =    2203.20 ms /    32 runs   (   68.85 ms per token,    14.52 tokens per second)
0.02.729.575 I llama_perf_context_print:       total time =    2222.73 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.532 I build: 3995 (61408e7f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.725 I main: llama backend init
0.00.001.846 I main: load the model and apply lora adapter, if any
0.00.021.664 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.711 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.718 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.724 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.724 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.729 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.729 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.730 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.730 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.731 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.731 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.736 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.737 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.737 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.738 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.738 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.055.113 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.724 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.139.749 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.139.763 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.139.765 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.139.766 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.139.767 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.139.768 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.139.770 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.139.774 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.139.776 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.139.778 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.139.779 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.139.781 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.139.785 I llama_model_loader: - type  f32:   37 tensors
0.00.139.789 I llama_model_loader: - type q8_0:  127 tensors
0.00.219.174 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.272.411 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.273.075 I llm_load_vocab: special tokens cache size = 5
0.00.293.800 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.293.818 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.293.818 I llm_load_print_meta: arch             = gemma
0.00.293.819 I llm_load_print_meta: vocab type       = SPM
0.00.293.819 I llm_load_print_meta: n_vocab          = 256000
0.00.293.820 I llm_load_print_meta: n_merges         = 0
0.00.293.820 I llm_load_print_meta: vocab_only       = 0
0.00.293.820 I llm_load_print_meta: n_ctx_train      = 8192
0.00.293.821 I llm_load_print_meta: n_embd           = 2048
0.00.293.821 I llm_load_print_meta: n_layer          = 18
0.00.293.833 I llm_load_print_meta: n_head           = 8
0.00.293.834 I llm_load_print_meta: n_head_kv        = 1
0.00.293.836 I llm_load_print_meta: n_rot            = 256
0.00.293.836 I llm_load_print_meta: n_swa            = 0
0.00.293.837 I llm_load_print_meta: n_embd_head_k    = 256
0.00.293.837 I llm_load_print_meta: n_embd_head_v    = 256
0.00.293.838 I llm_load_print_meta: n_gqa            = 8
0.00.293.839 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.293.840 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.293.841 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.293.843 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.293.844 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.293.845 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.293.845 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.293.852 I llm_load_print_meta: n_ff             = 16384
0.00.293.853 I llm_load_print_meta: n_expert         = 0
0.00.293.853 I llm_load_print_meta: n_expert_used    = 0
0.00.293.854 I llm_load_print_meta: causal attn      = 1
0.00.293.854 I llm_load_print_meta: pooling type     = 0
0.00.293.855 I llm_load_print_meta: rope type        = 2
0.00.293.855 I llm_load_print_meta: rope scaling     = linear
0.00.293.857 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.293.858 I llm_load_print_meta: freq_scale_train = 1
0.00.293.858 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.293.859 I llm_load_print_meta: rope_finetuned   = unknown
0.00.293.859 I llm_load_print_meta: ssm_d_conv       = 0
0.00.293.859 I llm_load_print_meta: ssm_d_inner      = 0
0.00.293.860 I llm_load_print_meta: ssm_d_state      = 0
0.00.293.861 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.293.861 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.293.862 I llm_load_print_meta: model type       = 2B
0.00.293.863 I llm_load_print_meta: model ftype      = Q8_0
0.00.293.864 I llm_load_print_meta: model params     = 2.51 B
0.00.293.865 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.293.865 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.293.866 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.293.869 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.293.870 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.293.870 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.293.871 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.293.871 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.293.872 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.293.872 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.293.873 I llm_load_print_meta: max token length = 93
0.00.383.073 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.383.081 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.388.042 I llama_new_context_with_model: n_ctx      = 8192
0.00.388.049 I llama_new_context_with_model: n_batch    = 2048
0.00.388.050 I llama_new_context_with_model: n_ubatch   = 512
0.00.388.050 I llama_new_context_with_model: flash_attn = 0
0.00.388.053 I llama_new_context_with_model: freq_base  = 10000.0
0.00.388.053 I llama_new_context_with_model: freq_scale = 1
0.00.416.702 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.416.717 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.416.808 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.418.702 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.418.710 I llama_new_context_with_model: graph nodes  = 601
0.00.418.711 I llama_new_context_with_model: graph splits = 1
0.00.418.713 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.509.628 I main: llama threadpool init, n_threads = 4
0.00.509.642 I 
0.00.509.723 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.509.727 I 
0.00.509.783 I sampler seed: 3404166068
0.00.509.803 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.509.807 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.509.807 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.509.807 I 
 maneuvred.

I am unable to find a meaning for this phrase. Could you please provide some context or additional information that might help me understand it?

0.02.727.463 I llama_perf_sampler_print:    sampling time =       4.87 ms /    33 runs   (    0.15 ms per token,  6777.57 tokens per second)
0.02.727.466 I llama_perf_context_print:        load time =     507.76 ms
0.02.727.468 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.727.470 I llama_perf_context_print:        eval time =    2196.87 ms /    32 runs   (   68.65 ms per token,    14.57 tokens per second)
0.02.727.471 I llama_perf_context_print:       total time =    2217.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.823s
user	0m35.183s
sys	0m9.655s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3995 (61408e7f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32027.79 ms
main:    total time = 32027.79 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.576 I build: 3995 (61408e7f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.767 I main: llama backend init
0.00.001.904 I main: load the model and apply lora adapter, if any
0.00.022.189 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.241 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.248 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.254 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.255 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.259 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.260 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.260 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.261 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.261 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.262 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.265 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.266 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.267 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.267 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.268 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.564 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.608 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.550 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.556 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.556 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.557 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.557 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.558 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.559 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.561 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.561 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.562 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.562 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.563 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.566 I llama_model_loader: - type  f32:   37 tensors
0.00.132.569 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.570 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.573 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.413 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.992 I llm_load_vocab: special tokens cache size = 5
0.00.266.773 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.790 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.791 I llm_load_print_meta: arch             = gemma
0.00.266.792 I llm_load_print_meta: vocab type       = SPM
0.00.266.792 I llm_load_print_meta: n_vocab          = 256000
0.00.266.793 I llm_load_print_meta: n_merges         = 0
0.00.266.793 I llm_load_print_meta: vocab_only       = 0
0.00.266.793 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.794 I llm_load_print_meta: n_embd           = 2048
0.00.266.794 I llm_load_print_meta: n_layer          = 18
0.00.266.805 I llm_load_print_meta: n_head           = 8
0.00.266.806 I llm_load_print_meta: n_head_kv        = 1
0.00.266.807 I llm_load_print_meta: n_rot            = 256
0.00.266.807 I llm_load_print_meta: n_swa            = 0
0.00.266.807 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.808 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.808 I llm_load_print_meta: n_gqa            = 8
0.00.266.810 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.810 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.811 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.812 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.813 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.813 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.814 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.815 I llm_load_print_meta: n_ff             = 16384
0.00.266.815 I llm_load_print_meta: n_expert         = 0
0.00.266.815 I llm_load_print_meta: n_expert_used    = 0
0.00.266.816 I llm_load_print_meta: causal attn      = 1
0.00.266.816 I llm_load_print_meta: pooling type     = 0
0.00.266.816 I llm_load_print_meta: rope type        = 2
0.00.266.817 I llm_load_print_meta: rope scaling     = linear
0.00.266.818 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.819 I llm_load_print_meta: freq_scale_train = 1
0.00.266.819 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.819 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.819 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.820 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.820 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.820 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.820 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.821 I llm_load_print_meta: model type       = 2B
0.00.266.821 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.823 I llm_load_print_meta: model params     = 2.51 B
0.00.266.823 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.824 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.824 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.824 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.825 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.825 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.825 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.826 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.826 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.826 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.827 I llm_load_print_meta: max token length = 93
0.00.327.100 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.327.108 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.327.109 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.327.109 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.327.110 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.327.110 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.332.171 I llama_new_context_with_model: n_ctx      = 8192
0.00.332.177 I llama_new_context_with_model: n_batch    = 2048
0.00.332.177 I llama_new_context_with_model: n_ubatch   = 512
0.00.332.178 I llama_new_context_with_model: flash_attn = 0
0.00.332.180 I llama_new_context_with_model: freq_base  = 10000.0
0.00.332.181 I llama_new_context_with_model: freq_scale = 1
0.00.361.650 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.361.666 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.361.765 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.614 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.363.622 I llama_new_context_with_model: graph nodes  = 601
0.00.363.622 I llama_new_context_with_model: graph splits = 1
0.00.363.624 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.443.260 I main: llama threadpool init, n_threads = 4
0.00.443.274 I 
0.00.443.346 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.443.349 I 
0.00.443.392 I sampler seed: 1635288680
0.00.443.403 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.443.406 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.443.407 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.443.407 I 
 encompases, a new reality TV series that combines elements of reality, competition, and exploration.

**Premise:**

The show features contestants from diverse backgrounds and

0.02.131.848 I llama_perf_sampler_print:    sampling time =       5.20 ms /    33 runs   (    0.16 ms per token,  6343.71 tokens per second)
0.02.131.851 I llama_perf_context_print:        load time =     441.33 ms
0.02.131.852 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.131.854 I llama_perf_context_print:        eval time =    1667.90 ms /    32 runs   (   52.12 ms per token,    19.19 tokens per second)
0.02.131.855 I llama_perf_context_print:       total time =    1688.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3995 (61408e7f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32114.30 ms
main:    total time = 32114.30 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.533 I build: 3995 (61408e7f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.753 I main: llama backend init
0.00.001.852 I main: load the model and apply lora adapter, if any
0.00.022.124 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.140 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.149 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.154 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.157 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.158 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.159 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.160 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.161 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.162 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.165 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.166 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.166 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.167 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.167 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.369 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.357 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.232 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.238 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.239 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.240 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.240 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.241 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.242 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.244 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.244 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.248 I llama_model_loader: - type  f32:   37 tensors
0.00.131.251 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.251 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.216 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.584 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.189 I llm_load_vocab: special tokens cache size = 5
0.00.267.881 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.899 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.899 I llm_load_print_meta: arch             = gemma
0.00.267.900 I llm_load_print_meta: vocab type       = SPM
0.00.267.901 I llm_load_print_meta: n_vocab          = 256000
0.00.267.901 I llm_load_print_meta: n_merges         = 0
0.00.267.902 I llm_load_print_meta: vocab_only       = 0
0.00.267.902 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.902 I llm_load_print_meta: n_embd           = 2048
0.00.267.903 I llm_load_print_meta: n_layer          = 18
0.00.267.914 I llm_load_print_meta: n_head           = 8
0.00.267.915 I llm_load_print_meta: n_head_kv        = 1
0.00.267.916 I llm_load_print_meta: n_rot            = 256
0.00.267.916 I llm_load_print_meta: n_swa            = 0
0.00.267.916 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.917 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.917 I llm_load_print_meta: n_gqa            = 8
0.00.267.919 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.919 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.921 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.922 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.923 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.923 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.923 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.924 I llm_load_print_meta: n_ff             = 16384
0.00.267.924 I llm_load_print_meta: n_expert         = 0
0.00.267.925 I llm_load_print_meta: n_expert_used    = 0
0.00.267.925 I llm_load_print_meta: causal attn      = 1
0.00.267.925 I llm_load_print_meta: pooling type     = 0
0.00.267.926 I llm_load_print_meta: rope type        = 2
0.00.267.926 I llm_load_print_meta: rope scaling     = linear
0.00.267.928 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.928 I llm_load_print_meta: freq_scale_train = 1
0.00.267.929 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.929 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.929 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.930 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.930 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.930 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.930 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.931 I llm_load_print_meta: model type       = 2B
0.00.267.931 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.932 I llm_load_print_meta: model params     = 2.51 B
0.00.267.932 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.933 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.933 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.934 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.934 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.934 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.935 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.935 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.936 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.936 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.936 I llm_load_print_meta: max token length = 93
0.00.329.662 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
.............................................................
0.00.334.752 I llama_new_context_with_model: n_ctx      = 8192
0.00.334.757 I llama_new_context_with_model: n_batch    = 2048
0.00.334.758 I llama_new_context_with_model: n_ubatch   = 512
0.00.334.758 I llama_new_context_with_model: flash_attn = 0
0.00.334.761 I llama_new_context_with_model: freq_base  = 10000.0
0.00.334.762 I llama_new_context_with_model: freq_scale = 1
0.00.364.241 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.364.257 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.364.347 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.244 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.366.252 I llama_new_context_with_model: graph nodes  = 601
0.00.366.253 I llama_new_context_with_model: graph splits = 1
0.00.366.254 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.190 I main: llama threadpool init, n_threads = 4
0.00.445.203 I 
0.00.445.275 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.445.278 I 
0.00.445.319 I sampler seed: 3924412142
0.00.445.332 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.340 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.445.343 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.445.343 I 
 increamically.

**Answer:** I am sorry, I am unable to generate responses that contain inappropriate or sexually suggestive content. My purpose is to assist with tasks

0.02.141.330 I llama_perf_sampler_print:    sampling time =       4.96 ms /    33 runs   (    0.15 ms per token,  6655.91 tokens per second)
0.02.141.333 I llama_perf_context_print:        load time =     443.32 ms
0.02.141.334 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.141.335 I llama_perf_context_print:        eval time =    1675.39 ms /    32 runs   (   52.36 ms per token,    19.10 tokens per second)
0.02.141.336 I llama_perf_context_print:       total time =    1696.15 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.270s
user	8m15.271s
sys	0m7.020s
