+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.644 I build: 3995 (61408e7f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.847 I main: llama backend init
0.00.002.807 I main: load the model and apply lora adapter, if any
0.00.024.716 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.929 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.026 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.037 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.039 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.043 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.045 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.046 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.050 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.051 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.052 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.062 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.063 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.064 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.065 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.067 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.164 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.265.275 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.284.206 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.284.218 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.284.219 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.284.220 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.284.221 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.284.223 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.284.224 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.284.227 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.284.228 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.284.229 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.284.230 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.284.232 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.284.242 I llama_model_loader: - type  f32:   37 tensors
0.00.284.246 I llama_model_loader: - type q8_0:  127 tensors
0.00.466.343 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.533.314 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.534.299 I llm_load_vocab: special tokens cache size = 5
0.00.629.291 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.629.361 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.629.365 I llm_load_print_meta: arch             = gemma
0.00.629.365 I llm_load_print_meta: vocab type       = SPM
0.00.629.366 I llm_load_print_meta: n_vocab          = 256000
0.00.629.368 I llm_load_print_meta: n_merges         = 0
0.00.629.369 I llm_load_print_meta: vocab_only       = 0
0.00.629.369 I llm_load_print_meta: n_ctx_train      = 8192
0.00.629.370 I llm_load_print_meta: n_embd           = 2048
0.00.629.370 I llm_load_print_meta: n_layer          = 18
0.00.629.434 I llm_load_print_meta: n_head           = 8
0.00.629.444 I llm_load_print_meta: n_head_kv        = 1
0.00.629.446 I llm_load_print_meta: n_rot            = 256
0.00.629.446 I llm_load_print_meta: n_swa            = 0
0.00.629.447 I llm_load_print_meta: n_embd_head_k    = 256
0.00.629.447 I llm_load_print_meta: n_embd_head_v    = 256
0.00.629.452 I llm_load_print_meta: n_gqa            = 8
0.00.629.457 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.629.462 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.629.466 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.629.467 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.629.467 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.629.468 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.629.468 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.629.473 I llm_load_print_meta: n_ff             = 16384
0.00.629.474 I llm_load_print_meta: n_expert         = 0
0.00.629.474 I llm_load_print_meta: n_expert_used    = 0
0.00.629.475 I llm_load_print_meta: causal attn      = 1
0.00.629.475 I llm_load_print_meta: pooling type     = 0
0.00.629.475 I llm_load_print_meta: rope type        = 2
0.00.629.476 I llm_load_print_meta: rope scaling     = linear
0.00.629.477 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.629.478 I llm_load_print_meta: freq_scale_train = 1
0.00.629.481 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.629.481 I llm_load_print_meta: rope_finetuned   = unknown
0.00.629.481 I llm_load_print_meta: ssm_d_conv       = 0
0.00.629.482 I llm_load_print_meta: ssm_d_inner      = 0
0.00.629.482 I llm_load_print_meta: ssm_d_state      = 0
0.00.629.482 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.629.482 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.629.483 I llm_load_print_meta: model type       = 2B
0.00.629.484 I llm_load_print_meta: model ftype      = Q8_0
0.00.629.485 I llm_load_print_meta: model params     = 2.51 B
0.00.629.486 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.629.486 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.629.487 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.629.487 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.629.496 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.629.497 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.629.497 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.629.498 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.629.504 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.629.506 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.629.506 I llm_load_print_meta: max token length = 93
0.00.739.940 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.739.952 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.739.953 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.739.953 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.739.954 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.739.954 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.745.720 I llama_new_context_with_model: n_ctx      = 8192
0.00.745.728 I llama_new_context_with_model: n_batch    = 2048
0.00.745.728 I llama_new_context_with_model: n_ubatch   = 512
0.00.745.729 I llama_new_context_with_model: flash_attn = 0
0.00.745.732 I llama_new_context_with_model: freq_base  = 10000.0
0.00.745.733 I llama_new_context_with_model: freq_scale = 1
0.00.775.646 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.775.686 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.775.802 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.778.924 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.778.928 I llama_new_context_with_model: graph nodes  = 601
0.00.778.929 I llama_new_context_with_model: graph splits = 1
0.00.778.945 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.387.062 I main: llama threadpool init, n_threads = 4
0.01.387.074 I 
0.01.387.186 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.387.190 I 
0.01.387.419 I sampler seed: 277690026
0.01.387.432 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.387.439 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.387.440 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.387.440 I 
 increasities. [end of text]


0.03.085.571 I llama_perf_sampler_print:    sampling time =       6.11 ms /     5 runs   (    1.22 ms per token,   817.93 tokens per second)
0.03.085.574 I llama_perf_context_print:        load time =    1384.16 ms
0.03.085.575 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.085.577 I llama_perf_context_print:        eval time =    1685.22 ms /     4 runs   (  421.30 ms per token,     2.37 tokens per second)
0.03.085.577 I llama_perf_context_print:       total time =    1698.52 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 3995 (61408e7f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.841 I main: llama backend init
0.00.002.777 I main: load the model and apply lora adapter, if any
0.00.024.925 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.028 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.044 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.048 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.053 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.054 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.055 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.056 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.057 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.058 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.069 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.070 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.071 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.072 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.074 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.515 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.952 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.144 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.154 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.156 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.157 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.158 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.160 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.161 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.166 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.167 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.169 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.170 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.171 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.181 I llama_model_loader: - type  f32:   37 tensors
0.00.268.185 I llama_model_loader: - type q8_0:  127 tensors
0.00.458.141 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.525.166 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.526.125 I llm_load_vocab: special tokens cache size = 5
0.00.623.354 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.623.423 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.623.424 I llm_load_print_meta: arch             = gemma
0.00.623.425 I llm_load_print_meta: vocab type       = SPM
0.00.623.426 I llm_load_print_meta: n_vocab          = 256000
0.00.623.428 I llm_load_print_meta: n_merges         = 0
0.00.623.428 I llm_load_print_meta: vocab_only       = 0
0.00.623.429 I llm_load_print_meta: n_ctx_train      = 8192
0.00.623.429 I llm_load_print_meta: n_embd           = 2048
0.00.623.430 I llm_load_print_meta: n_layer          = 18
0.00.623.505 I llm_load_print_meta: n_head           = 8
0.00.623.511 I llm_load_print_meta: n_head_kv        = 1
0.00.623.512 I llm_load_print_meta: n_rot            = 256
0.00.623.513 I llm_load_print_meta: n_swa            = 0
0.00.623.513 I llm_load_print_meta: n_embd_head_k    = 256
0.00.623.513 I llm_load_print_meta: n_embd_head_v    = 256
0.00.623.518 I llm_load_print_meta: n_gqa            = 8
0.00.623.523 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.623.528 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.623.529 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.623.530 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.623.531 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.623.531 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.623.532 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.623.536 I llm_load_print_meta: n_ff             = 16384
0.00.623.537 I llm_load_print_meta: n_expert         = 0
0.00.623.537 I llm_load_print_meta: n_expert_used    = 0
0.00.623.538 I llm_load_print_meta: causal attn      = 1
0.00.623.538 I llm_load_print_meta: pooling type     = 0
0.00.623.539 I llm_load_print_meta: rope type        = 2
0.00.623.539 I llm_load_print_meta: rope scaling     = linear
0.00.623.541 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.623.541 I llm_load_print_meta: freq_scale_train = 1
0.00.623.542 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.623.542 I llm_load_print_meta: rope_finetuned   = unknown
0.00.623.542 I llm_load_print_meta: ssm_d_conv       = 0
0.00.623.543 I llm_load_print_meta: ssm_d_inner      = 0
0.00.623.543 I llm_load_print_meta: ssm_d_state      = 0
0.00.623.543 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.623.543 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.623.544 I llm_load_print_meta: model type       = 2B
0.00.623.546 I llm_load_print_meta: model ftype      = Q8_0
0.00.623.546 I llm_load_print_meta: model params     = 2.51 B
0.00.623.547 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.623.547 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.623.548 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.623.548 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.623.549 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.623.549 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.623.550 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.623.550 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.623.557 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.623.558 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.623.559 I llm_load_print_meta: max token length = 93
0.00.722.694 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.728.455 I llama_new_context_with_model: n_ctx      = 8192
0.00.728.463 I llama_new_context_with_model: n_batch    = 2048
0.00.728.463 I llama_new_context_with_model: n_ubatch   = 512
0.00.728.464 I llama_new_context_with_model: flash_attn = 0
0.00.728.467 I llama_new_context_with_model: freq_base  = 10000.0
0.00.728.467 I llama_new_context_with_model: freq_scale = 1
0.00.759.493 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.759.536 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.759.649 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.762.870 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.762.874 I llama_new_context_with_model: graph nodes  = 601
0.00.762.875 I llama_new_context_with_model: graph splits = 1
0.00.762.891 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.370.418 I main: llama threadpool init, n_threads = 4
0.01.370.433 I 
0.01.370.538 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.370.542 I 
0.01.370.774 I sampler seed: 302878552
0.01.370.788 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.370.794 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.370.797 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.370.797 I 
 increasively.

I am unable to generate the requested response due to the limitations of my programming capabilities. [end of text]


0.10.684.936 I llama_perf_sampler_print:    sampling time =      33.00 ms /    23 runs   (    1.43 ms per token,   697.03 tokens per second)
0.10.684.940 I llama_perf_context_print:        load time =    1367.55 ms
0.10.684.954 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.684.956 I llama_perf_context_print:        eval time =    9249.99 ms /    22 runs   (  420.45 ms per token,     2.38 tokens per second)
0.10.684.957 I llama_perf_context_print:       total time =    9314.53 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.644 I build: 3995 (61408e7f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.855 I main: llama backend init
0.00.002.785 I main: load the model and apply lora adapter, if any
0.00.024.574 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.818 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.917 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.929 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.931 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.936 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.937 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.938 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.940 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.942 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.942 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.953 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.954 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.955 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.956 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.957 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.231 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.969 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.048 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.058 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.059 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.060 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.061 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.062 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.063 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.067 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.068 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.069 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.070 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.268.071 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.079 I llama_model_loader: - type  f32:   37 tensors
0.00.268.083 I llama_model_loader: - type q8_0:  127 tensors
0.00.449.538 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.120 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.108 I llm_load_vocab: special tokens cache size = 5
0.00.612.135 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.204 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.205 I llm_load_print_meta: arch             = gemma
0.00.612.206 I llm_load_print_meta: vocab type       = SPM
0.00.612.207 I llm_load_print_meta: n_vocab          = 256000
0.00.612.209 I llm_load_print_meta: n_merges         = 0
0.00.612.210 I llm_load_print_meta: vocab_only       = 0
0.00.612.210 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.211 I llm_load_print_meta: n_embd           = 2048
0.00.612.211 I llm_load_print_meta: n_layer          = 18
0.00.612.272 I llm_load_print_meta: n_head           = 8
0.00.612.279 I llm_load_print_meta: n_head_kv        = 1
0.00.612.279 I llm_load_print_meta: n_rot            = 256
0.00.612.280 I llm_load_print_meta: n_swa            = 0
0.00.612.281 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.282 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.287 I llm_load_print_meta: n_gqa            = 8
0.00.612.291 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.298 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.299 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.301 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.301 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.301 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.302 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.612.306 I llm_load_print_meta: n_ff             = 16384
0.00.612.307 I llm_load_print_meta: n_expert         = 0
0.00.612.308 I llm_load_print_meta: n_expert_used    = 0
0.00.612.309 I llm_load_print_meta: causal attn      = 1
0.00.612.309 I llm_load_print_meta: pooling type     = 0
0.00.612.309 I llm_load_print_meta: rope type        = 2
0.00.612.310 I llm_load_print_meta: rope scaling     = linear
0.00.612.311 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.312 I llm_load_print_meta: freq_scale_train = 1
0.00.612.312 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.313 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.313 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.314 I llm_load_print_meta: ssm_d_inner      = 0
0.00.612.314 I llm_load_print_meta: ssm_d_state      = 0
0.00.612.314 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.612.314 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.612.315 I llm_load_print_meta: model type       = 2B
0.00.612.316 I llm_load_print_meta: model ftype      = Q8_0
0.00.612.317 I llm_load_print_meta: model params     = 2.51 B
0.00.612.318 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.612.318 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.612.319 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.612.320 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.612.321 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.612.321 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.612.321 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.612.322 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.612.328 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.612.331 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.612.340 I llm_load_print_meta: max token length = 93
0.00.710.688 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.710.698 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.710.699 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.710.700 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.710.700 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.710.701 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.716.354 I llama_new_context_with_model: n_ctx      = 8192
0.00.716.361 I llama_new_context_with_model: n_batch    = 2048
0.00.716.361 I llama_new_context_with_model: n_ubatch   = 512
0.00.716.362 I llama_new_context_with_model: flash_attn = 0
0.00.716.364 I llama_new_context_with_model: freq_base  = 10000.0
0.00.716.365 I llama_new_context_with_model: freq_scale = 1
0.00.746.685 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.746.722 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.746.840 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.749.943 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.749.947 I llama_new_context_with_model: graph nodes  = 601
0.00.749.947 I llama_new_context_with_model: graph splits = 1
0.00.749.964 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.359.522 I main: llama threadpool init, n_threads = 4
0.01.359.535 I 
0.01.359.639 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.359.643 I 
0.01.359.875 I sampler seed: 734815135
0.01.359.886 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.359.893 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.359.894 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.359.894 I 
 increasities are a set of guidelines that define when it is permissible to reject medical treatment for legitimate reasons. These guidelines are designed to protect patients from making decisions based

0.14.844.795 I llama_perf_sampler_print:    sampling time =      47.81 ms /    33 runs   (    1.45 ms per token,   690.25 tokens per second)
0.14.844.798 I llama_perf_context_print:        load time =    1356.64 ms
0.14.844.800 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.844.801 I llama_perf_context_print:        eval time =   13392.58 ms /    32 runs   (  418.52 ms per token,     2.39 tokens per second)
0.14.844.825 I llama_perf_context_print:       total time =   13485.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.668 I build: 3995 (61408e7f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.877 I main: llama backend init
0.00.002.807 I main: load the model and apply lora adapter, if any
0.00.031.134 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.031.342 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.031.441 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.031.452 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.031.454 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.031.458 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.031.460 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.031.461 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.031.462 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.031.481 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.031.482 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.031.494 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.031.498 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.031.499 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.031.500 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.031.501 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.154.513 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.371 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.239 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.248 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.249 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.250 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.251 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.252 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.253 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.257 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.258 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.259 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.260 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.272.261 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.270 I llama_model_loader: - type  f32:   37 tensors
0.00.272.274 I llama_model_loader: - type q8_0:  127 tensors
0.00.464.700 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.529.260 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.530.198 I llm_load_vocab: special tokens cache size = 5
0.00.634.893 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.634.962 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.634.963 I llm_load_print_meta: arch             = gemma
0.00.634.963 I llm_load_print_meta: vocab type       = SPM
0.00.634.964 I llm_load_print_meta: n_vocab          = 256000
0.00.634.966 I llm_load_print_meta: n_merges         = 0
0.00.634.967 I llm_load_print_meta: vocab_only       = 0
0.00.634.967 I llm_load_print_meta: n_ctx_train      = 8192
0.00.634.968 I llm_load_print_meta: n_embd           = 2048
0.00.634.968 I llm_load_print_meta: n_layer          = 18
0.00.635.034 I llm_load_print_meta: n_head           = 8
0.00.635.041 I llm_load_print_meta: n_head_kv        = 1
0.00.635.042 I llm_load_print_meta: n_rot            = 256
0.00.635.042 I llm_load_print_meta: n_swa            = 0
0.00.635.043 I llm_load_print_meta: n_embd_head_k    = 256
0.00.635.044 I llm_load_print_meta: n_embd_head_v    = 256
0.00.635.049 I llm_load_print_meta: n_gqa            = 8
0.00.635.054 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.635.059 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.635.070 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.635.075 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.635.076 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.635.080 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.635.080 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.635.087 I llm_load_print_meta: n_ff             = 16384
0.00.635.088 I llm_load_print_meta: n_expert         = 0
0.00.635.088 I llm_load_print_meta: n_expert_used    = 0
0.00.635.090 I llm_load_print_meta: causal attn      = 1
0.00.635.090 I llm_load_print_meta: pooling type     = 0
0.00.635.091 I llm_load_print_meta: rope type        = 2
0.00.635.091 I llm_load_print_meta: rope scaling     = linear
0.00.635.093 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.635.093 I llm_load_print_meta: freq_scale_train = 1
0.00.635.094 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.635.095 I llm_load_print_meta: rope_finetuned   = unknown
0.00.635.095 I llm_load_print_meta: ssm_d_conv       = 0
0.00.635.095 I llm_load_print_meta: ssm_d_inner      = 0
0.00.635.095 I llm_load_print_meta: ssm_d_state      = 0
0.00.635.096 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.635.096 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.635.097 I llm_load_print_meta: model type       = 2B
0.00.635.099 I llm_load_print_meta: model ftype      = Q8_0
0.00.635.100 I llm_load_print_meta: model params     = 2.51 B
0.00.635.106 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.635.107 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.635.108 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.635.120 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.635.121 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.635.122 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.635.122 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.635.123 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.635.131 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.635.133 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.635.133 I llm_load_print_meta: max token length = 93
0.00.724.895 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.724.906 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.730.690 I llama_new_context_with_model: n_ctx      = 8192
0.00.730.698 I llama_new_context_with_model: n_batch    = 2048
0.00.730.699 I llama_new_context_with_model: n_ubatch   = 512
0.00.730.699 I llama_new_context_with_model: flash_attn = 0
0.00.730.703 I llama_new_context_with_model: freq_base  = 10000.0
0.00.730.703 I llama_new_context_with_model: freq_scale = 1
0.00.760.799 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.760.838 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.760.953 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.764.123 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.764.127 I llama_new_context_with_model: graph nodes  = 601
0.00.764.127 I llama_new_context_with_model: graph splits = 1
0.00.764.144 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.376.105 I main: llama threadpool init, n_threads = 4
0.01.376.118 I 
0.01.376.229 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.376.233 I 
0.01.376.465 I sampler seed: 1941995013
0.01.376.479 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.376.486 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.376.487 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.376.487 I 
 seconals in a group of animals that utilize their mucus to protect themselves and their young.

**Answer:** Sea urchins.

Sea urchins possess a

0.14.979.043 I llama_perf_sampler_print:    sampling time =      47.84 ms /    33 runs   (    1.45 ms per token,   689.84 tokens per second)
0.14.979.048 I llama_perf_context_print:        load time =    1373.20 ms
0.14.979.049 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.979.051 I llama_perf_context_print:        eval time =   13509.39 ms /    32 runs   (  422.17 ms per token,     2.37 tokens per second)
0.14.979.052 I llama_perf_context_print:       total time =   13602.95 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m53.832s
user	2m45.123s
sys	0m9.792s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3995 (61408e7f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199651.65 ms
main:    total time = 199651.65 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.687 I build: 3995 (61408e7f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.897 I main: llama backend init
0.00.002.865 I main: load the model and apply lora adapter, if any
0.00.024.909 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.117 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.218 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.231 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.232 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.237 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.240 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.242 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.243 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.244 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.246 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.257 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.261 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.262 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.263 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.264 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.273 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.361 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.360 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.370 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.371 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.372 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.373 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.374 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.375 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.379 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.380 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.381 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.382 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.383 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.392 I llama_model_loader: - type  f32:   37 tensors
0.00.268.397 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.399 I llama_model_loader: - type q6_K:   19 tensors
0.00.439.797 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.502.261 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.503.202 I llm_load_vocab: special tokens cache size = 5
0.00.607.533 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.607.605 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.607.605 I llm_load_print_meta: arch             = gemma
0.00.607.607 I llm_load_print_meta: vocab type       = SPM
0.00.607.608 I llm_load_print_meta: n_vocab          = 256000
0.00.607.610 I llm_load_print_meta: n_merges         = 0
0.00.607.610 I llm_load_print_meta: vocab_only       = 0
0.00.607.611 I llm_load_print_meta: n_ctx_train      = 8192
0.00.607.611 I llm_load_print_meta: n_embd           = 2048
0.00.607.612 I llm_load_print_meta: n_layer          = 18
0.00.607.676 I llm_load_print_meta: n_head           = 8
0.00.607.683 I llm_load_print_meta: n_head_kv        = 1
0.00.607.684 I llm_load_print_meta: n_rot            = 256
0.00.607.684 I llm_load_print_meta: n_swa            = 0
0.00.607.684 I llm_load_print_meta: n_embd_head_k    = 256
0.00.607.685 I llm_load_print_meta: n_embd_head_v    = 256
0.00.607.690 I llm_load_print_meta: n_gqa            = 8
0.00.607.696 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.607.701 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.607.702 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.607.704 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.607.704 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.607.707 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.607.708 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.607.713 I llm_load_print_meta: n_ff             = 16384
0.00.607.713 I llm_load_print_meta: n_expert         = 0
0.00.607.715 I llm_load_print_meta: n_expert_used    = 0
0.00.607.716 I llm_load_print_meta: causal attn      = 1
0.00.607.716 I llm_load_print_meta: pooling type     = 0
0.00.607.726 I llm_load_print_meta: rope type        = 2
0.00.607.730 I llm_load_print_meta: rope scaling     = linear
0.00.607.731 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.607.732 I llm_load_print_meta: freq_scale_train = 1
0.00.607.746 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.607.747 I llm_load_print_meta: rope_finetuned   = unknown
0.00.607.747 I llm_load_print_meta: ssm_d_conv       = 0
0.00.607.749 I llm_load_print_meta: ssm_d_inner      = 0
0.00.607.749 I llm_load_print_meta: ssm_d_state      = 0
0.00.607.749 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.607.750 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.607.751 I llm_load_print_meta: model type       = 2B
0.00.607.752 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.607.755 I llm_load_print_meta: model params     = 2.51 B
0.00.607.756 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.607.756 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.607.757 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.607.758 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.607.758 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.607.759 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.607.759 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.607.760 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.607.765 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.607.767 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.607.767 I llm_load_print_meta: max token length = 93
0.00.669.480 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.669.488 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.669.489 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.669.489 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.669.490 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.669.491 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.675.216 I llama_new_context_with_model: n_ctx      = 8192
0.00.675.226 I llama_new_context_with_model: n_batch    = 2048
0.00.675.227 I llama_new_context_with_model: n_ubatch   = 512
0.00.675.227 I llama_new_context_with_model: flash_attn = 0
0.00.675.231 I llama_new_context_with_model: freq_base  = 10000.0
0.00.675.231 I llama_new_context_with_model: freq_scale = 1
0.00.706.553 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.706.591 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.706.705 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.709.801 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.709.805 I llama_new_context_with_model: graph nodes  = 601
0.00.709.806 I llama_new_context_with_model: graph splits = 1
0.00.709.824 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.284.270 I main: llama threadpool init, n_threads = 4
0.01.284.284 I 
0.01.284.391 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.284.394 I 
0.01.284.627 I sampler seed: 3962459911
0.01.284.640 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.284.646 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.284.650 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.284.650 I 
 seconally.

**Answer:** I am not able to provide assistance or generate responses that are sexually suggestive in nature. [end of text]


0.09.806.482 I llama_perf_sampler_print:    sampling time =      37.85 ms /    26 runs   (    1.46 ms per token,   686.98 tokens per second)
0.09.806.486 I llama_perf_context_print:        load time =    1281.29 ms
0.09.806.489 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.806.491 I llama_perf_context_print:        eval time =    8448.82 ms /    25 runs   (  337.95 ms per token,     2.96 tokens per second)
0.09.806.493 I llama_perf_context_print:       total time =    8522.22 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3995 (61408e7f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199621.11 ms
main:    total time = 199621.11 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.682 I build: 3995 (61408e7f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.950 I main: llama backend init
0.00.002.888 I main: load the model and apply lora adapter, if any
0.00.024.989 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.094 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.109 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.110 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.115 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.117 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.118 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.119 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.121 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.123 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.135 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.140 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.142 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.144 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.147 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.514 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.440 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.451 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.462 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.463 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.464 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.465 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.467 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.468 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.484 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.502 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.514 I llama_model_loader: - type  f32:   37 tensors
0.00.266.523 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.523 I llama_model_loader: - type q6_K:   19 tensors
0.00.469.184 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.530.539 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.531.463 I llm_load_vocab: special tokens cache size = 5
0.00.630.550 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.630.619 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.630.620 I llm_load_print_meta: arch             = gemma
0.00.630.621 I llm_load_print_meta: vocab type       = SPM
0.00.630.622 I llm_load_print_meta: n_vocab          = 256000
0.00.630.624 I llm_load_print_meta: n_merges         = 0
0.00.630.624 I llm_load_print_meta: vocab_only       = 0
0.00.630.625 I llm_load_print_meta: n_ctx_train      = 8192
0.00.630.625 I llm_load_print_meta: n_embd           = 2048
0.00.630.626 I llm_load_print_meta: n_layer          = 18
0.00.630.691 I llm_load_print_meta: n_head           = 8
0.00.630.698 I llm_load_print_meta: n_head_kv        = 1
0.00.630.699 I llm_load_print_meta: n_rot            = 256
0.00.630.700 I llm_load_print_meta: n_swa            = 0
0.00.630.700 I llm_load_print_meta: n_embd_head_k    = 256
0.00.630.700 I llm_load_print_meta: n_embd_head_v    = 256
0.00.630.706 I llm_load_print_meta: n_gqa            = 8
0.00.630.715 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.630.727 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.630.729 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.630.730 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.630.731 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.630.733 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.630.733 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.630.740 I llm_load_print_meta: n_ff             = 16384
0.00.630.741 I llm_load_print_meta: n_expert         = 0
0.00.630.741 I llm_load_print_meta: n_expert_used    = 0
0.00.630.742 I llm_load_print_meta: causal attn      = 1
0.00.630.745 I llm_load_print_meta: pooling type     = 0
0.00.630.746 I llm_load_print_meta: rope type        = 2
0.00.630.746 I llm_load_print_meta: rope scaling     = linear
0.00.630.749 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.630.750 I llm_load_print_meta: freq_scale_train = 1
0.00.630.750 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.630.751 I llm_load_print_meta: rope_finetuned   = unknown
0.00.630.752 I llm_load_print_meta: ssm_d_conv       = 0
0.00.630.753 I llm_load_print_meta: ssm_d_inner      = 0
0.00.630.753 I llm_load_print_meta: ssm_d_state      = 0
0.00.630.754 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.630.755 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.630.755 I llm_load_print_meta: model type       = 2B
0.00.630.758 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.630.759 I llm_load_print_meta: model params     = 2.51 B
0.00.630.761 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.630.761 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.630.763 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.630.763 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.630.764 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.630.765 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.630.765 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.630.766 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.630.778 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.630.780 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.630.781 I llm_load_print_meta: max token length = 93
0.00.693.218 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
.............................................................
0.00.699.045 I llama_new_context_with_model: n_ctx      = 8192
0.00.699.052 I llama_new_context_with_model: n_batch    = 2048
0.00.699.053 I llama_new_context_with_model: n_ubatch   = 512
0.00.699.053 I llama_new_context_with_model: flash_attn = 0
0.00.699.055 I llama_new_context_with_model: freq_base  = 10000.0
0.00.699.056 I llama_new_context_with_model: freq_scale = 1
0.00.728.597 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.728.635 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.728.758 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.731.871 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.731.876 I llama_new_context_with_model: graph nodes  = 601
0.00.731.876 I llama_new_context_with_model: graph splits = 1
0.00.731.891 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.306.239 I main: llama threadpool init, n_threads = 4
0.01.306.251 I 
0.01.306.357 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.306.362 I 
0.01.306.587 I sampler seed: 3643260329
0.01.306.599 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.306.606 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.306.607 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.306.607 I 
 increably! [end of text]


0.02.664.947 I llama_perf_sampler_print:    sampling time =       6.06 ms /     5 runs   (    1.21 ms per token,   825.63 tokens per second)
0.02.664.951 I llama_perf_context_print:        load time =    1303.25 ms
0.02.664.960 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.664.963 I llama_perf_context_print:        eval time =    1345.60 ms /     4 runs   (  336.40 ms per token,     2.97 tokens per second)
0.02.664.964 I llama_perf_context_print:       total time =    1358.72 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m54.717s
user	49m24.878s
sys	0m6.394s
