+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.673 I build: 4037 (6109cf15) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.868 I main: llama backend init
0.00.001.131 I main: load the model and apply lora adapter, if any
0.00.023.790 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.803 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.899 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.911 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.915 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.920 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.922 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.934 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.938 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.939 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.941 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.949 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.952 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.953 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.954 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.955 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.158.716 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.258.376 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.276.676 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.276.687 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.276.688 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.276.689 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.276.690 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.276.691 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.276.693 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.276.698 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.276.699 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.276.700 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.276.701 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.276.702 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.276.712 I llama_model_loader: - type  f32:   37 tensors
0.00.276.715 I llama_model_loader: - type q8_0:  127 tensors
0.00.483.033 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.553.671 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.554.687 I llm_load_vocab: special tokens cache size = 5
0.00.656.665 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.656.735 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.656.736 I llm_load_print_meta: arch             = gemma
0.00.656.737 I llm_load_print_meta: vocab type       = SPM
0.00.656.739 I llm_load_print_meta: n_vocab          = 256000
0.00.656.741 I llm_load_print_meta: n_merges         = 0
0.00.656.742 I llm_load_print_meta: vocab_only       = 0
0.00.656.742 I llm_load_print_meta: n_ctx_train      = 8192
0.00.656.742 I llm_load_print_meta: n_embd           = 2048
0.00.656.743 I llm_load_print_meta: n_layer          = 18
0.00.656.807 I llm_load_print_meta: n_head           = 8
0.00.656.814 I llm_load_print_meta: n_head_kv        = 1
0.00.656.815 I llm_load_print_meta: n_rot            = 256
0.00.656.815 I llm_load_print_meta: n_swa            = 0
0.00.656.816 I llm_load_print_meta: n_embd_head_k    = 256
0.00.656.816 I llm_load_print_meta: n_embd_head_v    = 256
0.00.656.820 I llm_load_print_meta: n_gqa            = 8
0.00.656.825 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.656.844 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.656.845 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.656.847 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.656.848 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.656.848 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.656.849 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.656.853 I llm_load_print_meta: n_ff             = 16384
0.00.656.854 I llm_load_print_meta: n_expert         = 0
0.00.656.854 I llm_load_print_meta: n_expert_used    = 0
0.00.656.855 I llm_load_print_meta: causal attn      = 1
0.00.656.855 I llm_load_print_meta: pooling type     = 0
0.00.656.856 I llm_load_print_meta: rope type        = 2
0.00.656.856 I llm_load_print_meta: rope scaling     = linear
0.00.656.857 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.656.858 I llm_load_print_meta: freq_scale_train = 1
0.00.656.859 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.656.859 I llm_load_print_meta: rope_finetuned   = unknown
0.00.656.864 I llm_load_print_meta: ssm_d_conv       = 0
0.00.656.864 I llm_load_print_meta: ssm_d_inner      = 0
0.00.656.864 I llm_load_print_meta: ssm_d_state      = 0
0.00.656.865 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.656.865 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.656.866 I llm_load_print_meta: model type       = 2B
0.00.656.867 I llm_load_print_meta: model ftype      = Q8_0
0.00.656.867 I llm_load_print_meta: model params     = 2.51 B
0.00.656.877 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.656.877 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.656.878 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.656.879 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.656.880 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.656.880 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.656.885 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.656.886 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.656.892 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.656.894 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.656.895 I llm_load_print_meta: max token length = 93
0.00.758.270 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.758.281 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.758.282 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.758.283 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.758.284 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.758.285 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.764.237 I llama_new_context_with_model: n_seq_max     = 1
0.00.764.245 I llama_new_context_with_model: n_ctx         = 4096
0.00.764.245 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.764.246 I llama_new_context_with_model: n_batch       = 2048
0.00.764.247 I llama_new_context_with_model: n_ubatch      = 512
0.00.764.248 I llama_new_context_with_model: flash_attn    = 0
0.00.764.250 I llama_new_context_with_model: freq_base     = 10000.0
0.00.764.251 I llama_new_context_with_model: freq_scale    = 1
0.00.764.252 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.781.024 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.781.066 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.781.192 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.783.739 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.783.743 I llama_new_context_with_model: graph nodes  = 601
0.00.783.743 I llama_new_context_with_model: graph splits = 1
0.00.783.768 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.392.581 I main: llama threadpool init, n_threads = 4
0.01.392.591 I 
0.01.392.700 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.392.704 I 
0.01.392.936 I sampler seed: 2574010602
0.01.392.947 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.392.956 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.392.957 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.392.957 I 
 increasities. [end of text]


0.03.076.988 I llama_perf_sampler_print:    sampling time =       6.23 ms /     5 runs   (    1.25 ms per token,   802.31 tokens per second)
0.03.076.991 I llama_perf_context_print:        load time =    1391.36 ms
0.03.077.014 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.077.016 I llama_perf_context_print:        eval time =    1671.21 ms /     4 runs   (  417.80 ms per token,     2.39 tokens per second)
0.03.077.017 I llama_perf_context_print:       total time =    1684.42 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.704 I build: 4037 (6109cf15) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.925 I main: llama backend init
0.00.001.193 I main: load the model and apply lora adapter, if any
0.00.023.876 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.985 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.001 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.005 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.010 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.012 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.013 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.014 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.015 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.016 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.024 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.025 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.026 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.027 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.028 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.159.100 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.258.314 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.276.628 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.276.638 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.276.639 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.276.640 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.276.641 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.276.643 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.276.644 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.276.649 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.276.650 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.276.651 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.276.652 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.276.653 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.276.662 I llama_model_loader: - type  f32:   37 tensors
0.00.276.665 I llama_model_loader: - type q8_0:  127 tensors
0.00.482.396 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.553.498 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.554.497 I llm_load_vocab: special tokens cache size = 5
0.00.652.086 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.652.160 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.652.161 I llm_load_print_meta: arch             = gemma
0.00.652.162 I llm_load_print_meta: vocab type       = SPM
0.00.652.163 I llm_load_print_meta: n_vocab          = 256000
0.00.652.165 I llm_load_print_meta: n_merges         = 0
0.00.652.166 I llm_load_print_meta: vocab_only       = 0
0.00.652.166 I llm_load_print_meta: n_ctx_train      = 8192
0.00.652.167 I llm_load_print_meta: n_embd           = 2048
0.00.652.167 I llm_load_print_meta: n_layer          = 18
0.00.652.234 I llm_load_print_meta: n_head           = 8
0.00.652.241 I llm_load_print_meta: n_head_kv        = 1
0.00.652.242 I llm_load_print_meta: n_rot            = 256
0.00.652.242 I llm_load_print_meta: n_swa            = 0
0.00.652.242 I llm_load_print_meta: n_embd_head_k    = 256
0.00.652.243 I llm_load_print_meta: n_embd_head_v    = 256
0.00.652.248 I llm_load_print_meta: n_gqa            = 8
0.00.652.253 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.652.258 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.652.281 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.652.282 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.652.283 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.652.283 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.652.284 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.652.289 I llm_load_print_meta: n_ff             = 16384
0.00.652.291 I llm_load_print_meta: n_expert         = 0
0.00.652.291 I llm_load_print_meta: n_expert_used    = 0
0.00.652.292 I llm_load_print_meta: causal attn      = 1
0.00.652.292 I llm_load_print_meta: pooling type     = 0
0.00.652.292 I llm_load_print_meta: rope type        = 2
0.00.652.294 I llm_load_print_meta: rope scaling     = linear
0.00.652.302 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.652.304 I llm_load_print_meta: freq_scale_train = 1
0.00.652.304 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.652.304 I llm_load_print_meta: rope_finetuned   = unknown
0.00.652.305 I llm_load_print_meta: ssm_d_conv       = 0
0.00.652.305 I llm_load_print_meta: ssm_d_inner      = 0
0.00.652.306 I llm_load_print_meta: ssm_d_state      = 0
0.00.652.306 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.652.306 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.652.307 I llm_load_print_meta: model type       = 2B
0.00.652.308 I llm_load_print_meta: model ftype      = Q8_0
0.00.652.309 I llm_load_print_meta: model params     = 2.51 B
0.00.652.318 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.652.318 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.652.319 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.652.320 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.652.320 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.652.327 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.652.328 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.652.329 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.652.335 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.652.337 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.652.338 I llm_load_print_meta: max token length = 93
0.00.749.839 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.755.994 I llama_new_context_with_model: n_seq_max     = 1
0.00.756.001 I llama_new_context_with_model: n_ctx         = 4096
0.00.756.002 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.756.002 I llama_new_context_with_model: n_batch       = 2048
0.00.756.002 I llama_new_context_with_model: n_ubatch      = 512
0.00.756.003 I llama_new_context_with_model: flash_attn    = 0
0.00.756.007 I llama_new_context_with_model: freq_base     = 10000.0
0.00.756.008 I llama_new_context_with_model: freq_scale    = 1
0.00.756.008 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.773.701 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.773.744 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.773.874 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.776.376 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.776.380 I llama_new_context_with_model: graph nodes  = 601
0.00.776.381 I llama_new_context_with_model: graph splits = 1
0.00.776.406 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.384.221 I main: llama threadpool init, n_threads = 4
0.01.384.235 I 
0.01.384.345 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.384.349 I 
0.01.384.575 I sampler seed: 4102808280
0.01.384.587 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.384.594 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.384.597 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.384.597 I 
 increasities and their impact on the health and well-being of individuals.

**Answer:**

**Medical Consequences of Sexual Assault and Related Trauma:**

*

0.14.917.986 I llama_perf_sampler_print:    sampling time =      49.37 ms /    33 runs   (    1.50 ms per token,   668.49 tokens per second)
0.14.917.989 I llama_perf_context_print:        load time =    1382.91 ms
0.14.918.008 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.918.010 I llama_perf_context_print:        eval time =   13443.26 ms /    32 runs   (  420.10 ms per token,     2.38 tokens per second)
0.14.918.011 I llama_perf_context_print:       total time =   13533.77 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.693 I build: 4037 (6109cf15) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.891 I main: llama backend init
0.00.001.153 I main: load the model and apply lora adapter, if any
0.00.024.295 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.306 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.408 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.421 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.423 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.428 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.432 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.433 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.434 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.435 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.436 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.447 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.451 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.452 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.453 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.455 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.159.073 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.258.573 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.276.833 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.276.843 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.276.844 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.276.845 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.276.847 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.276.848 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.276.849 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.276.853 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.276.854 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.276.855 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.276.856 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.276.857 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.276.866 I llama_model_loader: - type  f32:   37 tensors
0.00.276.868 I llama_model_loader: - type q8_0:  127 tensors
0.00.465.304 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.535.882 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.537.007 I llm_load_vocab: special tokens cache size = 5
0.00.634.805 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.634.876 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.634.877 I llm_load_print_meta: arch             = gemma
0.00.634.878 I llm_load_print_meta: vocab type       = SPM
0.00.634.879 I llm_load_print_meta: n_vocab          = 256000
0.00.634.882 I llm_load_print_meta: n_merges         = 0
0.00.634.883 I llm_load_print_meta: vocab_only       = 0
0.00.634.883 I llm_load_print_meta: n_ctx_train      = 8192
0.00.634.883 I llm_load_print_meta: n_embd           = 2048
0.00.634.884 I llm_load_print_meta: n_layer          = 18
0.00.634.949 I llm_load_print_meta: n_head           = 8
0.00.634.956 I llm_load_print_meta: n_head_kv        = 1
0.00.634.957 I llm_load_print_meta: n_rot            = 256
0.00.634.957 I llm_load_print_meta: n_swa            = 0
0.00.634.958 I llm_load_print_meta: n_embd_head_k    = 256
0.00.634.958 I llm_load_print_meta: n_embd_head_v    = 256
0.00.634.963 I llm_load_print_meta: n_gqa            = 8
0.00.634.967 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.634.972 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.634.973 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.634.974 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.634.975 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.634.976 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.634.976 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.634.981 I llm_load_print_meta: n_ff             = 16384
0.00.634.982 I llm_load_print_meta: n_expert         = 0
0.00.634.982 I llm_load_print_meta: n_expert_used    = 0
0.00.634.982 I llm_load_print_meta: causal attn      = 1
0.00.634.983 I llm_load_print_meta: pooling type     = 0
0.00.634.983 I llm_load_print_meta: rope type        = 2
0.00.634.985 I llm_load_print_meta: rope scaling     = linear
0.00.634.986 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.634.987 I llm_load_print_meta: freq_scale_train = 1
0.00.634.987 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.634.988 I llm_load_print_meta: rope_finetuned   = unknown
0.00.634.988 I llm_load_print_meta: ssm_d_conv       = 0
0.00.634.989 I llm_load_print_meta: ssm_d_inner      = 0
0.00.634.989 I llm_load_print_meta: ssm_d_state      = 0
0.00.634.989 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.634.989 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.634.990 I llm_load_print_meta: model type       = 2B
0.00.634.995 I llm_load_print_meta: model ftype      = Q8_0
0.00.634.996 I llm_load_print_meta: model params     = 2.51 B
0.00.635.005 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.635.005 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.635.006 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.635.006 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.635.007 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.635.008 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.635.008 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.635.009 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.635.016 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.635.017 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.635.018 I llm_load_print_meta: max token length = 93
0.00.727.997 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.728.008 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.728.009 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.728.010 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.728.011 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.728.012 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.733.953 I llama_new_context_with_model: n_seq_max     = 1
0.00.733.961 I llama_new_context_with_model: n_ctx         = 4096
0.00.733.961 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.733.961 I llama_new_context_with_model: n_batch       = 2048
0.00.733.962 I llama_new_context_with_model: n_ubatch      = 512
0.00.733.962 I llama_new_context_with_model: flash_attn    = 0
0.00.733.965 I llama_new_context_with_model: freq_base     = 10000.0
0.00.733.966 I llama_new_context_with_model: freq_scale    = 1
0.00.733.966 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.751.247 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.751.289 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.751.416 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.754.007 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.754.011 I llama_new_context_with_model: graph nodes  = 601
0.00.754.011 I llama_new_context_with_model: graph splits = 1
0.00.754.036 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.377.285 I main: llama threadpool init, n_threads = 4
0.01.377.299 I 
0.01.377.409 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.377.413 I 
0.01.377.645 I sampler seed: 2604847147
0.01.377.658 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.377.664 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.377.667 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.377.667 I 
 increasements, and other limitations or restrictions that impact the use of a product or service. [end of text]


0.09.413.827 I llama_perf_sampler_print:    sampling time =      29.22 ms /    20 runs   (    1.46 ms per token,   684.37 tokens per second)
0.09.413.830 I llama_perf_context_print:        load time =    1376.03 ms
0.09.413.831 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.413.832 I llama_perf_context_print:        eval time =    7982.06 ms /    19 runs   (  420.11 ms per token,     2.38 tokens per second)
0.09.413.846 I llama_perf_context_print:       total time =    8036.55 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.686 I build: 4037 (6109cf15) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.885 I main: llama backend init
0.00.001.143 I main: load the model and apply lora adapter, if any
0.00.023.596 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.609 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.705 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.717 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.720 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.725 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.729 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.730 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.731 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.732 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.733 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.741 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.742 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.743 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.745 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.746 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.158.848 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.259.598 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.277.862 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.277.874 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.277.875 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.277.876 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.277.877 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.277.878 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.277.880 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.277.884 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.277.885 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.277.886 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.277.887 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.277.888 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.277.897 I llama_model_loader: - type  f32:   37 tensors
0.00.277.899 I llama_model_loader: - type q8_0:  127 tensors
0.00.473.130 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.542.836 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.543.855 I llm_load_vocab: special tokens cache size = 5
0.00.641.908 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.641.981 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.641.982 I llm_load_print_meta: arch             = gemma
0.00.641.983 I llm_load_print_meta: vocab type       = SPM
0.00.641.983 I llm_load_print_meta: n_vocab          = 256000
0.00.641.986 I llm_load_print_meta: n_merges         = 0
0.00.641.987 I llm_load_print_meta: vocab_only       = 0
0.00.641.987 I llm_load_print_meta: n_ctx_train      = 8192
0.00.641.987 I llm_load_print_meta: n_embd           = 2048
0.00.641.988 I llm_load_print_meta: n_layer          = 18
0.00.642.052 I llm_load_print_meta: n_head           = 8
0.00.642.060 I llm_load_print_meta: n_head_kv        = 1
0.00.642.061 I llm_load_print_meta: n_rot            = 256
0.00.642.061 I llm_load_print_meta: n_swa            = 0
0.00.642.062 I llm_load_print_meta: n_embd_head_k    = 256
0.00.642.062 I llm_load_print_meta: n_embd_head_v    = 256
0.00.642.067 I llm_load_print_meta: n_gqa            = 8
0.00.642.071 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.642.076 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.642.077 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.642.079 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.642.079 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.642.079 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.642.080 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.642.084 I llm_load_print_meta: n_ff             = 16384
0.00.642.085 I llm_load_print_meta: n_expert         = 0
0.00.642.085 I llm_load_print_meta: n_expert_used    = 0
0.00.642.086 I llm_load_print_meta: causal attn      = 1
0.00.642.086 I llm_load_print_meta: pooling type     = 0
0.00.642.086 I llm_load_print_meta: rope type        = 2
0.00.642.087 I llm_load_print_meta: rope scaling     = linear
0.00.642.088 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.642.089 I llm_load_print_meta: freq_scale_train = 1
0.00.642.090 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.642.091 I llm_load_print_meta: rope_finetuned   = unknown
0.00.642.091 I llm_load_print_meta: ssm_d_conv       = 0
0.00.642.091 I llm_load_print_meta: ssm_d_inner      = 0
0.00.642.092 I llm_load_print_meta: ssm_d_state      = 0
0.00.642.093 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.642.093 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.642.094 I llm_load_print_meta: model type       = 2B
0.00.642.107 I llm_load_print_meta: model ftype      = Q8_0
0.00.642.113 I llm_load_print_meta: model params     = 2.51 B
0.00.642.122 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.642.123 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.642.124 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.642.124 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.642.125 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.642.126 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.642.126 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.642.127 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.642.133 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.642.135 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.642.136 I llm_load_print_meta: max token length = 93
0.00.714.653 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.714.664 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.720.360 I llama_new_context_with_model: n_seq_max     = 1
0.00.720.367 I llama_new_context_with_model: n_ctx         = 4096
0.00.720.367 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.720.367 I llama_new_context_with_model: n_batch       = 2048
0.00.720.368 I llama_new_context_with_model: n_ubatch      = 512
0.00.720.368 I llama_new_context_with_model: flash_attn    = 0
0.00.720.370 I llama_new_context_with_model: freq_base     = 10000.0
0.00.720.371 I llama_new_context_with_model: freq_scale    = 1
0.00.720.372 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.737.450 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.737.487 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.737.616 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.740.129 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.740.132 I llama_new_context_with_model: graph nodes  = 601
0.00.740.133 I llama_new_context_with_model: graph splits = 1
0.00.740.157 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.348.157 I main: llama threadpool init, n_threads = 4
0.01.348.172 I 
0.01.348.280 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.348.281 I 
0.01.348.514 I sampler seed: 718516739
0.01.348.527 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.348.535 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.348.535 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.348.536 I 
 increasities and the consequences of such behavior on the individual and the community. [end of text]


0.08.112.746 I llama_perf_sampler_print:    sampling time =      24.71 ms /    17 runs   (    1.45 ms per token,   688.09 tokens per second)
0.08.112.748 I llama_perf_context_print:        load time =    1346.92 ms
0.08.112.762 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.112.764 I llama_perf_context_print:        eval time =    6718.30 ms /    16 runs   (  419.89 ms per token,     2.38 tokens per second)
0.08.112.765 I llama_perf_context_print:       total time =    6764.60 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m45.433s
user	2m12.948s
sys	0m9.684s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4037 (6109cf15)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199697.88 ms
main:    total time = 199697.88 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 4037 (6109cf15) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.822 I main: llama backend init
0.00.001.089 I main: load the model and apply lora adapter, if any
0.00.023.433 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.444 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.540 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.553 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.555 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.560 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.564 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.565 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.566 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.567 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.568 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.577 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.578 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.579 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.580 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.581 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.158.159 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.259 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.643 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.651 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.653 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.654 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.655 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.656 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.657 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.661 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.662 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.663 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.664 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.275.665 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.673 I llama_model_loader: - type  f32:   37 tensors
0.00.275.675 I llama_model_loader: - type q4_K:  108 tensors
0.00.275.676 I llama_model_loader: - type q6_K:   19 tensors
0.00.467.512 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.534.175 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.535.149 I llm_load_vocab: special tokens cache size = 5
0.00.647.710 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.647.783 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.647.785 I llm_load_print_meta: arch             = gemma
0.00.647.785 I llm_load_print_meta: vocab type       = SPM
0.00.647.786 I llm_load_print_meta: n_vocab          = 256000
0.00.647.789 I llm_load_print_meta: n_merges         = 0
0.00.647.790 I llm_load_print_meta: vocab_only       = 0
0.00.647.790 I llm_load_print_meta: n_ctx_train      = 8192
0.00.647.791 I llm_load_print_meta: n_embd           = 2048
0.00.647.791 I llm_load_print_meta: n_layer          = 18
0.00.647.857 I llm_load_print_meta: n_head           = 8
0.00.647.864 I llm_load_print_meta: n_head_kv        = 1
0.00.647.865 I llm_load_print_meta: n_rot            = 256
0.00.647.865 I llm_load_print_meta: n_swa            = 0
0.00.647.866 I llm_load_print_meta: n_embd_head_k    = 256
0.00.647.866 I llm_load_print_meta: n_embd_head_v    = 256
0.00.647.871 I llm_load_print_meta: n_gqa            = 8
0.00.647.875 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.647.880 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.647.882 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.647.883 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.647.884 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.647.884 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.647.885 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.647.890 I llm_load_print_meta: n_ff             = 16384
0.00.647.890 I llm_load_print_meta: n_expert         = 0
0.00.647.891 I llm_load_print_meta: n_expert_used    = 0
0.00.647.891 I llm_load_print_meta: causal attn      = 1
0.00.647.891 I llm_load_print_meta: pooling type     = 0
0.00.647.892 I llm_load_print_meta: rope type        = 2
0.00.647.892 I llm_load_print_meta: rope scaling     = linear
0.00.647.893 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.647.894 I llm_load_print_meta: freq_scale_train = 1
0.00.647.894 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.647.895 I llm_load_print_meta: rope_finetuned   = unknown
0.00.647.895 I llm_load_print_meta: ssm_d_conv       = 0
0.00.647.895 I llm_load_print_meta: ssm_d_inner      = 0
0.00.647.896 I llm_load_print_meta: ssm_d_state      = 0
0.00.647.896 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.647.896 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.647.897 I llm_load_print_meta: model type       = 2B
0.00.647.898 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.647.898 I llm_load_print_meta: model params     = 2.51 B
0.00.647.908 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.647.909 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.647.909 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.647.910 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.647.910 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.647.911 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.647.911 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.647.911 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.647.917 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.647.918 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.647.919 I llm_load_print_meta: max token length = 93
0.00.710.823 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.710.832 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.710.833 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.710.833 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.710.834 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.710.835 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.716.670 I llama_new_context_with_model: n_seq_max     = 1
0.00.716.678 I llama_new_context_with_model: n_ctx         = 4096
0.00.716.678 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.716.679 I llama_new_context_with_model: n_batch       = 2048
0.00.716.679 I llama_new_context_with_model: n_ubatch      = 512
0.00.716.680 I llama_new_context_with_model: flash_attn    = 0
0.00.716.683 I llama_new_context_with_model: freq_base     = 10000.0
0.00.716.684 I llama_new_context_with_model: freq_scale    = 1
0.00.716.685 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.733.064 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.733.105 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.733.236 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.735.811 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.735.816 I llama_new_context_with_model: graph nodes  = 601
0.00.735.816 I llama_new_context_with_model: graph splits = 1
0.00.735.841 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.307.397 I main: llama threadpool init, n_threads = 4
0.01.307.410 I 
0.01.307.521 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.307.525 I 
0.01.307.763 I sampler seed: 745731811
0.01.307.775 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.307.782 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.307.785 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.307.785 I 
 strick. The narrator is a member of the expedition. We learn that the expedition has been plagued by setbacks, with dwindling supplies and dwindling morale.

**Narrator

0.12.196.200 I llama_perf_sampler_print:    sampling time =      49.35 ms /    33 runs   (    1.50 ms per token,   668.67 tokens per second)
0.12.196.214 I llama_perf_context_print:        load time =    1306.21 ms
0.12.196.216 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.196.218 I llama_perf_context_print:        eval time =   10798.35 ms /    32 runs   (  337.45 ms per token,     2.96 tokens per second)
0.12.196.220 I llama_perf_context_print:       total time =   10888.81 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4037 (6109cf15)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199804.26 ms
main:    total time = 199804.26 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.687 I build: 4037 (6109cf15) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.902 I main: llama backend init
0.00.001.165 I main: load the model and apply lora adapter, if any
0.00.023.849 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.955 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.967 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.968 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.973 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.975 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.976 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.977 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.978 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.979 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.988 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.989 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.990 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.991 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.992 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.158.441 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.627 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.279.167 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.279.179 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.279.181 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.279.182 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.279.183 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.279.184 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.279.186 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.279.190 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.279.191 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.279.201 I llama_model_loader: - type  f32:   37 tensors
0.00.279.203 I llama_model_loader: - type q4_K:  108 tensors
0.00.279.204 I llama_model_loader: - type q6_K:   19 tensors
0.00.473.114 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.542.690 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.543.672 I llm_load_vocab: special tokens cache size = 5
0.00.641.240 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.641.324 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.641.325 I llm_load_print_meta: arch             = gemma
0.00.641.327 I llm_load_print_meta: vocab type       = SPM
0.00.641.328 I llm_load_print_meta: n_vocab          = 256000
0.00.641.330 I llm_load_print_meta: n_merges         = 0
0.00.641.331 I llm_load_print_meta: vocab_only       = 0
0.00.641.331 I llm_load_print_meta: n_ctx_train      = 8192
0.00.641.332 I llm_load_print_meta: n_embd           = 2048
0.00.641.332 I llm_load_print_meta: n_layer          = 18
0.00.641.398 I llm_load_print_meta: n_head           = 8
0.00.641.405 I llm_load_print_meta: n_head_kv        = 1
0.00.641.406 I llm_load_print_meta: n_rot            = 256
0.00.641.406 I llm_load_print_meta: n_swa            = 0
0.00.641.407 I llm_load_print_meta: n_embd_head_k    = 256
0.00.641.407 I llm_load_print_meta: n_embd_head_v    = 256
0.00.641.412 I llm_load_print_meta: n_gqa            = 8
0.00.641.416 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.641.421 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.641.422 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.641.424 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.641.425 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.641.425 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.641.426 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.641.430 I llm_load_print_meta: n_ff             = 16384
0.00.641.432 I llm_load_print_meta: n_expert         = 0
0.00.641.432 I llm_load_print_meta: n_expert_used    = 0
0.00.641.432 I llm_load_print_meta: causal attn      = 1
0.00.641.433 I llm_load_print_meta: pooling type     = 0
0.00.641.433 I llm_load_print_meta: rope type        = 2
0.00.641.435 I llm_load_print_meta: rope scaling     = linear
0.00.641.436 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.641.437 I llm_load_print_meta: freq_scale_train = 1
0.00.641.437 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.641.448 I llm_load_print_meta: rope_finetuned   = unknown
0.00.641.448 I llm_load_print_meta: ssm_d_conv       = 0
0.00.641.449 I llm_load_print_meta: ssm_d_inner      = 0
0.00.641.449 I llm_load_print_meta: ssm_d_state      = 0
0.00.641.450 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.641.451 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.641.451 I llm_load_print_meta: model type       = 2B
0.00.641.452 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.641.453 I llm_load_print_meta: model params     = 2.51 B
0.00.641.463 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.641.464 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.641.465 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.641.465 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.641.466 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.641.467 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.641.468 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.641.468 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.641.474 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.641.476 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.641.477 I llm_load_print_meta: max token length = 93
0.00.700.093 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.706.070 I llama_new_context_with_model: n_seq_max     = 1
0.00.706.078 I llama_new_context_with_model: n_ctx         = 4096
0.00.706.079 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.706.079 I llama_new_context_with_model: n_batch       = 2048
0.00.706.079 I llama_new_context_with_model: n_ubatch      = 512
0.00.706.080 I llama_new_context_with_model: flash_attn    = 0
0.00.706.084 I llama_new_context_with_model: freq_base     = 10000.0
0.00.706.085 I llama_new_context_with_model: freq_scale    = 1
0.00.706.086 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.724.382 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.724.424 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.724.556 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.727.205 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.727.209 I llama_new_context_with_model: graph nodes  = 601
0.00.727.209 I llama_new_context_with_model: graph splits = 1
0.00.727.235 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.298.624 I main: llama threadpool init, n_threads = 4
0.01.298.635 I 
0.01.298.745 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.298.748 I 
0.01.298.982 I sampler seed: 1493463989
0.01.298.994 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.299.000 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.299.004 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.299.004 I 
 seconally in the morning, and he would mutter, "Rise and shine, little girls!" to them.

The little girls would giggle and go back to

0.12.207.757 I llama_perf_sampler_print:    sampling time =      49.14 ms /    33 runs   (    1.49 ms per token,   671.50 tokens per second)
0.12.207.760 I llama_perf_context_print:        load time =    1297.36 ms
0.12.207.762 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.207.777 I llama_perf_context_print:        eval time =   10817.66 ms /    32 runs   (  338.05 ms per token,     2.96 tokens per second)
0.12.207.778 I llama_perf_context_print:       total time =   10909.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.829s
user	50m20.042s
sys	0m6.473s
