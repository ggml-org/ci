+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.682 I build: 3937 (17bb9280) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.908 I main: llama backend init
0.00.002.849 I main: load the model and apply lora adapter, if any
0.00.025.082 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.296 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.388 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.399 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.401 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.405 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.406 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.407 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.408 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.409 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.410 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.418 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.420 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.421 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.422 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.423 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.567 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.200 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.613 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.623 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.625 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.626 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.627 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.628 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.629 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.632 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.633 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.635 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.635 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.637 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.645 I llama_model_loader: - type  f32:   37 tensors
0.00.267.649 I llama_model_loader: - type q8_0:  127 tensors
0.00.439.064 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.510.289 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.511.251 I llm_load_vocab: special tokens cache size = 5
0.00.610.124 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.610.198 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.610.199 I llm_load_print_meta: arch             = gemma
0.00.610.200 I llm_load_print_meta: vocab type       = SPM
0.00.610.200 I llm_load_print_meta: n_vocab          = 256000
0.00.610.203 I llm_load_print_meta: n_merges         = 0
0.00.610.203 I llm_load_print_meta: vocab_only       = 0
0.00.610.204 I llm_load_print_meta: n_ctx_train      = 8192
0.00.610.204 I llm_load_print_meta: n_embd           = 2048
0.00.610.205 I llm_load_print_meta: n_layer          = 18
0.00.610.267 I llm_load_print_meta: n_head           = 8
0.00.610.274 I llm_load_print_meta: n_head_kv        = 1
0.00.610.275 I llm_load_print_meta: n_rot            = 256
0.00.610.275 I llm_load_print_meta: n_swa            = 0
0.00.610.276 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.276 I llm_load_print_meta: n_embd_head_v    = 256
0.00.610.280 I llm_load_print_meta: n_gqa            = 8
0.00.610.285 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.290 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.291 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.292 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.292 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.610.293 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.610.293 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.610.299 I llm_load_print_meta: n_ff             = 16384
0.00.610.299 I llm_load_print_meta: n_expert         = 0
0.00.610.299 I llm_load_print_meta: n_expert_used    = 0
0.00.610.300 I llm_load_print_meta: causal attn      = 1
0.00.610.300 I llm_load_print_meta: pooling type     = 0
0.00.610.300 I llm_load_print_meta: rope type        = 2
0.00.610.301 I llm_load_print_meta: rope scaling     = linear
0.00.610.302 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.610.303 I llm_load_print_meta: freq_scale_train = 1
0.00.610.303 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.610.304 I llm_load_print_meta: rope_finetuned   = unknown
0.00.610.304 I llm_load_print_meta: ssm_d_conv       = 0
0.00.610.304 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.304 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.305 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.305 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.306 I llm_load_print_meta: model type       = 2B
0.00.610.307 I llm_load_print_meta: model ftype      = Q8_0
0.00.610.307 I llm_load_print_meta: model params     = 2.51 B
0.00.610.308 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.610.308 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.309 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.309 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.310 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.310 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.311 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.311 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.317 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.318 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.319 I llm_load_print_meta: max token length = 93
0.00.610.486 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.711.627 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.711.640 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.711.640 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.711.641 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.711.642 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.711.643 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.717.403 I llama_new_context_with_model: n_ctx      = 8192
0.00.717.412 I llama_new_context_with_model: n_batch    = 2048
0.00.717.412 I llama_new_context_with_model: n_ubatch   = 512
0.00.717.413 I llama_new_context_with_model: flash_attn = 0
0.00.717.416 I llama_new_context_with_model: freq_base  = 10000.0
0.00.717.417 I llama_new_context_with_model: freq_scale = 1
0.00.748.391 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.748.434 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.748.556 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.749.958 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.749.963 I llama_new_context_with_model: graph nodes  = 601
0.00.749.963 I llama_new_context_with_model: graph splits = 1
0.00.749.979 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.359.760 I main: llama threadpool init, n_threads = 4
0.01.359.774 I 
0.01.359.879 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.359.883 I 
0.01.360.064 I sampler seed: 3801073710
0.01.360.075 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.360.083 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.360.084 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.360.084 I 
 increasities, and other related issues. [end of text]


0.05.141.647 I llama_perf_sampler_print:    sampling time =      14.01 ms /    10 runs   (    1.40 ms per token,   713.93 tokens per second)
0.05.141.652 I llama_perf_context_print:        load time =    1356.82 ms
0.05.141.654 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.141.655 I llama_perf_context_print:        eval time =    3757.11 ms /     9 runs   (  417.46 ms per token,     2.40 tokens per second)
0.05.141.656 I llama_perf_context_print:       total time =    3781.90 ms /    10 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.652 I build: 3937 (17bb9280) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.002.839 I main: load the model and apply lora adapter, if any
0.00.025.394 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.495 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.512 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.516 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.521 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.522 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.523 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.524 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.525 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.526 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.534 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.535 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.536 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.537 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.538 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.100 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.140 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.399 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.408 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.409 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.410 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.411 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.413 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.414 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.417 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.419 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.420 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.421 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.422 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.432 I llama_model_loader: - type  f32:   37 tensors
0.00.268.436 I llama_model_loader: - type q8_0:  127 tensors
0.00.449.877 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.520.103 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.521.137 I llm_load_vocab: special tokens cache size = 5
0.00.619.195 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.619.266 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.619.267 I llm_load_print_meta: arch             = gemma
0.00.619.268 I llm_load_print_meta: vocab type       = SPM
0.00.619.269 I llm_load_print_meta: n_vocab          = 256000
0.00.619.271 I llm_load_print_meta: n_merges         = 0
0.00.619.272 I llm_load_print_meta: vocab_only       = 0
0.00.619.272 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.272 I llm_load_print_meta: n_embd           = 2048
0.00.619.273 I llm_load_print_meta: n_layer          = 18
0.00.619.338 I llm_load_print_meta: n_head           = 8
0.00.619.344 I llm_load_print_meta: n_head_kv        = 1
0.00.619.345 I llm_load_print_meta: n_rot            = 256
0.00.619.345 I llm_load_print_meta: n_swa            = 0
0.00.619.346 I llm_load_print_meta: n_embd_head_k    = 256
0.00.619.346 I llm_load_print_meta: n_embd_head_v    = 256
0.00.619.351 I llm_load_print_meta: n_gqa            = 8
0.00.619.355 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.619.360 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.619.362 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.619.363 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.619.364 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.619.364 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.619.364 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.619.369 I llm_load_print_meta: n_ff             = 16384
0.00.619.370 I llm_load_print_meta: n_expert         = 0
0.00.619.370 I llm_load_print_meta: n_expert_used    = 0
0.00.619.371 I llm_load_print_meta: causal attn      = 1
0.00.619.371 I llm_load_print_meta: pooling type     = 0
0.00.619.372 I llm_load_print_meta: rope type        = 2
0.00.619.372 I llm_load_print_meta: rope scaling     = linear
0.00.619.373 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.619.374 I llm_load_print_meta: freq_scale_train = 1
0.00.619.375 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.619.375 I llm_load_print_meta: rope_finetuned   = unknown
0.00.619.375 I llm_load_print_meta: ssm_d_conv       = 0
0.00.619.376 I llm_load_print_meta: ssm_d_inner      = 0
0.00.619.376 I llm_load_print_meta: ssm_d_state      = 0
0.00.619.376 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.619.377 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.619.377 I llm_load_print_meta: model type       = 2B
0.00.619.378 I llm_load_print_meta: model ftype      = Q8_0
0.00.619.379 I llm_load_print_meta: model params     = 2.51 B
0.00.619.380 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.619.380 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.619.381 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.619.381 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.619.381 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.619.382 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.619.382 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.619.382 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.619.388 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.619.389 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.619.389 I llm_load_print_meta: max token length = 93
0.00.619.555 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.712.934 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.718.605 I llama_new_context_with_model: n_ctx      = 8192
0.00.718.612 I llama_new_context_with_model: n_batch    = 2048
0.00.718.613 I llama_new_context_with_model: n_ubatch   = 512
0.00.718.613 I llama_new_context_with_model: flash_attn = 0
0.00.718.617 I llama_new_context_with_model: freq_base  = 10000.0
0.00.718.617 I llama_new_context_with_model: freq_scale = 1
0.00.749.849 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.749.896 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.750.015 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.751.387 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.751.392 I llama_new_context_with_model: graph nodes  = 601
0.00.751.393 I llama_new_context_with_model: graph splits = 1
0.00.751.408 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.363.024 I main: llama threadpool init, n_threads = 4
0.01.363.036 I 
0.01.363.141 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.363.145 I 
0.01.363.320 I sampler seed: 676333439
0.01.363.331 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.363.338 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.363.339 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.363.340 I 
 increably.

I am unable to generate a response because the provided context does not contain any information regarding the requested action. [end of text]


0.12.305.802 I llama_perf_sampler_print:    sampling time =      40.15 ms /    27 runs   (    1.49 ms per token,   672.56 tokens per second)
0.12.305.805 I llama_perf_context_print:        load time =    1360.09 ms
0.12.305.807 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.305.808 I llama_perf_context_print:        eval time =   10875.58 ms /    26 runs   (  418.29 ms per token,     2.39 tokens per second)
0.12.305.809 I llama_perf_context_print:       total time =   10942.79 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 3937 (17bb9280) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.002.783 I main: load the model and apply lora adapter, if any
0.00.025.529 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.873 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.026.001 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.017 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.023 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.029 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.031 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.033 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.035 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.037 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.040 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.049 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.054 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.056 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.059 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.061 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.157.707 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.260.672 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.280.531 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.280.546 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.280.548 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.280.550 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.280.551 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.280.553 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.280.555 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.280.560 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.280.562 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.280.564 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.280.565 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.280.568 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.280.578 I llama_model_loader: - type  f32:   37 tensors
0.00.280.583 I llama_model_loader: - type q8_0:  127 tensors
0.00.476.648 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.546.688 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.547.688 I llm_load_vocab: special tokens cache size = 5
0.00.646.544 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.646.617 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.646.618 I llm_load_print_meta: arch             = gemma
0.00.646.619 I llm_load_print_meta: vocab type       = SPM
0.00.646.620 I llm_load_print_meta: n_vocab          = 256000
0.00.646.622 I llm_load_print_meta: n_merges         = 0
0.00.646.622 I llm_load_print_meta: vocab_only       = 0
0.00.646.623 I llm_load_print_meta: n_ctx_train      = 8192
0.00.646.623 I llm_load_print_meta: n_embd           = 2048
0.00.646.623 I llm_load_print_meta: n_layer          = 18
0.00.646.688 I llm_load_print_meta: n_head           = 8
0.00.646.695 I llm_load_print_meta: n_head_kv        = 1
0.00.646.696 I llm_load_print_meta: n_rot            = 256
0.00.646.696 I llm_load_print_meta: n_swa            = 0
0.00.646.696 I llm_load_print_meta: n_embd_head_k    = 256
0.00.646.697 I llm_load_print_meta: n_embd_head_v    = 256
0.00.646.701 I llm_load_print_meta: n_gqa            = 8
0.00.646.706 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.646.740 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.646.742 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.646.743 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.646.751 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.646.752 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.646.753 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.646.759 I llm_load_print_meta: n_ff             = 16384
0.00.646.760 I llm_load_print_meta: n_expert         = 0
0.00.646.761 I llm_load_print_meta: n_expert_used    = 0
0.00.646.761 I llm_load_print_meta: causal attn      = 1
0.00.646.762 I llm_load_print_meta: pooling type     = 0
0.00.646.762 I llm_load_print_meta: rope type        = 2
0.00.646.763 I llm_load_print_meta: rope scaling     = linear
0.00.646.765 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.646.766 I llm_load_print_meta: freq_scale_train = 1
0.00.646.766 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.646.767 I llm_load_print_meta: rope_finetuned   = unknown
0.00.646.767 I llm_load_print_meta: ssm_d_conv       = 0
0.00.646.767 I llm_load_print_meta: ssm_d_inner      = 0
0.00.646.768 I llm_load_print_meta: ssm_d_state      = 0
0.00.646.769 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.646.769 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.646.770 I llm_load_print_meta: model type       = 2B
0.00.646.772 I llm_load_print_meta: model ftype      = Q8_0
0.00.646.773 I llm_load_print_meta: model params     = 2.51 B
0.00.646.774 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.646.774 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.646.775 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.646.775 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.646.776 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.646.776 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.646.777 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.646.778 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.646.783 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.646.785 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.646.786 I llm_load_print_meta: max token length = 93
0.00.646.962 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.724.535 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.724.547 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.724.548 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.724.548 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.724.549 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.724.550 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.730.446 I llama_new_context_with_model: n_ctx      = 8192
0.00.730.455 I llama_new_context_with_model: n_batch    = 2048
0.00.730.455 I llama_new_context_with_model: n_ubatch   = 512
0.00.730.456 I llama_new_context_with_model: flash_attn = 0
0.00.730.460 I llama_new_context_with_model: freq_base  = 10000.0
0.00.730.460 I llama_new_context_with_model: freq_scale = 1
0.00.762.537 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.762.579 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.762.693 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.764.155 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.764.160 I llama_new_context_with_model: graph nodes  = 601
0.00.764.160 I llama_new_context_with_model: graph splits = 1
0.00.764.176 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.373.808 I main: llama threadpool init, n_threads = 4
0.01.373.820 I 
0.01.373.924 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.373.929 I 
0.01.374.107 I sampler seed: 3364016906
0.01.374.118 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.374.126 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.374.127 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.374.130 I 
 increably, and the wind whistled through the swaying branches of the oak tree.

**What is the setting?** [end of text]


0.11.982.564 I llama_perf_sampler_print:    sampling time =      38.62 ms /    26 runs   (    1.49 ms per token,   673.30 tokens per second)
0.11.982.567 I llama_perf_context_print:        load time =    1370.92 ms
0.11.982.569 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.982.571 I llama_perf_context_print:        eval time =   10540.92 ms /    25 runs   (  421.64 ms per token,     2.37 tokens per second)
0.11.982.582 I llama_perf_context_print:       total time =   10608.76 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.647 I build: 3937 (17bb9280) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.850 I main: llama backend init
0.00.002.790 I main: load the model and apply lora adapter, if any
0.00.024.765 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.980 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.070 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.081 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.083 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.087 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.088 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.091 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.092 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.105 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.109 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.116 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.117 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.124 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.128 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.129 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.390 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.018 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.512 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.521 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.522 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.523 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.524 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.526 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.527 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.530 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.544 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.547 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.548 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.267.549 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.559 I llama_model_loader: - type  f32:   37 tensors
0.00.267.563 I llama_model_loader: - type q8_0:  127 tensors
0.00.457.249 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.525.478 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.526.403 I llm_load_vocab: special tokens cache size = 5
0.00.622.981 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.623.050 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.623.051 I llm_load_print_meta: arch             = gemma
0.00.623.052 I llm_load_print_meta: vocab type       = SPM
0.00.623.052 I llm_load_print_meta: n_vocab          = 256000
0.00.623.055 I llm_load_print_meta: n_merges         = 0
0.00.623.055 I llm_load_print_meta: vocab_only       = 0
0.00.623.056 I llm_load_print_meta: n_ctx_train      = 8192
0.00.623.056 I llm_load_print_meta: n_embd           = 2048
0.00.623.056 I llm_load_print_meta: n_layer          = 18
0.00.623.119 I llm_load_print_meta: n_head           = 8
0.00.623.125 I llm_load_print_meta: n_head_kv        = 1
0.00.623.126 I llm_load_print_meta: n_rot            = 256
0.00.623.128 I llm_load_print_meta: n_swa            = 0
0.00.623.128 I llm_load_print_meta: n_embd_head_k    = 256
0.00.623.128 I llm_load_print_meta: n_embd_head_v    = 256
0.00.623.133 I llm_load_print_meta: n_gqa            = 8
0.00.623.137 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.623.142 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.623.144 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.623.146 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.623.146 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.623.147 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.623.148 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.623.153 I llm_load_print_meta: n_ff             = 16384
0.00.623.154 I llm_load_print_meta: n_expert         = 0
0.00.623.154 I llm_load_print_meta: n_expert_used    = 0
0.00.623.154 I llm_load_print_meta: causal attn      = 1
0.00.623.165 I llm_load_print_meta: pooling type     = 0
0.00.623.166 I llm_load_print_meta: rope type        = 2
0.00.623.166 I llm_load_print_meta: rope scaling     = linear
0.00.623.168 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.623.169 I llm_load_print_meta: freq_scale_train = 1
0.00.623.170 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.623.170 I llm_load_print_meta: rope_finetuned   = unknown
0.00.623.184 I llm_load_print_meta: ssm_d_conv       = 0
0.00.623.189 I llm_load_print_meta: ssm_d_inner      = 0
0.00.623.189 I llm_load_print_meta: ssm_d_state      = 0
0.00.623.190 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.623.190 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.623.191 I llm_load_print_meta: model type       = 2B
0.00.623.192 I llm_load_print_meta: model ftype      = Q8_0
0.00.623.192 I llm_load_print_meta: model params     = 2.51 B
0.00.623.194 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.623.194 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.623.195 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.623.196 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.623.197 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.623.204 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.623.205 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.623.206 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.623.212 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.623.213 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.623.213 I llm_load_print_meta: max token length = 93
0.00.623.382 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.694.764 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.694.775 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.700.403 I llama_new_context_with_model: n_ctx      = 8192
0.00.700.412 I llama_new_context_with_model: n_batch    = 2048
0.00.700.412 I llama_new_context_with_model: n_ubatch   = 512
0.00.700.413 I llama_new_context_with_model: flash_attn = 0
0.00.700.416 I llama_new_context_with_model: freq_base  = 10000.0
0.00.700.417 I llama_new_context_with_model: freq_scale = 1
0.00.733.046 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.733.094 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.733.235 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.734.619 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.734.624 I llama_new_context_with_model: graph nodes  = 601
0.00.734.624 I llama_new_context_with_model: graph splits = 1
0.00.734.641 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.343.993 I main: llama threadpool init, n_threads = 4
0.01.344.006 I 
0.01.344.109 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.344.113 I 
0.01.344.287 I sampler seed: 2060301227
0.01.344.298 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.344.306 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.344.307 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.344.307 I 
 seconary key ideas to be integrated into the analysis:

**Additional ideas:**

* Examine the role of social media algorithms in shaping user experiences and content curation

0.14.774.196 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.05 tokens per second)
0.14.774.199 I llama_perf_context_print:        load time =    1341.12 ms
0.14.774.214 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.774.216 I llama_perf_context_print:        eval time =   13347.65 ms /    32 runs   (  417.11 ms per token,     2.40 tokens per second)
0.14.774.216 I llama_perf_context_print:       total time =   13430.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m55.614s
user	2m47.769s
sys	0m9.689s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3937 (17bb9280)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198217.50 ms
main:    total time = 198217.50 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 3937 (17bb9280) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.850 I main: llama backend init
0.00.002.802 I main: load the model and apply lora adapter, if any
0.00.024.807 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.014 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.105 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.118 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.119 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.123 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.125 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.127 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.128 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.129 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.130 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.136 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.137 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.138 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.140 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.141 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.393 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.568 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.810 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.818 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.819 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.820 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.821 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.822 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.823 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.826 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.827 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.828 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.829 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.830 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.838 I llama_model_loader: - type  f32:   37 tensors
0.00.266.843 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.844 I llama_model_loader: - type q6_K:   19 tensors
0.00.460.528 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.528.359 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.529.352 I llm_load_vocab: special tokens cache size = 5
0.00.624.610 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.624.683 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.624.687 I llm_load_print_meta: arch             = gemma
0.00.624.688 I llm_load_print_meta: vocab type       = SPM
0.00.624.689 I llm_load_print_meta: n_vocab          = 256000
0.00.624.691 I llm_load_print_meta: n_merges         = 0
0.00.624.691 I llm_load_print_meta: vocab_only       = 0
0.00.624.692 I llm_load_print_meta: n_ctx_train      = 8192
0.00.624.692 I llm_load_print_meta: n_embd           = 2048
0.00.624.692 I llm_load_print_meta: n_layer          = 18
0.00.624.757 I llm_load_print_meta: n_head           = 8
0.00.624.766 I llm_load_print_meta: n_head_kv        = 1
0.00.624.767 I llm_load_print_meta: n_rot            = 256
0.00.624.768 I llm_load_print_meta: n_swa            = 0
0.00.624.769 I llm_load_print_meta: n_embd_head_k    = 256
0.00.624.769 I llm_load_print_meta: n_embd_head_v    = 256
0.00.624.774 I llm_load_print_meta: n_gqa            = 8
0.00.624.779 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.624.784 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.624.788 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.624.789 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.624.790 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.624.790 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.624.791 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.624.816 I llm_load_print_meta: n_ff             = 16384
0.00.624.819 I llm_load_print_meta: n_expert         = 0
0.00.624.820 I llm_load_print_meta: n_expert_used    = 0
0.00.624.820 I llm_load_print_meta: causal attn      = 1
0.00.624.820 I llm_load_print_meta: pooling type     = 0
0.00.624.820 I llm_load_print_meta: rope type        = 2
0.00.624.821 I llm_load_print_meta: rope scaling     = linear
0.00.624.823 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.624.823 I llm_load_print_meta: freq_scale_train = 1
0.00.624.824 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.624.824 I llm_load_print_meta: rope_finetuned   = unknown
0.00.624.824 I llm_load_print_meta: ssm_d_conv       = 0
0.00.624.825 I llm_load_print_meta: ssm_d_inner      = 0
0.00.624.825 I llm_load_print_meta: ssm_d_state      = 0
0.00.624.826 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.624.826 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.624.827 I llm_load_print_meta: model type       = 2B
0.00.624.836 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.624.837 I llm_load_print_meta: model params     = 2.51 B
0.00.624.838 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.624.839 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.624.840 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.624.841 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.624.841 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.624.842 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.624.842 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.624.842 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.624.848 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.624.849 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.624.850 I llm_load_print_meta: max token length = 93
0.00.625.016 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.685.148 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.685.158 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.685.159 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.685.160 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.685.160 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.685.161 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.690.702 I llama_new_context_with_model: n_ctx      = 8192
0.00.690.710 I llama_new_context_with_model: n_batch    = 2048
0.00.690.711 I llama_new_context_with_model: n_ubatch   = 512
0.00.690.711 I llama_new_context_with_model: flash_attn = 0
0.00.690.715 I llama_new_context_with_model: freq_base  = 10000.0
0.00.690.715 I llama_new_context_with_model: freq_scale = 1
0.00.720.091 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.720.133 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.720.243 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.721.653 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.721.658 I llama_new_context_with_model: graph nodes  = 601
0.00.721.659 I llama_new_context_with_model: graph splits = 1
0.00.721.675 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.303.550 I main: llama threadpool init, n_threads = 4
0.01.303.564 I 
0.01.303.674 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.303.678 I 
0.01.303.857 I sampler seed: 1665005588
0.01.303.868 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.303.876 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.303.877 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.303.877 I 
 maneuvled around, and he found himself in a strange and unfamiliar place.

The room was bathed in a sickly yellow glow, emanating from a large,

0.12.220.368 I llama_perf_sampler_print:    sampling time =      49.40 ms /    33 runs   (    1.50 ms per token,   667.96 tokens per second)
0.12.220.371 I llama_perf_context_print:        load time =    1300.66 ms
0.12.220.392 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.220.394 I llama_perf_context_print:        eval time =   10834.55 ms /    32 runs   (  338.58 ms per token,     2.95 tokens per second)
0.12.220.395 I llama_perf_context_print:       total time =   10916.83 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3937 (17bb9280)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198034.02 ms
main:    total time = 198034.02 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 3937 (17bb9280) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.821 I main: llama backend init
0.00.002.769 I main: load the model and apply lora adapter, if any
0.00.025.149 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.244 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.255 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.256 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.260 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.261 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.262 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.263 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.264 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.265 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.271 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.273 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.274 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.275 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.276 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.259 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.068 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.299 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.307 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.308 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.309 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.310 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.311 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.312 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.329 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.333 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.342 I llama_model_loader: - type  f32:   37 tensors
0.00.267.346 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.347 I llama_model_loader: - type q6_K:   19 tensors
0.00.462.061 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.532.995 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.534.024 I llm_load_vocab: special tokens cache size = 5
0.00.633.877 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.633.945 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.633.946 I llm_load_print_meta: arch             = gemma
0.00.633.947 I llm_load_print_meta: vocab type       = SPM
0.00.633.947 I llm_load_print_meta: n_vocab          = 256000
0.00.633.950 I llm_load_print_meta: n_merges         = 0
0.00.633.951 I llm_load_print_meta: vocab_only       = 0
0.00.633.951 I llm_load_print_meta: n_ctx_train      = 8192
0.00.633.951 I llm_load_print_meta: n_embd           = 2048
0.00.633.952 I llm_load_print_meta: n_layer          = 18
0.00.634.018 I llm_load_print_meta: n_head           = 8
0.00.634.025 I llm_load_print_meta: n_head_kv        = 1
0.00.634.026 I llm_load_print_meta: n_rot            = 256
0.00.634.027 I llm_load_print_meta: n_swa            = 0
0.00.634.027 I llm_load_print_meta: n_embd_head_k    = 256
0.00.634.028 I llm_load_print_meta: n_embd_head_v    = 256
0.00.634.033 I llm_load_print_meta: n_gqa            = 8
0.00.634.037 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.634.043 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.634.045 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.634.046 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.634.047 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.634.047 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.634.047 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.634.053 I llm_load_print_meta: n_ff             = 16384
0.00.634.053 I llm_load_print_meta: n_expert         = 0
0.00.634.053 I llm_load_print_meta: n_expert_used    = 0
0.00.634.054 I llm_load_print_meta: causal attn      = 1
0.00.634.054 I llm_load_print_meta: pooling type     = 0
0.00.634.054 I llm_load_print_meta: rope type        = 2
0.00.634.059 I llm_load_print_meta: rope scaling     = linear
0.00.634.060 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.634.061 I llm_load_print_meta: freq_scale_train = 1
0.00.634.061 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.634.062 I llm_load_print_meta: rope_finetuned   = unknown
0.00.634.063 I llm_load_print_meta: ssm_d_conv       = 0
0.00.634.063 I llm_load_print_meta: ssm_d_inner      = 0
0.00.634.063 I llm_load_print_meta: ssm_d_state      = 0
0.00.634.064 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.634.064 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.634.064 I llm_load_print_meta: model type       = 2B
0.00.634.065 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.634.066 I llm_load_print_meta: model params     = 2.51 B
0.00.634.067 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.634.067 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.634.078 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.634.079 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.634.095 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.634.095 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.634.096 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.634.106 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.634.112 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.634.113 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.634.113 I llm_load_print_meta: max token length = 93
0.00.634.283 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.692.657 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.698.259 I llama_new_context_with_model: n_ctx      = 8192
0.00.698.267 I llama_new_context_with_model: n_batch    = 2048
0.00.698.267 I llama_new_context_with_model: n_ubatch   = 512
0.00.698.268 I llama_new_context_with_model: flash_attn = 0
0.00.698.270 I llama_new_context_with_model: freq_base  = 10000.0
0.00.698.271 I llama_new_context_with_model: freq_scale = 1
0.00.728.091 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.728.139 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.728.252 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.729.616 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.729.621 I llama_new_context_with_model: graph nodes  = 601
0.00.729.621 I llama_new_context_with_model: graph splits = 1
0.00.729.637 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.308.478 I main: llama threadpool init, n_threads = 4
0.01.308.490 I 
0.01.308.594 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.308.598 I 
0.01.308.779 I sampler seed: 3873241573
0.01.308.790 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.308.797 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.308.798 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.308.798 I 
 seconary.docx

Answer the following questions:

**1. What is the purpose of the document?**

The purpose of the document is to provide

0.12.248.297 I llama_perf_sampler_print:    sampling time =      49.21 ms /    33 runs   (    1.49 ms per token,   670.55 tokens per second)
0.12.248.301 I llama_perf_context_print:        load time =    1305.62 ms
0.12.248.302 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.248.319 I llama_perf_context_print:        eval time =   10857.36 ms /    32 runs   (  339.29 ms per token,     2.95 tokens per second)
0.12.248.320 I llama_perf_context_print:       total time =   10939.83 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m3.645s
user	49m55.300s
sys	0m6.401s
