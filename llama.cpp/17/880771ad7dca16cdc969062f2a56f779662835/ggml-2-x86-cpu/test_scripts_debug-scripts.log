+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.676 I build: 3883 (17880771) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.879 I main: llama backend init
0.00.002.839 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.129 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.341 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.435 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.449 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.453 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.459 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.464 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.465 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.466 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.467 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.468 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.475 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.476 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.477 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.478 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.480 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.338 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.463 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.259 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.271 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.273 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.274 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.275 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.277 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.278 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.282 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.283 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.285 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.286 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.287 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.296 I llama_model_loader: - type  f32:   37 tensors
0.00.271.300 I llama_model_loader: - type q8_0:  127 tensors
0.00.456.034 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.483.609 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.484.705 I llm_load_vocab: special tokens cache size = 5
0.00.581.406 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.581.470 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.581.471 I llm_load_print_meta: arch             = gemma
0.00.581.472 I llm_load_print_meta: vocab type       = SPM
0.00.581.473 I llm_load_print_meta: n_vocab          = 256000
0.00.581.475 I llm_load_print_meta: n_merges         = 0
0.00.581.475 I llm_load_print_meta: vocab_only       = 0
0.00.581.476 I llm_load_print_meta: n_ctx_train      = 8192
0.00.581.477 I llm_load_print_meta: n_embd           = 2048
0.00.581.477 I llm_load_print_meta: n_layer          = 18
0.00.581.541 I llm_load_print_meta: n_head           = 8
0.00.581.547 I llm_load_print_meta: n_head_kv        = 1
0.00.581.548 I llm_load_print_meta: n_rot            = 256
0.00.581.548 I llm_load_print_meta: n_swa            = 0
0.00.581.548 I llm_load_print_meta: n_embd_head_k    = 256
0.00.581.549 I llm_load_print_meta: n_embd_head_v    = 256
0.00.581.553 I llm_load_print_meta: n_gqa            = 8
0.00.581.557 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.581.562 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.581.563 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.581.565 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.581.565 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.581.565 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.581.566 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.581.584 I llm_load_print_meta: n_ff             = 16384
0.00.581.585 I llm_load_print_meta: n_expert         = 0
0.00.581.585 I llm_load_print_meta: n_expert_used    = 0
0.00.581.586 I llm_load_print_meta: causal attn      = 1
0.00.581.586 I llm_load_print_meta: pooling type     = 0
0.00.581.587 I llm_load_print_meta: rope type        = 2
0.00.581.587 I llm_load_print_meta: rope scaling     = linear
0.00.581.588 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.581.589 I llm_load_print_meta: freq_scale_train = 1
0.00.581.590 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.581.590 I llm_load_print_meta: rope_finetuned   = unknown
0.00.581.590 I llm_load_print_meta: ssm_d_conv       = 0
0.00.581.591 I llm_load_print_meta: ssm_d_inner      = 0
0.00.581.591 I llm_load_print_meta: ssm_d_state      = 0
0.00.581.591 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.581.592 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.581.592 I llm_load_print_meta: model type       = 2B
0.00.581.602 I llm_load_print_meta: model ftype      = Q8_0
0.00.581.603 I llm_load_print_meta: model params     = 2.51 B
0.00.581.604 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.581.609 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.581.622 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.581.623 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.581.623 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.581.624 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.581.625 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.581.626 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.581.631 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.581.633 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.581.633 I llm_load_print_meta: max token length = 93
0.00.581.804 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.681.137 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.681.149 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.681.150 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.681.150 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.681.151 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.681.152 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.686.974 I llama_new_context_with_model: n_ctx      = 8192
0.00.686.985 I llama_new_context_with_model: n_batch    = 2048
0.00.686.985 I llama_new_context_with_model: n_ubatch   = 512
0.00.686.986 I llama_new_context_with_model: flash_attn = 0
0.00.686.989 I llama_new_context_with_model: freq_base  = 10000.0
0.00.686.990 I llama_new_context_with_model: freq_scale = 1
0.00.717.716 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.717.761 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.717.885 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.719.317 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.719.323 I llama_new_context_with_model: graph nodes  = 601
0.00.719.324 I llama_new_context_with_model: graph splits = 1
0.00.719.342 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.331.485 I main: llama threadpool init, n_threads = 4
0.01.331.499 I 
0.01.331.610 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.331.614 I 
0.01.331.785 I sampler seed: 1676993541
0.01.331.796 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.331.802 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.331.805 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.331.805 I 
 increasities, and a desire to create a more equitable society.

**Answer:**

The given text conveys a deep-rooted passion for social justice, equality

0.14.870.277 I llama_perf_sampler_print:    sampling time =      49.53 ms /    33 runs   (    1.50 ms per token,   666.21 tokens per second)
0.14.870.289 I llama_perf_context_print:        load time =    1328.46 ms
0.14.870.291 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.870.293 I llama_perf_context_print:        eval time =   13456.01 ms /    32 runs   (  420.50 ms per token,     2.38 tokens per second)
0.14.870.294 I llama_perf_context_print:       total time =   13538.80 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.684 I build: 3883 (17880771) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.889 I main: llama backend init
0.00.002.828 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.155 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.259 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.274 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.278 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.284 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.285 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.287 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.289 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.290 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.291 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.298 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.299 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.300 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.301 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.311 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.415 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.054 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.910 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.920 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.921 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.922 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.923 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.925 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.926 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.929 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.930 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.931 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.932 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.270.934 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.942 I llama_model_loader: - type  f32:   37 tensors
0.00.270.946 I llama_model_loader: - type q8_0:  127 tensors
0.00.455.799 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.484.730 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.485.734 I llm_load_vocab: special tokens cache size = 5
0.00.581.920 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.581.985 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.581.986 I llm_load_print_meta: arch             = gemma
0.00.581.988 I llm_load_print_meta: vocab type       = SPM
0.00.581.989 I llm_load_print_meta: n_vocab          = 256000
0.00.581.991 I llm_load_print_meta: n_merges         = 0
0.00.581.992 I llm_load_print_meta: vocab_only       = 0
0.00.581.992 I llm_load_print_meta: n_ctx_train      = 8192
0.00.581.992 I llm_load_print_meta: n_embd           = 2048
0.00.581.993 I llm_load_print_meta: n_layer          = 18
0.00.582.063 I llm_load_print_meta: n_head           = 8
0.00.582.073 I llm_load_print_meta: n_head_kv        = 1
0.00.582.073 I llm_load_print_meta: n_rot            = 256
0.00.582.074 I llm_load_print_meta: n_swa            = 0
0.00.582.074 I llm_load_print_meta: n_embd_head_k    = 256
0.00.582.074 I llm_load_print_meta: n_embd_head_v    = 256
0.00.582.079 I llm_load_print_meta: n_gqa            = 8
0.00.582.084 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.582.089 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.582.090 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.582.091 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.582.093 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.582.093 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.582.094 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.582.099 I llm_load_print_meta: n_ff             = 16384
0.00.582.099 I llm_load_print_meta: n_expert         = 0
0.00.582.099 I llm_load_print_meta: n_expert_used    = 0
0.00.582.100 I llm_load_print_meta: causal attn      = 1
0.00.582.100 I llm_load_print_meta: pooling type     = 0
0.00.582.101 I llm_load_print_meta: rope type        = 2
0.00.582.101 I llm_load_print_meta: rope scaling     = linear
0.00.582.104 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.582.104 I llm_load_print_meta: freq_scale_train = 1
0.00.582.104 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.582.105 I llm_load_print_meta: rope_finetuned   = unknown
0.00.582.106 I llm_load_print_meta: ssm_d_conv       = 0
0.00.582.106 I llm_load_print_meta: ssm_d_inner      = 0
0.00.582.106 I llm_load_print_meta: ssm_d_state      = 0
0.00.582.107 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.582.107 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.582.108 I llm_load_print_meta: model type       = 2B
0.00.582.118 I llm_load_print_meta: model ftype      = Q8_0
0.00.582.119 I llm_load_print_meta: model params     = 2.51 B
0.00.582.120 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.582.120 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.582.121 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.582.121 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.582.122 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.582.122 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.582.123 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.582.123 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.582.130 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.582.132 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.582.132 I llm_load_print_meta: max token length = 93
0.00.582.312 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.677.117 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.683.733 I llama_new_context_with_model: n_ctx      = 8192
0.00.683.741 I llama_new_context_with_model: n_batch    = 2048
0.00.683.741 I llama_new_context_with_model: n_ubatch   = 512
0.00.683.742 I llama_new_context_with_model: flash_attn = 0
0.00.683.746 I llama_new_context_with_model: freq_base  = 10000.0
0.00.683.747 I llama_new_context_with_model: freq_scale = 1
0.00.714.874 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.714.919 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.715.036 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.716.424 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.716.430 I llama_new_context_with_model: graph nodes  = 601
0.00.716.431 I llama_new_context_with_model: graph splits = 1
0.00.716.447 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.358.609 I main: llama threadpool init, n_threads = 4
0.01.358.622 I 
0.01.358.732 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.358.736 I 
0.01.358.899 I sampler seed: 4222554991
0.01.358.910 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.358.916 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.358.917 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.358.917 I 
 increasities, and the challenges of negotiating with such individuals.

**Challenges of Negotiating with Narcissists**

* **Emotionally charged and manipulative:** Narcissists

0.14.890.812 I llama_perf_sampler_print:    sampling time =      49.82 ms /    33 runs   (    1.51 ms per token,   662.44 tokens per second)
0.14.890.825 I llama_perf_context_print:        load time =    1355.60 ms
0.14.890.828 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.890.830 I llama_perf_context_print:        eval time =   13448.75 ms /    32 runs   (  420.27 ms per token,     2.38 tokens per second)
0.14.890.832 I llama_perf_context_print:       total time =   13532.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.660 I build: 3883 (17880771) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.935 I main: llama backend init
0.00.002.886 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.121 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.344 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.448 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.464 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.470 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.476 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.478 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.481 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.486 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.489 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.498 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.512 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.517 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.518 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.520 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.522 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.444 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.268.353 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.287.189 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.287.199 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.287.200 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.287.201 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.287.202 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.287.204 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.287.205 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.287.209 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.287.210 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.287.211 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.287.212 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.287.213 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.287.223 I llama_model_loader: - type  f32:   37 tensors
0.00.287.227 I llama_model_loader: - type q8_0:  127 tensors
0.00.464.883 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.494.126 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.495.243 I llm_load_vocab: special tokens cache size = 5
0.00.605.173 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.605.242 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.605.243 I llm_load_print_meta: arch             = gemma
0.00.605.244 I llm_load_print_meta: vocab type       = SPM
0.00.605.245 I llm_load_print_meta: n_vocab          = 256000
0.00.605.247 I llm_load_print_meta: n_merges         = 0
0.00.605.248 I llm_load_print_meta: vocab_only       = 0
0.00.605.248 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.249 I llm_load_print_meta: n_embd           = 2048
0.00.605.249 I llm_load_print_meta: n_layer          = 18
0.00.605.316 I llm_load_print_meta: n_head           = 8
0.00.605.322 I llm_load_print_meta: n_head_kv        = 1
0.00.605.323 I llm_load_print_meta: n_rot            = 256
0.00.605.323 I llm_load_print_meta: n_swa            = 0
0.00.605.324 I llm_load_print_meta: n_embd_head_k    = 256
0.00.605.324 I llm_load_print_meta: n_embd_head_v    = 256
0.00.605.328 I llm_load_print_meta: n_gqa            = 8
0.00.605.333 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.605.338 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.605.339 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.605.340 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.605.341 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.605.342 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.605.342 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.605.347 I llm_load_print_meta: n_ff             = 16384
0.00.605.348 I llm_load_print_meta: n_expert         = 0
0.00.605.348 I llm_load_print_meta: n_expert_used    = 0
0.00.605.349 I llm_load_print_meta: causal attn      = 1
0.00.605.349 I llm_load_print_meta: pooling type     = 0
0.00.605.350 I llm_load_print_meta: rope type        = 2
0.00.605.350 I llm_load_print_meta: rope scaling     = linear
0.00.605.352 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.605.352 I llm_load_print_meta: freq_scale_train = 1
0.00.605.352 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.605.353 I llm_load_print_meta: rope_finetuned   = unknown
0.00.605.353 I llm_load_print_meta: ssm_d_conv       = 0
0.00.605.354 I llm_load_print_meta: ssm_d_inner      = 0
0.00.605.354 I llm_load_print_meta: ssm_d_state      = 0
0.00.605.354 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.605.355 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.605.355 I llm_load_print_meta: model type       = 2B
0.00.605.365 I llm_load_print_meta: model ftype      = Q8_0
0.00.605.366 I llm_load_print_meta: model params     = 2.51 B
0.00.605.367 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.605.367 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.605.368 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.605.368 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.605.369 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.605.369 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.605.370 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.605.371 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.605.376 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.605.378 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.605.378 I llm_load_print_meta: max token length = 93
0.00.605.564 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.683.354 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.683.366 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.683.367 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.683.368 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.683.369 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.683.369 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.689.254 I llama_new_context_with_model: n_ctx      = 8192
0.00.689.261 I llama_new_context_with_model: n_batch    = 2048
0.00.689.262 I llama_new_context_with_model: n_ubatch   = 512
0.00.689.262 I llama_new_context_with_model: flash_attn = 0
0.00.689.265 I llama_new_context_with_model: freq_base  = 10000.0
0.00.689.266 I llama_new_context_with_model: freq_scale = 1
0.00.719.046 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.719.095 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.719.210 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.720.588 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.720.595 I llama_new_context_with_model: graph nodes  = 601
0.00.720.596 I llama_new_context_with_model: graph splits = 1
0.00.720.614 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.332.249 I main: llama threadpool init, n_threads = 4
0.01.332.263 I 
0.01.332.389 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.332.393 I 
0.01.332.566 I sampler seed: 3470154754
0.01.332.579 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.332.586 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.332.590 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.332.591 I 
 increably.

I am unable to answer this question as it contains inappropriate and sexually suggestive language. [end of text]


0.10.207.787 I llama_perf_sampler_print:    sampling time =      32.41 ms /    22 runs   (    1.47 ms per token,   678.80 tokens per second)
0.10.207.804 I llama_perf_context_print:        load time =    1329.16 ms
0.10.207.805 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.207.807 I llama_perf_context_print:        eval time =    8820.84 ms /    21 runs   (  420.04 ms per token,     2.38 tokens per second)
0.10.207.809 I llama_perf_context_print:       total time =    8875.55 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.672 I build: 3883 (17880771) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.874 I main: llama backend init
0.00.002.810 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.352 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.568 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.660 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.673 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.675 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.680 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.684 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.685 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.686 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.687 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.689 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.697 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.699 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.700 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.702 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.703 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.182 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.228 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.064 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.075 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.076 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.077 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.079 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.081 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.082 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.086 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.086 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.088 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.089 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.272.090 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.099 I llama_model_loader: - type  f32:   37 tensors
0.00.272.103 I llama_model_loader: - type q8_0:  127 tensors
0.00.457.233 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.487.715 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.488.848 I llm_load_vocab: special tokens cache size = 5
0.00.595.365 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.595.428 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.595.430 I llm_load_print_meta: arch             = gemma
0.00.595.431 I llm_load_print_meta: vocab type       = SPM
0.00.595.432 I llm_load_print_meta: n_vocab          = 256000
0.00.595.434 I llm_load_print_meta: n_merges         = 0
0.00.595.435 I llm_load_print_meta: vocab_only       = 0
0.00.595.435 I llm_load_print_meta: n_ctx_train      = 8192
0.00.595.435 I llm_load_print_meta: n_embd           = 2048
0.00.595.436 I llm_load_print_meta: n_layer          = 18
0.00.595.503 I llm_load_print_meta: n_head           = 8
0.00.595.526 I llm_load_print_meta: n_head_kv        = 1
0.00.595.527 I llm_load_print_meta: n_rot            = 256
0.00.595.527 I llm_load_print_meta: n_swa            = 0
0.00.595.527 I llm_load_print_meta: n_embd_head_k    = 256
0.00.595.528 I llm_load_print_meta: n_embd_head_v    = 256
0.00.595.532 I llm_load_print_meta: n_gqa            = 8
0.00.595.537 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.595.558 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.595.560 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.595.562 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.595.563 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.595.563 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.595.563 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.595.574 I llm_load_print_meta: n_ff             = 16384
0.00.595.575 I llm_load_print_meta: n_expert         = 0
0.00.595.575 I llm_load_print_meta: n_expert_used    = 0
0.00.595.576 I llm_load_print_meta: causal attn      = 1
0.00.595.582 I llm_load_print_meta: pooling type     = 0
0.00.595.583 I llm_load_print_meta: rope type        = 2
0.00.595.583 I llm_load_print_meta: rope scaling     = linear
0.00.595.585 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.595.585 I llm_load_print_meta: freq_scale_train = 1
0.00.595.585 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.595.586 I llm_load_print_meta: rope_finetuned   = unknown
0.00.595.586 I llm_load_print_meta: ssm_d_conv       = 0
0.00.595.587 I llm_load_print_meta: ssm_d_inner      = 0
0.00.595.587 I llm_load_print_meta: ssm_d_state      = 0
0.00.595.587 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.595.588 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.595.588 I llm_load_print_meta: model type       = 2B
0.00.595.597 I llm_load_print_meta: model ftype      = Q8_0
0.00.595.600 I llm_load_print_meta: model params     = 2.51 B
0.00.595.601 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.595.601 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.595.602 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.595.602 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.595.603 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.595.603 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.595.604 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.595.604 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.595.610 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.595.612 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.595.613 I llm_load_print_meta: max token length = 93
0.00.595.784 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.667.364 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.667.374 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.673.268 I llama_new_context_with_model: n_ctx      = 8192
0.00.673.278 I llama_new_context_with_model: n_batch    = 2048
0.00.673.279 I llama_new_context_with_model: n_ubatch   = 512
0.00.673.280 I llama_new_context_with_model: flash_attn = 0
0.00.673.283 I llama_new_context_with_model: freq_base  = 10000.0
0.00.673.284 I llama_new_context_with_model: freq_scale = 1
0.00.706.594 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.706.638 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.706.765 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.708.240 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.708.246 I llama_new_context_with_model: graph nodes  = 601
0.00.708.247 I llama_new_context_with_model: graph splits = 1
0.00.708.263 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.322.208 I main: llama threadpool init, n_threads = 4
0.01.322.222 I 
0.01.322.333 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.322.336 I 
0.01.322.497 I sampler seed: 1956335643
0.01.322.508 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.322.515 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.322.516 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.322.516 I 
 increasities?

I cannot find the requested information in the context. [end of text]


0.07.674.992 I llama_perf_sampler_print:    sampling time =      23.16 ms /    16 runs   (    1.45 ms per token,   690.82 tokens per second)
0.07.674.995 I llama_perf_context_print:        load time =    1319.18 ms
0.07.674.996 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.674.998 I llama_perf_context_print:        eval time =    6313.47 ms /    15 runs   (  420.90 ms per token,     2.38 tokens per second)
0.07.675.012 I llama_perf_context_print:       total time =    6352.79 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m57.553s
user	3m1.952s
sys	0m9.641s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3883 (17880771)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200379.26 ms
main:    total time = 200379.26 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.676 I build: 3883 (17880771) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.899 I main: llama backend init
0.00.002.847 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.138 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.347 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.443 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.456 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.458 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.462 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.464 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.465 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.466 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.467 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.468 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.476 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.477 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.478 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.479 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.480 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.726 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.772 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.563 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.575 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.576 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.577 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.578 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.580 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.581 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.585 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.586 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.587 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.588 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.272.589 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.599 I llama_model_loader: - type  f32:   37 tensors
0.00.272.604 I llama_model_loader: - type q4_K:  108 tensors
0.00.272.604 I llama_model_loader: - type q6_K:   19 tensors
0.00.468.419 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.495.965 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.497.014 I llm_load_vocab: special tokens cache size = 5
0.00.608.508 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.572 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.573 I llm_load_print_meta: arch             = gemma
0.00.608.574 I llm_load_print_meta: vocab type       = SPM
0.00.608.575 I llm_load_print_meta: n_vocab          = 256000
0.00.608.577 I llm_load_print_meta: n_merges         = 0
0.00.608.577 I llm_load_print_meta: vocab_only       = 0
0.00.608.578 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.579 I llm_load_print_meta: n_embd           = 2048
0.00.608.579 I llm_load_print_meta: n_layer          = 18
0.00.608.644 I llm_load_print_meta: n_head           = 8
0.00.608.673 I llm_load_print_meta: n_head_kv        = 1
0.00.608.675 I llm_load_print_meta: n_rot            = 256
0.00.608.675 I llm_load_print_meta: n_swa            = 0
0.00.608.676 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.676 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.681 I llm_load_print_meta: n_gqa            = 8
0.00.608.686 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.691 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.692 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.693 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.694 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.694 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.695 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.700 I llm_load_print_meta: n_ff             = 16384
0.00.608.701 I llm_load_print_meta: n_expert         = 0
0.00.608.701 I llm_load_print_meta: n_expert_used    = 0
0.00.608.702 I llm_load_print_meta: causal attn      = 1
0.00.608.702 I llm_load_print_meta: pooling type     = 0
0.00.608.703 I llm_load_print_meta: rope type        = 2
0.00.608.703 I llm_load_print_meta: rope scaling     = linear
0.00.608.704 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.705 I llm_load_print_meta: freq_scale_train = 1
0.00.608.705 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.710 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.710 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.710 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.711 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.711 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.711 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.713 I llm_load_print_meta: model type       = 2B
0.00.608.722 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.608.723 I llm_load_print_meta: model params     = 2.51 B
0.00.608.723 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.608.724 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.734 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.743 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.751 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.752 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.753 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.755 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.760 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.762 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.763 I llm_load_print_meta: max token length = 93
0.00.608.942 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.668.154 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.668.166 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.668.167 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.668.168 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.668.169 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.668.169 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.673.948 I llama_new_context_with_model: n_ctx      = 8192
0.00.673.955 I llama_new_context_with_model: n_batch    = 2048
0.00.673.955 I llama_new_context_with_model: n_ubatch   = 512
0.00.673.956 I llama_new_context_with_model: flash_attn = 0
0.00.673.958 I llama_new_context_with_model: freq_base  = 10000.0
0.00.673.959 I llama_new_context_with_model: freq_scale = 1
0.00.703.673 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.703.717 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.703.840 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.705.332 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.705.338 I llama_new_context_with_model: graph nodes  = 601
0.00.705.338 I llama_new_context_with_model: graph splits = 1
0.00.705.354 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.283.514 I main: llama threadpool init, n_threads = 4
0.01.283.528 I 
0.01.283.641 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.283.645 I 
0.01.283.811 I sampler seed: 719460513
0.01.283.821 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.283.828 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.283.828 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.283.829 I 
 guaranteing laughter and tears.

**Answer:** A comedian.

A comedian is a person who performs humorous acts that evoke laughter and sometimes tears in their audience

0.12.264.420 I llama_perf_sampler_print:    sampling time =      49.14 ms /    33 runs   (    1.49 ms per token,   671.54 tokens per second)
0.12.264.423 I llama_perf_context_print:        load time =    1280.47 ms
0.12.264.425 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.264.426 I llama_perf_context_print:        eval time =   10899.40 ms /    32 runs   (  340.61 ms per token,     2.94 tokens per second)
0.12.264.427 I llama_perf_context_print:       total time =   10980.92 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3883 (17880771)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200065.36 ms
main:    total time = 200065.36 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.673 I build: 3883 (17880771) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.877 I main: llama backend init
0.00.002.826 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.536 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.640 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.655 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.656 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.661 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.662 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.664 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.665 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.667 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.668 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.675 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.676 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.677 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.678 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.679 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.204 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.271.445 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.290.306 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.290.317 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.290.318 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.290.319 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.290.320 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.290.321 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.290.322 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.290.326 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.290.327 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.290.337 I llama_model_loader: - type  f32:   37 tensors
0.00.290.341 I llama_model_loader: - type q4_K:  108 tensors
0.00.290.341 I llama_model_loader: - type q6_K:   19 tensors
0.00.455.809 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.484.425 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.485.456 I llm_load_vocab: special tokens cache size = 5
0.00.600.954 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.601.016 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.601.017 I llm_load_print_meta: arch             = gemma
0.00.601.018 I llm_load_print_meta: vocab type       = SPM
0.00.601.019 I llm_load_print_meta: n_vocab          = 256000
0.00.601.021 I llm_load_print_meta: n_merges         = 0
0.00.601.022 I llm_load_print_meta: vocab_only       = 0
0.00.601.022 I llm_load_print_meta: n_ctx_train      = 8192
0.00.601.023 I llm_load_print_meta: n_embd           = 2048
0.00.601.023 I llm_load_print_meta: n_layer          = 18
0.00.601.091 I llm_load_print_meta: n_head           = 8
0.00.601.098 I llm_load_print_meta: n_head_kv        = 1
0.00.601.098 I llm_load_print_meta: n_rot            = 256
0.00.601.099 I llm_load_print_meta: n_swa            = 0
0.00.601.099 I llm_load_print_meta: n_embd_head_k    = 256
0.00.601.099 I llm_load_print_meta: n_embd_head_v    = 256
0.00.601.104 I llm_load_print_meta: n_gqa            = 8
0.00.601.108 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.601.113 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.601.114 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.601.115 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.601.116 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.601.116 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.601.117 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.601.121 I llm_load_print_meta: n_ff             = 16384
0.00.601.122 I llm_load_print_meta: n_expert         = 0
0.00.601.122 I llm_load_print_meta: n_expert_used    = 0
0.00.601.123 I llm_load_print_meta: causal attn      = 1
0.00.601.123 I llm_load_print_meta: pooling type     = 0
0.00.601.124 I llm_load_print_meta: rope type        = 2
0.00.601.124 I llm_load_print_meta: rope scaling     = linear
0.00.601.126 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.601.126 I llm_load_print_meta: freq_scale_train = 1
0.00.601.126 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.601.127 I llm_load_print_meta: rope_finetuned   = unknown
0.00.601.127 I llm_load_print_meta: ssm_d_conv       = 0
0.00.601.127 I llm_load_print_meta: ssm_d_inner      = 0
0.00.601.128 I llm_load_print_meta: ssm_d_state      = 0
0.00.601.128 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.601.128 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.601.129 I llm_load_print_meta: model type       = 2B
0.00.601.152 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.601.153 I llm_load_print_meta: model params     = 2.51 B
0.00.601.154 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.601.154 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.601.155 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.601.156 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.601.156 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.601.156 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.601.157 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.601.158 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.601.163 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.601.165 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.601.165 I llm_load_print_meta: max token length = 93
0.00.601.333 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.659.486 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.665.086 I llama_new_context_with_model: n_ctx      = 8192
0.00.665.094 I llama_new_context_with_model: n_batch    = 2048
0.00.665.094 I llama_new_context_with_model: n_ubatch   = 512
0.00.665.095 I llama_new_context_with_model: flash_attn = 0
0.00.665.098 I llama_new_context_with_model: freq_base  = 10000.0
0.00.665.099 I llama_new_context_with_model: freq_scale = 1
0.00.696.053 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.696.103 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.696.223 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.697.619 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.697.624 I llama_new_context_with_model: graph nodes  = 601
0.00.697.624 I llama_new_context_with_model: graph splits = 1
0.00.697.640 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.275.631 I main: llama threadpool init, n_threads = 4
0.01.275.644 I 
0.01.275.752 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.275.756 I 
0.01.275.917 I sampler seed: 4246110376
0.01.275.928 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.275.934 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.275.935 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.275.935 I 
 seconal and secondary spermatogenesis are the two main stages of male reproduction.

**Secondary spermatogenesis** is the process by which spermatozoa are matured in the

0.12.212.857 I llama_perf_sampler_print:    sampling time =      49.15 ms /    33 runs   (    1.49 ms per token,   671.41 tokens per second)
0.12.212.860 I llama_perf_context_print:        load time =    1272.60 ms
0.12.212.862 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.212.863 I llama_perf_context_print:        eval time =   10855.13 ms /    32 runs   (  339.22 ms per token,     2.95 tokens per second)
0.12.212.864 I llama_perf_context_print:       total time =   10937.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m7.883s
user	50m24.936s
sys	0m6.463s
