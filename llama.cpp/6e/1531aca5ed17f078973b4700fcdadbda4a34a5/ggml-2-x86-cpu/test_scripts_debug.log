+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 4400 (6e1531ac) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.831 I main: llama backend init
0.00.000.838 I main: load the model and apply lora adapter, if any
0.00.023.243 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.253 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.338 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.350 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.351 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.355 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.357 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.359 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.360 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.362 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.364 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.370 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.374 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.376 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.377 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.378 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.278 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.903 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.943 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.952 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.954 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.955 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.957 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.958 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.959 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.963 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.964 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.966 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.967 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.350.980 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.989 I llama_model_loader: - type  f32:   37 tensors
0.00.351.008 I llama_model_loader: - type q8_0:  127 tensors
0.00.586.242 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.650.202 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.651.153 I llm_load_vocab: special tokens cache size = 5
0.00.854.332 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.854.405 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.854.406 I llm_load_print_meta: arch             = gemma
0.00.854.407 I llm_load_print_meta: vocab type       = SPM
0.00.854.408 I llm_load_print_meta: n_vocab          = 256000
0.00.854.411 I llm_load_print_meta: n_merges         = 0
0.00.854.411 I llm_load_print_meta: vocab_only       = 0
0.00.854.411 I llm_load_print_meta: n_ctx_train      = 8192
0.00.854.412 I llm_load_print_meta: n_embd           = 2048
0.00.854.412 I llm_load_print_meta: n_layer          = 18
0.00.854.478 I llm_load_print_meta: n_head           = 8
0.00.854.485 I llm_load_print_meta: n_head_kv        = 1
0.00.854.486 I llm_load_print_meta: n_rot            = 256
0.00.854.486 I llm_load_print_meta: n_swa            = 0
0.00.854.487 I llm_load_print_meta: n_embd_head_k    = 256
0.00.854.487 I llm_load_print_meta: n_embd_head_v    = 256
0.00.854.491 I llm_load_print_meta: n_gqa            = 8
0.00.854.496 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.854.501 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.854.503 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.854.505 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.854.505 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.854.506 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.854.507 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.854.513 I llm_load_print_meta: n_ff             = 16384
0.00.854.513 I llm_load_print_meta: n_expert         = 0
0.00.854.514 I llm_load_print_meta: n_expert_used    = 0
0.00.854.514 I llm_load_print_meta: causal attn      = 1
0.00.854.516 I llm_load_print_meta: pooling type     = 0
0.00.854.516 I llm_load_print_meta: rope type        = 2
0.00.854.516 I llm_load_print_meta: rope scaling     = linear
0.00.854.518 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.854.518 I llm_load_print_meta: freq_scale_train = 1
0.00.854.519 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.854.524 I llm_load_print_meta: rope_finetuned   = unknown
0.00.854.524 I llm_load_print_meta: ssm_d_conv       = 0
0.00.854.524 I llm_load_print_meta: ssm_d_inner      = 0
0.00.854.525 I llm_load_print_meta: ssm_d_state      = 0
0.00.854.525 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.854.525 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.854.526 I llm_load_print_meta: model type       = 2B
0.00.854.527 I llm_load_print_meta: model ftype      = Q8_0
0.00.854.528 I llm_load_print_meta: model params     = 2.51 B
0.00.854.532 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.854.532 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.854.533 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.854.533 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.854.533 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.854.534 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.854.534 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.854.535 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.854.540 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.854.541 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.854.542 I llm_load_print_meta: max token length = 93
0.00.958.446 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.958.454 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.958.455 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.958.456 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.958.456 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.958.457 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.964.449 I llama_new_context_with_model: n_seq_max     = 1
0.00.964.456 I llama_new_context_with_model: n_ctx         = 4096
0.00.964.457 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.964.457 I llama_new_context_with_model: n_batch       = 2048
0.00.964.458 I llama_new_context_with_model: n_ubatch      = 512
0.00.964.458 I llama_new_context_with_model: flash_attn    = 0
0.00.964.461 I llama_new_context_with_model: freq_base     = 10000.0
0.00.964.462 I llama_new_context_with_model: freq_scale    = 1
0.00.964.463 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.964.547 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.979.252 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.979.289 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.979.411 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.982.152 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.982.156 I llama_new_context_with_model: graph nodes  = 601
0.00.982.157 I llama_new_context_with_model: graph splits = 1
0.00.982.180 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.982.184 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.592.670 I main: llama threadpool init, n_threads = 4
0.01.592.687 I 
0.01.592.808 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.592.812 I 
0.01.593.073 I sampler seed: 1757255198
0.01.593.087 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.593.098 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.593.102 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.593.102 I 
 increasities, but they are not a sign of love. Rather, they are a manifestation of the intensity of the sexual connection and the urge to explore and expand

0.15.044.964 I llama_perf_sampler_print:    sampling time =      49.63 ms /    33 runs   (    1.50 ms per token,   664.96 tokens per second)
0.15.044.967 I llama_perf_context_print:        load time =    1591.74 ms
0.15.044.969 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.044.983 I llama_perf_context_print:        eval time =   13362.41 ms /    32 runs   (  417.58 ms per token,     2.39 tokens per second)
0.15.044.985 I llama_perf_context_print:       total time =   13452.31 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.660 I build: 4400 (6e1531ac) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.000.851 I main: load the model and apply lora adapter, if any
0.00.022.993 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.082 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.095 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.097 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.101 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.103 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.104 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.107 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.108 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.110 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.116 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.118 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.119 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.121 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.122 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.245.832 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.347.717 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.371.925 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.371.937 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.371.938 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.371.940 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.371.941 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.371.943 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.371.944 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.371.970 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.371.975 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.371.977 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.371.979 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.371.981 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.371.989 I llama_model_loader: - type  f32:   37 tensors
0.00.371.993 I llama_model_loader: - type q8_0:  127 tensors
0.00.609.414 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.668.989 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.669.912 I llm_load_vocab: special tokens cache size = 5
0.00.893.743 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.893.815 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.893.816 I llm_load_print_meta: arch             = gemma
0.00.893.816 I llm_load_print_meta: vocab type       = SPM
0.00.893.817 I llm_load_print_meta: n_vocab          = 256000
0.00.893.819 I llm_load_print_meta: n_merges         = 0
0.00.893.820 I llm_load_print_meta: vocab_only       = 0
0.00.893.820 I llm_load_print_meta: n_ctx_train      = 8192
0.00.893.820 I llm_load_print_meta: n_embd           = 2048
0.00.893.821 I llm_load_print_meta: n_layer          = 18
0.00.893.886 I llm_load_print_meta: n_head           = 8
0.00.893.893 I llm_load_print_meta: n_head_kv        = 1
0.00.893.893 I llm_load_print_meta: n_rot            = 256
0.00.893.894 I llm_load_print_meta: n_swa            = 0
0.00.893.895 I llm_load_print_meta: n_embd_head_k    = 256
0.00.893.895 I llm_load_print_meta: n_embd_head_v    = 256
0.00.893.900 I llm_load_print_meta: n_gqa            = 8
0.00.893.905 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.893.910 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.893.911 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.893.913 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.893.913 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.893.914 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.893.915 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.893.921 I llm_load_print_meta: n_ff             = 16384
0.00.893.923 I llm_load_print_meta: n_expert         = 0
0.00.893.923 I llm_load_print_meta: n_expert_used    = 0
0.00.893.923 I llm_load_print_meta: causal attn      = 1
0.00.893.924 I llm_load_print_meta: pooling type     = 0
0.00.893.925 I llm_load_print_meta: rope type        = 2
0.00.893.925 I llm_load_print_meta: rope scaling     = linear
0.00.893.927 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.893.927 I llm_load_print_meta: freq_scale_train = 1
0.00.893.928 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.893.929 I llm_load_print_meta: rope_finetuned   = unknown
0.00.893.929 I llm_load_print_meta: ssm_d_conv       = 0
0.00.893.929 I llm_load_print_meta: ssm_d_inner      = 0
0.00.893.931 I llm_load_print_meta: ssm_d_state      = 0
0.00.893.931 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.893.932 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.893.932 I llm_load_print_meta: model type       = 2B
0.00.893.933 I llm_load_print_meta: model ftype      = Q8_0
0.00.893.934 I llm_load_print_meta: model params     = 2.51 B
0.00.893.935 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.893.936 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.893.937 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.893.937 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.893.938 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.893.939 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.893.939 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.893.940 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.893.945 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.893.946 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.893.947 I llm_load_print_meta: max token length = 93
0.00.991.493 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.998.333 I llama_new_context_with_model: n_seq_max     = 1
0.00.998.339 I llama_new_context_with_model: n_ctx         = 4096
0.00.998.340 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.998.340 I llama_new_context_with_model: n_batch       = 2048
0.00.998.341 I llama_new_context_with_model: n_ubatch      = 512
0.00.998.341 I llama_new_context_with_model: flash_attn    = 0
0.00.998.343 I llama_new_context_with_model: freq_base     = 10000.0
0.00.998.344 I llama_new_context_with_model: freq_scale    = 1
0.00.998.345 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.998.429 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.01.013.265 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.013.307 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.013.424 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.016.045 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.016.049 I llama_new_context_with_model: graph nodes  = 601
0.01.016.050 I llama_new_context_with_model: graph splits = 1
0.01.016.074 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.016.077 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.626.105 I main: llama threadpool init, n_threads = 4
0.01.626.135 I 
0.01.626.256 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.626.260 I 
0.01.626.492 I sampler seed: 21971966
0.01.626.507 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.626.516 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.626.520 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.626.520 I 
 increamically. I'm unable to provide a response as requested as I am unable to generate text that is sexually suggestive in nature. [end of text]


0.13.402.784 I llama_perf_sampler_print:    sampling time =      43.46 ms /    29 runs   (    1.50 ms per token,   667.31 tokens per second)
0.13.402.799 I llama_perf_context_print:        load time =    1625.17 ms
0.13.402.801 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.402.802 I llama_perf_context_print:        eval time =   11698.47 ms /    28 runs   (  417.80 ms per token,     2.39 tokens per second)
0.13.402.803 I llama_perf_context_print:       total time =   11776.69 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.679 I build: 4400 (6e1531ac) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.876 I main: llama backend init
0.00.000.885 I main: load the model and apply lora adapter, if any
0.00.023.885 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.900 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.997 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.010 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.012 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.018 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.020 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.021 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.023 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.024 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.026 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.033 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.035 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.036 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.038 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.039 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.238.991 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.341.057 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.365.175 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.365.187 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.365.189 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.365.190 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.365.191 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.365.193 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.365.194 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.365.198 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.365.199 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.365.201 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.365.202 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.365.204 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.365.213 I llama_model_loader: - type  f32:   37 tensors
0.00.365.216 I llama_model_loader: - type q8_0:  127 tensors
0.00.581.730 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.642.001 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.642.971 I llm_load_vocab: special tokens cache size = 5
0.00.852.157 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.852.248 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.852.252 I llm_load_print_meta: arch             = gemma
0.00.852.253 I llm_load_print_meta: vocab type       = SPM
0.00.852.254 I llm_load_print_meta: n_vocab          = 256000
0.00.852.257 I llm_load_print_meta: n_merges         = 0
0.00.852.257 I llm_load_print_meta: vocab_only       = 0
0.00.852.258 I llm_load_print_meta: n_ctx_train      = 8192
0.00.852.259 I llm_load_print_meta: n_embd           = 2048
0.00.852.259 I llm_load_print_meta: n_layer          = 18
0.00.852.334 I llm_load_print_meta: n_head           = 8
0.00.852.346 I llm_load_print_meta: n_head_kv        = 1
0.00.852.346 I llm_load_print_meta: n_rot            = 256
0.00.852.347 I llm_load_print_meta: n_swa            = 0
0.00.852.347 I llm_load_print_meta: n_embd_head_k    = 256
0.00.852.348 I llm_load_print_meta: n_embd_head_v    = 256
0.00.852.355 I llm_load_print_meta: n_gqa            = 8
0.00.852.363 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.852.373 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.852.375 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.852.377 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.852.378 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.852.378 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.852.379 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.852.387 I llm_load_print_meta: n_ff             = 16384
0.00.852.388 I llm_load_print_meta: n_expert         = 0
0.00.852.388 I llm_load_print_meta: n_expert_used    = 0
0.00.852.389 I llm_load_print_meta: causal attn      = 1
0.00.852.389 I llm_load_print_meta: pooling type     = 0
0.00.852.390 I llm_load_print_meta: rope type        = 2
0.00.852.391 I llm_load_print_meta: rope scaling     = linear
0.00.852.393 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.852.394 I llm_load_print_meta: freq_scale_train = 1
0.00.852.395 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.852.395 I llm_load_print_meta: rope_finetuned   = unknown
0.00.852.396 I llm_load_print_meta: ssm_d_conv       = 0
0.00.852.397 I llm_load_print_meta: ssm_d_inner      = 0
0.00.852.397 I llm_load_print_meta: ssm_d_state      = 0
0.00.852.398 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.852.398 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.852.399 I llm_load_print_meta: model type       = 2B
0.00.852.401 I llm_load_print_meta: model ftype      = Q8_0
0.00.852.402 I llm_load_print_meta: model params     = 2.51 B
0.00.852.406 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.852.406 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.852.407 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.852.408 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.852.408 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.852.409 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.852.409 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.852.410 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.852.417 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.852.419 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.852.419 I llm_load_print_meta: max token length = 93
0.00.932.964 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.932.974 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.932.975 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.932.976 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.932.977 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.932.977 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.938.945 I llama_new_context_with_model: n_seq_max     = 1
0.00.938.953 I llama_new_context_with_model: n_ctx         = 4096
0.00.938.953 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.938.954 I llama_new_context_with_model: n_batch       = 2048
0.00.938.954 I llama_new_context_with_model: n_ubatch      = 512
0.00.938.955 I llama_new_context_with_model: flash_attn    = 0
0.00.938.957 I llama_new_context_with_model: freq_base     = 10000.0
0.00.938.958 I llama_new_context_with_model: freq_scale    = 1
0.00.938.958 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.939.046 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.953.926 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.953.987 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.954.104 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.956.716 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.956.720 I llama_new_context_with_model: graph nodes  = 601
0.00.956.720 I llama_new_context_with_model: graph splits = 1
0.00.956.743 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.956.745 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.598.724 I main: llama threadpool init, n_threads = 4
0.01.598.739 I 
0.01.598.862 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.598.866 I 
0.01.599.109 I sampler seed: 3856967521
0.01.599.122 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.599.131 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.599.134 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.599.134 I 
 increamically. [end of text]


0.03.318.792 I llama_perf_sampler_print:    sampling time =       6.54 ms /     5 runs   (    1.31 ms per token,   764.76 tokens per second)
0.03.318.796 I llama_perf_context_print:        load time =    1597.73 ms
0.03.318.797 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.318.798 I llama_perf_context_print:        eval time =    1706.29 ms /     4 runs   (  426.57 ms per token,     2.34 tokens per second)
0.03.318.799 I llama_perf_context_print:       total time =    1720.08 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 4400 (6e1531ac) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.000.850 I main: load the model and apply lora adapter, if any
0.00.023.061 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.072 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.162 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.173 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.175 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.179 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.181 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.183 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.185 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.186 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.188 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.194 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.195 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.211 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.213 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.214 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.247.087 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.349.243 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.373.389 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.373.401 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.373.402 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.373.403 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.373.405 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.373.406 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.373.408 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.373.412 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.373.414 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.373.415 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.373.416 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.373.418 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.373.427 I llama_model_loader: - type  f32:   37 tensors
0.00.373.429 I llama_model_loader: - type q8_0:  127 tensors
0.00.601.070 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.661.157 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.662.039 I llm_load_vocab: special tokens cache size = 5
0.00.877.951 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.878.021 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.878.022 I llm_load_print_meta: arch             = gemma
0.00.878.023 I llm_load_print_meta: vocab type       = SPM
0.00.878.024 I llm_load_print_meta: n_vocab          = 256000
0.00.878.026 I llm_load_print_meta: n_merges         = 0
0.00.878.026 I llm_load_print_meta: vocab_only       = 0
0.00.878.027 I llm_load_print_meta: n_ctx_train      = 8192
0.00.878.027 I llm_load_print_meta: n_embd           = 2048
0.00.878.027 I llm_load_print_meta: n_layer          = 18
0.00.878.093 I llm_load_print_meta: n_head           = 8
0.00.878.100 I llm_load_print_meta: n_head_kv        = 1
0.00.878.100 I llm_load_print_meta: n_rot            = 256
0.00.878.101 I llm_load_print_meta: n_swa            = 0
0.00.878.101 I llm_load_print_meta: n_embd_head_k    = 256
0.00.878.114 I llm_load_print_meta: n_embd_head_v    = 256
0.00.878.121 I llm_load_print_meta: n_gqa            = 8
0.00.878.125 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.878.130 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.878.143 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.878.146 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.878.146 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.878.154 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.878.155 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.878.160 I llm_load_print_meta: n_ff             = 16384
0.00.878.161 I llm_load_print_meta: n_expert         = 0
0.00.878.162 I llm_load_print_meta: n_expert_used    = 0
0.00.878.163 I llm_load_print_meta: causal attn      = 1
0.00.878.163 I llm_load_print_meta: pooling type     = 0
0.00.878.164 I llm_load_print_meta: rope type        = 2
0.00.878.165 I llm_load_print_meta: rope scaling     = linear
0.00.878.166 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.878.167 I llm_load_print_meta: freq_scale_train = 1
0.00.878.168 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.878.169 I llm_load_print_meta: rope_finetuned   = unknown
0.00.878.169 I llm_load_print_meta: ssm_d_conv       = 0
0.00.878.169 I llm_load_print_meta: ssm_d_inner      = 0
0.00.878.170 I llm_load_print_meta: ssm_d_state      = 0
0.00.878.171 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.878.171 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.878.172 I llm_load_print_meta: model type       = 2B
0.00.878.177 I llm_load_print_meta: model ftype      = Q8_0
0.00.878.178 I llm_load_print_meta: model params     = 2.51 B
0.00.878.179 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.878.180 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.878.180 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.878.182 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.878.182 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.878.183 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.878.184 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.878.184 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.878.190 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.878.192 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.878.192 I llm_load_print_meta: max token length = 93
0.00.951.696 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.951.706 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.957.577 I llama_new_context_with_model: n_seq_max     = 1
0.00.957.584 I llama_new_context_with_model: n_ctx         = 4096
0.00.957.585 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.957.585 I llama_new_context_with_model: n_batch       = 2048
0.00.957.585 I llama_new_context_with_model: n_ubatch      = 512
0.00.957.586 I llama_new_context_with_model: flash_attn    = 0
0.00.957.588 I llama_new_context_with_model: freq_base     = 10000.0
0.00.957.589 I llama_new_context_with_model: freq_scale    = 1
0.00.957.590 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.957.679 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.973.002 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.973.044 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.973.168 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.975.762 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.975.766 I llama_new_context_with_model: graph nodes  = 601
0.00.975.766 I llama_new_context_with_model: graph splits = 1
0.00.975.789 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.975.792 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.585.537 I main: llama threadpool init, n_threads = 4
0.01.585.553 I 
0.01.585.676 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.585.680 I 
0.01.585.912 I sampler seed: 2822056005
0.01.585.926 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.585.935 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.585.939 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.585.939 I 
 increasities. 

I am unable to generate a response as the context provided contains sexually suggestive and inappropriate content. [end of text]


0.11.706.329 I llama_perf_sampler_print:    sampling time =      37.23 ms /    25 runs   (    1.49 ms per token,   671.59 tokens per second)
0.11.706.332 I llama_perf_context_print:        load time =    1584.60 ms
0.11.706.334 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.706.335 I llama_perf_context_print:        eval time =   10053.39 ms /    24 runs   (  418.89 ms per token,     2.39 tokens per second)
0.11.706.336 I llama_perf_context_print:       total time =   10120.80 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m53.449s
user	2m42.211s
sys	0m9.374s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4400 (6e1531ac)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185893.93 ms
main:    total time = 185893.93 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.618 I build: 4400 (6e1531ac) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.000.835 I main: load the model and apply lora adapter, if any
0.00.023.527 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.537 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.632 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.644 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.646 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.650 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.652 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.653 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.654 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.656 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.657 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.664 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.665 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.666 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.668 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.670 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.238.177 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.340.473 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.364.594 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.364.603 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.364.604 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.364.606 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.364.607 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.364.609 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.364.611 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.364.615 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.364.617 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.364.619 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.364.621 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.364.623 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.364.631 I llama_model_loader: - type  f32:   37 tensors
0.00.364.634 I llama_model_loader: - type q4_K:  108 tensors
0.00.364.635 I llama_model_loader: - type q6_K:   19 tensors
0.00.575.818 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.638.588 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.639.540 I llm_load_vocab: special tokens cache size = 5
0.00.860.129 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.860.205 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.860.209 I llm_load_print_meta: arch             = gemma
0.00.860.210 I llm_load_print_meta: vocab type       = SPM
0.00.860.211 I llm_load_print_meta: n_vocab          = 256000
0.00.860.213 I llm_load_print_meta: n_merges         = 0
0.00.860.214 I llm_load_print_meta: vocab_only       = 0
0.00.860.214 I llm_load_print_meta: n_ctx_train      = 8192
0.00.860.215 I llm_load_print_meta: n_embd           = 2048
0.00.860.215 I llm_load_print_meta: n_layer          = 18
0.00.860.280 I llm_load_print_meta: n_head           = 8
0.00.860.290 I llm_load_print_meta: n_head_kv        = 1
0.00.860.291 I llm_load_print_meta: n_rot            = 256
0.00.860.291 I llm_load_print_meta: n_swa            = 0
0.00.860.291 I llm_load_print_meta: n_embd_head_k    = 256
0.00.860.293 I llm_load_print_meta: n_embd_head_v    = 256
0.00.860.298 I llm_load_print_meta: n_gqa            = 8
0.00.860.304 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.860.309 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.860.312 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.860.313 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.860.314 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.860.315 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.860.315 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.860.320 I llm_load_print_meta: n_ff             = 16384
0.00.860.321 I llm_load_print_meta: n_expert         = 0
0.00.860.322 I llm_load_print_meta: n_expert_used    = 0
0.00.860.322 I llm_load_print_meta: causal attn      = 1
0.00.860.323 I llm_load_print_meta: pooling type     = 0
0.00.860.324 I llm_load_print_meta: rope type        = 2
0.00.860.324 I llm_load_print_meta: rope scaling     = linear
0.00.860.326 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.860.326 I llm_load_print_meta: freq_scale_train = 1
0.00.860.327 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.860.328 I llm_load_print_meta: rope_finetuned   = unknown
0.00.860.328 I llm_load_print_meta: ssm_d_conv       = 0
0.00.860.328 I llm_load_print_meta: ssm_d_inner      = 0
0.00.860.329 I llm_load_print_meta: ssm_d_state      = 0
0.00.860.329 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.860.332 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.860.332 I llm_load_print_meta: model type       = 2B
0.00.860.333 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.860.334 I llm_load_print_meta: model params     = 2.51 B
0.00.860.335 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.860.335 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.860.336 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.860.336 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.860.336 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.860.336 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.860.337 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.860.338 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.860.344 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.860.345 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.860.345 I llm_load_print_meta: max token length = 93
0.00.922.515 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.922.528 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.922.529 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.922.529 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.922.530 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.922.530 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.929.624 I llama_new_context_with_model: n_seq_max     = 1
0.00.929.634 I llama_new_context_with_model: n_ctx         = 4096
0.00.929.634 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.929.634 I llama_new_context_with_model: n_batch       = 2048
0.00.929.635 I llama_new_context_with_model: n_ubatch      = 512
0.00.929.635 I llama_new_context_with_model: flash_attn    = 0
0.00.929.640 I llama_new_context_with_model: freq_base     = 10000.0
0.00.929.640 I llama_new_context_with_model: freq_scale    = 1
0.00.929.641 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.929.736 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.945.226 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.945.270 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.945.390 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.948.056 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.948.061 I llama_new_context_with_model: graph nodes  = 601
0.00.948.061 I llama_new_context_with_model: graph splits = 1
0.00.948.085 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.948.088 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.528.707 I main: llama threadpool init, n_threads = 4
0.01.528.723 I 
0.01.528.845 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.528.848 I 
0.01.529.086 I sampler seed: 1686684139
0.01.529.100 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.529.109 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.529.113 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.529.113 I 
 seconde est une approche statistique et statistique-comptable qui permet de suivre l'évolution du patrimoine des actifs de la société.

**Principaux éléments

0.12.700.017 I llama_perf_sampler_print:    sampling time =      49.73 ms /    33 runs   (    1.51 ms per token,   663.57 tokens per second)
0.12.700.029 I llama_perf_context_print:        load time =    1527.78 ms
0.12.700.031 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.700.032 I llama_perf_context_print:        eval time =   11081.65 ms /    32 runs   (  346.30 ms per token,     2.89 tokens per second)
0.12.700.033 I llama_perf_context_print:       total time =   11171.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4400 (6e1531ac)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185599.44 ms
main:    total time = 185599.44 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.743 I build: 4400 (6e1531ac) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.952 I main: llama backend init
0.00.000.962 I main: load the model and apply lora adapter, if any
0.00.025.062 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.152 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.167 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.168 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.173 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.176 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.178 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.179 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.180 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.181 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.187 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.188 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.190 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.191 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.193 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.606 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.330.747 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.355.002 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.355.012 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.355.014 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.355.015 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.355.016 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.355.017 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.355.019 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.355.023 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.355.024 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.355.033 I llama_model_loader: - type  f32:   37 tensors
0.00.355.035 I llama_model_loader: - type q4_K:  108 tensors
0.00.355.036 I llama_model_loader: - type q6_K:   19 tensors
0.00.570.921 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.638.922 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.639.917 I llm_load_vocab: special tokens cache size = 5
0.00.844.220 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.844.297 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.844.301 I llm_load_print_meta: arch             = gemma
0.00.844.302 I llm_load_print_meta: vocab type       = SPM
0.00.844.303 I llm_load_print_meta: n_vocab          = 256000
0.00.844.305 I llm_load_print_meta: n_merges         = 0
0.00.844.306 I llm_load_print_meta: vocab_only       = 0
0.00.844.306 I llm_load_print_meta: n_ctx_train      = 8192
0.00.844.307 I llm_load_print_meta: n_embd           = 2048
0.00.844.307 I llm_load_print_meta: n_layer          = 18
0.00.844.371 I llm_load_print_meta: n_head           = 8
0.00.844.381 I llm_load_print_meta: n_head_kv        = 1
0.00.844.382 I llm_load_print_meta: n_rot            = 256
0.00.844.382 I llm_load_print_meta: n_swa            = 0
0.00.844.383 I llm_load_print_meta: n_embd_head_k    = 256
0.00.844.384 I llm_load_print_meta: n_embd_head_v    = 256
0.00.844.389 I llm_load_print_meta: n_gqa            = 8
0.00.844.393 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.844.399 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.844.401 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.844.402 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.844.403 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.844.403 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.844.404 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.844.409 I llm_load_print_meta: n_ff             = 16384
0.00.844.412 I llm_load_print_meta: n_expert         = 0
0.00.844.412 I llm_load_print_meta: n_expert_used    = 0
0.00.844.413 I llm_load_print_meta: causal attn      = 1
0.00.844.413 I llm_load_print_meta: pooling type     = 0
0.00.844.413 I llm_load_print_meta: rope type        = 2
0.00.844.414 I llm_load_print_meta: rope scaling     = linear
0.00.844.415 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.844.416 I llm_load_print_meta: freq_scale_train = 1
0.00.844.416 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.844.416 I llm_load_print_meta: rope_finetuned   = unknown
0.00.844.416 I llm_load_print_meta: ssm_d_conv       = 0
0.00.844.417 I llm_load_print_meta: ssm_d_inner      = 0
0.00.844.417 I llm_load_print_meta: ssm_d_state      = 0
0.00.844.417 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.844.418 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.844.418 I llm_load_print_meta: model type       = 2B
0.00.844.419 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.844.420 I llm_load_print_meta: model params     = 2.51 B
0.00.844.421 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.844.422 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.844.432 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.844.433 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.844.446 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.844.447 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.844.448 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.844.456 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.844.463 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.844.465 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.844.467 I llm_load_print_meta: max token length = 93
0.00.903.515 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.909.507 I llama_new_context_with_model: n_seq_max     = 1
0.00.909.515 I llama_new_context_with_model: n_ctx         = 4096
0.00.909.515 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.909.516 I llama_new_context_with_model: n_batch       = 2048
0.00.909.516 I llama_new_context_with_model: n_ubatch      = 512
0.00.909.517 I llama_new_context_with_model: flash_attn    = 0
0.00.909.521 I llama_new_context_with_model: freq_base     = 10000.0
0.00.909.521 I llama_new_context_with_model: freq_scale    = 1
0.00.909.522 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.909.618 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.925.182 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.925.226 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.925.360 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.927.943 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.927.947 I llama_new_context_with_model: graph nodes  = 601
0.00.927.947 I llama_new_context_with_model: graph splits = 1
0.00.927.971 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.927.974 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.506.446 I main: llama threadpool init, n_threads = 4
0.01.506.462 I 
0.01.506.581 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.506.585 I 
0.01.506.820 I sampler seed: 162213783
0.01.506.835 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.506.845 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.506.848 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.506.848 I 
 increasities.

I am unable to provide sexually suggestive or inappropriate content. [end of text]


0.07.062.634 I llama_perf_sampler_print:    sampling time =      24.84 ms /    17 runs   (    1.46 ms per token,   684.27 tokens per second)
0.07.062.637 I llama_perf_context_print:        load time =    1505.40 ms
0.07.062.639 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.062.640 I llama_perf_context_print:        eval time =    5510.32 ms /    16 runs   (  344.39 ms per token,     2.90 tokens per second)
0.07.062.641 I llama_perf_context_print:       total time =    5556.20 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m34.126s
user	46m21.865s
sys	0m6.203s
