+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.621 I build: 3790 (6e873e56) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.814 I main: llama backend init
0.00.002.753 I main: load the model and apply lora adapter, if any
0.00.024.585 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.777 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.863 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.874 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.876 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.880 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.884 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.885 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.886 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.888 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.889 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.896 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.897 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.898 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.899 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.901 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.014 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.426 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.821 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.194.831 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.194.832 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.194.833 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.194.834 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.194.835 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.194.836 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.839 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.840 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.841 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.194.842 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.194.843 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.194.852 I llama_model_loader: - type  f32:   37 tensors
0.00.194.856 I llama_model_loader: - type q8_0:  127 tensors
0.00.468.109 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.469.206 I llm_load_vocab: special tokens cache size = 5
0.00.527.870 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.527.925 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.527.926 I llm_load_print_meta: arch             = gemma
0.00.527.927 I llm_load_print_meta: vocab type       = SPM
0.00.527.928 I llm_load_print_meta: n_vocab          = 256000
0.00.527.931 I llm_load_print_meta: n_merges         = 0
0.00.527.931 I llm_load_print_meta: vocab_only       = 0
0.00.527.932 I llm_load_print_meta: n_ctx_train      = 8192
0.00.527.932 I llm_load_print_meta: n_embd           = 2048
0.00.527.932 I llm_load_print_meta: n_layer          = 18
0.00.527.966 I llm_load_print_meta: n_head           = 8
0.00.527.972 I llm_load_print_meta: n_head_kv        = 1
0.00.527.973 I llm_load_print_meta: n_rot            = 256
0.00.527.973 I llm_load_print_meta: n_swa            = 0
0.00.527.974 I llm_load_print_meta: n_embd_head_k    = 256
0.00.527.974 I llm_load_print_meta: n_embd_head_v    = 256
0.00.527.979 I llm_load_print_meta: n_gqa            = 8
0.00.527.983 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.527.988 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.527.989 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.527.990 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.527.990 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.527.991 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.527.991 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.527.996 I llm_load_print_meta: n_ff             = 16384
0.00.527.996 I llm_load_print_meta: n_expert         = 0
0.00.527.997 I llm_load_print_meta: n_expert_used    = 0
0.00.527.997 I llm_load_print_meta: causal attn      = 1
0.00.527.997 I llm_load_print_meta: pooling type     = 0
0.00.527.998 I llm_load_print_meta: rope type        = 2
0.00.527.998 I llm_load_print_meta: rope scaling     = linear
0.00.528.000 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.528.000 I llm_load_print_meta: freq_scale_train = 1
0.00.528.000 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.528.001 I llm_load_print_meta: rope_finetuned   = unknown
0.00.528.001 I llm_load_print_meta: ssm_d_conv       = 0
0.00.528.001 I llm_load_print_meta: ssm_d_inner      = 0
0.00.528.001 I llm_load_print_meta: ssm_d_state      = 0
0.00.528.002 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.528.002 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.528.003 I llm_load_print_meta: model type       = 2B
0.00.528.004 I llm_load_print_meta: model ftype      = Q8_0
0.00.528.004 I llm_load_print_meta: model params     = 2.51 B
0.00.528.005 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.528.006 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.528.006 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.528.007 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.528.007 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.528.007 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.528.008 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.528.008 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.528.008 I llm_load_print_meta: max token length = 93
0.00.528.183 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.627.194 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.627.206 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.627.207 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.627.208 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.627.208 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.627.209 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.632.791 I llama_new_context_with_model: n_ctx      = 8192
0.00.632.798 I llama_new_context_with_model: n_batch    = 2048
0.00.632.799 I llama_new_context_with_model: n_ubatch   = 512
0.00.632.800 I llama_new_context_with_model: flash_attn = 0
0.00.632.802 I llama_new_context_with_model: freq_base  = 10000.0
0.00.632.803 I llama_new_context_with_model: freq_scale = 1
0.00.661.988 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.662.030 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.662.141 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.663.512 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.663.518 I llama_new_context_with_model: graph nodes  = 601
0.00.663.518 I llama_new_context_with_model: graph splits = 1
0.00.663.534 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.277.684 I main: llama threadpool init, n_threads = 4
0.01.277.696 I 
0.01.277.791 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.277.795 I 
0.01.277.960 I sampler seed: 3061473143
0.01.277.970 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.277.975 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.277.976 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities!

I cannot find that information in the context. [end of text]


0.07.188.088 I llama_perf_sampler_print:    sampling time =      20.95 ms /    15 runs   (    1.40 ms per token,   715.99 tokens per second)
0.07.188.091 I llama_perf_context_print:        load time =    1274.85 ms
0.07.188.093 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.188.094 I llama_perf_context_print:        eval time =    5874.31 ms /    14 runs   (  419.59 ms per token,     2.38 tokens per second)
0.07.188.105 I llama_perf_context_print:       total time =    5910.41 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.632 I build: 3790 (6e873e56) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.831 I main: llama backend init
0.00.002.776 I main: load the model and apply lora adapter, if any
0.00.025.136 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.234 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.252 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.256 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.261 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.262 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.263 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.264 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.265 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.266 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.274 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.275 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.276 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.276 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.286 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.406 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.151 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.526 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.536 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.537 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.537 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.538 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.539 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.540 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.543 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.544 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.545 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.546 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.196.547 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.556 I llama_model_loader: - type  f32:   37 tensors
0.00.196.561 I llama_model_loader: - type q8_0:  127 tensors
0.00.491.021 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.492.230 I llm_load_vocab: special tokens cache size = 5
0.00.551.286 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.551.353 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.551.354 I llm_load_print_meta: arch             = gemma
0.00.551.355 I llm_load_print_meta: vocab type       = SPM
0.00.551.356 I llm_load_print_meta: n_vocab          = 256000
0.00.551.359 I llm_load_print_meta: n_merges         = 0
0.00.551.359 I llm_load_print_meta: vocab_only       = 0
0.00.551.359 I llm_load_print_meta: n_ctx_train      = 8192
0.00.551.360 I llm_load_print_meta: n_embd           = 2048
0.00.551.360 I llm_load_print_meta: n_layer          = 18
0.00.551.395 I llm_load_print_meta: n_head           = 8
0.00.551.401 I llm_load_print_meta: n_head_kv        = 1
0.00.551.402 I llm_load_print_meta: n_rot            = 256
0.00.551.402 I llm_load_print_meta: n_swa            = 0
0.00.551.403 I llm_load_print_meta: n_embd_head_k    = 256
0.00.551.403 I llm_load_print_meta: n_embd_head_v    = 256
0.00.551.408 I llm_load_print_meta: n_gqa            = 8
0.00.551.438 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.551.444 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.551.445 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.551.446 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.551.447 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.551.447 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.551.456 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.551.462 I llm_load_print_meta: n_ff             = 16384
0.00.551.469 I llm_load_print_meta: n_expert         = 0
0.00.551.470 I llm_load_print_meta: n_expert_used    = 0
0.00.551.471 I llm_load_print_meta: causal attn      = 1
0.00.551.471 I llm_load_print_meta: pooling type     = 0
0.00.551.471 I llm_load_print_meta: rope type        = 2
0.00.551.472 I llm_load_print_meta: rope scaling     = linear
0.00.551.481 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.551.490 I llm_load_print_meta: freq_scale_train = 1
0.00.551.498 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.551.499 I llm_load_print_meta: rope_finetuned   = unknown
0.00.551.499 I llm_load_print_meta: ssm_d_conv       = 0
0.00.551.500 I llm_load_print_meta: ssm_d_inner      = 0
0.00.551.500 I llm_load_print_meta: ssm_d_state      = 0
0.00.551.500 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.551.501 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.551.502 I llm_load_print_meta: model type       = 2B
0.00.551.503 I llm_load_print_meta: model ftype      = Q8_0
0.00.551.511 I llm_load_print_meta: model params     = 2.51 B
0.00.551.513 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.551.513 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.551.521 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.551.522 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.551.522 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.551.523 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.551.523 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.551.524 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.551.524 I llm_load_print_meta: max token length = 93
0.00.551.692 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.648.110 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.653.819 I llama_new_context_with_model: n_ctx      = 8192
0.00.653.826 I llama_new_context_with_model: n_batch    = 2048
0.00.653.827 I llama_new_context_with_model: n_ubatch   = 512
0.00.653.827 I llama_new_context_with_model: flash_attn = 0
0.00.653.830 I llama_new_context_with_model: freq_base  = 10000.0
0.00.653.831 I llama_new_context_with_model: freq_scale = 1
0.00.685.392 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.685.438 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.685.553 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.686.996 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.687.003 I llama_new_context_with_model: graph nodes  = 601
0.00.687.003 I llama_new_context_with_model: graph splits = 1
0.00.687.019 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.298.485 I main: llama threadpool init, n_threads = 4
0.01.298.497 I 
0.01.298.587 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.298.588 I 
0.01.298.750 I sampler seed: 2989720962
0.01.298.762 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.298.766 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.298.767 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increadibly. 

I'm sorry, but I cannot provide sexually suggestive or inappropriate responses. [end of text]


0.10.160.458 I llama_perf_sampler_print:    sampling time =      31.67 ms /    22 runs   (    1.44 ms per token,   694.75 tokens per second)
0.10.160.461 I llama_perf_context_print:        load time =    1295.62 ms
0.10.160.462 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.160.464 I llama_perf_context_print:        eval time =    8807.77 ms /    21 runs   (  419.42 ms per token,     2.38 tokens per second)
0.10.160.464 I llama_perf_context_print:       total time =    8861.98 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.643 I build: 3790 (6e873e56) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.002.788 I main: load the model and apply lora adapter, if any
0.00.024.863 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.060 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.151 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.163 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.164 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.168 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.172 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.173 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.174 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.175 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.176 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.183 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.184 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.185 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.186 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.187 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.571 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.284 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.566 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.574 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.575 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.576 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.577 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.578 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.579 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.582 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.583 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.584 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.585 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.195.586 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.594 I llama_model_loader: - type  f32:   37 tensors
0.00.195.598 I llama_model_loader: - type q8_0:  127 tensors
0.00.496.259 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.497.314 I llm_load_vocab: special tokens cache size = 5
0.00.556.150 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.556.212 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.556.213 I llm_load_print_meta: arch             = gemma
0.00.556.214 I llm_load_print_meta: vocab type       = SPM
0.00.556.215 I llm_load_print_meta: n_vocab          = 256000
0.00.556.218 I llm_load_print_meta: n_merges         = 0
0.00.556.218 I llm_load_print_meta: vocab_only       = 0
0.00.556.218 I llm_load_print_meta: n_ctx_train      = 8192
0.00.556.219 I llm_load_print_meta: n_embd           = 2048
0.00.556.219 I llm_load_print_meta: n_layer          = 18
0.00.556.256 I llm_load_print_meta: n_head           = 8
0.00.556.262 I llm_load_print_meta: n_head_kv        = 1
0.00.556.263 I llm_load_print_meta: n_rot            = 256
0.00.556.263 I llm_load_print_meta: n_swa            = 0
0.00.556.264 I llm_load_print_meta: n_embd_head_k    = 256
0.00.556.264 I llm_load_print_meta: n_embd_head_v    = 256
0.00.556.269 I llm_load_print_meta: n_gqa            = 8
0.00.556.274 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.556.279 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.556.280 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.556.281 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.556.282 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.556.282 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.556.283 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.556.288 I llm_load_print_meta: n_ff             = 16384
0.00.556.288 I llm_load_print_meta: n_expert         = 0
0.00.556.288 I llm_load_print_meta: n_expert_used    = 0
0.00.556.289 I llm_load_print_meta: causal attn      = 1
0.00.556.289 I llm_load_print_meta: pooling type     = 0
0.00.556.289 I llm_load_print_meta: rope type        = 2
0.00.556.290 I llm_load_print_meta: rope scaling     = linear
0.00.556.291 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.556.292 I llm_load_print_meta: freq_scale_train = 1
0.00.556.292 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.556.292 I llm_load_print_meta: rope_finetuned   = unknown
0.00.556.292 I llm_load_print_meta: ssm_d_conv       = 0
0.00.556.293 I llm_load_print_meta: ssm_d_inner      = 0
0.00.556.293 I llm_load_print_meta: ssm_d_state      = 0
0.00.556.293 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.556.294 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.556.294 I llm_load_print_meta: model type       = 2B
0.00.556.295 I llm_load_print_meta: model ftype      = Q8_0
0.00.556.296 I llm_load_print_meta: model params     = 2.51 B
0.00.556.297 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.556.297 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.556.298 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.556.298 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.556.299 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.556.299 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.556.299 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.556.300 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.556.300 I llm_load_print_meta: max token length = 93
0.00.556.469 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.632.477 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.632.487 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.632.488 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.632.489 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.632.490 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.632.490 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.638.232 I llama_new_context_with_model: n_ctx      = 8192
0.00.638.240 I llama_new_context_with_model: n_batch    = 2048
0.00.638.240 I llama_new_context_with_model: n_ubatch   = 512
0.00.638.241 I llama_new_context_with_model: flash_attn = 0
0.00.638.244 I llama_new_context_with_model: freq_base  = 10000.0
0.00.638.245 I llama_new_context_with_model: freq_scale = 1
0.00.670.022 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.670.064 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.670.177 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.671.561 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.671.568 I llama_new_context_with_model: graph nodes  = 601
0.00.671.568 I llama_new_context_with_model: graph splits = 1
0.00.671.584 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.313.810 I main: llama threadpool init, n_threads = 4
0.01.313.822 I 
0.01.313.916 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.313.919 I 
0.01.314.090 I sampler seed: 1135924671
0.01.314.100 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.314.105 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.314.106 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasively, defying the laws of nature.

The scientists, bewildered, watched as the creature defied all known physical laws. It moved with an unnatural grace,

0.14.909.570 I llama_perf_sampler_print:    sampling time =      48.33 ms /    33 runs   (    1.46 ms per token,   682.81 tokens per second)
0.14.909.573 I llama_perf_context_print:        load time =    1310.93 ms
0.14.909.574 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.909.586 I llama_perf_context_print:        eval time =   13514.42 ms /    32 runs   (  422.33 ms per token,     2.37 tokens per second)
0.14.909.588 I llama_perf_context_print:       total time =   13595.77 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.607 I build: 3790 (6e873e56) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.814 I main: llama backend init
0.00.002.769 I main: load the model and apply lora adapter, if any
0.00.024.594 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.783 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.872 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.883 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.884 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.888 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.889 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.890 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.892 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.892 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.893 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.901 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.906 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.907 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.909 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.910 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.017 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.655 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.000 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.007 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.008 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.009 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.010 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.011 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.012 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.015 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.016 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.017 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.018 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.195.019 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.027 I llama_model_loader: - type  f32:   37 tensors
0.00.195.031 I llama_model_loader: - type q8_0:  127 tensors
0.00.482.183 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.483.299 I llm_load_vocab: special tokens cache size = 5
0.00.541.715 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.541.777 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.541.782 I llm_load_print_meta: arch             = gemma
0.00.541.783 I llm_load_print_meta: vocab type       = SPM
0.00.541.784 I llm_load_print_meta: n_vocab          = 256000
0.00.541.786 I llm_load_print_meta: n_merges         = 0
0.00.541.787 I llm_load_print_meta: vocab_only       = 0
0.00.541.788 I llm_load_print_meta: n_ctx_train      = 8192
0.00.541.790 I llm_load_print_meta: n_embd           = 2048
0.00.541.791 I llm_load_print_meta: n_layer          = 18
0.00.541.836 I llm_load_print_meta: n_head           = 8
0.00.541.852 I llm_load_print_meta: n_head_kv        = 1
0.00.541.853 I llm_load_print_meta: n_rot            = 256
0.00.541.865 I llm_load_print_meta: n_swa            = 0
0.00.541.869 I llm_load_print_meta: n_embd_head_k    = 256
0.00.541.870 I llm_load_print_meta: n_embd_head_v    = 256
0.00.541.878 I llm_load_print_meta: n_gqa            = 8
0.00.541.892 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.541.902 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.541.907 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.541.911 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.541.913 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.541.914 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.541.915 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.541.920 I llm_load_print_meta: n_ff             = 16384
0.00.541.920 I llm_load_print_meta: n_expert         = 0
0.00.541.921 I llm_load_print_meta: n_expert_used    = 0
0.00.541.921 I llm_load_print_meta: causal attn      = 1
0.00.541.932 I llm_load_print_meta: pooling type     = 0
0.00.541.933 I llm_load_print_meta: rope type        = 2
0.00.541.934 I llm_load_print_meta: rope scaling     = linear
0.00.541.936 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.541.937 I llm_load_print_meta: freq_scale_train = 1
0.00.541.938 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.541.939 I llm_load_print_meta: rope_finetuned   = unknown
0.00.541.940 I llm_load_print_meta: ssm_d_conv       = 0
0.00.541.940 I llm_load_print_meta: ssm_d_inner      = 0
0.00.541.941 I llm_load_print_meta: ssm_d_state      = 0
0.00.541.942 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.541.945 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.541.946 I llm_load_print_meta: model type       = 2B
0.00.541.947 I llm_load_print_meta: model ftype      = Q8_0
0.00.541.948 I llm_load_print_meta: model params     = 2.51 B
0.00.541.950 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.541.950 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.541.951 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.541.952 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.541.952 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.541.953 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.541.954 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.541.957 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.541.958 I llm_load_print_meta: max token length = 93
0.00.542.143 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.612.928 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.612.941 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.618.643 I llama_new_context_with_model: n_ctx      = 8192
0.00.618.649 I llama_new_context_with_model: n_batch    = 2048
0.00.618.649 I llama_new_context_with_model: n_ubatch   = 512
0.00.618.650 I llama_new_context_with_model: flash_attn = 0
0.00.618.652 I llama_new_context_with_model: freq_base  = 10000.0
0.00.618.653 I llama_new_context_with_model: freq_scale = 1
0.00.647.446 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.647.488 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.647.599 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.648.992 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.648.999 I llama_new_context_with_model: graph nodes  = 601
0.00.649.000 I llama_new_context_with_model: graph splits = 1
0.00.649.018 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.261.373 I main: llama threadpool init, n_threads = 4
0.01.261.384 I 
0.01.261.480 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.261.485 I 
0.01.261.654 I sampler seed: 789915270
0.01.261.665 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.261.670 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.261.671 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably.

The world is a canvas, and artists use their brushes to create masterpieces. But just like a blank canvas, it also holds the potential for

0.14.879.241 I llama_perf_sampler_print:    sampling time =      48.32 ms /    33 runs   (    1.46 ms per token,   682.96 tokens per second)
0.14.879.245 I llama_perf_context_print:        load time =    1258.52 ms
0.14.879.246 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.879.247 I llama_perf_context_print:        eval time =   13537.06 ms /    32 runs   (  423.03 ms per token,     2.36 tokens per second)
0.14.879.270 I llama_perf_context_print:       total time =   13617.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m56.803s
user	3m0.502s
sys	0m9.402s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3790 (6e873e56)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199228.93 ms
main:    total time = 199228.93 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.528 I build: 3790 (6e873e56) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.727 I main: llama backend init
0.00.002.675 I main: load the model and apply lora adapter, if any
0.00.024.670 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.860 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.945 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.956 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.958 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.962 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.962 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.963 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.964 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.965 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.966 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.971 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.972 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.973 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.975 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.976 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.093.879 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.046 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.317 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.194.326 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.194.327 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.194.327 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.194.328 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.194.330 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.194.330 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.334 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.335 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.336 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.194.337 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.194.338 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.194.347 I llama_model_loader: - type  f32:   37 tensors
0.00.194.351 I llama_model_loader: - type q4_K:  108 tensors
0.00.194.352 I llama_model_loader: - type q6_K:   19 tensors
0.00.460.034 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.461.024 I llm_load_vocab: special tokens cache size = 5
0.00.519.228 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.519.280 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.519.281 I llm_load_print_meta: arch             = gemma
0.00.519.282 I llm_load_print_meta: vocab type       = SPM
0.00.519.283 I llm_load_print_meta: n_vocab          = 256000
0.00.519.285 I llm_load_print_meta: n_merges         = 0
0.00.519.285 I llm_load_print_meta: vocab_only       = 0
0.00.519.286 I llm_load_print_meta: n_ctx_train      = 8192
0.00.519.286 I llm_load_print_meta: n_embd           = 2048
0.00.519.286 I llm_load_print_meta: n_layer          = 18
0.00.519.319 I llm_load_print_meta: n_head           = 8
0.00.519.326 I llm_load_print_meta: n_head_kv        = 1
0.00.519.327 I llm_load_print_meta: n_rot            = 256
0.00.519.327 I llm_load_print_meta: n_swa            = 0
0.00.519.328 I llm_load_print_meta: n_embd_head_k    = 256
0.00.519.328 I llm_load_print_meta: n_embd_head_v    = 256
0.00.519.333 I llm_load_print_meta: n_gqa            = 8
0.00.519.337 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.519.341 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.519.343 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.519.344 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.519.344 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.519.345 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.519.345 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.519.350 I llm_load_print_meta: n_ff             = 16384
0.00.519.350 I llm_load_print_meta: n_expert         = 0
0.00.519.351 I llm_load_print_meta: n_expert_used    = 0
0.00.519.351 I llm_load_print_meta: causal attn      = 1
0.00.519.352 I llm_load_print_meta: pooling type     = 0
0.00.519.352 I llm_load_print_meta: rope type        = 2
0.00.519.352 I llm_load_print_meta: rope scaling     = linear
0.00.519.354 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.519.354 I llm_load_print_meta: freq_scale_train = 1
0.00.519.354 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.519.355 I llm_load_print_meta: rope_finetuned   = unknown
0.00.519.355 I llm_load_print_meta: ssm_d_conv       = 0
0.00.519.355 I llm_load_print_meta: ssm_d_inner      = 0
0.00.519.356 I llm_load_print_meta: ssm_d_state      = 0
0.00.519.356 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.519.356 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.519.357 I llm_load_print_meta: model type       = 2B
0.00.519.358 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.519.359 I llm_load_print_meta: model params     = 2.51 B
0.00.519.360 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.519.360 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.519.360 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.519.361 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.519.361 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.519.361 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.519.362 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.519.362 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.519.363 I llm_load_print_meta: max token length = 93
0.00.519.532 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.579.807 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.579.816 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.579.817 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.579.817 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.579.818 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.579.819 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.585.351 I llama_new_context_with_model: n_ctx      = 8192
0.00.585.358 I llama_new_context_with_model: n_batch    = 2048
0.00.585.358 I llama_new_context_with_model: n_ubatch   = 512
0.00.585.359 I llama_new_context_with_model: flash_attn = 0
0.00.585.362 I llama_new_context_with_model: freq_base  = 10000.0
0.00.585.363 I llama_new_context_with_model: freq_scale = 1
0.00.614.334 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.614.375 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.614.485 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.615.862 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.615.868 I llama_new_context_with_model: graph nodes  = 601
0.00.615.868 I llama_new_context_with_model: graph splits = 1
0.00.615.883 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.194.560 I main: llama threadpool init, n_threads = 4
0.01.194.571 I 
0.01.194.667 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.194.671 I 
0.01.194.840 I sampler seed: 3306439042
0.01.194.850 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.194.854 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.194.855 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally with the other posts in the sequence. [end of text]


0.04.966.416 I llama_perf_sampler_print:    sampling time =      16.71 ms /    12 runs   (    1.39 ms per token,   718.22 tokens per second)
0.04.966.420 I llama_perf_context_print:        load time =    1191.80 ms
0.04.966.421 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.966.423 I llama_perf_context_print:        eval time =    3742.56 ms /    11 runs   (  340.23 ms per token,     2.94 tokens per second)
0.04.966.424 I llama_perf_context_print:       total time =    3771.87 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3790 (6e873e56)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199039.50 ms
main:    total time = 199039.50 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.622 I build: 3790 (6e873e56) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.813 I main: llama backend init
0.00.002.778 I main: load the model and apply lora adapter, if any
0.00.024.635 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.729 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.743 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.745 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.749 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.750 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.759 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.760 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.761 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.762 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.768 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.769 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.770 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.771 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.772 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.162 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.415 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.694 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.194.702 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.194.703 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.194.704 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.194.705 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.194.706 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.194.707 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.710 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.712 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.721 I llama_model_loader: - type  f32:   37 tensors
0.00.194.725 I llama_model_loader: - type q4_K:  108 tensors
0.00.194.726 I llama_model_loader: - type q6_K:   19 tensors
0.00.477.346 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.478.357 I llm_load_vocab: special tokens cache size = 5
0.00.536.904 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.536.960 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.536.961 I llm_load_print_meta: arch             = gemma
0.00.536.961 I llm_load_print_meta: vocab type       = SPM
0.00.536.962 I llm_load_print_meta: n_vocab          = 256000
0.00.536.965 I llm_load_print_meta: n_merges         = 0
0.00.536.966 I llm_load_print_meta: vocab_only       = 0
0.00.536.966 I llm_load_print_meta: n_ctx_train      = 8192
0.00.536.967 I llm_load_print_meta: n_embd           = 2048
0.00.536.967 I llm_load_print_meta: n_layer          = 18
0.00.537.001 I llm_load_print_meta: n_head           = 8
0.00.537.008 I llm_load_print_meta: n_head_kv        = 1
0.00.537.009 I llm_load_print_meta: n_rot            = 256
0.00.537.009 I llm_load_print_meta: n_swa            = 0
0.00.537.009 I llm_load_print_meta: n_embd_head_k    = 256
0.00.537.010 I llm_load_print_meta: n_embd_head_v    = 256
0.00.537.014 I llm_load_print_meta: n_gqa            = 8
0.00.537.018 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.537.044 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.537.046 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.537.047 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.537.048 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.537.048 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.537.048 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.537.054 I llm_load_print_meta: n_ff             = 16384
0.00.537.055 I llm_load_print_meta: n_expert         = 0
0.00.537.055 I llm_load_print_meta: n_expert_used    = 0
0.00.537.056 I llm_load_print_meta: causal attn      = 1
0.00.537.056 I llm_load_print_meta: pooling type     = 0
0.00.537.056 I llm_load_print_meta: rope type        = 2
0.00.537.058 I llm_load_print_meta: rope scaling     = linear
0.00.537.059 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.537.060 I llm_load_print_meta: freq_scale_train = 1
0.00.537.060 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.537.065 I llm_load_print_meta: rope_finetuned   = unknown
0.00.537.065 I llm_load_print_meta: ssm_d_conv       = 0
0.00.537.065 I llm_load_print_meta: ssm_d_inner      = 0
0.00.537.065 I llm_load_print_meta: ssm_d_state      = 0
0.00.537.066 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.537.066 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.537.076 I llm_load_print_meta: model type       = 2B
0.00.537.078 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.537.079 I llm_load_print_meta: model params     = 2.51 B
0.00.537.087 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.537.087 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.537.088 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.537.096 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.537.103 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.537.104 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.537.111 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.537.112 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.537.113 I llm_load_print_meta: max token length = 93
0.00.537.284 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.595.575 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.601.088 I llama_new_context_with_model: n_ctx      = 8192
0.00.601.095 I llama_new_context_with_model: n_batch    = 2048
0.00.601.096 I llama_new_context_with_model: n_ubatch   = 512
0.00.601.096 I llama_new_context_with_model: flash_attn = 0
0.00.601.099 I llama_new_context_with_model: freq_base  = 10000.0
0.00.601.100 I llama_new_context_with_model: freq_scale = 1
0.00.630.857 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.630.898 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.631.011 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.632.401 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.632.408 I llama_new_context_with_model: graph nodes  = 601
0.00.632.408 I llama_new_context_with_model: graph splits = 1
0.00.632.427 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.209.834 I main: llama threadpool init, n_threads = 4
0.01.209.845 I 
0.01.209.932 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.209.936 I 
0.01.210.097 I sampler seed: 2308822690
0.01.210.107 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.210.111 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.210.112 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 fufilling sounds.

Answer: The provided text contains descriptions of sounds that are likely to be considered disturbing or unpleasant by many people. [end of text]


0.10.744.909 I llama_perf_sampler_print:    sampling time =      42.08 ms /    29 runs   (    1.45 ms per token,   689.21 tokens per second)
0.10.744.912 I llama_perf_context_print:        load time =    1206.98 ms
0.10.744.933 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.744.935 I llama_perf_context_print:        eval time =    9463.81 ms /    28 runs   (  337.99 ms per token,     2.96 tokens per second)
0.10.744.936 I llama_perf_context_print:       total time =    9535.08 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m56.802s
user	49m31.973s
sys	0m6.399s
