+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.537 I build: 3790 (6e873e56) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.726 I main: llama backend init
0.00.001.857 I main: load the model and apply lora adapter, if any
0.00.022.206 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.256 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.263 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.269 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.270 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.274 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.275 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.276 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.277 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.277 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.279 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.283 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.284 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.285 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.285 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.286 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.774 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.033 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.849 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.855 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.856 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.856 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.857 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.858 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.859 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.861 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.862 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.863 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.864 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.865 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.868 I llama_model_loader: - type  f32:   37 tensors
0.00.130.871 I llama_model_loader: - type q8_0:  127 tensors
0.00.193.835 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.194.460 I llm_load_vocab: special tokens cache size = 5
0.00.213.297 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.213.310 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.213.310 I llm_load_print_meta: arch             = gemma
0.00.213.311 I llm_load_print_meta: vocab type       = SPM
0.00.213.312 I llm_load_print_meta: n_vocab          = 256000
0.00.213.312 I llm_load_print_meta: n_merges         = 0
0.00.213.312 I llm_load_print_meta: vocab_only       = 0
0.00.213.313 I llm_load_print_meta: n_ctx_train      = 8192
0.00.213.313 I llm_load_print_meta: n_embd           = 2048
0.00.213.313 I llm_load_print_meta: n_layer          = 18
0.00.213.326 I llm_load_print_meta: n_head           = 8
0.00.213.327 I llm_load_print_meta: n_head_kv        = 1
0.00.213.328 I llm_load_print_meta: n_rot            = 256
0.00.213.328 I llm_load_print_meta: n_swa            = 0
0.00.213.328 I llm_load_print_meta: n_embd_head_k    = 256
0.00.213.329 I llm_load_print_meta: n_embd_head_v    = 256
0.00.213.330 I llm_load_print_meta: n_gqa            = 8
0.00.213.331 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.213.332 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.213.332 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.213.334 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.213.334 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.213.334 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.213.335 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.213.336 I llm_load_print_meta: n_ff             = 16384
0.00.213.336 I llm_load_print_meta: n_expert         = 0
0.00.213.337 I llm_load_print_meta: n_expert_used    = 0
0.00.213.337 I llm_load_print_meta: causal attn      = 1
0.00.213.337 I llm_load_print_meta: pooling type     = 0
0.00.213.337 I llm_load_print_meta: rope type        = 2
0.00.213.338 I llm_load_print_meta: rope scaling     = linear
0.00.213.339 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.213.340 I llm_load_print_meta: freq_scale_train = 1
0.00.213.340 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.213.340 I llm_load_print_meta: rope_finetuned   = unknown
0.00.213.340 I llm_load_print_meta: ssm_d_conv       = 0
0.00.213.341 I llm_load_print_meta: ssm_d_inner      = 0
0.00.213.341 I llm_load_print_meta: ssm_d_state      = 0
0.00.213.341 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.213.341 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.213.342 I llm_load_print_meta: model type       = 2B
0.00.213.343 I llm_load_print_meta: model ftype      = Q8_0
0.00.213.343 I llm_load_print_meta: model params     = 2.51 B
0.00.213.344 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.213.344 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.213.345 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.213.346 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.213.346 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.213.346 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.213.347 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.213.347 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.213.347 I llm_load_print_meta: max token length = 93
0.00.213.364 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.313.014 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.313.023 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.313.024 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.313.025 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.313.025 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.313.026 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.318.180 I llama_new_context_with_model: n_ctx      = 8192
0.00.318.187 I llama_new_context_with_model: n_batch    = 2048
0.00.318.188 I llama_new_context_with_model: n_ubatch   = 512
0.00.318.188 I llama_new_context_with_model: flash_attn = 0
0.00.318.191 I llama_new_context_with_model: freq_base  = 10000.0
0.00.318.192 I llama_new_context_with_model: freq_scale = 1
0.00.347.198 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.347.215 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.347.313 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.348.219 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.348.228 I llama_new_context_with_model: graph nodes  = 601
0.00.348.228 I llama_new_context_with_model: graph splits = 1
0.00.348.230 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.439.755 I main: llama threadpool init, n_threads = 4
0.00.439.767 I 
0.00.439.838 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.439.842 I 
0.00.439.868 I sampler seed: 3843235691
0.00.439.877 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.439.880 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.439.880 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities in the following way:

**1. The Iliad**
* A hero's journey
* Epic poetry
* Divine intervention
* Philosophical

0.02.670.173 I llama_perf_sampler_print:    sampling time =       4.73 ms /    33 runs   (    0.14 ms per token,  6981.17 tokens per second)
0.02.670.176 I llama_perf_context_print:        load time =     437.88 ms
0.02.670.177 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.670.179 I llama_perf_context_print:        eval time =    2212.31 ms /    32 runs   (   69.13 ms per token,    14.46 tokens per second)
0.02.670.180 I llama_perf_context_print:       total time =    2230.43 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.534 I build: 3790 (6e873e56) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.739 I main: llama backend init
0.00.002.077 I main: load the model and apply lora adapter, if any
0.00.021.909 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.923 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.932 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.936 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.939 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.940 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.942 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.942 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.943 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.944 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.949 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.950 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.950 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.951 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.952 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.585 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.275 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.048 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.055 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.055 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.056 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.056 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.057 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.058 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.060 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.061 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.061 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.063 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.064 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.068 I llama_model_loader: - type  f32:   37 tensors
0.00.131.071 I llama_model_loader: - type q8_0:  127 tensors
0.00.194.097 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.194.729 I llm_load_vocab: special tokens cache size = 5
0.00.213.486 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.213.501 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.213.501 I llm_load_print_meta: arch             = gemma
0.00.213.502 I llm_load_print_meta: vocab type       = SPM
0.00.213.502 I llm_load_print_meta: n_vocab          = 256000
0.00.213.503 I llm_load_print_meta: n_merges         = 0
0.00.213.503 I llm_load_print_meta: vocab_only       = 0
0.00.213.504 I llm_load_print_meta: n_ctx_train      = 8192
0.00.213.504 I llm_load_print_meta: n_embd           = 2048
0.00.213.504 I llm_load_print_meta: n_layer          = 18
0.00.213.517 I llm_load_print_meta: n_head           = 8
0.00.213.518 I llm_load_print_meta: n_head_kv        = 1
0.00.213.518 I llm_load_print_meta: n_rot            = 256
0.00.213.519 I llm_load_print_meta: n_swa            = 0
0.00.213.519 I llm_load_print_meta: n_embd_head_k    = 256
0.00.213.519 I llm_load_print_meta: n_embd_head_v    = 256
0.00.213.520 I llm_load_print_meta: n_gqa            = 8
0.00.213.521 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.213.522 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.213.523 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.213.524 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.213.525 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.213.525 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.213.525 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.213.526 I llm_load_print_meta: n_ff             = 16384
0.00.213.526 I llm_load_print_meta: n_expert         = 0
0.00.213.527 I llm_load_print_meta: n_expert_used    = 0
0.00.213.527 I llm_load_print_meta: causal attn      = 1
0.00.213.527 I llm_load_print_meta: pooling type     = 0
0.00.213.528 I llm_load_print_meta: rope type        = 2
0.00.213.528 I llm_load_print_meta: rope scaling     = linear
0.00.213.529 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.213.530 I llm_load_print_meta: freq_scale_train = 1
0.00.213.530 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.213.531 I llm_load_print_meta: rope_finetuned   = unknown
0.00.213.531 I llm_load_print_meta: ssm_d_conv       = 0
0.00.213.531 I llm_load_print_meta: ssm_d_inner      = 0
0.00.213.532 I llm_load_print_meta: ssm_d_state      = 0
0.00.213.533 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.213.533 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.213.534 I llm_load_print_meta: model type       = 2B
0.00.213.536 I llm_load_print_meta: model ftype      = Q8_0
0.00.213.537 I llm_load_print_meta: model params     = 2.51 B
0.00.213.538 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.213.539 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.213.540 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.213.540 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.213.540 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.213.541 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.213.541 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.213.542 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.213.542 I llm_load_print_meta: max token length = 93
0.00.213.560 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.307.108 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.312.275 I llama_new_context_with_model: n_ctx      = 8192
0.00.312.282 I llama_new_context_with_model: n_batch    = 2048
0.00.312.283 I llama_new_context_with_model: n_ubatch   = 512
0.00.312.283 I llama_new_context_with_model: flash_attn = 0
0.00.312.287 I llama_new_context_with_model: freq_base  = 10000.0
0.00.312.288 I llama_new_context_with_model: freq_scale = 1
0.00.342.059 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.342.073 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.342.163 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.033 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.343.040 I llama_new_context_with_model: graph nodes  = 601
0.00.343.040 I llama_new_context_with_model: graph splits = 1
0.00.343.041 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.430.352 I main: llama threadpool init, n_threads = 4
0.00.430.364 I 
0.00.430.436 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.430.439 I 
0.00.430.476 I sampler seed: 3572560549
0.00.430.486 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.430.488 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.430.489 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasively:

a. The first 100 years
b. The first 50 years
c. The first 25 years


0.02.596.994 I llama_perf_sampler_print:    sampling time =       4.90 ms /    33 runs   (    0.15 ms per token,  6736.07 tokens per second)
0.02.596.996 I llama_perf_context_print:        load time =     428.25 ms
0.02.596.999 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.597.001 I llama_perf_context_print:        eval time =    2148.78 ms /    32 runs   (   67.15 ms per token,    14.89 tokens per second)
0.02.597.002 I llama_perf_context_print:       total time =    2166.65 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.548 I build: 3790 (6e873e56) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.765 I main: llama backend init
0.00.001.902 I main: load the model and apply lora adapter, if any
0.00.021.808 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.864 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.877 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.890 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.895 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.899 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.900 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.901 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.902 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.903 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.904 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.910 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.914 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.916 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.916 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.917 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.251 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.024 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.809 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.816 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.816 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.817 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.818 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.819 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.820 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.823 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.823 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.824 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.825 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.129.826 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.830 I llama_model_loader: - type  f32:   37 tensors
0.00.129.832 I llama_model_loader: - type q8_0:  127 tensors
0.00.193.292 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.193.979 I llm_load_vocab: special tokens cache size = 5
0.00.212.563 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.212.576 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.212.577 I llm_load_print_meta: arch             = gemma
0.00.212.577 I llm_load_print_meta: vocab type       = SPM
0.00.212.578 I llm_load_print_meta: n_vocab          = 256000
0.00.212.579 I llm_load_print_meta: n_merges         = 0
0.00.212.579 I llm_load_print_meta: vocab_only       = 0
0.00.212.579 I llm_load_print_meta: n_ctx_train      = 8192
0.00.212.580 I llm_load_print_meta: n_embd           = 2048
0.00.212.580 I llm_load_print_meta: n_layer          = 18
0.00.212.592 I llm_load_print_meta: n_head           = 8
0.00.212.593 I llm_load_print_meta: n_head_kv        = 1
0.00.212.593 I llm_load_print_meta: n_rot            = 256
0.00.212.594 I llm_load_print_meta: n_swa            = 0
0.00.212.594 I llm_load_print_meta: n_embd_head_k    = 256
0.00.212.594 I llm_load_print_meta: n_embd_head_v    = 256
0.00.212.595 I llm_load_print_meta: n_gqa            = 8
0.00.212.597 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.212.598 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.212.598 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.212.600 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.212.600 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.212.601 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.212.601 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.212.602 I llm_load_print_meta: n_ff             = 16384
0.00.212.602 I llm_load_print_meta: n_expert         = 0
0.00.212.603 I llm_load_print_meta: n_expert_used    = 0
0.00.212.604 I llm_load_print_meta: causal attn      = 1
0.00.212.604 I llm_load_print_meta: pooling type     = 0
0.00.212.605 I llm_load_print_meta: rope type        = 2
0.00.212.605 I llm_load_print_meta: rope scaling     = linear
0.00.212.607 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.212.608 I llm_load_print_meta: freq_scale_train = 1
0.00.212.608 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.212.608 I llm_load_print_meta: rope_finetuned   = unknown
0.00.212.609 I llm_load_print_meta: ssm_d_conv       = 0
0.00.212.610 I llm_load_print_meta: ssm_d_inner      = 0
0.00.212.610 I llm_load_print_meta: ssm_d_state      = 0
0.00.212.611 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.212.611 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.212.611 I llm_load_print_meta: model type       = 2B
0.00.212.612 I llm_load_print_meta: model ftype      = Q8_0
0.00.212.613 I llm_load_print_meta: model params     = 2.51 B
0.00.212.615 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.212.615 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.212.616 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.212.616 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.212.618 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.212.618 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.212.619 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.212.619 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.212.620 I llm_load_print_meta: max token length = 93
0.00.212.640 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.287.349 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.287.354 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.287.355 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.287.355 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.287.356 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.287.357 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.292.354 I llama_new_context_with_model: n_ctx      = 8192
0.00.292.360 I llama_new_context_with_model: n_batch    = 2048
0.00.292.361 I llama_new_context_with_model: n_ubatch   = 512
0.00.292.361 I llama_new_context_with_model: flash_attn = 0
0.00.292.364 I llama_new_context_with_model: freq_base  = 10000.0
0.00.292.364 I llama_new_context_with_model: freq_scale = 1
0.00.320.823 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.320.840 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.320.927 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.321.794 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.321.802 I llama_new_context_with_model: graph nodes  = 601
0.00.321.802 I llama_new_context_with_model: graph splits = 1
0.00.321.803 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.414.087 I main: llama threadpool init, n_threads = 4
0.00.414.100 I 
0.00.414.177 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.414.181 I 
0.00.414.225 I sampler seed: 796447659
0.00.414.235 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.414.237 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.414.238 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities. 

I am unable to find the requested content on the website. [end of text]


0.01.693.906 I llama_perf_sampler_print:    sampling time =       2.62 ms /    19 runs   (    0.14 ms per token,  7257.45 tokens per second)
0.01.693.908 I llama_perf_context_print:        load time =     412.17 ms
0.01.693.909 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.693.910 I llama_perf_context_print:        eval time =    1268.94 ms /    18 runs   (   70.50 ms per token,    14.19 tokens per second)
0.01.693.911 I llama_perf_context_print:       total time =    1279.83 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.573 I build: 3790 (6e873e56) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.789 I main: llama backend init
0.00.001.897 I main: load the model and apply lora adapter, if any
0.00.021.893 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.954 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.966 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.972 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.976 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.982 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.983 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.984 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.985 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.986 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.988 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.993 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.994 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.995 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.995 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.996 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.379 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.128.007 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.770 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.776 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.777 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.778 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.778 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.779 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.780 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.782 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.783 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.785 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.785 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.134.786 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.790 I llama_model_loader: - type  f32:   37 tensors
0.00.134.793 I llama_model_loader: - type q8_0:  127 tensors
0.00.199.033 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.199.674 I llm_load_vocab: special tokens cache size = 5
0.00.218.444 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.218.456 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.218.457 I llm_load_print_meta: arch             = gemma
0.00.218.457 I llm_load_print_meta: vocab type       = SPM
0.00.218.458 I llm_load_print_meta: n_vocab          = 256000
0.00.218.458 I llm_load_print_meta: n_merges         = 0
0.00.218.459 I llm_load_print_meta: vocab_only       = 0
0.00.218.459 I llm_load_print_meta: n_ctx_train      = 8192
0.00.218.459 I llm_load_print_meta: n_embd           = 2048
0.00.218.460 I llm_load_print_meta: n_layer          = 18
0.00.218.471 I llm_load_print_meta: n_head           = 8
0.00.218.472 I llm_load_print_meta: n_head_kv        = 1
0.00.218.473 I llm_load_print_meta: n_rot            = 256
0.00.218.473 I llm_load_print_meta: n_swa            = 0
0.00.218.473 I llm_load_print_meta: n_embd_head_k    = 256
0.00.218.474 I llm_load_print_meta: n_embd_head_v    = 256
0.00.218.474 I llm_load_print_meta: n_gqa            = 8
0.00.218.475 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.218.476 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.218.477 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.218.478 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.218.479 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.218.479 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.218.479 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.218.480 I llm_load_print_meta: n_ff             = 16384
0.00.218.481 I llm_load_print_meta: n_expert         = 0
0.00.218.481 I llm_load_print_meta: n_expert_used    = 0
0.00.218.481 I llm_load_print_meta: causal attn      = 1
0.00.218.481 I llm_load_print_meta: pooling type     = 0
0.00.218.482 I llm_load_print_meta: rope type        = 2
0.00.218.482 I llm_load_print_meta: rope scaling     = linear
0.00.218.483 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.218.484 I llm_load_print_meta: freq_scale_train = 1
0.00.218.484 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.218.484 I llm_load_print_meta: rope_finetuned   = unknown
0.00.218.485 I llm_load_print_meta: ssm_d_conv       = 0
0.00.218.485 I llm_load_print_meta: ssm_d_inner      = 0
0.00.218.485 I llm_load_print_meta: ssm_d_state      = 0
0.00.218.485 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.218.486 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.218.486 I llm_load_print_meta: model type       = 2B
0.00.218.487 I llm_load_print_meta: model ftype      = Q8_0
0.00.218.488 I llm_load_print_meta: model params     = 2.51 B
0.00.218.488 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.218.489 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.218.489 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.218.490 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.218.490 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.218.490 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.218.491 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.218.491 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.218.491 I llm_load_print_meta: max token length = 93
0.00.218.508 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.292.391 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.292.398 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.298.200 I llama_new_context_with_model: n_ctx      = 8192
0.00.298.208 I llama_new_context_with_model: n_batch    = 2048
0.00.298.208 I llama_new_context_with_model: n_ubatch   = 512
0.00.298.208 I llama_new_context_with_model: flash_attn = 0
0.00.298.211 I llama_new_context_with_model: freq_base  = 10000.0
0.00.298.211 I llama_new_context_with_model: freq_scale = 1
0.00.326.799 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.326.816 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.326.907 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.327.776 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.327.783 I llama_new_context_with_model: graph nodes  = 601
0.00.327.784 I llama_new_context_with_model: graph splits = 1
0.00.327.786 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.309 I main: llama threadpool init, n_threads = 4
0.00.421.321 I 
0.00.421.396 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.421.399 I 
0.00.421.436 I sampler seed: 810641096
0.00.421.446 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.449 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.421.450 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasively, blurring the lines between the ancient and the modern.

The futurist in me whispers, "Embrace the chaos, the unpredictable future!"

The

0.02.841.641 I llama_perf_sampler_print:    sampling time =       5.12 ms /    33 runs   (    0.16 ms per token,  6444.05 tokens per second)
0.02.841.643 I llama_perf_context_print:        load time =     419.39 ms
0.02.841.644 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.841.646 I llama_perf_context_print:        eval time =    2400.83 ms /    32 runs   (   75.03 ms per token,    13.33 tokens per second)
0.02.841.647 I llama_perf_context_print:       total time =    2420.34 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.700s
user	0m35.076s
sys	0m9.333s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3790 (6e873e56)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32022.50 ms
main:    total time = 32022.50 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.547 I build: 3790 (6e873e56) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.733 I main: llama backend init
0.00.001.839 I main: load the model and apply lora adapter, if any
0.00.022.143 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.192 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.199 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.203 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.204 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.206 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.207 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.208 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.209 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.209 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.210 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.214 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.214 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.215 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.215 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.217 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.113 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.535 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.297 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.303 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.304 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.305 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.305 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.306 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.307 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.309 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.310 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.311 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.311 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.312 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.314 I llama_model_loader: - type  f32:   37 tensors
0.00.131.316 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.317 I llama_model_loader: - type q6_K:   19 tensors
0.00.193.683 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.194.216 I llm_load_vocab: special tokens cache size = 5
0.00.212.948 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.212.961 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.212.961 I llm_load_print_meta: arch             = gemma
0.00.212.962 I llm_load_print_meta: vocab type       = SPM
0.00.212.962 I llm_load_print_meta: n_vocab          = 256000
0.00.212.963 I llm_load_print_meta: n_merges         = 0
0.00.212.963 I llm_load_print_meta: vocab_only       = 0
0.00.212.963 I llm_load_print_meta: n_ctx_train      = 8192
0.00.212.964 I llm_load_print_meta: n_embd           = 2048
0.00.212.964 I llm_load_print_meta: n_layer          = 18
0.00.212.975 I llm_load_print_meta: n_head           = 8
0.00.212.976 I llm_load_print_meta: n_head_kv        = 1
0.00.212.977 I llm_load_print_meta: n_rot            = 256
0.00.212.977 I llm_load_print_meta: n_swa            = 0
0.00.212.977 I llm_load_print_meta: n_embd_head_k    = 256
0.00.212.978 I llm_load_print_meta: n_embd_head_v    = 256
0.00.212.979 I llm_load_print_meta: n_gqa            = 8
0.00.212.980 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.212.981 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.212.981 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.212.983 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.212.983 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.212.983 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.212.984 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.212.985 I llm_load_print_meta: n_ff             = 16384
0.00.212.985 I llm_load_print_meta: n_expert         = 0
0.00.212.985 I llm_load_print_meta: n_expert_used    = 0
0.00.212.985 I llm_load_print_meta: causal attn      = 1
0.00.212.986 I llm_load_print_meta: pooling type     = 0
0.00.212.986 I llm_load_print_meta: rope type        = 2
0.00.212.986 I llm_load_print_meta: rope scaling     = linear
0.00.212.987 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.212.988 I llm_load_print_meta: freq_scale_train = 1
0.00.212.988 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.212.989 I llm_load_print_meta: rope_finetuned   = unknown
0.00.212.989 I llm_load_print_meta: ssm_d_conv       = 0
0.00.212.989 I llm_load_print_meta: ssm_d_inner      = 0
0.00.212.990 I llm_load_print_meta: ssm_d_state      = 0
0.00.212.990 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.212.990 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.212.991 I llm_load_print_meta: model type       = 2B
0.00.212.991 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.212.992 I llm_load_print_meta: model params     = 2.51 B
0.00.212.993 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.212.993 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.212.994 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.212.994 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.212.994 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.212.994 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.212.995 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.212.995 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.212.995 I llm_load_print_meta: max token length = 93
0.00.213.011 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.271.129 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.271.135 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.271.136 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.271.136 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.271.137 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.271.138 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.276.175 I llama_new_context_with_model: n_ctx      = 8192
0.00.276.181 I llama_new_context_with_model: n_batch    = 2048
0.00.276.181 I llama_new_context_with_model: n_ubatch   = 512
0.00.276.182 I llama_new_context_with_model: flash_attn = 0
0.00.276.184 I llama_new_context_with_model: freq_base  = 10000.0
0.00.276.185 I llama_new_context_with_model: freq_scale = 1
0.00.304.973 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.304.988 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.305.079 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.305.934 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.305.942 I llama_new_context_with_model: graph nodes  = 601
0.00.305.942 I llama_new_context_with_model: graph splits = 1
0.00.305.944 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.386.532 I main: llama threadpool init, n_threads = 4
0.00.386.543 I 
0.00.386.614 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.386.617 I 
0.00.386.643 I sampler seed: 183860667
0.00.386.652 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.386.655 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.386.655 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneuvously, seeking to replace the old with the new, the forgotten with the remembered.

What is the answer?

**Memory**

Memory is

0.01.997.950 I llama_perf_sampler_print:    sampling time =       5.19 ms /    33 runs   (    0.16 ms per token,  6354.71 tokens per second)
0.01.997.952 I llama_perf_context_print:        load time =     384.68 ms
0.01.997.953 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.997.955 I llama_perf_context_print:        eval time =    1592.80 ms /    32 runs   (   49.78 ms per token,    20.09 tokens per second)
0.01.997.955 I llama_perf_context_print:       total time =    1611.43 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3790 (6e873e56)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32087.60 ms
main:    total time = 32087.60 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.524 I build: 3790 (6e873e56) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.727 I main: llama backend init
0.00.001.833 I main: load the model and apply lora adapter, if any
0.00.021.871 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.882 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.889 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.890 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.894 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.895 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.896 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.896 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.896 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.897 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.901 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.902 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.903 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.904 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.904 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.461 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.081 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.918 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.924 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.925 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.925 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.926 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.926 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.927 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.930 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.931 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.934 I llama_model_loader: - type  f32:   37 tensors
0.00.130.937 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.938 I llama_model_loader: - type q6_K:   19 tensors
0.00.192.245 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.192.805 I llm_load_vocab: special tokens cache size = 5
0.00.211.362 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.211.373 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.211.374 I llm_load_print_meta: arch             = gemma
0.00.211.374 I llm_load_print_meta: vocab type       = SPM
0.00.211.375 I llm_load_print_meta: n_vocab          = 256000
0.00.211.375 I llm_load_print_meta: n_merges         = 0
0.00.211.376 I llm_load_print_meta: vocab_only       = 0
0.00.211.376 I llm_load_print_meta: n_ctx_train      = 8192
0.00.211.377 I llm_load_print_meta: n_embd           = 2048
0.00.211.377 I llm_load_print_meta: n_layer          = 18
0.00.211.389 I llm_load_print_meta: n_head           = 8
0.00.211.391 I llm_load_print_meta: n_head_kv        = 1
0.00.211.391 I llm_load_print_meta: n_rot            = 256
0.00.211.391 I llm_load_print_meta: n_swa            = 0
0.00.211.391 I llm_load_print_meta: n_embd_head_k    = 256
0.00.211.392 I llm_load_print_meta: n_embd_head_v    = 256
0.00.211.393 I llm_load_print_meta: n_gqa            = 8
0.00.211.394 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.211.395 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.211.396 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.211.397 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.211.397 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.211.398 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.211.398 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.211.399 I llm_load_print_meta: n_ff             = 16384
0.00.211.399 I llm_load_print_meta: n_expert         = 0
0.00.211.399 I llm_load_print_meta: n_expert_used    = 0
0.00.211.400 I llm_load_print_meta: causal attn      = 1
0.00.211.400 I llm_load_print_meta: pooling type     = 0
0.00.211.401 I llm_load_print_meta: rope type        = 2
0.00.211.401 I llm_load_print_meta: rope scaling     = linear
0.00.211.402 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.211.403 I llm_load_print_meta: freq_scale_train = 1
0.00.211.403 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.211.403 I llm_load_print_meta: rope_finetuned   = unknown
0.00.211.404 I llm_load_print_meta: ssm_d_conv       = 0
0.00.211.404 I llm_load_print_meta: ssm_d_inner      = 0
0.00.211.404 I llm_load_print_meta: ssm_d_state      = 0
0.00.211.404 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.211.405 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.211.405 I llm_load_print_meta: model type       = 2B
0.00.211.406 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.211.406 I llm_load_print_meta: model params     = 2.51 B
0.00.211.407 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.211.408 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.211.408 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.211.409 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.211.409 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.211.409 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.211.410 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.211.410 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.211.411 I llm_load_print_meta: max token length = 93
0.00.211.428 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.268.217 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.273.129 I llama_new_context_with_model: n_ctx      = 8192
0.00.273.136 I llama_new_context_with_model: n_batch    = 2048
0.00.273.136 I llama_new_context_with_model: n_ubatch   = 512
0.00.273.137 I llama_new_context_with_model: flash_attn = 0
0.00.273.139 I llama_new_context_with_model: freq_base  = 10000.0
0.00.273.140 I llama_new_context_with_model: freq_scale = 1
0.00.302.384 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.302.402 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.302.491 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.303.329 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.303.336 I llama_new_context_with_model: graph nodes  = 601
0.00.303.337 I llama_new_context_with_model: graph splits = 1
0.00.303.338 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.384.737 I main: llama threadpool init, n_threads = 4
0.00.384.749 I 
0.00.384.823 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.384.826 I 
0.00.384.854 I sampler seed: 357153625
0.00.384.863 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.384.866 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.384.866 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 squaRED VELVET, 2014

The painting depicts a woman with an enigmatic smile and a shadowy presence. Her dress, a swirling tapestry of

0.01.989.785 I llama_perf_sampler_print:    sampling time =       4.87 ms /    33 runs   (    0.15 ms per token,  6776.18 tokens per second)
0.01.989.787 I llama_perf_context_print:        load time =     382.88 ms
0.01.989.788 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.989.790 I llama_perf_context_print:        eval time =    1586.92 ms /    32 runs   (   49.59 ms per token,    20.16 tokens per second)
0.01.989.791 I llama_perf_context_print:       total time =    1605.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.840s
user	8m14.416s
sys	0m6.761s
