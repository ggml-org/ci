+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.635 I build: 4176 (9a4b79bc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.829 I main: llama backend init
0.00.000.837 I main: load the model and apply lora adapter, if any
0.00.023.745 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.755 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.851 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.863 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.865 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.871 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.874 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.875 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.876 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.878 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.879 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.890 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.892 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.894 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.895 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.896 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.164 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.800 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.744 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.752 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.754 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.755 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.756 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.758 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.761 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.765 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.767 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.768 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.770 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.348.781 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.792 I llama_model_loader: - type  f32:   37 tensors
0.00.348.795 I llama_model_loader: - type q8_0:  127 tensors
0.00.577.540 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.637.905 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.638.845 I llm_load_vocab: special tokens cache size = 5
0.00.821.475 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.821.550 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.821.554 I llm_load_print_meta: arch             = gemma
0.00.821.555 I llm_load_print_meta: vocab type       = SPM
0.00.821.556 I llm_load_print_meta: n_vocab          = 256000
0.00.821.558 I llm_load_print_meta: n_merges         = 0
0.00.821.558 I llm_load_print_meta: vocab_only       = 0
0.00.821.559 I llm_load_print_meta: n_ctx_train      = 8192
0.00.821.559 I llm_load_print_meta: n_embd           = 2048
0.00.821.560 I llm_load_print_meta: n_layer          = 18
0.00.821.626 I llm_load_print_meta: n_head           = 8
0.00.821.636 I llm_load_print_meta: n_head_kv        = 1
0.00.821.636 I llm_load_print_meta: n_rot            = 256
0.00.821.637 I llm_load_print_meta: n_swa            = 0
0.00.821.638 I llm_load_print_meta: n_embd_head_k    = 256
0.00.821.638 I llm_load_print_meta: n_embd_head_v    = 256
0.00.821.643 I llm_load_print_meta: n_gqa            = 8
0.00.821.647 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.821.652 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.821.654 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.821.656 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.821.657 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.821.657 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.821.657 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.821.662 I llm_load_print_meta: n_ff             = 16384
0.00.821.662 I llm_load_print_meta: n_expert         = 0
0.00.821.663 I llm_load_print_meta: n_expert_used    = 0
0.00.821.663 I llm_load_print_meta: causal attn      = 1
0.00.821.663 I llm_load_print_meta: pooling type     = 0
0.00.821.671 I llm_load_print_meta: rope type        = 2
0.00.821.672 I llm_load_print_meta: rope scaling     = linear
0.00.821.674 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.821.686 I llm_load_print_meta: freq_scale_train = 1
0.00.821.687 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.821.695 I llm_load_print_meta: rope_finetuned   = unknown
0.00.821.699 I llm_load_print_meta: ssm_d_conv       = 0
0.00.821.699 I llm_load_print_meta: ssm_d_inner      = 0
0.00.821.699 I llm_load_print_meta: ssm_d_state      = 0
0.00.821.700 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.821.700 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.821.700 I llm_load_print_meta: model type       = 2B
0.00.821.701 I llm_load_print_meta: model ftype      = Q8_0
0.00.821.702 I llm_load_print_meta: model params     = 2.51 B
0.00.821.710 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.821.718 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.821.720 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.821.720 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.821.721 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.821.721 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.821.722 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.821.723 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.821.729 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.821.730 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.821.731 I llm_load_print_meta: max token length = 93
0.00.922.520 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.922.530 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.922.531 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.922.532 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.922.533 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.922.533 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.928.470 I llama_new_context_with_model: n_seq_max     = 1
0.00.928.477 I llama_new_context_with_model: n_ctx         = 4096
0.00.928.477 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.928.478 I llama_new_context_with_model: n_batch       = 2048
0.00.928.478 I llama_new_context_with_model: n_ubatch      = 512
0.00.928.479 I llama_new_context_with_model: flash_attn    = 0
0.00.928.481 I llama_new_context_with_model: freq_base     = 10000.0
0.00.928.482 I llama_new_context_with_model: freq_scale    = 1
0.00.928.483 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.942.807 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.942.846 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.942.973 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.945.510 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.945.514 I llama_new_context_with_model: graph nodes  = 601
0.00.945.515 I llama_new_context_with_model: graph splits = 1
0.00.945.538 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.556.100 I main: llama threadpool init, n_threads = 4
0.01.556.116 I 
0.01.556.238 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.556.243 I 
0.01.556.490 I sampler seed: 405135243
0.01.556.504 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.556.515 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.556.518 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.556.518 I 
 seconal of the New Testament

The second section of the New Testament tells the story of Jesus' earthly ministry and teachings. This section begins with Jesus' baptism

0.15.162.048 I llama_perf_sampler_print:    sampling time =      49.10 ms /    33 runs   (    1.49 ms per token,   672.15 tokens per second)
0.15.162.051 I llama_perf_context_print:        load time =    1555.16 ms
0.15.162.064 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.162.067 I llama_perf_context_print:        eval time =   13516.94 ms /    32 runs   (  422.40 ms per token,     2.37 tokens per second)
0.15.162.068 I llama_perf_context_print:       total time =   13605.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.646 I build: 4176 (9a4b79bc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.863 I main: llama backend init
0.00.000.871 I main: load the model and apply lora adapter, if any
0.00.023.201 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.292 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.306 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.311 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.316 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.317 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.319 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.321 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.323 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.331 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.340 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.342 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.343 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.344 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.359 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.244.646 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.346.376 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.370.281 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.370.291 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.370.294 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.370.296 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.370.298 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.370.300 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.370.302 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.370.308 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.370.310 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.370.312 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.370.314 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.370.318 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.370.328 I llama_model_loader: - type  f32:   37 tensors
0.00.370.330 I llama_model_loader: - type q8_0:  127 tensors
0.00.598.030 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.667.359 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.668.453 I llm_load_vocab: special tokens cache size = 5
0.00.867.665 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.867.747 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.867.750 I llm_load_print_meta: arch             = gemma
0.00.867.751 I llm_load_print_meta: vocab type       = SPM
0.00.867.752 I llm_load_print_meta: n_vocab          = 256000
0.00.867.755 I llm_load_print_meta: n_merges         = 0
0.00.867.755 I llm_load_print_meta: vocab_only       = 0
0.00.867.756 I llm_load_print_meta: n_ctx_train      = 8192
0.00.867.757 I llm_load_print_meta: n_embd           = 2048
0.00.867.757 I llm_load_print_meta: n_layer          = 18
0.00.867.828 I llm_load_print_meta: n_head           = 8
0.00.867.839 I llm_load_print_meta: n_head_kv        = 1
0.00.867.840 I llm_load_print_meta: n_rot            = 256
0.00.867.841 I llm_load_print_meta: n_swa            = 0
0.00.867.842 I llm_load_print_meta: n_embd_head_k    = 256
0.00.867.843 I llm_load_print_meta: n_embd_head_v    = 256
0.00.867.851 I llm_load_print_meta: n_gqa            = 8
0.00.867.858 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.867.869 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.867.871 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.867.872 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.867.873 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.867.874 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.867.875 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.867.883 I llm_load_print_meta: n_ff             = 16384
0.00.867.884 I llm_load_print_meta: n_expert         = 0
0.00.867.884 I llm_load_print_meta: n_expert_used    = 0
0.00.867.885 I llm_load_print_meta: causal attn      = 1
0.00.867.885 I llm_load_print_meta: pooling type     = 0
0.00.867.886 I llm_load_print_meta: rope type        = 2
0.00.867.887 I llm_load_print_meta: rope scaling     = linear
0.00.867.889 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.867.890 I llm_load_print_meta: freq_scale_train = 1
0.00.867.891 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.867.891 I llm_load_print_meta: rope_finetuned   = unknown
0.00.867.893 I llm_load_print_meta: ssm_d_conv       = 0
0.00.867.894 I llm_load_print_meta: ssm_d_inner      = 0
0.00.867.894 I llm_load_print_meta: ssm_d_state      = 0
0.00.867.896 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.867.896 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.867.897 I llm_load_print_meta: model type       = 2B
0.00.867.899 I llm_load_print_meta: model ftype      = Q8_0
0.00.867.900 I llm_load_print_meta: model params     = 2.51 B
0.00.867.910 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.867.911 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.867.912 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.867.913 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.867.914 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.867.914 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.867.915 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.867.917 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.867.924 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.867.926 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.867.926 I llm_load_print_meta: max token length = 93
0.00.964.276 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.970.512 I llama_new_context_with_model: n_seq_max     = 1
0.00.970.520 I llama_new_context_with_model: n_ctx         = 4096
0.00.970.520 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.970.521 I llama_new_context_with_model: n_batch       = 2048
0.00.970.522 I llama_new_context_with_model: n_ubatch      = 512
0.00.970.523 I llama_new_context_with_model: flash_attn    = 0
0.00.970.526 I llama_new_context_with_model: freq_base     = 10000.0
0.00.970.527 I llama_new_context_with_model: freq_scale    = 1
0.00.970.528 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.985.430 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.985.481 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.985.617 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.988.226 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.988.231 I llama_new_context_with_model: graph nodes  = 601
0.00.988.231 I llama_new_context_with_model: graph splits = 1
0.00.988.258 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.631.970 I main: llama threadpool init, n_threads = 4
0.01.631.990 I 
0.01.632.121 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.632.125 I 
0.01.632.369 I sampler seed: 3017990883
0.01.632.385 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.632.399 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.632.403 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.632.403 I 
 increasities?

I am unable to answer this question as it contains sexually suggestive and potentially offensive content. I am designed to provide safe and appropriate responses. [end of text]


0.15.233.266 I llama_perf_sampler_print:    sampling time =      48.94 ms /    33 runs   (    1.48 ms per token,   674.24 tokens per second)
0.15.233.269 I llama_perf_context_print:        load time =    1631.01 ms
0.15.233.284 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.233.285 I llama_perf_context_print:        eval time =   13512.59 ms /    32 runs   (  422.27 ms per token,     2.37 tokens per second)
0.15.233.286 I llama_perf_context_print:       total time =   13601.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.692 I build: 4176 (9a4b79bc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.889 I main: llama backend init
0.00.000.898 I main: load the model and apply lora adapter, if any
0.00.023.690 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.701 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.807 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.819 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.821 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.827 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.830 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.831 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.832 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.833 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.834 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.841 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.843 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.845 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.846 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.847 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.522 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.358 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.287 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.299 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.300 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.301 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.303 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.304 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.306 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.310 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.312 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.313 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.314 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.351.316 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.325 I llama_model_loader: - type  f32:   37 tensors
0.00.351.327 I llama_model_loader: - type q8_0:  127 tensors
0.00.586.044 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.647.315 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.648.338 I llm_load_vocab: special tokens cache size = 5
0.00.839.724 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.839.809 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.839.810 I llm_load_print_meta: arch             = gemma
0.00.839.811 I llm_load_print_meta: vocab type       = SPM
0.00.839.812 I llm_load_print_meta: n_vocab          = 256000
0.00.839.814 I llm_load_print_meta: n_merges         = 0
0.00.839.815 I llm_load_print_meta: vocab_only       = 0
0.00.839.815 I llm_load_print_meta: n_ctx_train      = 8192
0.00.839.816 I llm_load_print_meta: n_embd           = 2048
0.00.839.816 I llm_load_print_meta: n_layer          = 18
0.00.839.883 I llm_load_print_meta: n_head           = 8
0.00.839.891 I llm_load_print_meta: n_head_kv        = 1
0.00.839.892 I llm_load_print_meta: n_rot            = 256
0.00.839.892 I llm_load_print_meta: n_swa            = 0
0.00.839.894 I llm_load_print_meta: n_embd_head_k    = 256
0.00.839.898 I llm_load_print_meta: n_embd_head_v    = 256
0.00.839.925 I llm_load_print_meta: n_gqa            = 8
0.00.839.931 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.839.939 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.839.941 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.839.950 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.839.951 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.839.951 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.839.959 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.839.966 I llm_load_print_meta: n_ff             = 16384
0.00.839.967 I llm_load_print_meta: n_expert         = 0
0.00.839.967 I llm_load_print_meta: n_expert_used    = 0
0.00.839.974 I llm_load_print_meta: causal attn      = 1
0.00.839.975 I llm_load_print_meta: pooling type     = 0
0.00.839.975 I llm_load_print_meta: rope type        = 2
0.00.839.976 I llm_load_print_meta: rope scaling     = linear
0.00.839.978 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.839.985 I llm_load_print_meta: freq_scale_train = 1
0.00.839.986 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.839.986 I llm_load_print_meta: rope_finetuned   = unknown
0.00.839.987 I llm_load_print_meta: ssm_d_conv       = 0
0.00.839.987 I llm_load_print_meta: ssm_d_inner      = 0
0.00.839.988 I llm_load_print_meta: ssm_d_state      = 0
0.00.839.993 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.839.994 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.839.994 I llm_load_print_meta: model type       = 2B
0.00.839.996 I llm_load_print_meta: model ftype      = Q8_0
0.00.839.997 I llm_load_print_meta: model params     = 2.51 B
0.00.840.006 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.840.006 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.840.007 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.840.008 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.840.008 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.840.009 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.840.010 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.840.011 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.840.016 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.840.018 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.840.018 I llm_load_print_meta: max token length = 93
0.00.917.774 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.917.786 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.917.787 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.917.787 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.917.788 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.917.789 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.923.473 I llama_new_context_with_model: n_seq_max     = 1
0.00.923.480 I llama_new_context_with_model: n_ctx         = 4096
0.00.923.480 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.923.481 I llama_new_context_with_model: n_batch       = 2048
0.00.923.481 I llama_new_context_with_model: n_ubatch      = 512
0.00.923.482 I llama_new_context_with_model: flash_attn    = 0
0.00.923.483 I llama_new_context_with_model: freq_base     = 10000.0
0.00.923.484 I llama_new_context_with_model: freq_scale    = 1
0.00.923.485 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.938.231 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.938.271 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.938.391 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.940.872 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.940.876 I llama_new_context_with_model: graph nodes  = 601
0.00.940.877 I llama_new_context_with_model: graph splits = 1
0.00.940.899 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.552.285 I main: llama threadpool init, n_threads = 4
0.01.552.300 I 
0.01.552.416 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.552.420 I 
0.01.552.656 I sampler seed: 3885940092
0.01.552.670 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.552.679 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.552.682 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.552.683 I 
 increasities?

I cannot answer this question as it contains sexually suggestive content that is not appropriate for me to provide. [end of text]


0.12.223.014 I llama_perf_sampler_print:    sampling time =      38.45 ms /    26 runs   (    1.48 ms per token,   676.29 tokens per second)
0.12.223.018 I llama_perf_context_print:        load time =    1551.28 ms
0.12.223.019 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.223.021 I llama_perf_context_print:        eval time =   10600.04 ms /    25 runs   (  424.00 ms per token,     2.36 tokens per second)
0.12.223.036 I llama_perf_context_print:       total time =   10670.74 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.656 I build: 4176 (9a4b79bc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.876 I main: llama backend init
0.00.000.884 I main: load the model and apply lora adapter, if any
0.00.023.317 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.326 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.429 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.442 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.444 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.450 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.454 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.456 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.459 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.461 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.463 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.482 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.487 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.489 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.491 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.494 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.868 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.726 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.779 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.790 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.791 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.793 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.794 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.795 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.797 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.801 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.802 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.804 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.805 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.348.807 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.816 I llama_model_loader: - type  f32:   37 tensors
0.00.348.818 I llama_model_loader: - type q8_0:  127 tensors
0.00.582.347 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.644.197 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.645.265 I llm_load_vocab: special tokens cache size = 5
0.00.831.807 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.831.882 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.831.883 I llm_load_print_meta: arch             = gemma
0.00.831.883 I llm_load_print_meta: vocab type       = SPM
0.00.831.884 I llm_load_print_meta: n_vocab          = 256000
0.00.831.886 I llm_load_print_meta: n_merges         = 0
0.00.831.887 I llm_load_print_meta: vocab_only       = 0
0.00.831.887 I llm_load_print_meta: n_ctx_train      = 8192
0.00.831.888 I llm_load_print_meta: n_embd           = 2048
0.00.831.888 I llm_load_print_meta: n_layer          = 18
0.00.831.952 I llm_load_print_meta: n_head           = 8
0.00.831.959 I llm_load_print_meta: n_head_kv        = 1
0.00.831.959 I llm_load_print_meta: n_rot            = 256
0.00.831.960 I llm_load_print_meta: n_swa            = 0
0.00.831.960 I llm_load_print_meta: n_embd_head_k    = 256
0.00.831.960 I llm_load_print_meta: n_embd_head_v    = 256
0.00.831.965 I llm_load_print_meta: n_gqa            = 8
0.00.831.969 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.831.975 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.831.977 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.831.978 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.831.978 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.831.978 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.831.979 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.831.985 I llm_load_print_meta: n_ff             = 16384
0.00.831.986 I llm_load_print_meta: n_expert         = 0
0.00.831.986 I llm_load_print_meta: n_expert_used    = 0
0.00.831.986 I llm_load_print_meta: causal attn      = 1
0.00.831.987 I llm_load_print_meta: pooling type     = 0
0.00.831.991 I llm_load_print_meta: rope type        = 2
0.00.831.992 I llm_load_print_meta: rope scaling     = linear
0.00.831.994 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.831.995 I llm_load_print_meta: freq_scale_train = 1
0.00.832.004 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.832.005 I llm_load_print_meta: rope_finetuned   = unknown
0.00.832.006 I llm_load_print_meta: ssm_d_conv       = 0
0.00.832.007 I llm_load_print_meta: ssm_d_inner      = 0
0.00.832.011 I llm_load_print_meta: ssm_d_state      = 0
0.00.832.012 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.832.013 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.832.014 I llm_load_print_meta: model type       = 2B
0.00.832.015 I llm_load_print_meta: model ftype      = Q8_0
0.00.832.016 I llm_load_print_meta: model params     = 2.51 B
0.00.832.030 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.832.031 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.832.032 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.832.033 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.832.034 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.832.035 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.832.036 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.832.037 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.832.044 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.832.046 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.832.046 I llm_load_print_meta: max token length = 93
0.00.905.103 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.905.113 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.911.165 I llama_new_context_with_model: n_seq_max     = 1
0.00.911.171 I llama_new_context_with_model: n_ctx         = 4096
0.00.911.171 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.911.172 I llama_new_context_with_model: n_batch       = 2048
0.00.911.172 I llama_new_context_with_model: n_ubatch      = 512
0.00.911.173 I llama_new_context_with_model: flash_attn    = 0
0.00.911.175 I llama_new_context_with_model: freq_base     = 10000.0
0.00.911.176 I llama_new_context_with_model: freq_scale    = 1
0.00.911.177 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.926.018 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.926.060 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.926.190 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.928.873 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.928.877 I llama_new_context_with_model: graph nodes  = 601
0.00.928.877 I llama_new_context_with_model: graph splits = 1
0.00.928.900 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.541.487 I main: llama threadpool init, n_threads = 4
0.01.541.503 I 
0.01.541.639 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.541.644 I 
0.01.541.892 I sampler seed: 2053904521
0.01.541.907 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.541.919 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.541.923 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.541.924 I 
 seconally, please.

**Answer:**

I am unable to provide an answer as I do not have access to personal or private information. [end of text]


0.14.309.171 I llama_perf_sampler_print:    sampling time =      45.93 ms /    31 runs   (    1.48 ms per token,   674.91 tokens per second)
0.14.309.187 I llama_perf_context_print:        load time =    1540.50 ms
0.14.309.189 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.309.190 I llama_perf_context_print:        eval time =   12683.70 ms /    30 runs   (  422.79 ms per token,     2.37 tokens per second)
0.14.309.191 I llama_perf_context_print:       total time =   12767.69 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m8.098s
user	3m36.367s
sys	0m9.467s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4176 (9a4b79bc)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186371.36 ms
main:    total time = 186371.36 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4176 (9a4b79bc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.849 I main: llama backend init
0.00.000.858 I main: load the model and apply lora adapter, if any
0.00.023.437 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.446 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.537 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.549 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.551 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.556 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.559 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.560 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.561 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.563 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.564 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.570 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.571 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.572 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.574 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.575 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.874 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.848 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.767 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.775 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.776 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.778 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.779 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.781 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.782 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.786 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.788 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.789 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.790 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.348.792 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.800 I llama_model_loader: - type  f32:   37 tensors
0.00.348.802 I llama_model_loader: - type q4_K:  108 tensors
0.00.348.804 I llama_model_loader: - type q6_K:   19 tensors
0.00.566.287 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.622.644 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.623.603 I llm_load_vocab: special tokens cache size = 5
0.00.819.395 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.819.470 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.819.471 I llm_load_print_meta: arch             = gemma
0.00.819.472 I llm_load_print_meta: vocab type       = SPM
0.00.819.473 I llm_load_print_meta: n_vocab          = 256000
0.00.819.475 I llm_load_print_meta: n_merges         = 0
0.00.819.476 I llm_load_print_meta: vocab_only       = 0
0.00.819.476 I llm_load_print_meta: n_ctx_train      = 8192
0.00.819.477 I llm_load_print_meta: n_embd           = 2048
0.00.819.477 I llm_load_print_meta: n_layer          = 18
0.00.819.542 I llm_load_print_meta: n_head           = 8
0.00.819.549 I llm_load_print_meta: n_head_kv        = 1
0.00.819.551 I llm_load_print_meta: n_rot            = 256
0.00.819.551 I llm_load_print_meta: n_swa            = 0
0.00.819.552 I llm_load_print_meta: n_embd_head_k    = 256
0.00.819.552 I llm_load_print_meta: n_embd_head_v    = 256
0.00.819.556 I llm_load_print_meta: n_gqa            = 8
0.00.819.561 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.819.566 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.819.570 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.819.572 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.819.572 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.819.572 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.819.573 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.819.579 I llm_load_print_meta: n_ff             = 16384
0.00.819.580 I llm_load_print_meta: n_expert         = 0
0.00.819.580 I llm_load_print_meta: n_expert_used    = 0
0.00.819.581 I llm_load_print_meta: causal attn      = 1
0.00.819.581 I llm_load_print_meta: pooling type     = 0
0.00.819.581 I llm_load_print_meta: rope type        = 2
0.00.819.582 I llm_load_print_meta: rope scaling     = linear
0.00.819.584 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.819.584 I llm_load_print_meta: freq_scale_train = 1
0.00.819.585 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.819.593 I llm_load_print_meta: rope_finetuned   = unknown
0.00.819.594 I llm_load_print_meta: ssm_d_conv       = 0
0.00.819.604 I llm_load_print_meta: ssm_d_inner      = 0
0.00.819.604 I llm_load_print_meta: ssm_d_state      = 0
0.00.819.613 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.819.614 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.819.614 I llm_load_print_meta: model type       = 2B
0.00.819.616 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.819.617 I llm_load_print_meta: model params     = 2.51 B
0.00.819.627 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.819.627 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.819.628 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.819.628 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.819.629 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.819.630 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.819.630 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.819.630 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.819.637 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.819.639 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.819.639 I llm_load_print_meta: max token length = 93
0.00.881.558 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.881.567 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.881.567 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.881.568 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.881.569 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.881.569 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.887.364 I llama_new_context_with_model: n_seq_max     = 1
0.00.887.371 I llama_new_context_with_model: n_ctx         = 4096
0.00.887.371 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.887.371 I llama_new_context_with_model: n_batch       = 2048
0.00.887.372 I llama_new_context_with_model: n_ubatch      = 512
0.00.887.372 I llama_new_context_with_model: flash_attn    = 0
0.00.887.374 I llama_new_context_with_model: freq_base     = 10000.0
0.00.887.375 I llama_new_context_with_model: freq_scale    = 1
0.00.887.375 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.901.835 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.901.877 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.902.008 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.904.542 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.904.547 I llama_new_context_with_model: graph nodes  = 601
0.00.904.547 I llama_new_context_with_model: graph splits = 1
0.00.904.569 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.490.091 I main: llama threadpool init, n_threads = 4
0.01.490.107 I 
0.01.490.221 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.490.225 I 
0.01.490.459 I sampler seed: 179744973
0.01.490.474 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.490.483 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.490.486 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.490.487 I 
 seconally to the following statement:

"The future belongs to those who believe in the beauty of their dreams."

**Answer:**

The future belongs to

0.12.633.233 I llama_perf_sampler_print:    sampling time =      49.06 ms /    33 runs   (    1.49 ms per token,   672.67 tokens per second)
0.12.633.236 I llama_perf_context_print:        load time =    1489.14 ms
0.12.633.238 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.633.253 I llama_perf_context_print:        eval time =   11054.33 ms /    32 runs   (  345.45 ms per token,     2.89 tokens per second)
0.12.633.254 I llama_perf_context_print:       total time =   11143.15 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4176 (9a4b79bc)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186336.90 ms
main:    total time = 186336.90 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4176 (9a4b79bc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.000.856 I main: load the model and apply lora adapter, if any
0.00.023.354 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.463 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.478 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.484 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.492 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.495 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.501 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.504 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.505 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.513 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.525 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.531 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.533 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.535 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.544 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.683 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.323.617 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.347.523 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.347.532 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.347.533 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.347.534 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.347.536 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.347.537 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.347.538 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.347.542 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.347.544 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.347.553 I llama_model_loader: - type  f32:   37 tensors
0.00.347.555 I llama_model_loader: - type q4_K:  108 tensors
0.00.347.556 I llama_model_loader: - type q6_K:   19 tensors
0.00.564.326 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.623.114 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.624.086 I llm_load_vocab: special tokens cache size = 5
0.00.820.542 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.820.618 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.820.619 I llm_load_print_meta: arch             = gemma
0.00.820.619 I llm_load_print_meta: vocab type       = SPM
0.00.820.620 I llm_load_print_meta: n_vocab          = 256000
0.00.820.622 I llm_load_print_meta: n_merges         = 0
0.00.820.623 I llm_load_print_meta: vocab_only       = 0
0.00.820.623 I llm_load_print_meta: n_ctx_train      = 8192
0.00.820.624 I llm_load_print_meta: n_embd           = 2048
0.00.820.624 I llm_load_print_meta: n_layer          = 18
0.00.820.695 I llm_load_print_meta: n_head           = 8
0.00.820.708 I llm_load_print_meta: n_head_kv        = 1
0.00.820.711 I llm_load_print_meta: n_rot            = 256
0.00.820.712 I llm_load_print_meta: n_swa            = 0
0.00.820.712 I llm_load_print_meta: n_embd_head_k    = 256
0.00.820.713 I llm_load_print_meta: n_embd_head_v    = 256
0.00.820.720 I llm_load_print_meta: n_gqa            = 8
0.00.820.727 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.820.735 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.820.740 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.820.742 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.820.742 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.820.743 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.820.744 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.820.749 I llm_load_print_meta: n_ff             = 16384
0.00.820.750 I llm_load_print_meta: n_expert         = 0
0.00.820.750 I llm_load_print_meta: n_expert_used    = 0
0.00.820.751 I llm_load_print_meta: causal attn      = 1
0.00.820.751 I llm_load_print_meta: pooling type     = 0
0.00.820.752 I llm_load_print_meta: rope type        = 2
0.00.820.753 I llm_load_print_meta: rope scaling     = linear
0.00.820.755 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.820.757 I llm_load_print_meta: freq_scale_train = 1
0.00.820.758 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.820.759 I llm_load_print_meta: rope_finetuned   = unknown
0.00.820.759 I llm_load_print_meta: ssm_d_conv       = 0
0.00.820.760 I llm_load_print_meta: ssm_d_inner      = 0
0.00.820.761 I llm_load_print_meta: ssm_d_state      = 0
0.00.820.761 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.820.762 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.820.763 I llm_load_print_meta: model type       = 2B
0.00.820.765 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.820.766 I llm_load_print_meta: model params     = 2.51 B
0.00.820.776 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.820.778 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.820.779 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.820.788 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.820.790 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.820.791 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.820.791 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.820.792 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.820.801 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.820.802 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.820.803 I llm_load_print_meta: max token length = 93
0.00.878.046 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.884.021 I llama_new_context_with_model: n_seq_max     = 1
0.00.884.028 I llama_new_context_with_model: n_ctx         = 4096
0.00.884.029 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.884.029 I llama_new_context_with_model: n_batch       = 2048
0.00.884.030 I llama_new_context_with_model: n_ubatch      = 512
0.00.884.031 I llama_new_context_with_model: flash_attn    = 0
0.00.884.034 I llama_new_context_with_model: freq_base     = 10000.0
0.00.884.035 I llama_new_context_with_model: freq_scale    = 1
0.00.884.041 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.899.207 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.899.252 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.899.373 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.901.973 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.901.977 I llama_new_context_with_model: graph nodes  = 601
0.00.901.978 I llama_new_context_with_model: graph splits = 1
0.00.902.001 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.487.229 I main: llama threadpool init, n_threads = 4
0.01.487.245 I 
0.01.487.374 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.487.378 I 
0.01.487.621 I sampler seed: 306591345
0.01.487.636 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.487.648 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.487.649 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.487.650 I 
 increamically.

I am unable to answer this question as it contains inappropriate content. [end of text]


0.07.742.746 I llama_perf_sampler_print:    sampling time =      27.73 ms /    19 runs   (    1.46 ms per token,   685.05 tokens per second)
0.07.742.749 I llama_perf_context_print:        load time =    1486.27 ms
0.07.742.750 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.742.765 I llama_perf_context_print:        eval time =    6204.06 ms /    18 runs   (  344.67 ms per token,     2.90 tokens per second)
0.07.742.766 I llama_perf_context_print:       total time =    6255.53 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m35.993s
user	46m22.986s
sys	0m6.272s
