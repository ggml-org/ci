+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 3984 (9afae6ae) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.002.784 I main: load the model and apply lora adapter, if any
0.00.024.600 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.807 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.894 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.904 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.905 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.909 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.911 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.912 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.913 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.914 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.915 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.923 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.927 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.928 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.929 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.930 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.864 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.458 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.182 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.190 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.191 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.192 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.193 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.194 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.195 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.218 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.222 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.223 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.224 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.226 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.235 I llama_model_loader: - type  f32:   37 tensors
0.00.271.239 I llama_model_loader: - type q8_0:  127 tensors
0.00.439.647 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.497.176 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.498.012 I llm_load_vocab: special tokens cache size = 5
0.00.591.251 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.591.320 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.591.321 I llm_load_print_meta: arch             = gemma
0.00.591.322 I llm_load_print_meta: vocab type       = SPM
0.00.591.323 I llm_load_print_meta: n_vocab          = 256000
0.00.591.325 I llm_load_print_meta: n_merges         = 0
0.00.591.325 I llm_load_print_meta: vocab_only       = 0
0.00.591.326 I llm_load_print_meta: n_ctx_train      = 8192
0.00.591.326 I llm_load_print_meta: n_embd           = 2048
0.00.591.327 I llm_load_print_meta: n_layer          = 18
0.00.591.389 I llm_load_print_meta: n_head           = 8
0.00.591.396 I llm_load_print_meta: n_head_kv        = 1
0.00.591.398 I llm_load_print_meta: n_rot            = 256
0.00.591.399 I llm_load_print_meta: n_swa            = 0
0.00.591.399 I llm_load_print_meta: n_embd_head_k    = 256
0.00.591.399 I llm_load_print_meta: n_embd_head_v    = 256
0.00.591.404 I llm_load_print_meta: n_gqa            = 8
0.00.591.408 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.591.413 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.591.415 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.591.416 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.591.416 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.591.417 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.591.417 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.591.422 I llm_load_print_meta: n_ff             = 16384
0.00.591.423 I llm_load_print_meta: n_expert         = 0
0.00.591.423 I llm_load_print_meta: n_expert_used    = 0
0.00.591.424 I llm_load_print_meta: causal attn      = 1
0.00.591.424 I llm_load_print_meta: pooling type     = 0
0.00.591.425 I llm_load_print_meta: rope type        = 2
0.00.591.425 I llm_load_print_meta: rope scaling     = linear
0.00.591.427 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.591.428 I llm_load_print_meta: freq_scale_train = 1
0.00.591.437 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.591.438 I llm_load_print_meta: rope_finetuned   = unknown
0.00.591.439 I llm_load_print_meta: ssm_d_conv       = 0
0.00.591.439 I llm_load_print_meta: ssm_d_inner      = 0
0.00.591.440 I llm_load_print_meta: ssm_d_state      = 0
0.00.591.440 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.591.443 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.591.444 I llm_load_print_meta: model type       = 2B
0.00.591.445 I llm_load_print_meta: model ftype      = Q8_0
0.00.591.446 I llm_load_print_meta: model params     = 2.51 B
0.00.591.447 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.591.447 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.591.448 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.591.448 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.591.449 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.591.449 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.591.450 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.591.460 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.591.468 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.591.470 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.591.471 I llm_load_print_meta: max token length = 93
0.00.703.585 I llm_load_tensors:        CPU model buffer size =   865.98 MiB
0.00.703.595 I llm_load_tensors:        CPU model buffer size =   334.74 MiB
0.00.703.595 I llm_load_tensors:        CPU model buffer size =   402.73 MiB
0.00.703.596 I llm_load_tensors:        CPU model buffer size =   335.27 MiB
0.00.703.597 I llm_load_tensors:        CPU model buffer size =   338.98 MiB
0.00.703.597 I llm_load_tensors:        CPU model buffer size =   261.96 MiB
..............................................................
0.00.709.252 I llama_new_context_with_model: n_ctx      = 8192
0.00.709.259 I llama_new_context_with_model: n_batch    = 2048
0.00.709.260 I llama_new_context_with_model: n_ubatch   = 512
0.00.709.260 I llama_new_context_with_model: flash_attn = 0
0.00.709.262 I llama_new_context_with_model: freq_base  = 10000.0
0.00.709.263 I llama_new_context_with_model: freq_scale = 1
0.00.738.393 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.738.434 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.738.553 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.741.698 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.741.703 I llama_new_context_with_model: graph nodes  = 601
0.00.741.703 I llama_new_context_with_model: graph splits = 1
0.00.741.720 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.355.075 I main: llama threadpool init, n_threads = 4
0.01.355.089 I 
0.01.355.203 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.355.207 I 
0.01.355.442 I sampler seed: 3953636333
0.01.355.456 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.355.463 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.355.466 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.355.466 I 
 increasities is the most common type of narcissistic personality disorder, characterized by a pervasive need for admiration, a lack of empathy, and a grandiose sense of self-

0.14.791.627 I llama_perf_sampler_print:    sampling time =      49.21 ms /    33 runs   (    1.49 ms per token,   670.64 tokens per second)
0.14.791.630 I llama_perf_context_print:        load time =    1352.20 ms
0.14.791.631 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.791.645 I llama_perf_context_print:        eval time =   13341.58 ms /    32 runs   (  416.92 ms per token,     2.40 tokens per second)
0.14.791.647 I llama_perf_context_print:       total time =   13436.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.646 I build: 3984 (9afae6ae) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.002.762 I main: load the model and apply lora adapter, if any
0.00.024.729 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.828 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.841 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.843 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.847 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.848 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.850 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.851 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.852 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.853 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.863 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.864 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.879 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.881 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.882 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.645 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.676 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.531 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.541 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.542 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.543 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.544 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.546 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.547 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.550 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.551 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.552 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.553 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.269.555 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.563 I llama_model_loader: - type  f32:   37 tensors
0.00.269.568 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.520 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.380 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.357 I llm_load_vocab: special tokens cache size = 5
0.00.616.256 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.616.323 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.616.326 I llm_load_print_meta: arch             = gemma
0.00.616.327 I llm_load_print_meta: vocab type       = SPM
0.00.616.328 I llm_load_print_meta: n_vocab          = 256000
0.00.616.330 I llm_load_print_meta: n_merges         = 0
0.00.616.331 I llm_load_print_meta: vocab_only       = 0
0.00.616.331 I llm_load_print_meta: n_ctx_train      = 8192
0.00.616.332 I llm_load_print_meta: n_embd           = 2048
0.00.616.332 I llm_load_print_meta: n_layer          = 18
0.00.616.398 I llm_load_print_meta: n_head           = 8
0.00.616.408 I llm_load_print_meta: n_head_kv        = 1
0.00.616.409 I llm_load_print_meta: n_rot            = 256
0.00.616.410 I llm_load_print_meta: n_swa            = 0
0.00.616.410 I llm_load_print_meta: n_embd_head_k    = 256
0.00.616.410 I llm_load_print_meta: n_embd_head_v    = 256
0.00.616.415 I llm_load_print_meta: n_gqa            = 8
0.00.616.420 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.616.425 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.616.427 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.616.428 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.616.439 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.616.451 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.616.452 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.616.459 I llm_load_print_meta: n_ff             = 16384
0.00.616.462 I llm_load_print_meta: n_expert         = 0
0.00.616.463 I llm_load_print_meta: n_expert_used    = 0
0.00.616.463 I llm_load_print_meta: causal attn      = 1
0.00.616.464 I llm_load_print_meta: pooling type     = 0
0.00.616.464 I llm_load_print_meta: rope type        = 2
0.00.616.465 I llm_load_print_meta: rope scaling     = linear
0.00.616.466 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.616.467 I llm_load_print_meta: freq_scale_train = 1
0.00.616.474 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.616.474 I llm_load_print_meta: rope_finetuned   = unknown
0.00.616.475 I llm_load_print_meta: ssm_d_conv       = 0
0.00.616.475 I llm_load_print_meta: ssm_d_inner      = 0
0.00.616.475 I llm_load_print_meta: ssm_d_state      = 0
0.00.616.476 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.616.476 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.616.477 I llm_load_print_meta: model type       = 2B
0.00.616.478 I llm_load_print_meta: model ftype      = Q8_0
0.00.616.479 I llm_load_print_meta: model params     = 2.51 B
0.00.616.480 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.616.480 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.481 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.481 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.482 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.482 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.483 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.483 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.490 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.491 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.491 I llm_load_print_meta: max token length = 93
0.00.716.361 I llm_load_tensors:        CPU model buffer size =  2539.66 MiB
..............................................................
0.00.722.146 I llama_new_context_with_model: n_ctx      = 8192
0.00.722.154 I llama_new_context_with_model: n_batch    = 2048
0.00.722.154 I llama_new_context_with_model: n_ubatch   = 512
0.00.722.155 I llama_new_context_with_model: flash_attn = 0
0.00.722.157 I llama_new_context_with_model: freq_base  = 10000.0
0.00.722.158 I llama_new_context_with_model: freq_scale = 1
0.00.751.750 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.751.787 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.751.909 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.754.930 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.754.934 I llama_new_context_with_model: graph nodes  = 601
0.00.754.935 I llama_new_context_with_model: graph splits = 1
0.00.754.952 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.363.583 I main: llama threadpool init, n_threads = 4
0.01.363.594 I 
0.01.363.701 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.363.705 I 
0.01.363.939 I sampler seed: 3194341706
0.01.363.952 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.363.971 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.363.974 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.363.975 I 
 increably.

I am unable to generate a response as the provided context does not contain any information regarding my capabilities or limitations. [end of text]


0.12.782.500 I llama_perf_sampler_print:    sampling time =      41.53 ms /    28 runs   (    1.48 ms per token,   674.28 tokens per second)
0.12.782.503 I llama_perf_context_print:        load time =    1360.72 ms
0.12.782.504 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.782.506 I llama_perf_context_print:        eval time =   11338.57 ms /    27 runs   (  419.95 ms per token,     2.38 tokens per second)
0.12.782.520 I llama_perf_context_print:       total time =   11418.93 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 3984 (9afae6ae) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.872 I main: llama backend init
0.00.002.824 I main: load the model and apply lora adapter, if any
0.00.024.697 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.919 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.016 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.028 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.029 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.034 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.038 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.040 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.041 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.043 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.044 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.056 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.061 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.063 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.065 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.067 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.490 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.548 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.169 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.177 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.178 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.179 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.180 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.181 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.182 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.186 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.187 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.188 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.189 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.269.190 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.198 I llama_model_loader: - type  f32:   37 tensors
0.00.269.203 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.062 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.693 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.659 I llm_load_vocab: special tokens cache size = 5
0.00.608.227 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.296 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.297 I llm_load_print_meta: arch             = gemma
0.00.608.297 I llm_load_print_meta: vocab type       = SPM
0.00.608.298 I llm_load_print_meta: n_vocab          = 256000
0.00.608.301 I llm_load_print_meta: n_merges         = 0
0.00.608.301 I llm_load_print_meta: vocab_only       = 0
0.00.608.301 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.302 I llm_load_print_meta: n_embd           = 2048
0.00.608.302 I llm_load_print_meta: n_layer          = 18
0.00.608.367 I llm_load_print_meta: n_head           = 8
0.00.608.374 I llm_load_print_meta: n_head_kv        = 1
0.00.608.376 I llm_load_print_meta: n_rot            = 256
0.00.608.377 I llm_load_print_meta: n_swa            = 0
0.00.608.377 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.378 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.383 I llm_load_print_meta: n_gqa            = 8
0.00.608.388 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.393 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.397 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.398 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.399 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.399 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.399 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.404 I llm_load_print_meta: n_ff             = 16384
0.00.608.405 I llm_load_print_meta: n_expert         = 0
0.00.608.405 I llm_load_print_meta: n_expert_used    = 0
0.00.608.413 I llm_load_print_meta: causal attn      = 1
0.00.608.414 I llm_load_print_meta: pooling type     = 0
0.00.608.414 I llm_load_print_meta: rope type        = 2
0.00.608.415 I llm_load_print_meta: rope scaling     = linear
0.00.608.416 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.417 I llm_load_print_meta: freq_scale_train = 1
0.00.608.419 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.420 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.420 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.420 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.421 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.421 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.421 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.422 I llm_load_print_meta: model type       = 2B
0.00.608.423 I llm_load_print_meta: model ftype      = Q8_0
0.00.608.424 I llm_load_print_meta: model params     = 2.51 B
0.00.608.424 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.608.425 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.435 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.437 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.437 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.437 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.438 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.438 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.445 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.446 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.446 I llm_load_print_meta: max token length = 93
0.00.709.665 I llm_load_tensors:        CPU model buffer size =   967.99 MiB
0.00.709.675 I llm_load_tensors:        CPU model buffer size =   344.30 MiB
0.00.709.676 I llm_load_tensors:        CPU model buffer size =   411.77 MiB
0.00.709.677 I llm_load_tensors:        CPU model buffer size =   437.27 MiB
0.00.709.677 I llm_load_tensors:        CPU model buffer size =   344.30 MiB
0.00.709.678 I llm_load_tensors:        CPU model buffer size =    34.02 MiB
..............................................................
0.00.715.513 I llama_new_context_with_model: n_ctx      = 8192
0.00.715.520 I llama_new_context_with_model: n_batch    = 2048
0.00.715.520 I llama_new_context_with_model: n_ubatch   = 512
0.00.715.521 I llama_new_context_with_model: flash_attn = 0
0.00.715.523 I llama_new_context_with_model: freq_base  = 10000.0
0.00.715.524 I llama_new_context_with_model: freq_scale = 1
0.00.744.310 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.744.348 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.744.472 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.747.532 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.747.537 I llama_new_context_with_model: graph nodes  = 601
0.00.747.537 I llama_new_context_with_model: graph splits = 1
0.00.747.554 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.355.299 I main: llama threadpool init, n_threads = 4
0.01.355.311 I 
0.01.355.431 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.355.435 I 
0.01.355.704 I sampler seed: 1244132546
0.01.355.716 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.355.725 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.355.725 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.355.726 I 
 increamentalism

**Definition:**

The practice of using a symbolic system to represent and communicate complex ideas and information in a condensed and organized manner.

**

0.14.907.333 I llama_perf_sampler_print:    sampling time =      49.34 ms /    33 runs   (    1.50 ms per token,   668.80 tokens per second)
0.14.907.336 I llama_perf_context_print:        load time =    1352.37 ms
0.14.907.337 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.907.339 I llama_perf_context_print:        eval time =   13457.38 ms /    32 runs   (  420.54 ms per token,     2.38 tokens per second)
0.14.907.340 I llama_perf_context_print:       total time =   13552.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.669 I build: 3984 (9afae6ae) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.905 I main: llama backend init
0.00.002.863 I main: load the model and apply lora adapter, if any
0.00.024.730 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.950 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.045 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.056 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.058 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.062 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.066 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.067 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.069 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.070 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.072 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.084 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.089 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.091 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.093 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.094 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.743 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.626 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.323 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.330 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.332 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.333 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.334 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.335 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.336 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.339 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.340 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.341 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.342 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.271.344 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.353 I llama_model_loader: - type  f32:   37 tensors
0.00.271.357 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.684 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.507.588 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.508.609 I llm_load_vocab: special tokens cache size = 5
0.00.602.317 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.602.386 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.602.387 I llm_load_print_meta: arch             = gemma
0.00.602.388 I llm_load_print_meta: vocab type       = SPM
0.00.602.388 I llm_load_print_meta: n_vocab          = 256000
0.00.602.391 I llm_load_print_meta: n_merges         = 0
0.00.602.391 I llm_load_print_meta: vocab_only       = 0
0.00.602.391 I llm_load_print_meta: n_ctx_train      = 8192
0.00.602.392 I llm_load_print_meta: n_embd           = 2048
0.00.602.392 I llm_load_print_meta: n_layer          = 18
0.00.602.456 I llm_load_print_meta: n_head           = 8
0.00.602.463 I llm_load_print_meta: n_head_kv        = 1
0.00.602.463 I llm_load_print_meta: n_rot            = 256
0.00.602.464 I llm_load_print_meta: n_swa            = 0
0.00.602.464 I llm_load_print_meta: n_embd_head_k    = 256
0.00.602.465 I llm_load_print_meta: n_embd_head_v    = 256
0.00.602.470 I llm_load_print_meta: n_gqa            = 8
0.00.602.475 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.602.480 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.602.482 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.602.483 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.602.484 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.602.484 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.602.485 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.602.490 I llm_load_print_meta: n_ff             = 16384
0.00.602.491 I llm_load_print_meta: n_expert         = 0
0.00.602.492 I llm_load_print_meta: n_expert_used    = 0
0.00.602.492 I llm_load_print_meta: causal attn      = 1
0.00.602.492 I llm_load_print_meta: pooling type     = 0
0.00.602.493 I llm_load_print_meta: rope type        = 2
0.00.602.494 I llm_load_print_meta: rope scaling     = linear
0.00.602.514 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.602.515 I llm_load_print_meta: freq_scale_train = 1
0.00.602.516 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.602.516 I llm_load_print_meta: rope_finetuned   = unknown
0.00.602.517 I llm_load_print_meta: ssm_d_conv       = 0
0.00.602.517 I llm_load_print_meta: ssm_d_inner      = 0
0.00.602.518 I llm_load_print_meta: ssm_d_state      = 0
0.00.602.518 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.602.519 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.602.519 I llm_load_print_meta: model type       = 2B
0.00.602.521 I llm_load_print_meta: model ftype      = Q8_0
0.00.602.522 I llm_load_print_meta: model params     = 2.51 B
0.00.602.523 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.602.523 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.602.535 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.602.535 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.602.536 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.602.537 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.602.537 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.602.539 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.602.545 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.602.546 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.602.547 I llm_load_print_meta: max token length = 93
0.00.697.128 I llm_load_tensors:        CPU model buffer size =  1904.18 MiB
0.00.697.138 I llm_load_tensors:        CPU model buffer size =   635.48 MiB
..............................................................
0.00.702.937 I llama_new_context_with_model: n_ctx      = 8192
0.00.702.944 I llama_new_context_with_model: n_batch    = 2048
0.00.702.944 I llama_new_context_with_model: n_ubatch   = 512
0.00.702.945 I llama_new_context_with_model: flash_attn = 0
0.00.702.948 I llama_new_context_with_model: freq_base  = 10000.0
0.00.702.948 I llama_new_context_with_model: freq_scale = 1
0.00.733.311 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.733.349 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.733.471 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.736.641 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.736.646 I llama_new_context_with_model: graph nodes  = 601
0.00.736.646 I llama_new_context_with_model: graph splits = 1
0.00.736.664 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.344.860 I main: llama threadpool init, n_threads = 4
0.01.344.873 I 
0.01.344.993 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.344.998 I 
0.01.345.235 I sampler seed: 4205182867
0.01.345.248 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.345.255 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.345.256 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.345.256 I 
 increasities.

I cannot answer this question as it contains sexually suggestive and inappropriate content. [end of text]


0.09.364.164 I llama_perf_sampler_print:    sampling time =      29.27 ms /    20 runs   (    1.46 ms per token,   683.32 tokens per second)
0.09.364.167 I llama_perf_context_print:        load time =    1341.90 ms
0.09.364.168 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.364.192 I llama_perf_context_print:        eval time =    7961.94 ms /    19 runs   (  419.05 ms per token,     2.39 tokens per second)
0.09.364.194 I llama_perf_context_print:       total time =    8019.31 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m1.695s
user	3m18.229s
sys	0m9.799s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3984 (9afae6ae)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199451.29 ms
main:    total time = 199451.29 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 3984 (9afae6ae) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.002.777 I main: load the model and apply lora adapter, if any
0.00.024.843 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.052 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.148 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.159 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.160 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.165 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.166 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.168 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.169 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.170 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.171 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.180 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.182 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.183 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.184 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.185 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.121 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.592 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.321 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.330 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.332 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.333 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.334 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.335 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.336 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.340 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.341 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.342 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.343 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.344 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.352 I llama_model_loader: - type  f32:   37 tensors
0.00.268.356 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.357 I llama_model_loader: - type q6_K:   19 tensors
0.00.439.276 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.496.425 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.497.256 I llm_load_vocab: special tokens cache size = 5
0.00.591.127 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.591.196 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.591.200 I llm_load_print_meta: arch             = gemma
0.00.591.200 I llm_load_print_meta: vocab type       = SPM
0.00.591.201 I llm_load_print_meta: n_vocab          = 256000
0.00.591.203 I llm_load_print_meta: n_merges         = 0
0.00.591.204 I llm_load_print_meta: vocab_only       = 0
0.00.591.204 I llm_load_print_meta: n_ctx_train      = 8192
0.00.591.205 I llm_load_print_meta: n_embd           = 2048
0.00.591.205 I llm_load_print_meta: n_layer          = 18
0.00.591.271 I llm_load_print_meta: n_head           = 8
0.00.591.280 I llm_load_print_meta: n_head_kv        = 1
0.00.591.281 I llm_load_print_meta: n_rot            = 256
0.00.591.281 I llm_load_print_meta: n_swa            = 0
0.00.591.281 I llm_load_print_meta: n_embd_head_k    = 256
0.00.591.283 I llm_load_print_meta: n_embd_head_v    = 256
0.00.591.288 I llm_load_print_meta: n_gqa            = 8
0.00.591.293 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.591.298 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.591.301 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.591.303 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.591.303 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.591.304 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.591.305 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.591.310 I llm_load_print_meta: n_ff             = 16384
0.00.591.310 I llm_load_print_meta: n_expert         = 0
0.00.591.312 I llm_load_print_meta: n_expert_used    = 0
0.00.591.312 I llm_load_print_meta: causal attn      = 1
0.00.591.313 I llm_load_print_meta: pooling type     = 0
0.00.591.314 I llm_load_print_meta: rope type        = 2
0.00.591.314 I llm_load_print_meta: rope scaling     = linear
0.00.591.315 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.591.317 I llm_load_print_meta: freq_scale_train = 1
0.00.591.317 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.591.317 I llm_load_print_meta: rope_finetuned   = unknown
0.00.591.318 I llm_load_print_meta: ssm_d_conv       = 0
0.00.591.318 I llm_load_print_meta: ssm_d_inner      = 0
0.00.591.319 I llm_load_print_meta: ssm_d_state      = 0
0.00.591.319 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.591.320 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.591.321 I llm_load_print_meta: model type       = 2B
0.00.591.322 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.591.324 I llm_load_print_meta: model params     = 2.51 B
0.00.591.324 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.591.325 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.591.326 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.591.327 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.591.327 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.591.330 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.591.330 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.591.331 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.591.338 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.591.339 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.591.342 I llm_load_print_meta: max token length = 93
0.00.657.643 I llm_load_tensors:        CPU model buffer size =   604.15 MiB
0.00.657.653 I llm_load_tensors:        CPU model buffer size =   185.62 MiB
0.00.657.654 I llm_load_tensors:        CPU model buffer size =   221.61 MiB
0.00.657.654 I llm_load_tensors:        CPU model buffer size =   185.89 MiB
0.00.657.655 I llm_load_tensors:        CPU model buffer size =   187.86 MiB
0.00.657.655 I llm_load_tensors:        CPU model buffer size =   163.85 MiB
.............................................................
0.00.663.254 I llama_new_context_with_model: n_ctx      = 8192
0.00.663.260 I llama_new_context_with_model: n_batch    = 2048
0.00.663.261 I llama_new_context_with_model: n_ubatch   = 512
0.00.663.262 I llama_new_context_with_model: flash_attn = 0
0.00.663.263 I llama_new_context_with_model: freq_base  = 10000.0
0.00.663.264 I llama_new_context_with_model: freq_scale = 1
0.00.691.791 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.691.831 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.691.942 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.694.958 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.694.962 I llama_new_context_with_model: graph nodes  = 601
0.00.694.963 I llama_new_context_with_model: graph splits = 1
0.00.694.980 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.273.164 I main: llama threadpool init, n_threads = 4
0.01.273.176 I 
0.01.273.282 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.273.286 I 
0.01.273.515 I sampler seed: 2793307853
0.01.273.528 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.273.534 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.273.537 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.273.537 I 
 maneutruing. [end of text]


0.02.980.635 I llama_perf_sampler_print:    sampling time =       7.78 ms /     6 runs   (    1.30 ms per token,   771.41 tokens per second)
0.02.980.660 I llama_perf_context_print:        load time =    1270.29 ms
0.02.980.662 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.980.664 I llama_perf_context_print:        eval time =    1691.02 ms /     5 runs   (  338.20 ms per token,     2.96 tokens per second)
0.02.980.665 I llama_perf_context_print:       total time =    1707.48 ms /     6 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3984 (9afae6ae)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199338.53 ms
main:    total time = 199338.53 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 3984 (9afae6ae) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.002.777 I main: load the model and apply lora adapter, if any
0.00.025.314 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.413 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.427 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.432 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.436 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.437 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.438 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.440 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.441 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.443 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.452 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.453 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.454 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.455 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.456 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.604 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.148 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.921 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.929 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.930 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.931 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.932 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.933 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.935 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.938 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.939 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.948 I llama_model_loader: - type  f32:   37 tensors
0.00.268.953 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.953 I llama_model_loader: - type q6_K:   19 tensors
0.00.452.960 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.484 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.400 I llm_load_vocab: special tokens cache size = 5
0.00.612.194 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.262 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.263 I llm_load_print_meta: arch             = gemma
0.00.612.264 I llm_load_print_meta: vocab type       = SPM
0.00.612.265 I llm_load_print_meta: n_vocab          = 256000
0.00.612.267 I llm_load_print_meta: n_merges         = 0
0.00.612.268 I llm_load_print_meta: vocab_only       = 0
0.00.612.268 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.269 I llm_load_print_meta: n_embd           = 2048
0.00.612.269 I llm_load_print_meta: n_layer          = 18
0.00.612.336 I llm_load_print_meta: n_head           = 8
0.00.612.343 I llm_load_print_meta: n_head_kv        = 1
0.00.612.344 I llm_load_print_meta: n_rot            = 256
0.00.612.345 I llm_load_print_meta: n_swa            = 0
0.00.612.346 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.347 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.352 I llm_load_print_meta: n_gqa            = 8
0.00.612.356 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.362 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.363 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.364 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.365 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.365 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.366 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.612.371 I llm_load_print_meta: n_ff             = 16384
0.00.612.372 I llm_load_print_meta: n_expert         = 0
0.00.612.372 I llm_load_print_meta: n_expert_used    = 0
0.00.612.373 I llm_load_print_meta: causal attn      = 1
0.00.612.373 I llm_load_print_meta: pooling type     = 0
0.00.612.374 I llm_load_print_meta: rope type        = 2
0.00.612.375 I llm_load_print_meta: rope scaling     = linear
0.00.612.385 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.386 I llm_load_print_meta: freq_scale_train = 1
0.00.612.387 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.398 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.399 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.399 I llm_load_print_meta: ssm_d_inner      = 0
0.00.612.400 I llm_load_print_meta: ssm_d_state      = 0
0.00.612.400 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.612.400 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.612.402 I llm_load_print_meta: model type       = 2B
0.00.612.403 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.612.404 I llm_load_print_meta: model params     = 2.51 B
0.00.612.405 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.612.405 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.612.406 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.612.414 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.612.415 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.612.416 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.612.417 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.612.420 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.612.426 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.612.428 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.612.435 I llm_load_print_meta: max token length = 93
0.00.674.109 I llm_load_tensors:        CPU model buffer size =  1548.98 MiB
.............................................................
0.00.679.679 I llama_new_context_with_model: n_ctx      = 8192
0.00.679.686 I llama_new_context_with_model: n_batch    = 2048
0.00.679.686 I llama_new_context_with_model: n_ubatch   = 512
0.00.679.687 I llama_new_context_with_model: flash_attn = 0
0.00.679.689 I llama_new_context_with_model: freq_base  = 10000.0
0.00.679.690 I llama_new_context_with_model: freq_scale = 1
0.00.709.263 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.709.303 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.709.417 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.712.508 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.712.511 I llama_new_context_with_model: graph nodes  = 601
0.00.712.512 I llama_new_context_with_model: graph splits = 1
0.00.712.530 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.285.260 I main: llama threadpool init, n_threads = 4
0.01.285.272 I 
0.01.285.386 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.285.390 I 
0.01.285.624 I sampler seed: 4219753590
0.01.285.636 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.285.643 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.285.644 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.285.644 I 
 squaRED, a young woman with boundless energy and a fierce spirit. She navigated the bustling streets of Mumbai with the grace of a seasoned pro, her laughter

0.12.168.570 I llama_perf_sampler_print:    sampling time =      49.37 ms /    33 runs   (    1.50 ms per token,   668.42 tokens per second)
0.12.168.574 I llama_perf_context_print:        load time =    1282.38 ms
0.12.168.575 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.168.590 I llama_perf_context_print:        eval time =   10788.89 ms /    32 runs   (  337.15 ms per token,     2.97 tokens per second)
0.12.168.592 I llama_perf_context_print:       total time =   10883.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m56.935s
user	49m31.163s
sys	0m6.492s
