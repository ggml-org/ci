+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.701 I build: 4145 (9abe9eea) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.914 I main: llama backend init
0.00.000.924 I main: load the model and apply lora adapter, if any
0.00.023.896 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.910 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.008 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.023 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.025 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.032 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.043 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.045 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.047 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.049 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.050 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.061 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.066 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.068 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.069 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.071 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.835 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.530 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.650 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.661 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.662 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.663 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.665 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.666 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.667 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.671 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.672 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.673 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.674 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.676 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.685 I llama_model_loader: - type  f32:   37 tensors
0.00.271.688 I llama_model_loader: - type q8_0:  127 tensors
0.00.460.348 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.528.242 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.529.267 I llm_load_vocab: special tokens cache size = 5
0.00.625.473 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.625.546 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.625.547 I llm_load_print_meta: arch             = gemma
0.00.625.548 I llm_load_print_meta: vocab type       = SPM
0.00.625.549 I llm_load_print_meta: n_vocab          = 256000
0.00.625.551 I llm_load_print_meta: n_merges         = 0
0.00.625.552 I llm_load_print_meta: vocab_only       = 0
0.00.625.552 I llm_load_print_meta: n_ctx_train      = 8192
0.00.625.553 I llm_load_print_meta: n_embd           = 2048
0.00.625.553 I llm_load_print_meta: n_layer          = 18
0.00.625.620 I llm_load_print_meta: n_head           = 8
0.00.625.627 I llm_load_print_meta: n_head_kv        = 1
0.00.625.627 I llm_load_print_meta: n_rot            = 256
0.00.625.627 I llm_load_print_meta: n_swa            = 0
0.00.625.628 I llm_load_print_meta: n_embd_head_k    = 256
0.00.625.628 I llm_load_print_meta: n_embd_head_v    = 256
0.00.625.633 I llm_load_print_meta: n_gqa            = 8
0.00.625.637 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.625.643 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.625.644 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.625.647 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.625.647 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.625.648 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.625.649 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.625.654 I llm_load_print_meta: n_ff             = 16384
0.00.625.659 I llm_load_print_meta: n_expert         = 0
0.00.625.659 I llm_load_print_meta: n_expert_used    = 0
0.00.625.659 I llm_load_print_meta: causal attn      = 1
0.00.625.660 I llm_load_print_meta: pooling type     = 0
0.00.625.660 I llm_load_print_meta: rope type        = 2
0.00.625.660 I llm_load_print_meta: rope scaling     = linear
0.00.625.662 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.625.662 I llm_load_print_meta: freq_scale_train = 1
0.00.625.663 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.625.663 I llm_load_print_meta: rope_finetuned   = unknown
0.00.625.663 I llm_load_print_meta: ssm_d_conv       = 0
0.00.625.665 I llm_load_print_meta: ssm_d_inner      = 0
0.00.625.666 I llm_load_print_meta: ssm_d_state      = 0
0.00.625.666 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.625.667 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.625.667 I llm_load_print_meta: model type       = 2B
0.00.625.668 I llm_load_print_meta: model ftype      = Q8_0
0.00.625.669 I llm_load_print_meta: model params     = 2.51 B
0.00.625.680 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.625.680 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.625.681 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.625.685 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.625.685 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.625.686 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.625.686 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.625.687 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.625.693 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.625.694 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.625.695 I llm_load_print_meta: max token length = 93
0.00.726.715 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.726.724 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.726.725 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.726.726 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.726.727 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.726.728 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.732.932 I llama_new_context_with_model: n_seq_max     = 1
0.00.732.940 I llama_new_context_with_model: n_ctx         = 4096
0.00.732.940 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.732.941 I llama_new_context_with_model: n_batch       = 2048
0.00.732.941 I llama_new_context_with_model: n_ubatch      = 512
0.00.732.942 I llama_new_context_with_model: flash_attn    = 0
0.00.732.945 I llama_new_context_with_model: freq_base     = 10000.0
0.00.732.945 I llama_new_context_with_model: freq_scale    = 1
0.00.732.946 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.747.744 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.747.788 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.747.917 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.750.521 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.750.525 I llama_new_context_with_model: graph nodes  = 601
0.00.750.525 I llama_new_context_with_model: graph splits = 1
0.00.750.547 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.358.390 I main: llama threadpool init, n_threads = 4
0.01.358.405 I 
0.01.358.524 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.358.528 I 
0.01.358.764 I sampler seed: 136593047
0.01.358.777 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.358.783 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.358.787 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.358.788 I 
 increasities with the majestic roar of a charging bull.

This is a metaphor for what? [end of text]


0.09.761.780 I llama_perf_sampler_print:    sampling time =      30.88 ms /    21 runs   (    1.47 ms per token,   680.14 tokens per second)
0.09.761.795 I llama_perf_context_print:        load time =    1357.36 ms
0.09.761.797 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.761.798 I llama_perf_context_print:        eval time =    8345.41 ms /    20 runs   (  417.27 ms per token,     2.40 tokens per second)
0.09.761.799 I llama_perf_context_print:       total time =    8403.40 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 4145 (9abe9eea) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.000.837 I main: load the model and apply lora adapter, if any
0.00.023.345 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.448 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.463 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.467 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.473 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.475 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.478 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.480 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.482 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.484 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.493 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.499 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.501 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.503 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.513 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.801 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.702 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.063 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.076 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.078 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.079 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.080 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.081 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.082 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.086 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.087 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.089 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.090 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.272.092 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.100 I llama_model_loader: - type  f32:   37 tensors
0.00.272.103 I llama_model_loader: - type q8_0:  127 tensors
0.00.467.226 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.536.870 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.537.908 I llm_load_vocab: special tokens cache size = 5
0.00.646.602 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.646.693 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.646.698 I llm_load_print_meta: arch             = gemma
0.00.646.698 I llm_load_print_meta: vocab type       = SPM
0.00.646.699 I llm_load_print_meta: n_vocab          = 256000
0.00.646.702 I llm_load_print_meta: n_merges         = 0
0.00.646.702 I llm_load_print_meta: vocab_only       = 0
0.00.646.702 I llm_load_print_meta: n_ctx_train      = 8192
0.00.646.703 I llm_load_print_meta: n_embd           = 2048
0.00.646.703 I llm_load_print_meta: n_layer          = 18
0.00.646.767 I llm_load_print_meta: n_head           = 8
0.00.646.777 I llm_load_print_meta: n_head_kv        = 1
0.00.646.778 I llm_load_print_meta: n_rot            = 256
0.00.646.778 I llm_load_print_meta: n_swa            = 0
0.00.646.779 I llm_load_print_meta: n_embd_head_k    = 256
0.00.646.779 I llm_load_print_meta: n_embd_head_v    = 256
0.00.646.784 I llm_load_print_meta: n_gqa            = 8
0.00.646.788 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.646.793 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.646.795 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.646.797 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.646.797 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.646.798 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.646.799 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.646.804 I llm_load_print_meta: n_ff             = 16384
0.00.646.805 I llm_load_print_meta: n_expert         = 0
0.00.646.805 I llm_load_print_meta: n_expert_used    = 0
0.00.646.806 I llm_load_print_meta: causal attn      = 1
0.00.646.806 I llm_load_print_meta: pooling type     = 0
0.00.646.808 I llm_load_print_meta: rope type        = 2
0.00.646.808 I llm_load_print_meta: rope scaling     = linear
0.00.646.810 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.646.810 I llm_load_print_meta: freq_scale_train = 1
0.00.646.811 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.646.811 I llm_load_print_meta: rope_finetuned   = unknown
0.00.646.812 I llm_load_print_meta: ssm_d_conv       = 0
0.00.646.812 I llm_load_print_meta: ssm_d_inner      = 0
0.00.646.812 I llm_load_print_meta: ssm_d_state      = 0
0.00.646.813 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.646.814 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.646.815 I llm_load_print_meta: model type       = 2B
0.00.646.816 I llm_load_print_meta: model ftype      = Q8_0
0.00.646.817 I llm_load_print_meta: model params     = 2.51 B
0.00.646.826 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.646.826 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.646.827 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.646.828 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.646.829 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.646.830 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.646.838 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.646.839 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.646.845 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.646.847 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.646.847 I llm_load_print_meta: max token length = 93
0.00.742.158 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.748.528 I llama_new_context_with_model: n_seq_max     = 1
0.00.748.536 I llama_new_context_with_model: n_ctx         = 4096
0.00.748.536 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.748.536 I llama_new_context_with_model: n_batch       = 2048
0.00.748.537 I llama_new_context_with_model: n_ubatch      = 512
0.00.748.537 I llama_new_context_with_model: flash_attn    = 0
0.00.748.540 I llama_new_context_with_model: freq_base     = 10000.0
0.00.748.541 I llama_new_context_with_model: freq_scale    = 1
0.00.748.541 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.763.873 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.763.920 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.764.045 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.766.586 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.766.590 I llama_new_context_with_model: graph nodes  = 601
0.00.766.591 I llama_new_context_with_model: graph splits = 1
0.00.766.631 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.378.695 I main: llama threadpool init, n_threads = 4
0.01.378.708 I 
0.01.378.824 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.378.829 I 
0.01.379.068 I sampler seed: 2218463104
0.01.379.082 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.379.089 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.379.092 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.379.093 I 
 increasities, which are characterized by a narcissistic focus, impulsive behavior, and a lack of empathy.

Here are some examples of narcissistic personalities:

* Adolf

0.14.944.196 I llama_perf_sampler_print:    sampling time =      49.40 ms /    33 runs   (    1.50 ms per token,   668.07 tokens per second)
0.14.944.212 I llama_perf_context_print:        load time =    1377.76 ms
0.14.944.213 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.944.215 I llama_perf_context_print:        eval time =   13475.69 ms /    32 runs   (  421.12 ms per token,     2.37 tokens per second)
0.14.944.216 I llama_perf_context_print:       total time =   13565.51 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.714 I build: 4145 (9abe9eea) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.918 I main: llama backend init
0.00.000.927 I main: load the model and apply lora adapter, if any
0.00.023.848 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.859 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.960 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.974 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.978 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.985 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.987 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.989 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.998 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.002 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.004 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.012 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.013 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.021 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.025 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.026 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.255 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.279 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.465 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.477 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.478 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.479 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.480 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.482 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.483 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.486 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.487 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.489 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.489 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.271.491 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.499 I llama_model_loader: - type  f32:   37 tensors
0.00.271.502 I llama_model_loader: - type q8_0:  127 tensors
0.00.467.958 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.537.158 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.538.155 I llm_load_vocab: special tokens cache size = 5
0.00.636.808 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.636.879 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.636.880 I llm_load_print_meta: arch             = gemma
0.00.636.881 I llm_load_print_meta: vocab type       = SPM
0.00.636.882 I llm_load_print_meta: n_vocab          = 256000
0.00.636.885 I llm_load_print_meta: n_merges         = 0
0.00.636.885 I llm_load_print_meta: vocab_only       = 0
0.00.636.886 I llm_load_print_meta: n_ctx_train      = 8192
0.00.636.886 I llm_load_print_meta: n_embd           = 2048
0.00.636.886 I llm_load_print_meta: n_layer          = 18
0.00.636.953 I llm_load_print_meta: n_head           = 8
0.00.636.960 I llm_load_print_meta: n_head_kv        = 1
0.00.636.983 I llm_load_print_meta: n_rot            = 256
0.00.636.984 I llm_load_print_meta: n_swa            = 0
0.00.636.984 I llm_load_print_meta: n_embd_head_k    = 256
0.00.636.984 I llm_load_print_meta: n_embd_head_v    = 256
0.00.636.992 I llm_load_print_meta: n_gqa            = 8
0.00.636.997 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.637.001 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.637.003 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.637.004 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.637.005 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.637.006 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.637.006 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.637.011 I llm_load_print_meta: n_ff             = 16384
0.00.637.012 I llm_load_print_meta: n_expert         = 0
0.00.637.012 I llm_load_print_meta: n_expert_used    = 0
0.00.637.013 I llm_load_print_meta: causal attn      = 1
0.00.637.013 I llm_load_print_meta: pooling type     = 0
0.00.637.013 I llm_load_print_meta: rope type        = 2
0.00.637.014 I llm_load_print_meta: rope scaling     = linear
0.00.637.015 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.637.016 I llm_load_print_meta: freq_scale_train = 1
0.00.637.016 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.637.016 I llm_load_print_meta: rope_finetuned   = unknown
0.00.637.025 I llm_load_print_meta: ssm_d_conv       = 0
0.00.637.026 I llm_load_print_meta: ssm_d_inner      = 0
0.00.637.027 I llm_load_print_meta: ssm_d_state      = 0
0.00.637.027 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.637.027 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.637.028 I llm_load_print_meta: model type       = 2B
0.00.637.030 I llm_load_print_meta: model ftype      = Q8_0
0.00.637.037 I llm_load_print_meta: model params     = 2.51 B
0.00.637.046 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.637.046 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.637.047 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.637.047 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.637.048 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.637.048 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.637.048 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.637.049 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.637.055 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.637.057 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.637.057 I llm_load_print_meta: max token length = 93
0.00.711.855 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.711.866 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.711.867 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.711.868 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.711.869 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.711.869 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.717.807 I llama_new_context_with_model: n_seq_max     = 1
0.00.717.816 I llama_new_context_with_model: n_ctx         = 4096
0.00.717.816 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.717.817 I llama_new_context_with_model: n_batch       = 2048
0.00.717.817 I llama_new_context_with_model: n_ubatch      = 512
0.00.717.818 I llama_new_context_with_model: flash_attn    = 0
0.00.717.822 I llama_new_context_with_model: freq_base     = 10000.0
0.00.717.823 I llama_new_context_with_model: freq_scale    = 1
0.00.717.824 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.732.672 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.732.715 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.732.841 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.735.317 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.735.321 I llama_new_context_with_model: graph nodes  = 601
0.00.735.321 I llama_new_context_with_model: graph splits = 1
0.00.735.345 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.344.572 I main: llama threadpool init, n_threads = 4
0.01.344.590 I 
0.01.344.702 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.344.706 I 
0.01.344.940 I sampler seed: 4273826418
0.01.344.952 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.344.958 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.344.961 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.344.962 I 
 increasities, but is still a part of the larger ecological community.

**A. Human activity**
**B. Ecological community**
**C.

0.14.842.937 I llama_perf_sampler_print:    sampling time =      49.24 ms /    33 runs   (    1.49 ms per token,   670.20 tokens per second)
0.14.842.941 I llama_perf_context_print:        load time =    1343.54 ms
0.14.842.943 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.842.944 I llama_perf_context_print:        eval time =   13408.23 ms /    32 runs   (  419.01 ms per token,     2.39 tokens per second)
0.14.842.945 I llama_perf_context_print:       total time =   13498.37 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.671 I build: 4145 (9abe9eea) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.909 I main: llama backend init
0.00.000.917 I main: load the model and apply lora adapter, if any
0.00.023.226 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.237 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.340 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.352 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.353 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.359 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.364 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.366 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.367 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.373 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.375 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.384 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.386 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.388 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.390 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.393 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.805 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.296 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.507 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.517 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.518 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.520 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.521 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.522 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.523 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.526 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.527 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.529 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.529 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.271.531 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.541 I llama_model_loader: - type  f32:   37 tensors
0.00.271.544 I llama_model_loader: - type q8_0:  127 tensors
0.00.476.391 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.543.059 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.544.050 I llm_load_vocab: special tokens cache size = 5
0.00.654.915 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.654.989 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.654.993 I llm_load_print_meta: arch             = gemma
0.00.654.994 I llm_load_print_meta: vocab type       = SPM
0.00.654.995 I llm_load_print_meta: n_vocab          = 256000
0.00.654.998 I llm_load_print_meta: n_merges         = 0
0.00.654.998 I llm_load_print_meta: vocab_only       = 0
0.00.654.998 I llm_load_print_meta: n_ctx_train      = 8192
0.00.654.999 I llm_load_print_meta: n_embd           = 2048
0.00.654.999 I llm_load_print_meta: n_layer          = 18
0.00.655.062 I llm_load_print_meta: n_head           = 8
0.00.655.071 I llm_load_print_meta: n_head_kv        = 1
0.00.655.072 I llm_load_print_meta: n_rot            = 256
0.00.655.073 I llm_load_print_meta: n_swa            = 0
0.00.655.074 I llm_load_print_meta: n_embd_head_k    = 256
0.00.655.074 I llm_load_print_meta: n_embd_head_v    = 256
0.00.655.079 I llm_load_print_meta: n_gqa            = 8
0.00.655.084 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.655.089 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.655.093 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.655.094 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.655.094 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.655.095 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.655.095 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.655.101 I llm_load_print_meta: n_ff             = 16384
0.00.655.103 I llm_load_print_meta: n_expert         = 0
0.00.655.104 I llm_load_print_meta: n_expert_used    = 0
0.00.655.104 I llm_load_print_meta: causal attn      = 1
0.00.655.105 I llm_load_print_meta: pooling type     = 0
0.00.655.105 I llm_load_print_meta: rope type        = 2
0.00.655.105 I llm_load_print_meta: rope scaling     = linear
0.00.655.107 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.655.107 I llm_load_print_meta: freq_scale_train = 1
0.00.655.107 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.655.108 I llm_load_print_meta: rope_finetuned   = unknown
0.00.655.108 I llm_load_print_meta: ssm_d_conv       = 0
0.00.655.108 I llm_load_print_meta: ssm_d_inner      = 0
0.00.655.109 I llm_load_print_meta: ssm_d_state      = 0
0.00.655.109 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.655.109 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.655.110 I llm_load_print_meta: model type       = 2B
0.00.655.119 I llm_load_print_meta: model ftype      = Q8_0
0.00.655.121 I llm_load_print_meta: model params     = 2.51 B
0.00.655.130 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.655.131 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.655.132 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.655.132 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.655.133 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.655.133 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.655.134 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.655.134 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.655.154 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.655.157 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.655.158 I llm_load_print_meta: max token length = 93
0.00.728.148 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.728.158 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.734.278 I llama_new_context_with_model: n_seq_max     = 1
0.00.734.286 I llama_new_context_with_model: n_ctx         = 4096
0.00.734.286 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.734.287 I llama_new_context_with_model: n_batch       = 2048
0.00.734.287 I llama_new_context_with_model: n_ubatch      = 512
0.00.734.288 I llama_new_context_with_model: flash_attn    = 0
0.00.734.291 I llama_new_context_with_model: freq_base     = 10000.0
0.00.734.292 I llama_new_context_with_model: freq_scale    = 1
0.00.734.292 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.749.076 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.749.117 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.749.245 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.751.757 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.751.761 I llama_new_context_with_model: graph nodes  = 601
0.00.751.761 I llama_new_context_with_model: graph splits = 1
0.00.751.784 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.360.024 I main: llama threadpool init, n_threads = 4
0.01.360.041 I 
0.01.360.163 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.360.168 I 
0.01.360.424 I sampler seed: 3376796574
0.01.360.445 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.360.465 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.360.470 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.360.470 I 
 increasities, and other forms of sexual harassment are unacceptable and should not be tolerated.

**Our Commitment**

- We are committed to creating a safe and

0.15.004.754 I llama_perf_sampler_print:    sampling time =      49.12 ms /    33 runs   (    1.49 ms per token,   671.82 tokens per second)
0.15.004.759 I llama_perf_context_print:        load time =    1359.01 ms
0.15.004.761 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.004.763 I llama_perf_context_print:        eval time =   13555.45 ms /    32 runs   (  423.61 ms per token,     2.36 tokens per second)
0.15.004.764 I llama_perf_context_print:       total time =   13644.74 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m4.953s
user	3m29.291s
sys	0m9.527s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4145 (9abe9eea)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 187432.49 ms
main:    total time = 187432.49 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 4145 (9abe9eea) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.000.858 I main: load the model and apply lora adapter, if any
0.00.023.482 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.491 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.585 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.596 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.598 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.603 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.605 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.606 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.608 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.609 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.610 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.616 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.618 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.631 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.636 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.637 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.999 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.562 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.690 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.702 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.703 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.705 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.706 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.707 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.708 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.712 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.713 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.714 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.733 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.737 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.747 I llama_model_loader: - type  f32:   37 tensors
0.00.269.749 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.755 I llama_model_loader: - type q6_K:   19 tensors
0.00.473.377 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.543.724 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.544.725 I llm_load_vocab: special tokens cache size = 5
0.00.643.620 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.643.691 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.643.692 I llm_load_print_meta: arch             = gemma
0.00.643.693 I llm_load_print_meta: vocab type       = SPM
0.00.643.694 I llm_load_print_meta: n_vocab          = 256000
0.00.643.696 I llm_load_print_meta: n_merges         = 0
0.00.643.696 I llm_load_print_meta: vocab_only       = 0
0.00.643.697 I llm_load_print_meta: n_ctx_train      = 8192
0.00.643.697 I llm_load_print_meta: n_embd           = 2048
0.00.643.697 I llm_load_print_meta: n_layer          = 18
0.00.643.762 I llm_load_print_meta: n_head           = 8
0.00.643.770 I llm_load_print_meta: n_head_kv        = 1
0.00.643.771 I llm_load_print_meta: n_rot            = 256
0.00.643.772 I llm_load_print_meta: n_swa            = 0
0.00.643.777 I llm_load_print_meta: n_embd_head_k    = 256
0.00.643.777 I llm_load_print_meta: n_embd_head_v    = 256
0.00.643.782 I llm_load_print_meta: n_gqa            = 8
0.00.643.786 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.643.791 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.643.793 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.643.795 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.643.796 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.643.796 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.643.797 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.643.802 I llm_load_print_meta: n_ff             = 16384
0.00.643.802 I llm_load_print_meta: n_expert         = 0
0.00.643.803 I llm_load_print_meta: n_expert_used    = 0
0.00.643.804 I llm_load_print_meta: causal attn      = 1
0.00.643.804 I llm_load_print_meta: pooling type     = 0
0.00.643.805 I llm_load_print_meta: rope type        = 2
0.00.643.805 I llm_load_print_meta: rope scaling     = linear
0.00.643.806 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.643.807 I llm_load_print_meta: freq_scale_train = 1
0.00.643.807 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.643.808 I llm_load_print_meta: rope_finetuned   = unknown
0.00.643.808 I llm_load_print_meta: ssm_d_conv       = 0
0.00.643.809 I llm_load_print_meta: ssm_d_inner      = 0
0.00.643.809 I llm_load_print_meta: ssm_d_state      = 0
0.00.643.810 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.643.810 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.643.814 I llm_load_print_meta: model type       = 2B
0.00.643.815 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.643.815 I llm_load_print_meta: model params     = 2.51 B
0.00.643.826 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.643.826 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.643.827 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.643.828 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.643.828 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.643.828 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.643.829 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.643.831 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.643.839 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.643.840 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.643.841 I llm_load_print_meta: max token length = 93
0.00.705.666 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.705.677 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.705.678 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.705.679 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.705.679 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.705.680 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.711.550 I llama_new_context_with_model: n_seq_max     = 1
0.00.711.557 I llama_new_context_with_model: n_ctx         = 4096
0.00.711.557 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.711.558 I llama_new_context_with_model: n_batch       = 2048
0.00.711.558 I llama_new_context_with_model: n_ubatch      = 512
0.00.711.559 I llama_new_context_with_model: flash_attn    = 0
0.00.711.562 I llama_new_context_with_model: freq_base     = 10000.0
0.00.711.563 I llama_new_context_with_model: freq_scale    = 1
0.00.711.563 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.726.475 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.726.530 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.726.666 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.729.306 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.729.310 I llama_new_context_with_model: graph nodes  = 601
0.00.729.311 I llama_new_context_with_model: graph splits = 1
0.00.729.334 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.314.425 I main: llama threadpool init, n_threads = 4
0.01.314.442 I 
0.01.314.566 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.314.570 I 
0.01.314.803 I sampler seed: 1719481981
0.01.314.816 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.314.823 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.314.824 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.314.824 I 
 maneutrinous and the most humane way to treat a patient with chronic pain.

1. **Medication management:**
    - Prescribe strong analgesics and

0.12.518.552 I llama_perf_sampler_print:    sampling time =      49.39 ms /    33 runs   (    1.50 ms per token,   668.14 tokens per second)
0.12.518.555 I llama_perf_context_print:        load time =    1313.48 ms
0.12.518.557 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.518.559 I llama_perf_context_print:        eval time =   11114.01 ms /    32 runs   (  347.31 ms per token,     2.88 tokens per second)
0.12.518.560 I llama_perf_context_print:       total time =   11204.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4145 (9abe9eea)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186436.40 ms
main:    total time = 186436.40 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 4145 (9abe9eea) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.853 I main: llama backend init
0.00.000.860 I main: load the model and apply lora adapter, if any
0.00.023.136 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.243 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.257 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.259 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.264 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.271 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.272 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.273 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.274 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.275 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.281 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.282 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.283 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.284 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.285 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.352 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.665 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.939 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.950 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.951 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.952 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.953 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.954 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.955 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.959 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.960 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.969 I llama_model_loader: - type  f32:   37 tensors
0.00.269.972 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.972 I llama_model_loader: - type q6_K:   19 tensors
0.00.452.294 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.520.396 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.521.389 I llm_load_vocab: special tokens cache size = 5
0.00.618.421 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.618.494 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.618.495 I llm_load_print_meta: arch             = gemma
0.00.618.496 I llm_load_print_meta: vocab type       = SPM
0.00.618.497 I llm_load_print_meta: n_vocab          = 256000
0.00.618.499 I llm_load_print_meta: n_merges         = 0
0.00.618.500 I llm_load_print_meta: vocab_only       = 0
0.00.618.500 I llm_load_print_meta: n_ctx_train      = 8192
0.00.618.501 I llm_load_print_meta: n_embd           = 2048
0.00.618.501 I llm_load_print_meta: n_layer          = 18
0.00.618.568 I llm_load_print_meta: n_head           = 8
0.00.618.576 I llm_load_print_meta: n_head_kv        = 1
0.00.618.576 I llm_load_print_meta: n_rot            = 256
0.00.618.577 I llm_load_print_meta: n_swa            = 0
0.00.618.577 I llm_load_print_meta: n_embd_head_k    = 256
0.00.618.577 I llm_load_print_meta: n_embd_head_v    = 256
0.00.618.582 I llm_load_print_meta: n_gqa            = 8
0.00.618.587 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.618.592 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.618.594 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.618.596 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.618.596 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.618.597 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.618.608 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.618.614 I llm_load_print_meta: n_ff             = 16384
0.00.618.615 I llm_load_print_meta: n_expert         = 0
0.00.618.615 I llm_load_print_meta: n_expert_used    = 0
0.00.618.629 I llm_load_print_meta: causal attn      = 1
0.00.618.630 I llm_load_print_meta: pooling type     = 0
0.00.618.630 I llm_load_print_meta: rope type        = 2
0.00.618.640 I llm_load_print_meta: rope scaling     = linear
0.00.618.642 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.618.643 I llm_load_print_meta: freq_scale_train = 1
0.00.618.643 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.618.648 I llm_load_print_meta: rope_finetuned   = unknown
0.00.618.648 I llm_load_print_meta: ssm_d_conv       = 0
0.00.618.648 I llm_load_print_meta: ssm_d_inner      = 0
0.00.618.649 I llm_load_print_meta: ssm_d_state      = 0
0.00.618.649 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.618.650 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.618.658 I llm_load_print_meta: model type       = 2B
0.00.618.660 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.618.661 I llm_load_print_meta: model params     = 2.51 B
0.00.618.670 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.618.671 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.618.672 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.618.673 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.618.676 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.618.677 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.618.677 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.618.678 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.618.684 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.618.685 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.618.686 I llm_load_print_meta: max token length = 93
0.00.673.984 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.679.756 I llama_new_context_with_model: n_seq_max     = 1
0.00.679.765 I llama_new_context_with_model: n_ctx         = 4096
0.00.679.765 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.679.766 I llama_new_context_with_model: n_batch       = 2048
0.00.679.766 I llama_new_context_with_model: n_ubatch      = 512
0.00.679.767 I llama_new_context_with_model: flash_attn    = 0
0.00.679.770 I llama_new_context_with_model: freq_base     = 10000.0
0.00.679.771 I llama_new_context_with_model: freq_scale    = 1
0.00.679.772 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.695.561 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.695.605 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.695.730 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.698.356 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.698.360 I llama_new_context_with_model: graph nodes  = 601
0.00.698.360 I llama_new_context_with_model: graph splits = 1
0.00.698.385 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.281.456 I main: llama threadpool init, n_threads = 4
0.01.281.472 I 
0.01.281.602 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.281.605 I 
0.01.281.841 I sampler seed: 2487328616
0.01.281.853 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.281.861 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.281.864 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.281.864 I 
 seconally. 

I cannot answer the question as it contains inappropriate content. [end of text]


0.07.209.210 I llama_perf_sampler_print:    sampling time =      26.16 ms /    18 runs   (    1.45 ms per token,   687.97 tokens per second)
0.07.209.213 I llama_perf_context_print:        load time =    1280.50 ms
0.07.209.214 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.209.216 I llama_perf_context_print:        eval time =    5879.31 ms /    17 runs   (  345.84 ms per token,     2.89 tokens per second)
0.07.209.231 I llama_perf_context_print:       total time =    5927.76 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m36.542s
user	46m44.266s
sys	0m6.358s
