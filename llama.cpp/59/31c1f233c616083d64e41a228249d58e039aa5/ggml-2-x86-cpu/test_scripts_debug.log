+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.645 I build: 4163 (5931c1f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.367 I main: llama backend init
0.00.001.376 I main: load the model and apply lora adapter, if any
0.00.023.727 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.737 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.825 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.837 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.839 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.847 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.854 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.855 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.856 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.857 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.859 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.865 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.866 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.867 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.868 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.870 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.233.184 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.335.420 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.358.889 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.358.899 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.358.901 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.358.902 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.358.903 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.358.905 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.358.906 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.358.911 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.358.912 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.913 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.358.915 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.358.916 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.358.927 I llama_model_loader: - type  f32:   37 tensors
0.00.358.929 I llama_model_loader: - type q8_0:  127 tensors
0.00.598.149 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.657.725 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.658.640 I llm_load_vocab: special tokens cache size = 5
0.00.848.465 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.848.541 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.848.542 I llm_load_print_meta: arch             = gemma
0.00.848.543 I llm_load_print_meta: vocab type       = SPM
0.00.848.544 I llm_load_print_meta: n_vocab          = 256000
0.00.848.546 I llm_load_print_meta: n_merges         = 0
0.00.848.547 I llm_load_print_meta: vocab_only       = 0
0.00.848.547 I llm_load_print_meta: n_ctx_train      = 8192
0.00.848.548 I llm_load_print_meta: n_embd           = 2048
0.00.848.548 I llm_load_print_meta: n_layer          = 18
0.00.848.613 I llm_load_print_meta: n_head           = 8
0.00.848.620 I llm_load_print_meta: n_head_kv        = 1
0.00.848.621 I llm_load_print_meta: n_rot            = 256
0.00.848.622 I llm_load_print_meta: n_swa            = 0
0.00.848.622 I llm_load_print_meta: n_embd_head_k    = 256
0.00.848.622 I llm_load_print_meta: n_embd_head_v    = 256
0.00.848.628 I llm_load_print_meta: n_gqa            = 8
0.00.848.633 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.848.638 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.848.639 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.848.641 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.848.642 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.848.642 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.848.654 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.848.661 I llm_load_print_meta: n_ff             = 16384
0.00.848.663 I llm_load_print_meta: n_expert         = 0
0.00.848.663 I llm_load_print_meta: n_expert_used    = 0
0.00.848.663 I llm_load_print_meta: causal attn      = 1
0.00.848.664 I llm_load_print_meta: pooling type     = 0
0.00.848.664 I llm_load_print_meta: rope type        = 2
0.00.848.664 I llm_load_print_meta: rope scaling     = linear
0.00.848.666 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.848.666 I llm_load_print_meta: freq_scale_train = 1
0.00.848.667 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.848.668 I llm_load_print_meta: rope_finetuned   = unknown
0.00.848.668 I llm_load_print_meta: ssm_d_conv       = 0
0.00.848.668 I llm_load_print_meta: ssm_d_inner      = 0
0.00.848.669 I llm_load_print_meta: ssm_d_state      = 0
0.00.848.680 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.848.681 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.848.682 I llm_load_print_meta: model type       = 2B
0.00.848.683 I llm_load_print_meta: model ftype      = Q8_0
0.00.848.683 I llm_load_print_meta: model params     = 2.51 B
0.00.848.693 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.848.693 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.848.694 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.848.694 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.848.695 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.848.699 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.848.700 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.848.700 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.848.706 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.848.708 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.848.708 I llm_load_print_meta: max token length = 93
0.00.951.240 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.951.249 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.951.250 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.951.251 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.951.252 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.951.253 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.957.071 I llama_new_context_with_model: n_seq_max     = 1
0.00.957.078 I llama_new_context_with_model: n_ctx         = 4096
0.00.957.078 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.957.079 I llama_new_context_with_model: n_batch       = 2048
0.00.957.079 I llama_new_context_with_model: n_ubatch      = 512
0.00.957.079 I llama_new_context_with_model: flash_attn    = 0
0.00.957.082 I llama_new_context_with_model: freq_base     = 10000.0
0.00.957.082 I llama_new_context_with_model: freq_scale    = 1
0.00.957.083 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.971.716 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.971.754 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.971.879 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.974.436 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.974.441 I llama_new_context_with_model: graph nodes  = 601
0.00.974.441 I llama_new_context_with_model: graph splits = 1
0.00.974.464 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.584.250 I main: llama threadpool init, n_threads = 4
0.01.584.268 I 
0.01.584.389 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.584.393 I 
0.01.584.647 I sampler seed: 902541815
0.01.584.664 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.584.677 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.584.678 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.584.678 I 
 seconally. [end of text]


0.03.269.611 I llama_perf_sampler_print:    sampling time =       6.22 ms /     5 runs   (    1.24 ms per token,   804.25 tokens per second)
0.03.269.614 I llama_perf_context_print:        load time =    1582.79 ms
0.03.269.615 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.269.616 I llama_perf_context_print:        eval time =    1672.56 ms /     4 runs   (  418.14 ms per token,     2.39 tokens per second)
0.03.269.631 I llama_perf_context_print:       total time =    1685.37 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 4163 (5931c1f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.396 I main: llama backend init
0.00.001.405 I main: load the model and apply lora adapter, if any
0.00.023.721 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.821 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.837 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.841 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.848 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.850 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.851 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.853 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.855 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.869 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.880 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.884 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.885 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.887 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.889 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.362 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.332.449 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.355.884 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.355.894 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.355.895 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.355.897 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.355.898 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.355.900 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.355.901 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.355.905 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.355.907 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.355.908 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.355.909 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.355.911 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.355.919 I llama_model_loader: - type  f32:   37 tensors
0.00.355.922 I llama_model_loader: - type q8_0:  127 tensors
0.00.585.180 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.645.612 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.646.633 I llm_load_vocab: special tokens cache size = 5
0.00.841.402 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.841.474 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.841.475 I llm_load_print_meta: arch             = gemma
0.00.841.476 I llm_load_print_meta: vocab type       = SPM
0.00.841.477 I llm_load_print_meta: n_vocab          = 256000
0.00.841.479 I llm_load_print_meta: n_merges         = 0
0.00.841.479 I llm_load_print_meta: vocab_only       = 0
0.00.841.480 I llm_load_print_meta: n_ctx_train      = 8192
0.00.841.480 I llm_load_print_meta: n_embd           = 2048
0.00.841.481 I llm_load_print_meta: n_layer          = 18
0.00.841.546 I llm_load_print_meta: n_head           = 8
0.00.841.553 I llm_load_print_meta: n_head_kv        = 1
0.00.841.554 I llm_load_print_meta: n_rot            = 256
0.00.841.555 I llm_load_print_meta: n_swa            = 0
0.00.841.555 I llm_load_print_meta: n_embd_head_k    = 256
0.00.841.556 I llm_load_print_meta: n_embd_head_v    = 256
0.00.841.561 I llm_load_print_meta: n_gqa            = 8
0.00.841.566 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.841.571 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.841.575 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.841.583 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.841.587 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.841.588 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.841.588 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.841.605 I llm_load_print_meta: n_ff             = 16384
0.00.841.608 I llm_load_print_meta: n_expert         = 0
0.00.841.608 I llm_load_print_meta: n_expert_used    = 0
0.00.841.609 I llm_load_print_meta: causal attn      = 1
0.00.841.609 I llm_load_print_meta: pooling type     = 0
0.00.841.609 I llm_load_print_meta: rope type        = 2
0.00.841.610 I llm_load_print_meta: rope scaling     = linear
0.00.841.611 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.841.612 I llm_load_print_meta: freq_scale_train = 1
0.00.841.612 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.841.613 I llm_load_print_meta: rope_finetuned   = unknown
0.00.841.613 I llm_load_print_meta: ssm_d_conv       = 0
0.00.841.613 I llm_load_print_meta: ssm_d_inner      = 0
0.00.841.614 I llm_load_print_meta: ssm_d_state      = 0
0.00.841.614 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.841.614 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.841.624 I llm_load_print_meta: model type       = 2B
0.00.841.633 I llm_load_print_meta: model ftype      = Q8_0
0.00.841.634 I llm_load_print_meta: model params     = 2.51 B
0.00.841.644 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.841.644 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.841.645 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.841.645 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.841.645 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.841.646 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.841.647 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.841.647 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.841.654 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.841.655 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.841.656 I llm_load_print_meta: max token length = 93
0.00.937.940 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.943.768 I llama_new_context_with_model: n_seq_max     = 1
0.00.943.775 I llama_new_context_with_model: n_ctx         = 4096
0.00.943.776 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.943.776 I llama_new_context_with_model: n_batch       = 2048
0.00.943.777 I llama_new_context_with_model: n_ubatch      = 512
0.00.943.777 I llama_new_context_with_model: flash_attn    = 0
0.00.943.779 I llama_new_context_with_model: freq_base     = 10000.0
0.00.943.780 I llama_new_context_with_model: freq_scale    = 1
0.00.943.781 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.958.864 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.958.911 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.959.043 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.961.538 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.961.543 I llama_new_context_with_model: graph nodes  = 601
0.00.961.543 I llama_new_context_with_model: graph splits = 1
0.00.961.566 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.571.121 I main: llama threadpool init, n_threads = 4
0.01.571.136 I 
0.01.571.250 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.571.254 I 
0.01.571.517 I sampler seed: 1138428053
0.01.571.532 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.571.544 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.571.546 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.571.546 I 
 increasities, but is the overall impact positive or negative for the individual?

**Positive Impact:**

* Increased self-esteem
* Improved social skills


0.15.039.008 I llama_perf_sampler_print:    sampling time =      49.14 ms /    33 runs   (    1.49 ms per token,   671.51 tokens per second)
0.15.039.013 I llama_perf_context_print:        load time =    1569.62 ms
0.15.039.015 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.039.017 I llama_perf_context_print:        eval time =   13378.51 ms /    32 runs   (  418.08 ms per token,     2.39 tokens per second)
0.15.039.018 I llama_perf_context_print:       total time =   13467.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.671 I build: 4163 (5931c1f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.424 I main: llama backend init
0.00.001.433 I main: load the model and apply lora adapter, if any
0.00.023.912 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.923 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.015 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.028 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.030 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.039 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.041 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.043 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.044 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.047 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.056 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.069 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.073 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.074 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.076 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.077 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.374 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.332.463 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.356.115 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.356.124 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.356.126 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.356.127 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.356.128 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.356.130 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.356.131 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.356.136 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.356.137 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.356.138 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.356.140 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.356.142 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.356.150 I llama_model_loader: - type  f32:   37 tensors
0.00.356.152 I llama_model_loader: - type q8_0:  127 tensors
0.00.589.423 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.654.963 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.655.931 I llm_load_vocab: special tokens cache size = 5
0.00.847.379 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.847.450 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.847.451 I llm_load_print_meta: arch             = gemma
0.00.847.452 I llm_load_print_meta: vocab type       = SPM
0.00.847.453 I llm_load_print_meta: n_vocab          = 256000
0.00.847.455 I llm_load_print_meta: n_merges         = 0
0.00.847.456 I llm_load_print_meta: vocab_only       = 0
0.00.847.456 I llm_load_print_meta: n_ctx_train      = 8192
0.00.847.457 I llm_load_print_meta: n_embd           = 2048
0.00.847.457 I llm_load_print_meta: n_layer          = 18
0.00.847.524 I llm_load_print_meta: n_head           = 8
0.00.847.531 I llm_load_print_meta: n_head_kv        = 1
0.00.847.532 I llm_load_print_meta: n_rot            = 256
0.00.847.533 I llm_load_print_meta: n_swa            = 0
0.00.847.533 I llm_load_print_meta: n_embd_head_k    = 256
0.00.847.533 I llm_load_print_meta: n_embd_head_v    = 256
0.00.847.538 I llm_load_print_meta: n_gqa            = 8
0.00.847.543 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.847.552 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.847.553 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.847.555 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.847.555 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.847.556 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.847.556 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.847.561 I llm_load_print_meta: n_ff             = 16384
0.00.847.562 I llm_load_print_meta: n_expert         = 0
0.00.847.563 I llm_load_print_meta: n_expert_used    = 0
0.00.847.564 I llm_load_print_meta: causal attn      = 1
0.00.847.564 I llm_load_print_meta: pooling type     = 0
0.00.847.564 I llm_load_print_meta: rope type        = 2
0.00.847.565 I llm_load_print_meta: rope scaling     = linear
0.00.847.566 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.847.567 I llm_load_print_meta: freq_scale_train = 1
0.00.847.567 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.847.567 I llm_load_print_meta: rope_finetuned   = unknown
0.00.847.567 I llm_load_print_meta: ssm_d_conv       = 0
0.00.847.568 I llm_load_print_meta: ssm_d_inner      = 0
0.00.847.571 I llm_load_print_meta: ssm_d_state      = 0
0.00.847.571 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.847.572 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.847.572 I llm_load_print_meta: model type       = 2B
0.00.847.573 I llm_load_print_meta: model ftype      = Q8_0
0.00.847.574 I llm_load_print_meta: model params     = 2.51 B
0.00.847.582 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.847.582 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.847.583 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.847.583 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.847.584 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.847.585 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.847.585 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.847.586 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.847.593 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.847.595 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.847.595 I llm_load_print_meta: max token length = 93
0.00.922.776 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.922.785 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.922.786 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.922.787 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.922.788 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.922.789 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.928.480 I llama_new_context_with_model: n_seq_max     = 1
0.00.928.487 I llama_new_context_with_model: n_ctx         = 4096
0.00.928.488 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.928.488 I llama_new_context_with_model: n_batch       = 2048
0.00.928.489 I llama_new_context_with_model: n_ubatch      = 512
0.00.928.489 I llama_new_context_with_model: flash_attn    = 0
0.00.928.492 I llama_new_context_with_model: freq_base     = 10000.0
0.00.928.492 I llama_new_context_with_model: freq_scale    = 1
0.00.928.493 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.943.340 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.943.383 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.943.508 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.946.178 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.946.182 I llama_new_context_with_model: graph nodes  = 601
0.00.946.182 I llama_new_context_with_model: graph splits = 1
0.00.946.204 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.558.458 I main: llama threadpool init, n_threads = 4
0.01.558.474 I 
0.01.558.587 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.558.588 I 
0.01.558.843 I sampler seed: 2227516688
0.01.558.858 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.558.870 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.558.871 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.558.872 I 
 increasities, the story of a woman scorned by men, the trials and tribulations of a young woman navigating her way through life.

These are just

0.15.275.975 I llama_perf_sampler_print:    sampling time =      49.76 ms /    33 runs   (    1.51 ms per token,   663.20 tokens per second)
0.15.275.979 I llama_perf_context_print:        load time =    1556.94 ms
0.15.275.980 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.275.982 I llama_perf_context_print:        eval time =   13625.88 ms /    32 runs   (  425.81 ms per token,     2.35 tokens per second)
0.15.275.983 I llama_perf_context_print:       total time =   13717.53 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.674 I build: 4163 (5931c1f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.413 I main: llama backend init
0.00.001.422 I main: load the model and apply lora adapter, if any
0.00.024.099 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.112 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.210 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.225 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.230 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.238 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.239 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.241 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.242 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.243 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.245 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.256 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.260 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.262 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.263 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.265 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.461 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.332.012 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.355.475 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.355.484 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.355.485 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.355.487 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.355.488 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.355.490 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.355.491 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.355.495 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.355.496 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.355.498 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.355.499 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.355.501 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.355.510 I llama_model_loader: - type  f32:   37 tensors
0.00.355.512 I llama_model_loader: - type q8_0:  127 tensors
0.00.579.017 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.645.732 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.646.737 I llm_load_vocab: special tokens cache size = 5
0.00.832.966 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.833.038 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.833.040 I llm_load_print_meta: arch             = gemma
0.00.833.041 I llm_load_print_meta: vocab type       = SPM
0.00.833.042 I llm_load_print_meta: n_vocab          = 256000
0.00.833.044 I llm_load_print_meta: n_merges         = 0
0.00.833.045 I llm_load_print_meta: vocab_only       = 0
0.00.833.045 I llm_load_print_meta: n_ctx_train      = 8192
0.00.833.046 I llm_load_print_meta: n_embd           = 2048
0.00.833.046 I llm_load_print_meta: n_layer          = 18
0.00.833.112 I llm_load_print_meta: n_head           = 8
0.00.833.119 I llm_load_print_meta: n_head_kv        = 1
0.00.833.119 I llm_load_print_meta: n_rot            = 256
0.00.833.120 I llm_load_print_meta: n_swa            = 0
0.00.833.120 I llm_load_print_meta: n_embd_head_k    = 256
0.00.833.120 I llm_load_print_meta: n_embd_head_v    = 256
0.00.833.125 I llm_load_print_meta: n_gqa            = 8
0.00.833.129 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.833.134 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.833.135 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.833.137 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.833.138 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.833.138 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.833.139 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.833.156 I llm_load_print_meta: n_ff             = 16384
0.00.833.158 I llm_load_print_meta: n_expert         = 0
0.00.833.158 I llm_load_print_meta: n_expert_used    = 0
0.00.833.158 I llm_load_print_meta: causal attn      = 1
0.00.833.159 I llm_load_print_meta: pooling type     = 0
0.00.833.159 I llm_load_print_meta: rope type        = 2
0.00.833.160 I llm_load_print_meta: rope scaling     = linear
0.00.833.161 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.833.162 I llm_load_print_meta: freq_scale_train = 1
0.00.833.162 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.833.163 I llm_load_print_meta: rope_finetuned   = unknown
0.00.833.163 I llm_load_print_meta: ssm_d_conv       = 0
0.00.833.163 I llm_load_print_meta: ssm_d_inner      = 0
0.00.833.163 I llm_load_print_meta: ssm_d_state      = 0
0.00.833.164 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.833.164 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.833.165 I llm_load_print_meta: model type       = 2B
0.00.833.166 I llm_load_print_meta: model ftype      = Q8_0
0.00.833.167 I llm_load_print_meta: model params     = 2.51 B
0.00.833.176 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.833.176 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.833.177 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.833.177 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.833.178 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.833.178 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.833.179 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.833.179 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.833.185 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.833.187 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.833.188 I llm_load_print_meta: max token length = 93
0.00.906.192 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.906.203 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.911.926 I llama_new_context_with_model: n_seq_max     = 1
0.00.911.934 I llama_new_context_with_model: n_ctx         = 4096
0.00.911.934 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.911.934 I llama_new_context_with_model: n_batch       = 2048
0.00.911.935 I llama_new_context_with_model: n_ubatch      = 512
0.00.911.935 I llama_new_context_with_model: flash_attn    = 0
0.00.911.938 I llama_new_context_with_model: freq_base     = 10000.0
0.00.911.939 I llama_new_context_with_model: freq_scale    = 1
0.00.911.940 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.927.163 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.927.204 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.927.336 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.929.889 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.929.893 I llama_new_context_with_model: graph nodes  = 601
0.00.929.893 I llama_new_context_with_model: graph splits = 1
0.00.929.917 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.542.007 I main: llama threadpool init, n_threads = 4
0.01.542.023 I 
0.01.542.138 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.542.142 I 
0.01.542.401 I sampler seed: 1511963674
0.01.542.415 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.542.425 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.542.429 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.542.429 I 
 increasities for the use of the phrase "I am ready."

"I am ready" is a powerful phrase that can be used to express a wide range

0.15.095.872 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.81 tokens per second)
0.15.095.876 I llama_perf_context_print:        load time =    1540.48 ms
0.15.095.878 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.095.880 I llama_perf_context_print:        eval time =   13464.67 ms /    32 runs   (  420.77 ms per token,     2.38 tokens per second)
0.15.095.882 I llama_perf_context_print:       total time =   13553.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m58.331s
user	3m3.307s
sys	0m9.412s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4163 (5931c1f2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185706.61 ms
main:    total time = 185706.61 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.663 I build: 4163 (5931c1f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.401 I main: llama backend init
0.00.001.410 I main: load the model and apply lora adapter, if any
0.00.023.520 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.533 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.630 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.644 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.646 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.654 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.658 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.660 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.661 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.662 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.663 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.674 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.675 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.677 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.678 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.680 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.214 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.331.032 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.508 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.519 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.520 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.522 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.523 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.525 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.526 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.531 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.533 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.535 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.536 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.354.538 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.548 I llama_model_loader: - type  f32:   37 tensors
0.00.354.550 I llama_model_loader: - type q4_K:  108 tensors
0.00.354.552 I llama_model_loader: - type q6_K:   19 tensors
0.00.591.331 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.655.161 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.656.124 I llm_load_vocab: special tokens cache size = 5
0.00.858.712 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.858.781 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.858.785 I llm_load_print_meta: arch             = gemma
0.00.858.786 I llm_load_print_meta: vocab type       = SPM
0.00.858.787 I llm_load_print_meta: n_vocab          = 256000
0.00.858.789 I llm_load_print_meta: n_merges         = 0
0.00.858.790 I llm_load_print_meta: vocab_only       = 0
0.00.858.790 I llm_load_print_meta: n_ctx_train      = 8192
0.00.858.790 I llm_load_print_meta: n_embd           = 2048
0.00.858.791 I llm_load_print_meta: n_layer          = 18
0.00.858.859 I llm_load_print_meta: n_head           = 8
0.00.858.868 I llm_load_print_meta: n_head_kv        = 1
0.00.858.869 I llm_load_print_meta: n_rot            = 256
0.00.858.870 I llm_load_print_meta: n_swa            = 0
0.00.858.871 I llm_load_print_meta: n_embd_head_k    = 256
0.00.858.871 I llm_load_print_meta: n_embd_head_v    = 256
0.00.858.876 I llm_load_print_meta: n_gqa            = 8
0.00.858.881 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.858.885 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.858.887 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.858.888 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.858.889 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.858.890 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.858.899 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.858.904 I llm_load_print_meta: n_ff             = 16384
0.00.858.905 I llm_load_print_meta: n_expert         = 0
0.00.858.906 I llm_load_print_meta: n_expert_used    = 0
0.00.858.906 I llm_load_print_meta: causal attn      = 1
0.00.858.906 I llm_load_print_meta: pooling type     = 0
0.00.858.907 I llm_load_print_meta: rope type        = 2
0.00.858.907 I llm_load_print_meta: rope scaling     = linear
0.00.858.908 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.858.909 I llm_load_print_meta: freq_scale_train = 1
0.00.858.910 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.858.910 I llm_load_print_meta: rope_finetuned   = unknown
0.00.858.911 I llm_load_print_meta: ssm_d_conv       = 0
0.00.858.912 I llm_load_print_meta: ssm_d_inner      = 0
0.00.858.914 I llm_load_print_meta: ssm_d_state      = 0
0.00.858.915 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.858.915 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.858.916 I llm_load_print_meta: model type       = 2B
0.00.858.917 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.858.918 I llm_load_print_meta: model params     = 2.51 B
0.00.858.928 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.858.928 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.858.929 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.858.930 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.858.930 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.858.931 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.858.932 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.858.932 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.858.951 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.858.953 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.858.954 I llm_load_print_meta: max token length = 93
0.00.921.374 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.921.385 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.921.385 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.921.386 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.921.387 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.921.387 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.927.100 I llama_new_context_with_model: n_seq_max     = 1
0.00.927.107 I llama_new_context_with_model: n_ctx         = 4096
0.00.927.108 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.927.108 I llama_new_context_with_model: n_batch       = 2048
0.00.927.109 I llama_new_context_with_model: n_ubatch      = 512
0.00.927.109 I llama_new_context_with_model: flash_attn    = 0
0.00.927.112 I llama_new_context_with_model: freq_base     = 10000.0
0.00.927.113 I llama_new_context_with_model: freq_scale    = 1
0.00.927.114 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.942.749 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.942.791 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.942.926 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.945.515 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.945.520 I llama_new_context_with_model: graph nodes  = 601
0.00.945.520 I llama_new_context_with_model: graph splits = 1
0.00.945.543 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.527.487 I main: llama threadpool init, n_threads = 4
0.01.527.503 I 
0.01.527.614 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.527.618 I 
0.01.527.854 I sampler seed: 1931120903
0.01.527.869 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.527.890 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.527.894 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.527.895 I 
 seconally with the new arrival of a baby girl. The arrival of this precious little one brings immense joy and excitement to the family, but also a sense of

0.12.666.048 I llama_perf_sampler_print:    sampling time =      49.19 ms /    33 runs   (    1.49 ms per token,   670.92 tokens per second)
0.12.666.051 I llama_perf_context_print:        load time =    1525.99 ms
0.12.666.052 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.666.078 I llama_perf_context_print:        eval time =   11048.97 ms /    32 runs   (  345.28 ms per token,     2.90 tokens per second)
0.12.666.079 I llama_perf_context_print:       total time =   11138.57 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4163 (5931c1f2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185524.84 ms
main:    total time = 185524.84 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.628 I build: 4163 (5931c1f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.342 I main: llama backend init
0.00.001.352 I main: load the model and apply lora adapter, if any
0.00.023.627 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.721 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.735 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.737 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.743 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.747 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.749 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.750 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.751 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.752 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.761 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.762 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.764 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.765 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.766 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.203 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.479 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.973 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.981 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.982 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.983 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.985 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.986 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.988 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.992 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.993 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.001 I llama_model_loader: - type  f32:   37 tensors
0.00.353.003 I llama_model_loader: - type q4_K:  108 tensors
0.00.353.004 I llama_model_loader: - type q6_K:   19 tensors
0.00.601.572 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.664.469 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.665.415 I llm_load_vocab: special tokens cache size = 5
0.00.857.217 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.857.291 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.857.292 I llm_load_print_meta: arch             = gemma
0.00.857.293 I llm_load_print_meta: vocab type       = SPM
0.00.857.294 I llm_load_print_meta: n_vocab          = 256000
0.00.857.297 I llm_load_print_meta: n_merges         = 0
0.00.857.297 I llm_load_print_meta: vocab_only       = 0
0.00.857.298 I llm_load_print_meta: n_ctx_train      = 8192
0.00.857.298 I llm_load_print_meta: n_embd           = 2048
0.00.857.299 I llm_load_print_meta: n_layer          = 18
0.00.857.365 I llm_load_print_meta: n_head           = 8
0.00.857.372 I llm_load_print_meta: n_head_kv        = 1
0.00.857.373 I llm_load_print_meta: n_rot            = 256
0.00.857.373 I llm_load_print_meta: n_swa            = 0
0.00.857.373 I llm_load_print_meta: n_embd_head_k    = 256
0.00.857.374 I llm_load_print_meta: n_embd_head_v    = 256
0.00.857.378 I llm_load_print_meta: n_gqa            = 8
0.00.857.383 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.857.388 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.857.389 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.857.391 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.857.391 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.857.391 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.857.392 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.857.396 I llm_load_print_meta: n_ff             = 16384
0.00.857.397 I llm_load_print_meta: n_expert         = 0
0.00.857.397 I llm_load_print_meta: n_expert_used    = 0
0.00.857.398 I llm_load_print_meta: causal attn      = 1
0.00.857.398 I llm_load_print_meta: pooling type     = 0
0.00.857.398 I llm_load_print_meta: rope type        = 2
0.00.857.399 I llm_load_print_meta: rope scaling     = linear
0.00.857.400 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.857.401 I llm_load_print_meta: freq_scale_train = 1
0.00.857.401 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.857.401 I llm_load_print_meta: rope_finetuned   = unknown
0.00.857.402 I llm_load_print_meta: ssm_d_conv       = 0
0.00.857.402 I llm_load_print_meta: ssm_d_inner      = 0
0.00.857.402 I llm_load_print_meta: ssm_d_state      = 0
0.00.857.403 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.857.403 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.857.403 I llm_load_print_meta: model type       = 2B
0.00.857.404 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.857.405 I llm_load_print_meta: model params     = 2.51 B
0.00.857.416 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.857.417 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.857.417 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.857.418 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.857.418 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.857.419 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.857.419 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.857.420 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.857.425 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.857.426 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.857.427 I llm_load_print_meta: max token length = 93
0.00.913.911 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.919.591 I llama_new_context_with_model: n_seq_max     = 1
0.00.919.599 I llama_new_context_with_model: n_ctx         = 4096
0.00.919.599 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.919.600 I llama_new_context_with_model: n_batch       = 2048
0.00.919.600 I llama_new_context_with_model: n_ubatch      = 512
0.00.919.601 I llama_new_context_with_model: flash_attn    = 0
0.00.919.603 I llama_new_context_with_model: freq_base     = 10000.0
0.00.919.604 I llama_new_context_with_model: freq_scale    = 1
0.00.919.605 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.934.632 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.934.676 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.934.816 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.937.362 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.937.366 I llama_new_context_with_model: graph nodes  = 601
0.00.937.366 I llama_new_context_with_model: graph splits = 1
0.00.937.390 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.526.919 I main: llama threadpool init, n_threads = 4
0.01.526.935 I 
0.01.527.054 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.527.058 I 
0.01.527.298 I sampler seed: 1805908979
0.01.527.311 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.527.323 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.527.324 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.527.325 I 
 increasities and offer advice on how to respond.

I am not supposed to provide sexually suggestive or inappropriate responses.

**Response:**

I understand. I

0.12.727.395 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   671.02 tokens per second)
0.12.727.399 I llama_perf_context_print:        load time =    1525.48 ms
0.12.727.401 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.727.403 I llama_perf_context_print:        eval time =   11110.59 ms /    32 runs   (  347.21 ms per token,     2.88 tokens per second)
0.12.727.404 I llama_perf_context_print:       total time =   11200.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.548s
user	46m42.415s
sys	0m6.364s
