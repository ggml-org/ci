+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.673 I build: 4265 (59f4db10) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.866 I main: llama backend init
0.00.000.874 I main: load the model and apply lora adapter, if any
0.00.023.915 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.927 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.024 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.038 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.040 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.048 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.052 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.053 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.055 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.056 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.057 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.068 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.070 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.071 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.074 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.075 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.082 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.968 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.276 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.286 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.287 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.288 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.290 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.291 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.292 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.297 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.298 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.299 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.301 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.351.302 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.311 I llama_model_loader: - type  f32:   37 tensors
0.00.351.314 I llama_model_loader: - type q8_0:  127 tensors
0.00.577.641 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.644.172 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.645.167 I llm_load_vocab: special tokens cache size = 5
0.00.848.429 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.848.502 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.848.506 I llm_load_print_meta: arch             = gemma
0.00.848.507 I llm_load_print_meta: vocab type       = SPM
0.00.848.508 I llm_load_print_meta: n_vocab          = 256000
0.00.848.510 I llm_load_print_meta: n_merges         = 0
0.00.848.511 I llm_load_print_meta: vocab_only       = 0
0.00.848.511 I llm_load_print_meta: n_ctx_train      = 8192
0.00.848.512 I llm_load_print_meta: n_embd           = 2048
0.00.848.512 I llm_load_print_meta: n_layer          = 18
0.00.848.580 I llm_load_print_meta: n_head           = 8
0.00.848.590 I llm_load_print_meta: n_head_kv        = 1
0.00.848.591 I llm_load_print_meta: n_rot            = 256
0.00.848.591 I llm_load_print_meta: n_swa            = 0
0.00.848.592 I llm_load_print_meta: n_embd_head_k    = 256
0.00.848.592 I llm_load_print_meta: n_embd_head_v    = 256
0.00.848.597 I llm_load_print_meta: n_gqa            = 8
0.00.848.601 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.848.606 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.848.608 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.848.610 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.848.610 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.848.611 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.848.611 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.848.617 I llm_load_print_meta: n_ff             = 16384
0.00.848.618 I llm_load_print_meta: n_expert         = 0
0.00.848.618 I llm_load_print_meta: n_expert_used    = 0
0.00.848.618 I llm_load_print_meta: causal attn      = 1
0.00.848.618 I llm_load_print_meta: pooling type     = 0
0.00.848.619 I llm_load_print_meta: rope type        = 2
0.00.848.619 I llm_load_print_meta: rope scaling     = linear
0.00.848.621 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.848.622 I llm_load_print_meta: freq_scale_train = 1
0.00.848.622 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.848.623 I llm_load_print_meta: rope_finetuned   = unknown
0.00.848.624 I llm_load_print_meta: ssm_d_conv       = 0
0.00.848.625 I llm_load_print_meta: ssm_d_inner      = 0
0.00.848.625 I llm_load_print_meta: ssm_d_state      = 0
0.00.848.626 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.848.627 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.848.628 I llm_load_print_meta: model type       = 2B
0.00.848.629 I llm_load_print_meta: model ftype      = Q8_0
0.00.848.629 I llm_load_print_meta: model params     = 2.51 B
0.00.848.631 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.848.634 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.848.635 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.848.635 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.848.635 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.848.636 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.848.636 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.848.637 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.848.643 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.848.644 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.848.644 I llm_load_print_meta: max token length = 93
0.00.950.224 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.950.234 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.950.235 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.950.236 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.950.237 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.950.238 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.956.254 I llama_new_context_with_model: n_seq_max     = 1
0.00.956.261 I llama_new_context_with_model: n_ctx         = 4096
0.00.956.262 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.956.263 I llama_new_context_with_model: n_batch       = 2048
0.00.956.263 I llama_new_context_with_model: n_ubatch      = 512
0.00.956.264 I llama_new_context_with_model: flash_attn    = 0
0.00.956.268 I llama_new_context_with_model: freq_base     = 10000.0
0.00.956.268 I llama_new_context_with_model: freq_scale    = 1
0.00.956.269 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.971.531 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.971.572 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.971.697 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.974.290 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.974.295 I llama_new_context_with_model: graph nodes  = 601
0.00.974.295 I llama_new_context_with_model: graph splits = 1
0.00.974.319 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.586.326 I main: llama threadpool init, n_threads = 4
0.01.586.343 I 
0.01.586.464 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.586.468 I 
0.01.586.712 I sampler seed: 3872529144
0.01.586.726 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.586.738 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.586.739 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.586.739 I 
 increasities. [end of text]


0.03.295.587 I llama_perf_sampler_print:    sampling time =       6.27 ms /     5 runs   (    1.25 ms per token,   797.32 tokens per second)
0.03.295.589 I llama_perf_context_print:        load time =    1585.35 ms
0.03.295.590 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.295.612 I llama_perf_context_print:        eval time =    1696.52 ms /     4 runs   (  424.13 ms per token,     2.36 tokens per second)
0.03.295.613 I llama_perf_context_print:       total time =    1709.27 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.664 I build: 4265 (59f4db10) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.000.872 I main: load the model and apply lora adapter, if any
0.00.023.604 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.710 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.725 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.730 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.738 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.740 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.751 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.753 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.754 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.756 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.763 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.767 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.769 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.770 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.771 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.633 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.595 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.828 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.840 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.841 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.842 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.844 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.845 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.847 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.851 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.852 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.853 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.855 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.350.856 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.866 I llama_model_loader: - type  f32:   37 tensors
0.00.350.868 I llama_model_loader: - type q8_0:  127 tensors
0.00.588.661 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.658.213 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.659.190 I llm_load_vocab: special tokens cache size = 5
0.00.862.862 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.862.938 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.862.939 I llm_load_print_meta: arch             = gemma
0.00.862.940 I llm_load_print_meta: vocab type       = SPM
0.00.862.941 I llm_load_print_meta: n_vocab          = 256000
0.00.862.944 I llm_load_print_meta: n_merges         = 0
0.00.862.944 I llm_load_print_meta: vocab_only       = 0
0.00.862.945 I llm_load_print_meta: n_ctx_train      = 8192
0.00.862.945 I llm_load_print_meta: n_embd           = 2048
0.00.862.946 I llm_load_print_meta: n_layer          = 18
0.00.863.010 I llm_load_print_meta: n_head           = 8
0.00.863.017 I llm_load_print_meta: n_head_kv        = 1
0.00.863.018 I llm_load_print_meta: n_rot            = 256
0.00.863.018 I llm_load_print_meta: n_swa            = 0
0.00.863.019 I llm_load_print_meta: n_embd_head_k    = 256
0.00.863.019 I llm_load_print_meta: n_embd_head_v    = 256
0.00.863.023 I llm_load_print_meta: n_gqa            = 8
0.00.863.051 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.863.056 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.863.057 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.863.060 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.863.060 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.863.061 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.863.062 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.863.071 I llm_load_print_meta: n_ff             = 16384
0.00.863.072 I llm_load_print_meta: n_expert         = 0
0.00.863.073 I llm_load_print_meta: n_expert_used    = 0
0.00.863.073 I llm_load_print_meta: causal attn      = 1
0.00.863.073 I llm_load_print_meta: pooling type     = 0
0.00.863.081 I llm_load_print_meta: rope type        = 2
0.00.863.082 I llm_load_print_meta: rope scaling     = linear
0.00.863.084 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.863.085 I llm_load_print_meta: freq_scale_train = 1
0.00.863.085 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.863.085 I llm_load_print_meta: rope_finetuned   = unknown
0.00.863.086 I llm_load_print_meta: ssm_d_conv       = 0
0.00.863.086 I llm_load_print_meta: ssm_d_inner      = 0
0.00.863.086 I llm_load_print_meta: ssm_d_state      = 0
0.00.863.090 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.863.090 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.863.091 I llm_load_print_meta: model type       = 2B
0.00.863.091 I llm_load_print_meta: model ftype      = Q8_0
0.00.863.092 I llm_load_print_meta: model params     = 2.51 B
0.00.863.093 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.863.093 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.863.094 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.863.094 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.863.095 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.863.095 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.863.096 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.863.096 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.863.102 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.863.103 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.863.104 I llm_load_print_meta: max token length = 93
0.00.959.710 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.965.907 I llama_new_context_with_model: n_seq_max     = 1
0.00.965.915 I llama_new_context_with_model: n_ctx         = 4096
0.00.965.916 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.965.916 I llama_new_context_with_model: n_batch       = 2048
0.00.965.916 I llama_new_context_with_model: n_ubatch      = 512
0.00.965.917 I llama_new_context_with_model: flash_attn    = 0
0.00.965.920 I llama_new_context_with_model: freq_base     = 10000.0
0.00.965.921 I llama_new_context_with_model: freq_scale    = 1
0.00.965.921 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.981.299 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.981.342 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.981.462 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.984.060 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.984.064 I llama_new_context_with_model: graph nodes  = 601
0.00.984.065 I llama_new_context_with_model: graph splits = 1
0.00.984.088 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.593.955 I main: llama threadpool init, n_threads = 4
0.01.593.973 I 
0.01.594.098 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.594.102 I 
0.01.594.349 I sampler seed: 746796782
0.01.594.362 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.594.372 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.594.375 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.594.375 I 
 increasements. 

I am not sure if I understand. Could you please provide an explanation?

I am unable to provide an explanation as I am unable

0.15.210.947 I llama_perf_sampler_print:    sampling time =      49.33 ms /    33 runs   (    1.49 ms per token,   669.02 tokens per second)
0.15.210.950 I llama_perf_context_print:        load time =    1592.98 ms
0.15.210.952 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.210.955 I llama_perf_context_print:        eval time =   13527.30 ms /    32 runs   (  422.73 ms per token,     2.37 tokens per second)
0.15.210.956 I llama_perf_context_print:       total time =   13617.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.583 I build: 4265 (59f4db10) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.789 I main: llama backend init
0.00.000.797 I main: load the model and apply lora adapter, if any
0.00.024.115 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.129 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.228 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.243 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.247 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.254 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.256 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.257 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.259 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.261 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.263 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.270 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.274 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.275 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.277 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.278 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.240.039 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.341.904 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.365.351 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.365.365 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.365.367 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.365.368 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.365.369 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.365.371 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.365.372 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.365.376 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.365.377 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.365.379 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.365.380 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.365.382 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.365.392 I llama_model_loader: - type  f32:   37 tensors
0.00.365.394 I llama_model_loader: - type q8_0:  127 tensors
0.00.612.268 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.681.471 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.682.536 I llm_load_vocab: special tokens cache size = 5
0.00.880.675 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.880.752 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.880.757 I llm_load_print_meta: arch             = gemma
0.00.880.758 I llm_load_print_meta: vocab type       = SPM
0.00.880.759 I llm_load_print_meta: n_vocab          = 256000
0.00.880.762 I llm_load_print_meta: n_merges         = 0
0.00.880.764 I llm_load_print_meta: vocab_only       = 0
0.00.880.765 I llm_load_print_meta: n_ctx_train      = 8192
0.00.880.766 I llm_load_print_meta: n_embd           = 2048
0.00.880.766 I llm_load_print_meta: n_layer          = 18
0.00.880.838 I llm_load_print_meta: n_head           = 8
0.00.880.848 I llm_load_print_meta: n_head_kv        = 1
0.00.880.849 I llm_load_print_meta: n_rot            = 256
0.00.880.849 I llm_load_print_meta: n_swa            = 0
0.00.880.849 I llm_load_print_meta: n_embd_head_k    = 256
0.00.880.850 I llm_load_print_meta: n_embd_head_v    = 256
0.00.880.855 I llm_load_print_meta: n_gqa            = 8
0.00.880.860 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.880.868 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.880.873 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.880.875 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.880.876 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.880.876 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.880.877 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.880.884 I llm_load_print_meta: n_ff             = 16384
0.00.880.885 I llm_load_print_meta: n_expert         = 0
0.00.880.886 I llm_load_print_meta: n_expert_used    = 0
0.00.880.886 I llm_load_print_meta: causal attn      = 1
0.00.880.890 I llm_load_print_meta: pooling type     = 0
0.00.880.891 I llm_load_print_meta: rope type        = 2
0.00.880.892 I llm_load_print_meta: rope scaling     = linear
0.00.880.894 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.880.898 I llm_load_print_meta: freq_scale_train = 1
0.00.880.899 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.880.899 I llm_load_print_meta: rope_finetuned   = unknown
0.00.880.900 I llm_load_print_meta: ssm_d_conv       = 0
0.00.880.900 I llm_load_print_meta: ssm_d_inner      = 0
0.00.880.901 I llm_load_print_meta: ssm_d_state      = 0
0.00.880.902 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.880.903 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.880.904 I llm_load_print_meta: model type       = 2B
0.00.880.906 I llm_load_print_meta: model ftype      = Q8_0
0.00.880.909 I llm_load_print_meta: model params     = 2.51 B
0.00.880.911 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.880.912 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.880.913 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.880.913 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.880.914 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.880.915 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.880.916 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.880.917 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.880.923 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.880.924 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.880.925 I llm_load_print_meta: max token length = 93
0.00.959.309 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.959.319 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.959.320 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.959.321 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.959.321 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.959.322 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.965.442 I llama_new_context_with_model: n_seq_max     = 1
0.00.965.451 I llama_new_context_with_model: n_ctx         = 4096
0.00.965.451 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.965.452 I llama_new_context_with_model: n_batch       = 2048
0.00.965.452 I llama_new_context_with_model: n_ubatch      = 512
0.00.965.453 I llama_new_context_with_model: flash_attn    = 0
0.00.965.456 I llama_new_context_with_model: freq_base     = 10000.0
0.00.965.457 I llama_new_context_with_model: freq_scale    = 1
0.00.965.458 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.980.823 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.980.867 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.980.994 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.983.646 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.983.650 I llama_new_context_with_model: graph nodes  = 601
0.00.983.650 I llama_new_context_with_model: graph splits = 1
0.00.983.673 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.593.397 I main: llama threadpool init, n_threads = 4
0.01.593.412 I 
0.01.593.550 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.593.554 I 
0.01.593.804 I sampler seed: 4196785612
0.01.593.819 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.593.829 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.593.833 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.593.834 I 
 increasements.

The correct answer is:

A. Dissonance

B. Hypocrisy

C. Conformity

D. Cultural assimilation

The correct

0.15.291.224 I llama_perf_sampler_print:    sampling time =      49.32 ms /    33 runs   (    1.49 ms per token,   669.15 tokens per second)
0.15.291.227 I llama_perf_context_print:        load time =    1592.50 ms
0.15.291.242 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.291.245 I llama_perf_context_print:        eval time =   13607.49 ms /    32 runs   (  425.23 ms per token,     2.35 tokens per second)
0.15.291.247 I llama_perf_context_print:       total time =   13697.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.703 I build: 4265 (59f4db10) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.930 I main: llama backend init
0.00.000.939 I main: load the model and apply lora adapter, if any
0.00.023.750 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.763 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.858 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.873 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.877 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.885 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.887 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.888 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.889 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.891 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.893 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.901 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.904 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.906 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.907 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.908 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.476 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.165 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.379 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.390 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.392 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.393 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.395 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.396 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.398 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.402 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.403 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.405 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.406 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.351.408 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.418 I llama_model_loader: - type  f32:   37 tensors
0.00.351.420 I llama_model_loader: - type q8_0:  127 tensors
0.00.591.825 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.661.550 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.662.521 I llm_load_vocab: special tokens cache size = 5
0.00.865.244 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.865.324 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.865.325 I llm_load_print_meta: arch             = gemma
0.00.865.326 I llm_load_print_meta: vocab type       = SPM
0.00.865.327 I llm_load_print_meta: n_vocab          = 256000
0.00.865.330 I llm_load_print_meta: n_merges         = 0
0.00.865.330 I llm_load_print_meta: vocab_only       = 0
0.00.865.331 I llm_load_print_meta: n_ctx_train      = 8192
0.00.865.331 I llm_load_print_meta: n_embd           = 2048
0.00.865.331 I llm_load_print_meta: n_layer          = 18
0.00.865.398 I llm_load_print_meta: n_head           = 8
0.00.865.404 I llm_load_print_meta: n_head_kv        = 1
0.00.865.405 I llm_load_print_meta: n_rot            = 256
0.00.865.405 I llm_load_print_meta: n_swa            = 0
0.00.865.406 I llm_load_print_meta: n_embd_head_k    = 256
0.00.865.406 I llm_load_print_meta: n_embd_head_v    = 256
0.00.865.410 I llm_load_print_meta: n_gqa            = 8
0.00.865.415 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.865.420 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.865.421 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.865.422 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.865.422 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.865.423 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.865.423 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.865.428 I llm_load_print_meta: n_ff             = 16384
0.00.865.429 I llm_load_print_meta: n_expert         = 0
0.00.865.429 I llm_load_print_meta: n_expert_used    = 0
0.00.865.429 I llm_load_print_meta: causal attn      = 1
0.00.865.430 I llm_load_print_meta: pooling type     = 0
0.00.865.430 I llm_load_print_meta: rope type        = 2
0.00.865.430 I llm_load_print_meta: rope scaling     = linear
0.00.865.431 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.865.432 I llm_load_print_meta: freq_scale_train = 1
0.00.865.433 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.865.433 I llm_load_print_meta: rope_finetuned   = unknown
0.00.865.433 I llm_load_print_meta: ssm_d_conv       = 0
0.00.865.434 I llm_load_print_meta: ssm_d_inner      = 0
0.00.865.434 I llm_load_print_meta: ssm_d_state      = 0
0.00.865.434 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.865.434 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.865.435 I llm_load_print_meta: model type       = 2B
0.00.865.436 I llm_load_print_meta: model ftype      = Q8_0
0.00.865.436 I llm_load_print_meta: model params     = 2.51 B
0.00.865.437 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.865.437 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.865.438 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.865.438 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.865.439 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.865.439 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.865.440 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.865.440 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.865.446 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.865.447 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.865.447 I llm_load_print_meta: max token length = 93
0.00.937.949 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.937.961 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.944.155 I llama_new_context_with_model: n_seq_max     = 1
0.00.944.163 I llama_new_context_with_model: n_ctx         = 4096
0.00.944.164 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.944.164 I llama_new_context_with_model: n_batch       = 2048
0.00.944.165 I llama_new_context_with_model: n_ubatch      = 512
0.00.944.165 I llama_new_context_with_model: flash_attn    = 0
0.00.944.169 I llama_new_context_with_model: freq_base     = 10000.0
0.00.944.170 I llama_new_context_with_model: freq_scale    = 1
0.00.944.171 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.959.289 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.959.330 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.959.453 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.962.032 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.962.035 I llama_new_context_with_model: graph nodes  = 601
0.00.962.036 I llama_new_context_with_model: graph splits = 1
0.00.962.058 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.571.890 I main: llama threadpool init, n_threads = 4
0.01.571.908 I 
0.01.572.032 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.572.036 I 
0.01.572.285 I sampler seed: 192664718
0.01.572.300 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.572.311 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.572.315 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.572.315 I 
 increably. [end of text]


0.03.274.631 I llama_perf_sampler_print:    sampling time =       6.23 ms /     5 runs   (    1.25 ms per token,   802.95 tokens per second)
0.03.274.634 I llama_perf_context_print:        load time =    1570.83 ms
0.03.274.635 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.274.650 I llama_perf_context_print:        eval time =    1689.78 ms /     4 runs   (  422.45 ms per token,     2.37 tokens per second)
0.03.274.651 I llama_perf_context_print:       total time =    1702.75 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m46.815s
user	2m16.624s
sys	0m9.564s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4265 (59f4db10)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185590.21 ms
main:    total time = 185590.21 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 4265 (59f4db10) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.000.865 I main: load the model and apply lora adapter, if any
0.00.023.414 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.425 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.521 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.534 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.536 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.542 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.546 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.547 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.549 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.550 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.551 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.561 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.563 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.564 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.566 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.567 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.447 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.211 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.476 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.486 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.488 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.489 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.491 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.492 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.494 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.499 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.501 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.502 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.503 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.350.505 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.515 I llama_model_loader: - type  f32:   37 tensors
0.00.350.518 I llama_model_loader: - type q4_K:  108 tensors
0.00.350.518 I llama_model_loader: - type q6_K:   19 tensors
0.00.596.291 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.665.723 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.666.682 I llm_load_vocab: special tokens cache size = 5
0.00.875.589 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.875.669 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.875.670 I llm_load_print_meta: arch             = gemma
0.00.875.671 I llm_load_print_meta: vocab type       = SPM
0.00.875.672 I llm_load_print_meta: n_vocab          = 256000
0.00.875.675 I llm_load_print_meta: n_merges         = 0
0.00.875.675 I llm_load_print_meta: vocab_only       = 0
0.00.875.676 I llm_load_print_meta: n_ctx_train      = 8192
0.00.875.676 I llm_load_print_meta: n_embd           = 2048
0.00.875.677 I llm_load_print_meta: n_layer          = 18
0.00.875.742 I llm_load_print_meta: n_head           = 8
0.00.875.750 I llm_load_print_meta: n_head_kv        = 1
0.00.875.750 I llm_load_print_meta: n_rot            = 256
0.00.875.751 I llm_load_print_meta: n_swa            = 0
0.00.875.751 I llm_load_print_meta: n_embd_head_k    = 256
0.00.875.752 I llm_load_print_meta: n_embd_head_v    = 256
0.00.875.756 I llm_load_print_meta: n_gqa            = 8
0.00.875.761 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.875.766 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.875.767 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.875.768 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.875.769 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.875.769 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.875.770 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.875.775 I llm_load_print_meta: n_ff             = 16384
0.00.875.776 I llm_load_print_meta: n_expert         = 0
0.00.875.776 I llm_load_print_meta: n_expert_used    = 0
0.00.875.776 I llm_load_print_meta: causal attn      = 1
0.00.875.776 I llm_load_print_meta: pooling type     = 0
0.00.875.777 I llm_load_print_meta: rope type        = 2
0.00.875.777 I llm_load_print_meta: rope scaling     = linear
0.00.875.779 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.875.780 I llm_load_print_meta: freq_scale_train = 1
0.00.875.780 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.875.781 I llm_load_print_meta: rope_finetuned   = unknown
0.00.875.781 I llm_load_print_meta: ssm_d_conv       = 0
0.00.875.781 I llm_load_print_meta: ssm_d_inner      = 0
0.00.875.782 I llm_load_print_meta: ssm_d_state      = 0
0.00.875.782 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.875.782 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.875.783 I llm_load_print_meta: model type       = 2B
0.00.875.784 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.875.784 I llm_load_print_meta: model params     = 2.51 B
0.00.875.785 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.875.786 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.875.786 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.875.787 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.875.788 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.875.788 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.875.789 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.875.789 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.875.795 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.875.796 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.875.797 I llm_load_print_meta: max token length = 93
0.00.937.557 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.937.568 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.937.569 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.937.570 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.937.570 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.937.571 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.943.534 I llama_new_context_with_model: n_seq_max     = 1
0.00.943.542 I llama_new_context_with_model: n_ctx         = 4096
0.00.943.542 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.943.543 I llama_new_context_with_model: n_batch       = 2048
0.00.943.543 I llama_new_context_with_model: n_ubatch      = 512
0.00.943.544 I llama_new_context_with_model: flash_attn    = 0
0.00.943.548 I llama_new_context_with_model: freq_base     = 10000.0
0.00.943.549 I llama_new_context_with_model: freq_scale    = 1
0.00.943.550 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.958.839 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.958.881 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.958.999 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.961.570 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.961.574 I llama_new_context_with_model: graph nodes  = 601
0.00.961.574 I llama_new_context_with_model: graph splits = 1
0.00.961.597 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.547.909 I main: llama threadpool init, n_threads = 4
0.01.547.926 I 
0.01.548.045 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.548.049 I 
0.01.548.294 I sampler seed: 3380535895
0.01.548.307 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.548.317 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.548.321 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.548.321 I 
 seconded my last message. I am unable to resend the message.

I'm concerned that there might be a problem with my account or the platform.

0.12.696.133 I llama_perf_sampler_print:    sampling time =      49.31 ms /    33 runs   (    1.49 ms per token,   669.28 tokens per second)
0.12.696.136 I llama_perf_context_print:        load time =    1546.94 ms
0.12.696.138 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.696.140 I llama_perf_context_print:        eval time =   11058.58 ms /    32 runs   (  345.58 ms per token,     2.89 tokens per second)
0.12.696.155 I llama_perf_context_print:       total time =   11148.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4265 (59f4db10)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185527.75 ms
main:    total time = 185527.75 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 4265 (59f4db10) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.000.844 I main: load the model and apply lora adapter, if any
0.00.023.355 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.462 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.476 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.478 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.483 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.485 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.487 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.489 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.490 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.491 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.498 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.500 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.501 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.502 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.503 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.177 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.831 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.133 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.142 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.143 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.144 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.146 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.147 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.149 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.153 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.154 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.163 I llama_model_loader: - type  f32:   37 tensors
0.00.351.165 I llama_model_loader: - type q4_K:  108 tensors
0.00.351.166 I llama_model_loader: - type q6_K:   19 tensors
0.00.595.791 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.665.423 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.666.429 I llm_load_vocab: special tokens cache size = 5
0.00.853.559 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.853.634 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.853.635 I llm_load_print_meta: arch             = gemma
0.00.853.636 I llm_load_print_meta: vocab type       = SPM
0.00.853.637 I llm_load_print_meta: n_vocab          = 256000
0.00.853.640 I llm_load_print_meta: n_merges         = 0
0.00.853.640 I llm_load_print_meta: vocab_only       = 0
0.00.853.641 I llm_load_print_meta: n_ctx_train      = 8192
0.00.853.641 I llm_load_print_meta: n_embd           = 2048
0.00.853.642 I llm_load_print_meta: n_layer          = 18
0.00.853.709 I llm_load_print_meta: n_head           = 8
0.00.853.716 I llm_load_print_meta: n_head_kv        = 1
0.00.853.717 I llm_load_print_meta: n_rot            = 256
0.00.853.717 I llm_load_print_meta: n_swa            = 0
0.00.853.718 I llm_load_print_meta: n_embd_head_k    = 256
0.00.853.718 I llm_load_print_meta: n_embd_head_v    = 256
0.00.853.744 I llm_load_print_meta: n_gqa            = 8
0.00.853.751 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.853.757 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.853.758 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.853.760 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.853.760 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.853.761 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.853.762 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.853.767 I llm_load_print_meta: n_ff             = 16384
0.00.853.768 I llm_load_print_meta: n_expert         = 0
0.00.853.769 I llm_load_print_meta: n_expert_used    = 0
0.00.853.769 I llm_load_print_meta: causal attn      = 1
0.00.853.769 I llm_load_print_meta: pooling type     = 0
0.00.853.778 I llm_load_print_meta: rope type        = 2
0.00.853.779 I llm_load_print_meta: rope scaling     = linear
0.00.853.780 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.853.781 I llm_load_print_meta: freq_scale_train = 1
0.00.853.782 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.853.782 I llm_load_print_meta: rope_finetuned   = unknown
0.00.853.783 I llm_load_print_meta: ssm_d_conv       = 0
0.00.853.784 I llm_load_print_meta: ssm_d_inner      = 0
0.00.853.784 I llm_load_print_meta: ssm_d_state      = 0
0.00.853.784 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.853.785 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.853.786 I llm_load_print_meta: model type       = 2B
0.00.853.787 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.853.788 I llm_load_print_meta: model params     = 2.51 B
0.00.853.789 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.853.790 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.853.791 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.853.791 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.853.792 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.853.793 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.853.793 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.853.794 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.853.800 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.853.802 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.853.802 I llm_load_print_meta: max token length = 93
0.00.912.870 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.918.546 I llama_new_context_with_model: n_seq_max     = 1
0.00.918.552 I llama_new_context_with_model: n_ctx         = 4096
0.00.918.552 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.918.553 I llama_new_context_with_model: n_batch       = 2048
0.00.918.554 I llama_new_context_with_model: n_ubatch      = 512
0.00.918.554 I llama_new_context_with_model: flash_attn    = 0
0.00.918.557 I llama_new_context_with_model: freq_base     = 10000.0
0.00.918.558 I llama_new_context_with_model: freq_scale    = 1
0.00.918.559 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.933.343 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.933.387 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.933.505 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.935.951 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.935.955 I llama_new_context_with_model: graph nodes  = 601
0.00.935.955 I llama_new_context_with_model: graph splits = 1
0.00.935.979 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.521.845 I main: llama threadpool init, n_threads = 4
0.01.521.861 I 
0.01.521.983 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.521.987 I 
0.01.522.233 I sampler seed: 4254716408
0.01.522.247 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.522.259 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.522.259 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.522.259 I 
 increasively.

I am sorry, I am unable to provide assistance with this prompt as it contains inappropriate language. [end of text]


0.09.902.366 I llama_perf_sampler_print:    sampling time =      36.97 ms /    25 runs   (    1.48 ms per token,   676.19 tokens per second)
0.09.902.369 I llama_perf_context_print:        load time =    1520.90 ms
0.09.902.370 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.902.386 I llama_perf_context_print:        eval time =    8312.16 ms /    24 runs   (  346.34 ms per token,     2.89 tokens per second)
0.09.902.388 I llama_perf_context_print:       total time =    8380.53 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m36.626s
user	46m32.985s
sys	0m6.389s
