+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.580 I build: 4057 (59792ffb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.785 I main: llama backend init
0.00.000.924 I main: load the model and apply lora adapter, if any
0.00.024.133 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.142 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.149 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.154 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.155 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.159 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.160 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.161 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.162 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.163 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.164 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.168 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.169 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.170 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.171 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.172 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.052.102 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.128.405 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.135.282 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.135.290 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.135.290 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.135.291 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.135.291 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.135.292 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.135.293 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.135.296 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.135.296 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.135.297 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.135.297 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.135.298 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.135.301 I llama_model_loader: - type  f32:   37 tensors
0.00.135.303 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.302 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.583 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.296 I llm_load_vocab: special tokens cache size = 5
0.00.281.769 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.787 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.788 I llm_load_print_meta: arch             = gemma
0.00.281.788 I llm_load_print_meta: vocab type       = SPM
0.00.281.789 I llm_load_print_meta: n_vocab          = 256000
0.00.281.790 I llm_load_print_meta: n_merges         = 0
0.00.281.790 I llm_load_print_meta: vocab_only       = 0
0.00.281.790 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.791 I llm_load_print_meta: n_embd           = 2048
0.00.281.791 I llm_load_print_meta: n_layer          = 18
0.00.281.808 I llm_load_print_meta: n_head           = 8
0.00.281.809 I llm_load_print_meta: n_head_kv        = 1
0.00.281.810 I llm_load_print_meta: n_rot            = 256
0.00.281.810 I llm_load_print_meta: n_swa            = 0
0.00.281.811 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.812 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.813 I llm_load_print_meta: n_gqa            = 8
0.00.281.815 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.816 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.817 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.819 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.820 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.820 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.821 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.822 I llm_load_print_meta: n_ff             = 16384
0.00.281.823 I llm_load_print_meta: n_expert         = 0
0.00.281.823 I llm_load_print_meta: n_expert_used    = 0
0.00.281.824 I llm_load_print_meta: causal attn      = 1
0.00.281.824 I llm_load_print_meta: pooling type     = 0
0.00.281.827 I llm_load_print_meta: rope type        = 2
0.00.281.827 I llm_load_print_meta: rope scaling     = linear
0.00.281.829 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.830 I llm_load_print_meta: freq_scale_train = 1
0.00.281.830 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.831 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.832 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.832 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.832 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.833 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.833 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.834 I llm_load_print_meta: model type       = 2B
0.00.281.835 I llm_load_print_meta: model ftype      = Q8_0
0.00.281.836 I llm_load_print_meta: model params     = 2.51 B
0.00.281.838 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.281.838 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.839 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.840 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.841 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.841 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.842 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.843 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.844 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.845 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.845 I llm_load_print_meta: max token length = 93
0.00.383.534 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.383.540 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.383.541 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.383.541 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.383.542 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.383.542 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.389.095 I llama_new_context_with_model: n_seq_max     = 1
0.00.389.101 I llama_new_context_with_model: n_ctx         = 4096
0.00.389.101 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.389.102 I llama_new_context_with_model: n_batch       = 2048
0.00.389.102 I llama_new_context_with_model: n_ubatch      = 512
0.00.389.102 I llama_new_context_with_model: flash_attn    = 0
0.00.389.105 I llama_new_context_with_model: freq_base     = 10000.0
0.00.389.106 I llama_new_context_with_model: freq_scale    = 1
0.00.389.107 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.404.096 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.404.110 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.404.204 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.405.449 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.405.455 I llama_new_context_with_model: graph nodes  = 601
0.00.405.456 I llama_new_context_with_model: graph splits = 1
0.00.405.457 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.492.875 I main: llama threadpool init, n_threads = 4
0.00.492.887 I 
0.00.492.972 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.492.975 I 
0.00.493.023 I sampler seed: 140988256
0.00.493.035 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.493.038 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.493.042 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.493.043 I 
 increably, and the room buzzed with a nervous excitement.

As the clock ticked down, the tension built like a towering storm cloud. The countdown had

0.02.764.088 I llama_perf_sampler_print:    sampling time =       5.46 ms /    33 runs   (    0.17 ms per token,  6039.53 tokens per second)
0.02.764.090 I llama_perf_context_print:        load time =     491.93 ms
0.02.764.091 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.764.093 I llama_perf_context_print:        eval time =    2251.00 ms /    32 runs   (   70.34 ms per token,    14.22 tokens per second)
0.02.764.093 I llama_perf_context_print:       total time =    2271.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.595 I build: 4057 (59792ffb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.793 I main: llama backend init
0.00.000.928 I main: load the model and apply lora adapter, if any
0.00.021.517 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.531 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.538 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.539 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.543 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.543 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.544 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.544 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.545 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.545 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.551 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.552 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.553 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.553 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.554 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.156 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.671 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.557 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.564 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.564 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.565 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.565 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.566 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.567 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.569 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.570 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.570 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.571 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.572 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.575 I llama_model_loader: - type  f32:   37 tensors
0.00.132.576 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.900 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.607 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.153 I llm_load_vocab: special tokens cache size = 5
0.00.263.305 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.320 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.321 I llm_load_print_meta: arch             = gemma
0.00.263.322 I llm_load_print_meta: vocab type       = SPM
0.00.263.322 I llm_load_print_meta: n_vocab          = 256000
0.00.263.323 I llm_load_print_meta: n_merges         = 0
0.00.263.323 I llm_load_print_meta: vocab_only       = 0
0.00.263.323 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.324 I llm_load_print_meta: n_embd           = 2048
0.00.263.324 I llm_load_print_meta: n_layer          = 18
0.00.263.335 I llm_load_print_meta: n_head           = 8
0.00.263.336 I llm_load_print_meta: n_head_kv        = 1
0.00.263.336 I llm_load_print_meta: n_rot            = 256
0.00.263.337 I llm_load_print_meta: n_swa            = 0
0.00.263.338 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.338 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.339 I llm_load_print_meta: n_gqa            = 8
0.00.263.340 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.341 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.342 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.343 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.343 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.344 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.344 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.345 I llm_load_print_meta: n_ff             = 16384
0.00.263.346 I llm_load_print_meta: n_expert         = 0
0.00.263.346 I llm_load_print_meta: n_expert_used    = 0
0.00.263.346 I llm_load_print_meta: causal attn      = 1
0.00.263.347 I llm_load_print_meta: pooling type     = 0
0.00.263.351 I llm_load_print_meta: rope type        = 2
0.00.263.351 I llm_load_print_meta: rope scaling     = linear
0.00.263.352 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.353 I llm_load_print_meta: freq_scale_train = 1
0.00.263.353 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.354 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.354 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.354 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.354 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.355 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.355 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.356 I llm_load_print_meta: model type       = 2B
0.00.263.357 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.358 I llm_load_print_meta: model params     = 2.51 B
0.00.263.358 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.359 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.359 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.359 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.360 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.360 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.361 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.361 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.362 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.363 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.363 I llm_load_print_meta: max token length = 93
0.00.358.999 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.364.400 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.407 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.408 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.408 I llama_new_context_with_model: n_batch       = 2048
0.00.364.409 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.410 I llama_new_context_with_model: flash_attn    = 0
0.00.364.414 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.415 I llama_new_context_with_model: freq_scale    = 1
0.00.364.416 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.843 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.858 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.961 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.185 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.192 I llama_new_context_with_model: graph nodes  = 601
0.00.382.192 I llama_new_context_with_model: graph splits = 1
0.00.382.194 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.467.213 I main: llama threadpool init, n_threads = 4
0.00.467.228 I 
0.00.467.300 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.467.304 I 
0.00.467.343 I sampler seed: 1355418193
0.00.467.355 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.467.358 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.467.359 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.467.367 I 
 increasities, which are both a part of the curriculum at the school, and a significant number of students are failing.

**Possible Causes**

* Lack

0.02.667.215 I llama_perf_sampler_print:    sampling time =       5.00 ms /    33 runs   (    0.15 ms per token,  6603.96 tokens per second)
0.02.667.218 I llama_perf_context_print:        load time =     466.26 ms
0.02.667.219 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.667.220 I llama_perf_context_print:        eval time =    2180.78 ms /    32 runs   (   68.15 ms per token,    14.67 tokens per second)
0.02.667.221 I llama_perf_context_print:       total time =    2200.01 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.550 I build: 4057 (59792ffb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.769 I main: llama backend init
0.00.000.899 I main: load the model and apply lora adapter, if any
0.00.023.144 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.153 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.160 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.169 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.171 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.174 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.179 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.180 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.180 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.181 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.181 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.185 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.185 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.186 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.186 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.187 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.364 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.047 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.930 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.937 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.938 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.939 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.939 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.940 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.941 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.943 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.943 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.945 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.946 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.137.947 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.137.950 I llama_model_loader: - type  f32:   37 tensors
0.00.137.951 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.696 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.683 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.257 I llm_load_vocab: special tokens cache size = 5
0.00.270.384 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.401 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.401 I llm_load_print_meta: arch             = gemma
0.00.270.402 I llm_load_print_meta: vocab type       = SPM
0.00.270.402 I llm_load_print_meta: n_vocab          = 256000
0.00.270.403 I llm_load_print_meta: n_merges         = 0
0.00.270.403 I llm_load_print_meta: vocab_only       = 0
0.00.270.403 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.404 I llm_load_print_meta: n_embd           = 2048
0.00.270.404 I llm_load_print_meta: n_layer          = 18
0.00.270.415 I llm_load_print_meta: n_head           = 8
0.00.270.416 I llm_load_print_meta: n_head_kv        = 1
0.00.270.418 I llm_load_print_meta: n_rot            = 256
0.00.270.418 I llm_load_print_meta: n_swa            = 0
0.00.270.419 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.419 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.421 I llm_load_print_meta: n_gqa            = 8
0.00.270.422 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.424 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.426 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.428 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.428 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.429 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.430 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.434 I llm_load_print_meta: n_ff             = 16384
0.00.270.434 I llm_load_print_meta: n_expert         = 0
0.00.270.435 I llm_load_print_meta: n_expert_used    = 0
0.00.270.436 I llm_load_print_meta: causal attn      = 1
0.00.270.436 I llm_load_print_meta: pooling type     = 0
0.00.270.436 I llm_load_print_meta: rope type        = 2
0.00.270.437 I llm_load_print_meta: rope scaling     = linear
0.00.270.438 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.439 I llm_load_print_meta: freq_scale_train = 1
0.00.270.440 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.441 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.441 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.442 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.443 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.443 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.444 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.445 I llm_load_print_meta: model type       = 2B
0.00.270.446 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.447 I llm_load_print_meta: model params     = 2.51 B
0.00.270.449 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.449 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.450 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.451 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.451 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.452 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.453 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.453 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.453 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.454 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.455 I llm_load_print_meta: max token length = 93
0.00.362.875 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.362.880 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.362.881 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.362.881 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.362.882 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.362.883 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.368.134 I llama_new_context_with_model: n_seq_max     = 1
0.00.368.140 I llama_new_context_with_model: n_ctx         = 4096
0.00.368.140 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.368.141 I llama_new_context_with_model: n_batch       = 2048
0.00.368.141 I llama_new_context_with_model: n_ubatch      = 512
0.00.368.142 I llama_new_context_with_model: flash_attn    = 0
0.00.368.143 I llama_new_context_with_model: freq_base     = 10000.0
0.00.368.145 I llama_new_context_with_model: freq_scale    = 1
0.00.368.146 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.384.476 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.491 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.585 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.824 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.833 I llama_new_context_with_model: graph nodes  = 601
0.00.385.833 I llama_new_context_with_model: graph splits = 1
0.00.385.834 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.478.097 I main: llama threadpool init, n_threads = 4
0.00.478.111 I 
0.00.478.204 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.478.208 I 
0.00.478.261 I sampler seed: 2288095089
0.00.478.272 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.478.275 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.478.276 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.478.278 I 
 increasities. [end of text]


0.00.753.679 I llama_perf_sampler_print:    sampling time =       0.66 ms /     5 runs   (    0.13 ms per token,  7621.95 tokens per second)
0.00.753.681 I llama_perf_context_print:        load time =     477.18 ms
0.00.753.682 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.753.683 I llama_perf_context_print:        eval time =     271.57 ms /     4 runs   (   67.89 ms per token,    14.73 tokens per second)
0.00.753.684 I llama_perf_context_print:       total time =     275.59 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.555 I build: 4057 (59792ffb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.754 I main: llama backend init
0.00.000.887 I main: load the model and apply lora adapter, if any
0.00.022.711 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.721 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.728 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.736 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.737 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.750 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.753 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.754 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.754 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.755 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.755 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.759 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.759 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.760 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.760 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.761 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.120 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.661 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.670 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.676 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.676 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.677 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.678 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.678 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.679 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.681 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.682 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.682 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.683 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.684 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.687 I llama_model_loader: - type  f32:   37 tensors
0.00.133.688 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.440 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.870 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.427 I llm_load_vocab: special tokens cache size = 5
0.00.267.723 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.741 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.742 I llm_load_print_meta: arch             = gemma
0.00.267.742 I llm_load_print_meta: vocab type       = SPM
0.00.267.743 I llm_load_print_meta: n_vocab          = 256000
0.00.267.743 I llm_load_print_meta: n_merges         = 0
0.00.267.744 I llm_load_print_meta: vocab_only       = 0
0.00.267.744 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.745 I llm_load_print_meta: n_embd           = 2048
0.00.267.745 I llm_load_print_meta: n_layer          = 18
0.00.267.757 I llm_load_print_meta: n_head           = 8
0.00.267.758 I llm_load_print_meta: n_head_kv        = 1
0.00.267.758 I llm_load_print_meta: n_rot            = 256
0.00.267.759 I llm_load_print_meta: n_swa            = 0
0.00.267.759 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.760 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.761 I llm_load_print_meta: n_gqa            = 8
0.00.267.762 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.763 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.764 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.765 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.765 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.766 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.766 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.768 I llm_load_print_meta: n_ff             = 16384
0.00.267.768 I llm_load_print_meta: n_expert         = 0
0.00.267.768 I llm_load_print_meta: n_expert_used    = 0
0.00.267.769 I llm_load_print_meta: causal attn      = 1
0.00.267.769 I llm_load_print_meta: pooling type     = 0
0.00.267.769 I llm_load_print_meta: rope type        = 2
0.00.267.770 I llm_load_print_meta: rope scaling     = linear
0.00.267.771 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.772 I llm_load_print_meta: freq_scale_train = 1
0.00.267.772 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.773 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.773 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.773 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.774 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.774 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.774 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.776 I llm_load_print_meta: model type       = 2B
0.00.267.776 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.777 I llm_load_print_meta: model params     = 2.51 B
0.00.267.778 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.779 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.782 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.782 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.783 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.783 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.783 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.784 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.784 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.784 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.785 I llm_load_print_meta: max token length = 93
0.00.338.874 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.338.879 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.344.068 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.074 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.074 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.075 I llama_new_context_with_model: n_batch       = 2048
0.00.344.075 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.075 I llama_new_context_with_model: flash_attn    = 0
0.00.344.077 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.078 I llama_new_context_with_model: freq_scale    = 1
0.00.344.079 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.359.189 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.359.204 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.359.293 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.526 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.360.533 I llama_new_context_with_model: graph nodes  = 601
0.00.360.533 I llama_new_context_with_model: graph splits = 1
0.00.360.535 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.447.960 I main: llama threadpool init, n_threads = 4
0.00.447.973 I 
0.00.448.046 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.448.050 I 
0.00.448.091 I sampler seed: 3734009363
0.00.448.102 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.448.105 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.448.106 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.448.106 I 
 increasities of the modern world.

This phrase describes a trend or situation that is widely discussed but lacks concrete evidence or empirical support. It often conveys a sense

0.02.841.947 I llama_perf_sampler_print:    sampling time =       4.84 ms /    33 runs   (    0.15 ms per token,  6815.37 tokens per second)
0.02.841.950 I llama_perf_context_print:        load time =     447.05 ms
0.02.841.951 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.841.953 I llama_perf_context_print:        eval time =    2374.29 ms /    32 runs   (   74.20 ms per token,    13.48 tokens per second)
0.02.841.954 I llama_perf_context_print:       total time =    2394.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.503s
user	0m31.397s
sys	0m9.486s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4057 (59792ffb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32090.82 ms
main:    total time = 32090.82 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.571 I build: 4057 (59792ffb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.764 I main: llama backend init
0.00.000.894 I main: load the model and apply lora adapter, if any
0.00.021.794 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.804 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.813 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.818 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.819 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.823 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.824 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.825 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.825 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.826 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.826 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.832 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.833 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.833 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.834 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.834 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.360 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.573 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.415 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.422 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.423 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.424 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.425 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.425 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.426 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.430 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.431 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.432 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.433 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.434 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.438 I llama_model_loader: - type  f32:   37 tensors
0.00.132.439 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.440 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.159 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.541 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.041 I llm_load_vocab: special tokens cache size = 5
0.00.269.330 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.345 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.345 I llm_load_print_meta: arch             = gemma
0.00.269.346 I llm_load_print_meta: vocab type       = SPM
0.00.269.347 I llm_load_print_meta: n_vocab          = 256000
0.00.269.348 I llm_load_print_meta: n_merges         = 0
0.00.269.348 I llm_load_print_meta: vocab_only       = 0
0.00.269.349 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.349 I llm_load_print_meta: n_embd           = 2048
0.00.269.349 I llm_load_print_meta: n_layer          = 18
0.00.269.361 I llm_load_print_meta: n_head           = 8
0.00.269.362 I llm_load_print_meta: n_head_kv        = 1
0.00.269.362 I llm_load_print_meta: n_rot            = 256
0.00.269.363 I llm_load_print_meta: n_swa            = 0
0.00.269.363 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.363 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.364 I llm_load_print_meta: n_gqa            = 8
0.00.269.366 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.367 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.368 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.369 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.370 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.370 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.371 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.372 I llm_load_print_meta: n_ff             = 16384
0.00.269.375 I llm_load_print_meta: n_expert         = 0
0.00.269.375 I llm_load_print_meta: n_expert_used    = 0
0.00.269.376 I llm_load_print_meta: causal attn      = 1
0.00.269.376 I llm_load_print_meta: pooling type     = 0
0.00.269.376 I llm_load_print_meta: rope type        = 2
0.00.269.377 I llm_load_print_meta: rope scaling     = linear
0.00.269.378 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.379 I llm_load_print_meta: freq_scale_train = 1
0.00.269.379 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.379 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.380 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.380 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.380 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.380 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.381 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.381 I llm_load_print_meta: model type       = 2B
0.00.269.382 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.269.383 I llm_load_print_meta: model params     = 2.51 B
0.00.269.384 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.269.386 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.386 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.387 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.387 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.387 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.388 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.388 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.388 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.389 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.389 I llm_load_print_meta: max token length = 93
0.00.331.179 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.331.185 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.331.186 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.331.187 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.331.187 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.331.188 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.336.374 I llama_new_context_with_model: n_seq_max     = 1
0.00.336.380 I llama_new_context_with_model: n_ctx         = 4096
0.00.336.380 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.336.381 I llama_new_context_with_model: n_batch       = 2048
0.00.336.381 I llama_new_context_with_model: n_ubatch      = 512
0.00.336.382 I llama_new_context_with_model: flash_attn    = 0
0.00.336.384 I llama_new_context_with_model: freq_base     = 10000.0
0.00.336.385 I llama_new_context_with_model: freq_scale    = 1
0.00.336.386 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.351.588 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.351.603 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.692 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.903 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.908 I llama_new_context_with_model: graph nodes  = 601
0.00.352.909 I llama_new_context_with_model: graph splits = 1
0.00.352.910 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.428.817 I main: llama threadpool init, n_threads = 4
0.00.428.830 I 
0.00.428.905 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.428.908 I 
0.00.428.951 I sampler seed: 4134510332
0.00.428.963 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.428.965 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.428.966 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.428.966 I 
 increamically! 

I am unable to generate a response due to the limitations set in place by my programming. [end of text]


0.01.657.268 I llama_perf_sampler_print:    sampling time =       3.83 ms /    25 runs   (    0.15 ms per token,  6530.83 tokens per second)
0.01.657.270 I llama_perf_context_print:        load time =     427.89 ms
0.01.657.271 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.657.272 I llama_perf_context_print:        eval time =    1214.35 ms /    24 runs   (   50.60 ms per token,    19.76 tokens per second)
0.01.657.273 I llama_perf_context_print:       total time =    1228.46 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4057 (59792ffb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32128.47 ms
main:    total time = 32128.47 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.544 I build: 4057 (59792ffb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.739 I main: llama backend init
0.00.000.875 I main: load the model and apply lora adapter, if any
0.00.021.348 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.364 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.372 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.372 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.377 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.378 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.379 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.379 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.380 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.380 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.384 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.385 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.385 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.386 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.386 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.956 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.203 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.075 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.082 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.083 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.083 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.084 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.085 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.086 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.088 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.089 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.094 I llama_model_loader: - type  f32:   37 tensors
0.00.132.095 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.095 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.636 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.131 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.730 I llm_load_vocab: special tokens cache size = 5
0.00.266.072 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.086 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.086 I llm_load_print_meta: arch             = gemma
0.00.266.087 I llm_load_print_meta: vocab type       = SPM
0.00.266.088 I llm_load_print_meta: n_vocab          = 256000
0.00.266.088 I llm_load_print_meta: n_merges         = 0
0.00.266.088 I llm_load_print_meta: vocab_only       = 0
0.00.266.089 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.089 I llm_load_print_meta: n_embd           = 2048
0.00.266.089 I llm_load_print_meta: n_layer          = 18
0.00.266.102 I llm_load_print_meta: n_head           = 8
0.00.266.103 I llm_load_print_meta: n_head_kv        = 1
0.00.266.103 I llm_load_print_meta: n_rot            = 256
0.00.266.103 I llm_load_print_meta: n_swa            = 0
0.00.266.104 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.104 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.105 I llm_load_print_meta: n_gqa            = 8
0.00.266.106 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.107 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.108 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.109 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.110 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.110 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.110 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.111 I llm_load_print_meta: n_ff             = 16384
0.00.266.111 I llm_load_print_meta: n_expert         = 0
0.00.266.111 I llm_load_print_meta: n_expert_used    = 0
0.00.266.112 I llm_load_print_meta: causal attn      = 1
0.00.266.112 I llm_load_print_meta: pooling type     = 0
0.00.266.112 I llm_load_print_meta: rope type        = 2
0.00.266.113 I llm_load_print_meta: rope scaling     = linear
0.00.266.114 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.115 I llm_load_print_meta: freq_scale_train = 1
0.00.266.115 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.115 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.116 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.116 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.116 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.116 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.117 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.117 I llm_load_print_meta: model type       = 2B
0.00.266.118 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.118 I llm_load_print_meta: model params     = 2.51 B
0.00.266.119 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.119 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.120 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.120 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.121 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.121 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.121 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.122 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.122 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.123 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.123 I llm_load_print_meta: max token length = 93
0.00.478.983 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.484.170 I llama_new_context_with_model: n_seq_max     = 1
0.00.484.177 I llama_new_context_with_model: n_ctx         = 4096
0.00.484.178 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.484.178 I llama_new_context_with_model: n_batch       = 2048
0.00.484.178 I llama_new_context_with_model: n_ubatch      = 512
0.00.484.179 I llama_new_context_with_model: flash_attn    = 0
0.00.484.182 I llama_new_context_with_model: freq_base     = 10000.0
0.00.484.183 I llama_new_context_with_model: freq_scale    = 1
0.00.484.184 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.501.169 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.501.185 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.501.277 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.502.558 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.502.566 I llama_new_context_with_model: graph nodes  = 601
0.00.502.566 I llama_new_context_with_model: graph splits = 1
0.00.502.568 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.578.565 I main: llama threadpool init, n_threads = 4
0.00.578.577 I 
0.00.578.660 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.578.663 I 
0.00.578.707 I sampler seed: 471037061
0.00.578.718 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.578.721 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.578.722 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.578.724 I 
 maneuvorous plant that grows in the deep roots of trees in the temperate forests of Europe, Asia, and North America.

**Characteristics:**

* Large,

0.02.137.017 I llama_perf_sampler_print:    sampling time =       4.91 ms /    33 runs   (    0.15 ms per token,  6725.09 tokens per second)
0.02.137.019 I llama_perf_context_print:        load time =     577.67 ms
0.02.137.021 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.137.023 I llama_perf_context_print:        eval time =    1540.01 ms /    32 runs   (   48.13 ms per token,    20.78 tokens per second)
0.02.137.024 I llama_perf_context_print:       total time =    1558.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.788s
user	8m13.050s
sys	0m6.926s
