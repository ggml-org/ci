+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.611 I build: 3943 (5907750a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.800 I main: llama backend init
0.00.002.749 I main: load the model and apply lora adapter, if any
0.00.024.590 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.794 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.882 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.893 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.895 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.899 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.900 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.901 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.902 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.903 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.905 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.911 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.915 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.916 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.917 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.918 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.049 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.544 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.631 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.638 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.639 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.640 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.641 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.642 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.643 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.647 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.647 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.649 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.649 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.651 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.658 I llama_model_loader: - type  f32:   37 tensors
0.00.268.662 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.923 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.483.486 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.485.157 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.490.267 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.501.614 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.502.597 I llm_load_vocab: special tokens cache size = 5
0.00.598.933 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.599.000 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.599.001 I llm_load_print_meta: arch             = gemma
0.00.599.002 I llm_load_print_meta: vocab type       = SPM
0.00.599.003 I llm_load_print_meta: n_vocab          = 256000
0.00.599.005 I llm_load_print_meta: n_merges         = 0
0.00.599.005 I llm_load_print_meta: vocab_only       = 0
0.00.599.006 I llm_load_print_meta: n_ctx_train      = 8192
0.00.599.006 I llm_load_print_meta: n_embd           = 2048
0.00.599.006 I llm_load_print_meta: n_layer          = 18
0.00.599.069 I llm_load_print_meta: n_head           = 8
0.00.599.076 I llm_load_print_meta: n_head_kv        = 1
0.00.599.076 I llm_load_print_meta: n_rot            = 256
0.00.599.077 I llm_load_print_meta: n_swa            = 0
0.00.599.077 I llm_load_print_meta: n_embd_head_k    = 256
0.00.599.077 I llm_load_print_meta: n_embd_head_v    = 256
0.00.599.082 I llm_load_print_meta: n_gqa            = 8
0.00.599.087 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.599.092 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.599.093 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.599.095 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.599.096 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.599.097 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.599.098 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.599.102 I llm_load_print_meta: n_ff             = 16384
0.00.599.103 I llm_load_print_meta: n_expert         = 0
0.00.599.103 I llm_load_print_meta: n_expert_used    = 0
0.00.599.112 I llm_load_print_meta: causal attn      = 1
0.00.599.113 I llm_load_print_meta: pooling type     = 0
0.00.599.113 I llm_load_print_meta: rope type        = 2
0.00.599.114 I llm_load_print_meta: rope scaling     = linear
0.00.599.116 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.599.116 I llm_load_print_meta: freq_scale_train = 1
0.00.599.117 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.599.117 I llm_load_print_meta: rope_finetuned   = unknown
0.00.599.118 I llm_load_print_meta: ssm_d_conv       = 0
0.00.599.118 I llm_load_print_meta: ssm_d_inner      = 0
0.00.599.118 I llm_load_print_meta: ssm_d_state      = 0
0.00.599.119 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.599.120 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.599.120 I llm_load_print_meta: model type       = 2B
0.00.599.122 I llm_load_print_meta: model ftype      = Q8_0
0.00.599.122 I llm_load_print_meta: model params     = 2.51 B
0.00.599.123 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.599.124 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.599.124 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.599.125 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.599.125 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.599.126 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.599.127 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.599.127 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.599.133 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.599.135 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.599.135 I llm_load_print_meta: max token length = 93
0.00.599.299 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.700.061 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.700.072 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.700.072 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.700.073 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.700.074 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.700.074 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.705.676 I llama_new_context_with_model: n_ctx      = 8192
0.00.705.682 I llama_new_context_with_model: n_batch    = 2048
0.00.705.683 I llama_new_context_with_model: n_ubatch   = 512
0.00.705.683 I llama_new_context_with_model: flash_attn = 0
0.00.705.685 I llama_new_context_with_model: freq_base  = 10000.0
0.00.705.686 I llama_new_context_with_model: freq_scale = 1
0.00.734.563 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.734.604 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.734.713 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.736.077 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.736.082 I llama_new_context_with_model: graph nodes  = 601
0.00.736.082 I llama_new_context_with_model: graph splits = 1
0.00.736.096 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.348.802 I main: llama threadpool init, n_threads = 4
0.01.348.814 I 
0.01.348.919 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.348.922 I 
0.01.349.094 I sampler seed: 2030201746
0.01.349.104 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.349.110 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.349.111 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.349.111 I 
 increasities with a passion for music.

She weaves intricate melodies through the canvas of rhythm and rhyme,
Her voice a symphony of the soul, her touch

0.14.837.551 I llama_perf_sampler_print:    sampling time =      49.37 ms /    33 runs   (    1.50 ms per token,   668.44 tokens per second)
0.14.837.555 I llama_perf_context_print:        load time =    1345.97 ms
0.14.837.558 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.837.560 I llama_perf_context_print:        eval time =   13407.11 ms /    32 runs   (  418.97 ms per token,     2.39 tokens per second)
0.14.837.561 I llama_perf_context_print:       total time =   13488.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.617 I build: 3943 (5907750a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.813 I main: llama backend init
0.00.002.750 I main: load the model and apply lora adapter, if any
0.00.024.808 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.898 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.912 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.916 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.920 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.922 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.923 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.925 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.925 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.926 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.933 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.936 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.937 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.939 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.940 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.223 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.113 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.305 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.318 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.319 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.320 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.321 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.322 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.323 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.327 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.328 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.329 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.330 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.269.331 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.342 I llama_model_loader: - type  f32:   37 tensors
0.00.269.346 I llama_model_loader: - type q8_0:  127 tensors
0.00.453.440 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.286 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.501.293 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.507.369 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.520.235 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.521.221 I llm_load_vocab: special tokens cache size = 5
0.00.617.034 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.617.099 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.617.100 I llm_load_print_meta: arch             = gemma
0.00.617.101 I llm_load_print_meta: vocab type       = SPM
0.00.617.102 I llm_load_print_meta: n_vocab          = 256000
0.00.617.104 I llm_load_print_meta: n_merges         = 0
0.00.617.104 I llm_load_print_meta: vocab_only       = 0
0.00.617.105 I llm_load_print_meta: n_ctx_train      = 8192
0.00.617.105 I llm_load_print_meta: n_embd           = 2048
0.00.617.105 I llm_load_print_meta: n_layer          = 18
0.00.617.170 I llm_load_print_meta: n_head           = 8
0.00.617.177 I llm_load_print_meta: n_head_kv        = 1
0.00.617.177 I llm_load_print_meta: n_rot            = 256
0.00.617.178 I llm_load_print_meta: n_swa            = 0
0.00.617.178 I llm_load_print_meta: n_embd_head_k    = 256
0.00.617.178 I llm_load_print_meta: n_embd_head_v    = 256
0.00.617.183 I llm_load_print_meta: n_gqa            = 8
0.00.617.187 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.617.192 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.617.194 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.617.195 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.617.196 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.617.196 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.617.196 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.617.201 I llm_load_print_meta: n_ff             = 16384
0.00.617.202 I llm_load_print_meta: n_expert         = 0
0.00.617.202 I llm_load_print_meta: n_expert_used    = 0
0.00.617.203 I llm_load_print_meta: causal attn      = 1
0.00.617.203 I llm_load_print_meta: pooling type     = 0
0.00.617.203 I llm_load_print_meta: rope type        = 2
0.00.617.204 I llm_load_print_meta: rope scaling     = linear
0.00.617.205 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.617.206 I llm_load_print_meta: freq_scale_train = 1
0.00.617.206 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.617.207 I llm_load_print_meta: rope_finetuned   = unknown
0.00.617.207 I llm_load_print_meta: ssm_d_conv       = 0
0.00.617.207 I llm_load_print_meta: ssm_d_inner      = 0
0.00.617.208 I llm_load_print_meta: ssm_d_state      = 0
0.00.617.208 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.617.208 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.617.209 I llm_load_print_meta: model type       = 2B
0.00.617.209 I llm_load_print_meta: model ftype      = Q8_0
0.00.617.210 I llm_load_print_meta: model params     = 2.51 B
0.00.617.211 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.617.211 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.617.212 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.617.212 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.617.213 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.617.214 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.617.214 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.617.214 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.617.220 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.617.221 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.617.221 I llm_load_print_meta: max token length = 93
0.00.617.393 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.712.169 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.717.904 I llama_new_context_with_model: n_ctx      = 8192
0.00.717.912 I llama_new_context_with_model: n_batch    = 2048
0.00.717.912 I llama_new_context_with_model: n_ubatch   = 512
0.00.717.913 I llama_new_context_with_model: flash_attn = 0
0.00.717.916 I llama_new_context_with_model: freq_base  = 10000.0
0.00.717.916 I llama_new_context_with_model: freq_scale = 1
0.00.747.116 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.747.162 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.747.272 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.748.640 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.748.645 I llama_new_context_with_model: graph nodes  = 601
0.00.748.646 I llama_new_context_with_model: graph splits = 1
0.00.748.663 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.359.964 I main: llama threadpool init, n_threads = 4
0.01.359.976 I 
0.01.360.080 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.360.085 I 
0.01.360.267 I sampler seed: 3121018165
0.01.360.280 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.360.290 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.360.291 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.360.300 I 
 increadibly high.

I'm just curious, what does it mean to be "in the know"?

I'm also curious about the potential consequences

0.14.971.498 I llama_perf_sampler_print:    sampling time =      49.36 ms /    33 runs   (    1.50 ms per token,   668.54 tokens per second)
0.14.971.504 I llama_perf_context_print:        load time =    1357.13 ms
0.14.971.505 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.971.507 I llama_perf_context_print:        eval time =   13528.92 ms /    32 runs   (  422.78 ms per token,     2.37 tokens per second)
0.14.971.508 I llama_perf_context_print:       total time =   13611.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.623 I build: 3943 (5907750a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.870 I main: llama backend init
0.00.002.809 I main: load the model and apply lora adapter, if any
0.00.024.666 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.883 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.971 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.982 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.984 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.988 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.989 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.990 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.991 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.992 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.993 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.001 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.002 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.003 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.004 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.005 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.167 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.701 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.558 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.569 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.570 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.571 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.572 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.573 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.574 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.578 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.579 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.593 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.595 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.268.596 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.606 I llama_model_loader: - type  f32:   37 tensors
0.00.268.609 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.074 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.489.445 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.491.103 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.496.000 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.506.459 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.364 I llm_load_vocab: special tokens cache size = 5
0.00.603.898 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.603.969 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.603.970 I llm_load_print_meta: arch             = gemma
0.00.603.970 I llm_load_print_meta: vocab type       = SPM
0.00.603.971 I llm_load_print_meta: n_vocab          = 256000
0.00.603.973 I llm_load_print_meta: n_merges         = 0
0.00.603.974 I llm_load_print_meta: vocab_only       = 0
0.00.603.974 I llm_load_print_meta: n_ctx_train      = 8192
0.00.603.974 I llm_load_print_meta: n_embd           = 2048
0.00.603.975 I llm_load_print_meta: n_layer          = 18
0.00.604.039 I llm_load_print_meta: n_head           = 8
0.00.604.045 I llm_load_print_meta: n_head_kv        = 1
0.00.604.046 I llm_load_print_meta: n_rot            = 256
0.00.604.046 I llm_load_print_meta: n_swa            = 0
0.00.604.047 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.047 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.051 I llm_load_print_meta: n_gqa            = 8
0.00.604.057 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.062 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.064 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.065 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.065 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.065 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.066 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.071 I llm_load_print_meta: n_ff             = 16384
0.00.604.071 I llm_load_print_meta: n_expert         = 0
0.00.604.072 I llm_load_print_meta: n_expert_used    = 0
0.00.604.072 I llm_load_print_meta: causal attn      = 1
0.00.604.072 I llm_load_print_meta: pooling type     = 0
0.00.604.072 I llm_load_print_meta: rope type        = 2
0.00.604.073 I llm_load_print_meta: rope scaling     = linear
0.00.604.074 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.075 I llm_load_print_meta: freq_scale_train = 1
0.00.604.075 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.075 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.076 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.076 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.076 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.077 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.078 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.078 I llm_load_print_meta: model type       = 2B
0.00.604.079 I llm_load_print_meta: model ftype      = Q8_0
0.00.604.080 I llm_load_print_meta: model params     = 2.51 B
0.00.604.081 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.604.082 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.091 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.092 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.093 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.094 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.095 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.095 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.102 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.116 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.117 I llm_load_print_meta: max token length = 93
0.00.604.283 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.681.320 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.681.329 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.681.330 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.681.330 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.681.331 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.681.332 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.686.916 I llama_new_context_with_model: n_ctx      = 8192
0.00.686.924 I llama_new_context_with_model: n_batch    = 2048
0.00.686.924 I llama_new_context_with_model: n_ubatch   = 512
0.00.686.925 I llama_new_context_with_model: flash_attn = 0
0.00.686.927 I llama_new_context_with_model: freq_base  = 10000.0
0.00.686.928 I llama_new_context_with_model: freq_scale = 1
0.00.715.749 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.715.789 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.715.906 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.717.283 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.717.287 I llama_new_context_with_model: graph nodes  = 601
0.00.717.288 I llama_new_context_with_model: graph splits = 1
0.00.717.303 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.330.538 I main: llama threadpool init, n_threads = 4
0.01.330.551 I 
0.01.330.660 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.330.663 I 
0.01.330.830 I sampler seed: 3796620087
0.01.330.841 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.330.848 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.330.848 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.330.849 I 
 increabling

The provided text is about a strange phenomenon involving an unusual creature called a "kreenling." A kreenling is described as a small,

0.14.882.356 I llama_perf_sampler_print:    sampling time =      49.50 ms /    33 runs   (    1.50 ms per token,   666.63 tokens per second)
0.14.882.377 I llama_perf_context_print:        load time =    1327.64 ms
0.14.882.379 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.882.381 I llama_perf_context_print:        eval time =   13469.39 ms /    32 runs   (  420.92 ms per token,     2.38 tokens per second)
0.14.882.382 I llama_perf_context_print:       total time =   13551.83 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 3943 (5907750a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.900 I main: llama backend init
0.00.002.869 I main: load the model and apply lora adapter, if any
0.00.024.718 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.935 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.033 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.045 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.046 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.052 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.053 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.054 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.056 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.056 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.057 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.065 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.068 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.070 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.072 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.073 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.109 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.850 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.958 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.967 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.968 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.969 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.970 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.971 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.973 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.977 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.978 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.979 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.980 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.268.981 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.990 I llama_model_loader: - type  f32:   37 tensors
0.00.268.994 I llama_model_loader: - type q8_0:  127 tensors
0.00.450.185 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.258 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.501.406 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.507.686 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.520.375 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.521.363 I llm_load_vocab: special tokens cache size = 5
0.00.632.918 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.632.991 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.632.992 I llm_load_print_meta: arch             = gemma
0.00.632.992 I llm_load_print_meta: vocab type       = SPM
0.00.632.993 I llm_load_print_meta: n_vocab          = 256000
0.00.632.995 I llm_load_print_meta: n_merges         = 0
0.00.632.995 I llm_load_print_meta: vocab_only       = 0
0.00.632.996 I llm_load_print_meta: n_ctx_train      = 8192
0.00.632.996 I llm_load_print_meta: n_embd           = 2048
0.00.632.996 I llm_load_print_meta: n_layer          = 18
0.00.633.063 I llm_load_print_meta: n_head           = 8
0.00.633.070 I llm_load_print_meta: n_head_kv        = 1
0.00.633.071 I llm_load_print_meta: n_rot            = 256
0.00.633.071 I llm_load_print_meta: n_swa            = 0
0.00.633.071 I llm_load_print_meta: n_embd_head_k    = 256
0.00.633.072 I llm_load_print_meta: n_embd_head_v    = 256
0.00.633.079 I llm_load_print_meta: n_gqa            = 8
0.00.633.083 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.633.089 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.633.090 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.633.092 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.633.093 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.633.093 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.633.093 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.633.099 I llm_load_print_meta: n_ff             = 16384
0.00.633.099 I llm_load_print_meta: n_expert         = 0
0.00.633.100 I llm_load_print_meta: n_expert_used    = 0
0.00.633.101 I llm_load_print_meta: causal attn      = 1
0.00.633.102 I llm_load_print_meta: pooling type     = 0
0.00.633.103 I llm_load_print_meta: rope type        = 2
0.00.633.103 I llm_load_print_meta: rope scaling     = linear
0.00.633.105 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.633.105 I llm_load_print_meta: freq_scale_train = 1
0.00.633.106 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.633.106 I llm_load_print_meta: rope_finetuned   = unknown
0.00.633.117 I llm_load_print_meta: ssm_d_conv       = 0
0.00.633.122 I llm_load_print_meta: ssm_d_inner      = 0
0.00.633.122 I llm_load_print_meta: ssm_d_state      = 0
0.00.633.123 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.633.123 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.633.124 I llm_load_print_meta: model type       = 2B
0.00.633.125 I llm_load_print_meta: model ftype      = Q8_0
0.00.633.126 I llm_load_print_meta: model params     = 2.51 B
0.00.633.131 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.633.131 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.633.132 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.633.132 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.633.133 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.633.133 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.633.133 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.633.134 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.633.140 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.633.142 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.633.143 I llm_load_print_meta: max token length = 93
0.00.633.321 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.704.339 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.704.349 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.710.104 I llama_new_context_with_model: n_ctx      = 8192
0.00.710.111 I llama_new_context_with_model: n_batch    = 2048
0.00.710.111 I llama_new_context_with_model: n_ubatch   = 512
0.00.710.112 I llama_new_context_with_model: flash_attn = 0
0.00.710.114 I llama_new_context_with_model: freq_base  = 10000.0
0.00.710.115 I llama_new_context_with_model: freq_scale = 1
0.00.739.191 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.739.235 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.739.349 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.740.730 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.740.735 I llama_new_context_with_model: graph nodes  = 601
0.00.740.735 I llama_new_context_with_model: graph splits = 1
0.00.740.750 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.352.481 I main: llama threadpool init, n_threads = 4
0.01.352.494 I 
0.01.352.615 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.352.619 I 
0.01.352.788 I sampler seed: 3256889381
0.01.352.799 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.352.807 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.352.807 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.352.808 I 
 increably, and his crew gazed upon the sky with a mixture of awe and trepidation.

The sun, once a gentle orb, had blossomed into

0.14.941.668 I llama_perf_sampler_print:    sampling time =      49.20 ms /    33 runs   (    1.49 ms per token,   670.69 tokens per second)
0.14.941.671 I llama_perf_context_print:        load time =    1349.51 ms
0.14.941.673 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.941.687 I llama_perf_context_print:        eval time =   13507.18 ms /    32 runs   (  422.10 ms per token,     2.37 tokens per second)
0.14.941.688 I llama_perf_context_print:       total time =   13589.20 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.444s
user	3m49.685s
sys	0m9.306s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3943 (5907750a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200133.73 ms
main:    total time = 200133.73 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.593 I build: 3943 (5907750a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.787 I main: llama backend init
0.00.002.724 I main: load the model and apply lora adapter, if any
0.00.025.058 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.259 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.349 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.361 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.362 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.366 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.368 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.370 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.371 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.372 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.372 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.379 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.380 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.382 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.383 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.384 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.185 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.460 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.758 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.769 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.770 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.771 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.772 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.774 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.775 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.778 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.779 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.780 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.781 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.782 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.791 I llama_model_loader: - type  f32:   37 tensors
0.00.268.796 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.796 I llama_model_loader: - type q6_K:   19 tensors
0.00.442.123 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.486.482 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.488.154 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.493.135 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.503.388 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.285 I llm_load_vocab: special tokens cache size = 5
0.00.599.873 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.599.941 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.599.942 I llm_load_print_meta: arch             = gemma
0.00.599.942 I llm_load_print_meta: vocab type       = SPM
0.00.599.943 I llm_load_print_meta: n_vocab          = 256000
0.00.599.946 I llm_load_print_meta: n_merges         = 0
0.00.599.946 I llm_load_print_meta: vocab_only       = 0
0.00.599.946 I llm_load_print_meta: n_ctx_train      = 8192
0.00.599.947 I llm_load_print_meta: n_embd           = 2048
0.00.599.947 I llm_load_print_meta: n_layer          = 18
0.00.600.010 I llm_load_print_meta: n_head           = 8
0.00.600.017 I llm_load_print_meta: n_head_kv        = 1
0.00.600.019 I llm_load_print_meta: n_rot            = 256
0.00.600.020 I llm_load_print_meta: n_swa            = 0
0.00.600.020 I llm_load_print_meta: n_embd_head_k    = 256
0.00.600.029 I llm_load_print_meta: n_embd_head_v    = 256
0.00.600.034 I llm_load_print_meta: n_gqa            = 8
0.00.600.038 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.600.046 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.600.050 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.600.052 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.600.052 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.600.053 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.600.053 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.600.058 I llm_load_print_meta: n_ff             = 16384
0.00.600.058 I llm_load_print_meta: n_expert         = 0
0.00.600.070 I llm_load_print_meta: n_expert_used    = 0
0.00.600.072 I llm_load_print_meta: causal attn      = 1
0.00.600.073 I llm_load_print_meta: pooling type     = 0
0.00.600.073 I llm_load_print_meta: rope type        = 2
0.00.600.074 I llm_load_print_meta: rope scaling     = linear
0.00.600.075 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.600.076 I llm_load_print_meta: freq_scale_train = 1
0.00.600.076 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.600.077 I llm_load_print_meta: rope_finetuned   = unknown
0.00.600.077 I llm_load_print_meta: ssm_d_conv       = 0
0.00.600.077 I llm_load_print_meta: ssm_d_inner      = 0
0.00.600.086 I llm_load_print_meta: ssm_d_state      = 0
0.00.600.087 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.600.087 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.600.090 I llm_load_print_meta: model type       = 2B
0.00.600.091 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.600.092 I llm_load_print_meta: model params     = 2.51 B
0.00.600.092 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.600.093 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.600.094 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.600.094 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.600.102 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.600.103 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.600.103 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.600.104 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.600.109 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.600.110 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.600.111 I llm_load_print_meta: max token length = 93
0.00.600.278 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.660.428 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.660.436 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.660.437 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.660.438 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.660.439 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.660.439 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.665.888 I llama_new_context_with_model: n_ctx      = 8192
0.00.665.894 I llama_new_context_with_model: n_batch    = 2048
0.00.665.895 I llama_new_context_with_model: n_ubatch   = 512
0.00.665.895 I llama_new_context_with_model: flash_attn = 0
0.00.665.898 I llama_new_context_with_model: freq_base  = 10000.0
0.00.665.899 I llama_new_context_with_model: freq_scale = 1
0.00.694.443 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.694.484 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.694.591 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.695.974 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.695.979 I llama_new_context_with_model: graph nodes  = 601
0.00.695.979 I llama_new_context_with_model: graph splits = 1
0.00.695.996 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.275.285 I main: llama threadpool init, n_threads = 4
0.01.275.298 I 
0.01.275.406 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.275.410 I 
0.01.275.581 I sampler seed: 324020732
0.01.275.591 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.275.597 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.275.598 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.275.598 I 
 increamically, the sentence "I saw John yesterday."

The sentence can be rewritten in different ways to convey the same meaning:
- I saw John the

0.12.185.343 I llama_perf_sampler_print:    sampling time =      50.51 ms /    33 runs   (    1.53 ms per token,   653.34 tokens per second)
0.12.185.347 I llama_perf_context_print:        load time =    1272.48 ms
0.12.185.348 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.185.350 I llama_perf_context_print:        eval time =   10827.00 ms /    32 runs   (  338.34 ms per token,     2.96 tokens per second)
0.12.185.352 I llama_perf_context_print:       total time =   10910.07 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3943 (5907750a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198358.01 ms
main:    total time = 198358.01 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 3943 (5907750a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.002.771 I main: load the model and apply lora adapter, if any
0.00.024.737 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.830 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.843 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.847 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.851 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.853 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.854 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.863 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.865 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.866 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.871 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.875 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.876 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.877 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.878 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.270 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.789 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.905 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.913 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.914 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.916 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.916 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.918 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.919 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.923 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.924 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.933 I llama_model_loader: - type  f32:   37 tensors
0.00.268.939 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.940 I llama_model_loader: - type q6_K:   19 tensors
0.00.436.765 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.476.936 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.478.500 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.483.155 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.492.922 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.493.777 I llm_load_vocab: special tokens cache size = 5
0.00.589.284 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.589.348 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.589.349 I llm_load_print_meta: arch             = gemma
0.00.589.350 I llm_load_print_meta: vocab type       = SPM
0.00.589.350 I llm_load_print_meta: n_vocab          = 256000
0.00.589.353 I llm_load_print_meta: n_merges         = 0
0.00.589.353 I llm_load_print_meta: vocab_only       = 0
0.00.589.353 I llm_load_print_meta: n_ctx_train      = 8192
0.00.589.354 I llm_load_print_meta: n_embd           = 2048
0.00.589.354 I llm_load_print_meta: n_layer          = 18
0.00.589.417 I llm_load_print_meta: n_head           = 8
0.00.589.424 I llm_load_print_meta: n_head_kv        = 1
0.00.589.426 I llm_load_print_meta: n_rot            = 256
0.00.589.426 I llm_load_print_meta: n_swa            = 0
0.00.589.426 I llm_load_print_meta: n_embd_head_k    = 256
0.00.589.426 I llm_load_print_meta: n_embd_head_v    = 256
0.00.589.431 I llm_load_print_meta: n_gqa            = 8
0.00.589.435 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.589.440 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.589.442 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.589.443 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.589.444 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.589.444 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.589.445 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.589.450 I llm_load_print_meta: n_ff             = 16384
0.00.589.450 I llm_load_print_meta: n_expert         = 0
0.00.589.450 I llm_load_print_meta: n_expert_used    = 0
0.00.589.460 I llm_load_print_meta: causal attn      = 1
0.00.589.460 I llm_load_print_meta: pooling type     = 0
0.00.589.461 I llm_load_print_meta: rope type        = 2
0.00.589.461 I llm_load_print_meta: rope scaling     = linear
0.00.589.463 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.589.463 I llm_load_print_meta: freq_scale_train = 1
0.00.589.464 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.589.465 I llm_load_print_meta: rope_finetuned   = unknown
0.00.589.465 I llm_load_print_meta: ssm_d_conv       = 0
0.00.589.465 I llm_load_print_meta: ssm_d_inner      = 0
0.00.589.466 I llm_load_print_meta: ssm_d_state      = 0
0.00.589.466 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.589.477 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.589.478 I llm_load_print_meta: model type       = 2B
0.00.589.480 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.589.480 I llm_load_print_meta: model params     = 2.51 B
0.00.589.482 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.589.482 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.589.483 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.589.483 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.589.484 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.589.485 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.589.485 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.589.486 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.589.491 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.589.492 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.589.493 I llm_load_print_meta: max token length = 93
0.00.589.658 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.648.052 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.653.546 I llama_new_context_with_model: n_ctx      = 8192
0.00.653.552 I llama_new_context_with_model: n_batch    = 2048
0.00.653.553 I llama_new_context_with_model: n_ubatch   = 512
0.00.653.553 I llama_new_context_with_model: flash_attn = 0
0.00.653.555 I llama_new_context_with_model: freq_base  = 10000.0
0.00.653.556 I llama_new_context_with_model: freq_scale = 1
0.00.682.198 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.682.243 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.682.354 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.683.720 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.683.726 I llama_new_context_with_model: graph nodes  = 601
0.00.683.726 I llama_new_context_with_model: graph splits = 1
0.00.683.741 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.262.980 I main: llama threadpool init, n_threads = 4
0.01.262.992 I 
0.01.263.094 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.263.098 I 
0.01.263.265 I sampler seed: 2902733588
0.01.263.276 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.263.281 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.263.282 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.263.282 I 
 seconally. I am unable to process this request because it contains inappropriate content. [end of text]


0.07.114.046 I llama_perf_sampler_print:    sampling time =      26.28 ms /    18 runs   (    1.46 ms per token,   684.88 tokens per second)
0.07.114.050 I llama_perf_context_print:        load time =    1260.12 ms
0.07.114.052 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.114.054 I llama_perf_context_print:        eval time =    5806.29 ms /    17 runs   (  341.55 ms per token,     2.93 tokens per second)
0.07.114.055 I llama_perf_context_print:       total time =    5851.08 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m0.684s
user	49m59.117s
sys	0m6.243s
