+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.530 I build: 3983 (8841ce3f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.704 I main: llama backend init
0.00.001.804 I main: load the model and apply lora adapter, if any
0.00.022.001 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.047 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.055 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.061 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.064 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.067 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.067 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.069 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.069 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.070 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.070 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.075 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.076 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.076 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.077 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.077 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.042 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.347 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.190 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.195 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.196 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.197 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.197 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.198 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.199 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.202 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.202 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.204 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.205 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.206 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.210 I llama_model_loader: - type  f32:   37 tensors
0.00.130.213 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.573 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.568 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.106 I llm_load_vocab: special tokens cache size = 5
0.00.262.848 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.863 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.863 I llm_load_print_meta: arch             = gemma
0.00.262.864 I llm_load_print_meta: vocab type       = SPM
0.00.262.864 I llm_load_print_meta: n_vocab          = 256000
0.00.262.864 I llm_load_print_meta: n_merges         = 0
0.00.262.865 I llm_load_print_meta: vocab_only       = 0
0.00.262.865 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.866 I llm_load_print_meta: n_embd           = 2048
0.00.262.866 I llm_load_print_meta: n_layer          = 18
0.00.262.877 I llm_load_print_meta: n_head           = 8
0.00.262.878 I llm_load_print_meta: n_head_kv        = 1
0.00.262.878 I llm_load_print_meta: n_rot            = 256
0.00.262.879 I llm_load_print_meta: n_swa            = 0
0.00.262.879 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.879 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.880 I llm_load_print_meta: n_gqa            = 8
0.00.262.881 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.882 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.882 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.884 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.887 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.888 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.888 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.889 I llm_load_print_meta: n_ff             = 16384
0.00.262.889 I llm_load_print_meta: n_expert         = 0
0.00.262.889 I llm_load_print_meta: n_expert_used    = 0
0.00.262.890 I llm_load_print_meta: causal attn      = 1
0.00.262.890 I llm_load_print_meta: pooling type     = 0
0.00.262.890 I llm_load_print_meta: rope type        = 2
0.00.262.890 I llm_load_print_meta: rope scaling     = linear
0.00.262.891 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.892 I llm_load_print_meta: freq_scale_train = 1
0.00.262.893 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.893 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.894 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.894 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.896 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.896 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.896 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.897 I llm_load_print_meta: model type       = 2B
0.00.262.898 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.899 I llm_load_print_meta: model params     = 2.51 B
0.00.262.900 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.900 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.901 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.901 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.902 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.902 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.903 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.903 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.904 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.905 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.905 I llm_load_print_meta: max token length = 93
0.00.262.929 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.363.122 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.363.130 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.363.131 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.363.131 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.363.132 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.363.133 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.368.070 I llama_new_context_with_model: n_ctx      = 8192
0.00.368.075 I llama_new_context_with_model: n_batch    = 2048
0.00.368.076 I llama_new_context_with_model: n_ubatch   = 512
0.00.368.076 I llama_new_context_with_model: flash_attn = 0
0.00.368.078 I llama_new_context_with_model: freq_base  = 10000.0
0.00.368.079 I llama_new_context_with_model: freq_scale = 1
0.00.396.305 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.396.321 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.396.412 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.397.240 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.397.248 I llama_new_context_with_model: graph nodes  = 601
0.00.397.249 I llama_new_context_with_model: graph splits = 1
0.00.397.250 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.487.924 I main: llama threadpool init, n_threads = 4
0.00.487.937 I 
0.00.488.015 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.488.019 I 
0.00.488.063 I sampler seed: 2985894607
0.00.488.074 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.488.078 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.488.078 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.488.079 I 
 increably. [end of text]


0.00.768.989 I llama_perf_sampler_print:    sampling time =       0.60 ms /     5 runs   (    0.12 ms per token,  8278.15 tokens per second)
0.00.768.991 I llama_perf_context_print:        load time =     486.10 ms
0.00.768.993 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.768.994 I llama_perf_context_print:        eval time =     277.58 ms /     4 runs   (   69.39 ms per token,    14.41 tokens per second)
0.00.768.995 I llama_perf_context_print:       total time =     281.07 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.524 I build: 3983 (8841ce3f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.720 I main: llama backend init
0.00.001.817 I main: load the model and apply lora adapter, if any
0.00.021.770 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.779 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.785 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.786 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.789 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.790 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.790 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.791 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.791 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.792 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.795 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.797 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.798 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.798 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.799 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.941 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.249 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.070 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.076 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.077 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.078 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.079 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.080 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.081 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.084 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.085 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.086 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.086 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.087 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.090 I llama_model_loader: - type  f32:   37 tensors
0.00.130.093 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.128 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.195 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.718 I llm_load_vocab: special tokens cache size = 5
0.00.260.389 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.405 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.406 I llm_load_print_meta: arch             = gemma
0.00.260.406 I llm_load_print_meta: vocab type       = SPM
0.00.260.407 I llm_load_print_meta: n_vocab          = 256000
0.00.260.408 I llm_load_print_meta: n_merges         = 0
0.00.260.416 I llm_load_print_meta: vocab_only       = 0
0.00.260.417 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.417 I llm_load_print_meta: n_embd           = 2048
0.00.260.417 I llm_load_print_meta: n_layer          = 18
0.00.260.429 I llm_load_print_meta: n_head           = 8
0.00.260.430 I llm_load_print_meta: n_head_kv        = 1
0.00.260.431 I llm_load_print_meta: n_rot            = 256
0.00.260.431 I llm_load_print_meta: n_swa            = 0
0.00.260.432 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.432 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.433 I llm_load_print_meta: n_gqa            = 8
0.00.260.435 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.436 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.437 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.438 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.439 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.439 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.440 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.442 I llm_load_print_meta: n_ff             = 16384
0.00.260.442 I llm_load_print_meta: n_expert         = 0
0.00.260.442 I llm_load_print_meta: n_expert_used    = 0
0.00.260.442 I llm_load_print_meta: causal attn      = 1
0.00.260.443 I llm_load_print_meta: pooling type     = 0
0.00.260.443 I llm_load_print_meta: rope type        = 2
0.00.260.443 I llm_load_print_meta: rope scaling     = linear
0.00.260.445 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.446 I llm_load_print_meta: freq_scale_train = 1
0.00.260.446 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.446 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.447 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.447 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.448 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.448 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.449 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.449 I llm_load_print_meta: model type       = 2B
0.00.260.450 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.451 I llm_load_print_meta: model params     = 2.51 B
0.00.260.452 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.453 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.453 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.453 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.454 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.454 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.454 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.455 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.455 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.456 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.456 I llm_load_print_meta: max token length = 93
0.00.260.483 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.356.196 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.361.206 I llama_new_context_with_model: n_ctx      = 8192
0.00.361.213 I llama_new_context_with_model: n_batch    = 2048
0.00.361.213 I llama_new_context_with_model: n_ubatch   = 512
0.00.361.213 I llama_new_context_with_model: flash_attn = 0
0.00.361.216 I llama_new_context_with_model: freq_base  = 10000.0
0.00.361.216 I llama_new_context_with_model: freq_scale = 1
0.00.390.373 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.390.388 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.390.479 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.391.347 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.391.355 I llama_new_context_with_model: graph nodes  = 601
0.00.391.356 I llama_new_context_with_model: graph splits = 1
0.00.391.358 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.478.120 I main: llama threadpool init, n_threads = 4
0.00.478.134 I 
0.00.478.207 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.478.211 I 
0.00.478.251 I sampler seed: 1186544539
0.00.478.263 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.478.265 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.478.266 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.478.266 I 
 increasities for a living, but also finds solace and companionship in her relationships with friends and family.

She is a passionate advocate for social justice and equality,

0.02.645.428 I llama_perf_sampler_print:    sampling time =       5.04 ms /    33 runs   (    0.15 ms per token,  6552.82 tokens per second)
0.02.645.430 I llama_perf_context_print:        load time =     476.28 ms
0.02.645.431 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.645.433 I llama_perf_context_print:        eval time =    2147.27 ms /    32 runs   (   67.10 ms per token,    14.90 tokens per second)
0.02.645.433 I llama_perf_context_print:       total time =    2167.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.556 I build: 3983 (8841ce3f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.753 I main: llama backend init
0.00.001.851 I main: load the model and apply lora adapter, if any
0.00.022.260 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.315 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.327 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.334 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.337 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.341 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.342 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.343 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.343 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.344 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.344 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.349 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.350 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.350 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.351 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.351 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.245 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.135 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.971 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.977 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.978 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.978 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.979 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.980 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.981 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.983 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.983 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.984 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.985 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.987 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.990 I llama_model_loader: - type  f32:   37 tensors
0.00.131.993 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.825 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.159 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.712 I llm_load_vocab: special tokens cache size = 5
0.00.262.350 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.364 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.365 I llm_load_print_meta: arch             = gemma
0.00.262.365 I llm_load_print_meta: vocab type       = SPM
0.00.262.366 I llm_load_print_meta: n_vocab          = 256000
0.00.262.367 I llm_load_print_meta: n_merges         = 0
0.00.262.367 I llm_load_print_meta: vocab_only       = 0
0.00.262.367 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.367 I llm_load_print_meta: n_embd           = 2048
0.00.262.368 I llm_load_print_meta: n_layer          = 18
0.00.262.380 I llm_load_print_meta: n_head           = 8
0.00.262.381 I llm_load_print_meta: n_head_kv        = 1
0.00.262.381 I llm_load_print_meta: n_rot            = 256
0.00.262.381 I llm_load_print_meta: n_swa            = 0
0.00.262.381 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.382 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.382 I llm_load_print_meta: n_gqa            = 8
0.00.262.383 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.385 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.385 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.387 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.387 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.388 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.388 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.389 I llm_load_print_meta: n_ff             = 16384
0.00.262.389 I llm_load_print_meta: n_expert         = 0
0.00.262.389 I llm_load_print_meta: n_expert_used    = 0
0.00.262.389 I llm_load_print_meta: causal attn      = 1
0.00.262.390 I llm_load_print_meta: pooling type     = 0
0.00.262.390 I llm_load_print_meta: rope type        = 2
0.00.262.390 I llm_load_print_meta: rope scaling     = linear
0.00.262.391 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.392 I llm_load_print_meta: freq_scale_train = 1
0.00.262.392 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.393 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.393 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.393 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.394 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.394 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.394 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.395 I llm_load_print_meta: model type       = 2B
0.00.262.395 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.396 I llm_load_print_meta: model params     = 2.51 B
0.00.262.397 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.397 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.397 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.397 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.398 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.398 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.398 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.399 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.400 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.400 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.400 I llm_load_print_meta: max token length = 93
0.00.262.426 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.339.406 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.339.412 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.339.412 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.339.413 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.339.413 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.339.414 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.344.449 I llama_new_context_with_model: n_ctx      = 8192
0.00.344.455 I llama_new_context_with_model: n_batch    = 2048
0.00.344.456 I llama_new_context_with_model: n_ubatch   = 512
0.00.344.456 I llama_new_context_with_model: flash_attn = 0
0.00.344.458 I llama_new_context_with_model: freq_base  = 10000.0
0.00.344.459 I llama_new_context_with_model: freq_scale = 1
0.00.373.377 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.373.389 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.373.479 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.374.361 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.374.368 I llama_new_context_with_model: graph nodes  = 601
0.00.374.369 I llama_new_context_with_model: graph splits = 1
0.00.374.371 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.466.613 I main: llama threadpool init, n_threads = 4
0.00.466.627 I 
0.00.466.716 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.466.719 I 
0.00.466.763 I sampler seed: 2985016841
0.00.466.773 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.466.776 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.466.776 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.466.778 I 
 increasities with a youthful exuberance that is both charming and infectious. [end of text]


0.01.536.114 I llama_perf_sampler_print:    sampling time =       2.40 ms /    16 runs   (    0.15 ms per token,  6669.45 tokens per second)
0.01.536.117 I llama_perf_context_print:        load time =     464.74 ms
0.01.536.118 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.536.119 I llama_perf_context_print:        eval time =    1059.31 ms /    15 runs   (   70.62 ms per token,    14.16 tokens per second)
0.01.536.120 I llama_perf_context_print:       total time =    1069.51 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.528 I build: 3983 (8841ce3f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.734 I main: llama backend init
0.00.001.876 I main: load the model and apply lora adapter, if any
0.00.021.850 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.895 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.907 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.914 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.915 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.919 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.921 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.922 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.922 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.923 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.923 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.927 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.928 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.929 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.929 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.930 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.097 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.953 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.692 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.697 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.698 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.698 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.699 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.699 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.700 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.702 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.703 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.703 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.704 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.129.706 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.708 I llama_model_loader: - type  f32:   37 tensors
0.00.129.711 I llama_model_loader: - type q8_0:  127 tensors
0.00.199.872 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.687 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.224 I llm_load_vocab: special tokens cache size = 5
0.00.262.906 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.925 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.926 I llm_load_print_meta: arch             = gemma
0.00.262.926 I llm_load_print_meta: vocab type       = SPM
0.00.262.927 I llm_load_print_meta: n_vocab          = 256000
0.00.262.927 I llm_load_print_meta: n_merges         = 0
0.00.262.928 I llm_load_print_meta: vocab_only       = 0
0.00.262.928 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.928 I llm_load_print_meta: n_embd           = 2048
0.00.262.929 I llm_load_print_meta: n_layer          = 18
0.00.262.940 I llm_load_print_meta: n_head           = 8
0.00.262.941 I llm_load_print_meta: n_head_kv        = 1
0.00.262.942 I llm_load_print_meta: n_rot            = 256
0.00.262.942 I llm_load_print_meta: n_swa            = 0
0.00.262.942 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.942 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.943 I llm_load_print_meta: n_gqa            = 8
0.00.262.944 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.945 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.946 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.947 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.948 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.948 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.948 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.949 I llm_load_print_meta: n_ff             = 16384
0.00.262.950 I llm_load_print_meta: n_expert         = 0
0.00.262.950 I llm_load_print_meta: n_expert_used    = 0
0.00.262.950 I llm_load_print_meta: causal attn      = 1
0.00.262.950 I llm_load_print_meta: pooling type     = 0
0.00.262.951 I llm_load_print_meta: rope type        = 2
0.00.262.951 I llm_load_print_meta: rope scaling     = linear
0.00.262.952 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.953 I llm_load_print_meta: freq_scale_train = 1
0.00.262.953 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.954 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.954 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.954 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.954 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.955 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.955 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.956 I llm_load_print_meta: model type       = 2B
0.00.262.956 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.957 I llm_load_print_meta: model params     = 2.51 B
0.00.262.958 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.958 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.958 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.958 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.959 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.959 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.959 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.960 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.960 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.961 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.961 I llm_load_print_meta: max token length = 93
0.00.262.982 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.334.170 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.334.178 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.339.170 I llama_new_context_with_model: n_ctx      = 8192
0.00.339.177 I llama_new_context_with_model: n_batch    = 2048
0.00.339.177 I llama_new_context_with_model: n_ubatch   = 512
0.00.339.177 I llama_new_context_with_model: flash_attn = 0
0.00.339.180 I llama_new_context_with_model: freq_base  = 10000.0
0.00.339.181 I llama_new_context_with_model: freq_scale = 1
0.00.370.138 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.370.152 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.370.247 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.371.130 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.371.138 I llama_new_context_with_model: graph nodes  = 601
0.00.371.139 I llama_new_context_with_model: graph splits = 1
0.00.371.141 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.885 I main: llama threadpool init, n_threads = 4
0.00.464.897 I 
0.00.464.977 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.464.980 I 
0.00.465.022 I sampler seed: 3839350678
0.00.465.034 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.465.041 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.465.041 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.465.042 I 
 increasities. [end of text]


0.00.768.662 I llama_perf_sampler_print:    sampling time =       0.63 ms /     5 runs   (    0.13 ms per token,  7936.51 tokens per second)
0.00.768.664 I llama_perf_context_print:        load time =     462.99 ms
0.00.768.666 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.768.669 I llama_perf_context_print:        eval time =     300.28 ms /     4 runs   (   75.07 ms per token,    13.32 tokens per second)
0.00.768.670 I llama_perf_context_print:       total time =     303.78 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m15.975s
user	0m18.142s
sys	0m9.414s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3983 (8841ce3f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32214.07 ms
main:    total time = 32214.07 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.538 I build: 3983 (8841ce3f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.740 I main: llama backend init
0.00.001.864 I main: load the model and apply lora adapter, if any
0.00.022.237 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.295 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.306 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.312 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.312 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.316 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.317 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.317 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.318 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.319 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.320 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.325 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.325 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.326 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.327 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.328 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.682 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.227 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.045 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.051 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.052 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.052 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.053 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.054 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.054 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.057 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.057 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.058 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.059 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.060 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.063 I llama_model_loader: - type  f32:   37 tensors
0.00.131.065 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.066 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.567 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.602 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.166 I llm_load_vocab: special tokens cache size = 5
0.00.262.049 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.063 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.064 I llm_load_print_meta: arch             = gemma
0.00.262.065 I llm_load_print_meta: vocab type       = SPM
0.00.262.065 I llm_load_print_meta: n_vocab          = 256000
0.00.262.066 I llm_load_print_meta: n_merges         = 0
0.00.262.066 I llm_load_print_meta: vocab_only       = 0
0.00.262.066 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.067 I llm_load_print_meta: n_embd           = 2048
0.00.262.067 I llm_load_print_meta: n_layer          = 18
0.00.262.077 I llm_load_print_meta: n_head           = 8
0.00.262.078 I llm_load_print_meta: n_head_kv        = 1
0.00.262.079 I llm_load_print_meta: n_rot            = 256
0.00.262.079 I llm_load_print_meta: n_swa            = 0
0.00.262.079 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.079 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.080 I llm_load_print_meta: n_gqa            = 8
0.00.262.081 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.082 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.083 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.085 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.085 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.086 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.086 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.087 I llm_load_print_meta: n_ff             = 16384
0.00.262.087 I llm_load_print_meta: n_expert         = 0
0.00.262.087 I llm_load_print_meta: n_expert_used    = 0
0.00.262.087 I llm_load_print_meta: causal attn      = 1
0.00.262.088 I llm_load_print_meta: pooling type     = 0
0.00.262.088 I llm_load_print_meta: rope type        = 2
0.00.262.088 I llm_load_print_meta: rope scaling     = linear
0.00.262.090 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.091 I llm_load_print_meta: freq_scale_train = 1
0.00.262.091 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.092 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.092 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.092 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.092 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.093 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.093 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.094 I llm_load_print_meta: model type       = 2B
0.00.262.094 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.262.095 I llm_load_print_meta: model params     = 2.51 B
0.00.262.096 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.262.096 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.096 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.096 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.097 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.097 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.098 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.098 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.098 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.099 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.099 I llm_load_print_meta: max token length = 93
0.00.262.120 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.321.808 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.321.814 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.321.815 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.321.815 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.321.816 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.321.816 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.326.892 I llama_new_context_with_model: n_ctx      = 8192
0.00.326.898 I llama_new_context_with_model: n_batch    = 2048
0.00.326.899 I llama_new_context_with_model: n_ubatch   = 512
0.00.326.899 I llama_new_context_with_model: flash_attn = 0
0.00.326.902 I llama_new_context_with_model: freq_base  = 10000.0
0.00.326.903 I llama_new_context_with_model: freq_scale = 1
0.00.355.357 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.355.370 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.355.465 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.356.329 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.356.337 I llama_new_context_with_model: graph nodes  = 601
0.00.356.337 I llama_new_context_with_model: graph splits = 1
0.00.356.339 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.437.518 I main: llama threadpool init, n_threads = 4
0.00.437.534 I 
0.00.437.611 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.437.615 I 
0.00.437.658 I sampler seed: 2735231874
0.00.437.670 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.437.673 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.437.674 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.437.675 I 
 seconally:

**Answer the question by providing the following information:**

- The question you want the answer to.
- Any relevant information or context.

0.02.012.532 I llama_perf_sampler_print:    sampling time =       4.92 ms /    33 runs   (    0.15 ms per token,  6714.14 tokens per second)
0.02.012.534 I llama_perf_context_print:        load time =     435.63 ms
0.02.012.536 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.012.538 I llama_perf_context_print:        eval time =    1555.32 ms /    32 runs   (   48.60 ms per token,    20.57 tokens per second)
0.02.012.539 I llama_perf_context_print:       total time =    1575.02 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3983 (8841ce3f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31996.30 ms
main:    total time = 31996.30 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.552 I build: 3983 (8841ce3f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.754 I main: llama backend init
0.00.001.871 I main: load the model and apply lora adapter, if any
0.00.021.994 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.008 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.016 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.017 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.021 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.022 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.023 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.023 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.024 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.024 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.029 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.030 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.030 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.031 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.031 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.694 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.513 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.338 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.343 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.344 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.345 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.345 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.346 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.347 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.349 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.350 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.353 I llama_model_loader: - type  f32:   37 tensors
0.00.131.355 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.356 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.065 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.461 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.942 I llm_load_vocab: special tokens cache size = 5
0.00.261.606 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.622 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.623 I llm_load_print_meta: arch             = gemma
0.00.261.623 I llm_load_print_meta: vocab type       = SPM
0.00.261.624 I llm_load_print_meta: n_vocab          = 256000
0.00.261.624 I llm_load_print_meta: n_merges         = 0
0.00.261.624 I llm_load_print_meta: vocab_only       = 0
0.00.261.625 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.625 I llm_load_print_meta: n_embd           = 2048
0.00.261.625 I llm_load_print_meta: n_layer          = 18
0.00.261.638 I llm_load_print_meta: n_head           = 8
0.00.261.639 I llm_load_print_meta: n_head_kv        = 1
0.00.261.639 I llm_load_print_meta: n_rot            = 256
0.00.261.639 I llm_load_print_meta: n_swa            = 0
0.00.261.640 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.640 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.641 I llm_load_print_meta: n_gqa            = 8
0.00.261.642 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.643 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.644 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.645 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.646 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.646 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.647 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.647 I llm_load_print_meta: n_ff             = 16384
0.00.261.648 I llm_load_print_meta: n_expert         = 0
0.00.261.648 I llm_load_print_meta: n_expert_used    = 0
0.00.261.648 I llm_load_print_meta: causal attn      = 1
0.00.261.649 I llm_load_print_meta: pooling type     = 0
0.00.261.649 I llm_load_print_meta: rope type        = 2
0.00.261.649 I llm_load_print_meta: rope scaling     = linear
0.00.261.651 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.651 I llm_load_print_meta: freq_scale_train = 1
0.00.261.651 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.652 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.652 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.652 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.653 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.653 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.653 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.654 I llm_load_print_meta: model type       = 2B
0.00.261.654 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.261.655 I llm_load_print_meta: model params     = 2.51 B
0.00.261.656 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.261.656 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.657 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.657 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.657 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.658 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.658 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.658 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.659 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.660 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.660 I llm_load_print_meta: max token length = 93
0.00.261.689 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.320.620 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.325.646 I llama_new_context_with_model: n_ctx      = 8192
0.00.325.652 I llama_new_context_with_model: n_batch    = 2048
0.00.325.652 I llama_new_context_with_model: n_ubatch   = 512
0.00.325.652 I llama_new_context_with_model: flash_attn = 0
0.00.325.654 I llama_new_context_with_model: freq_base  = 10000.0
0.00.325.655 I llama_new_context_with_model: freq_scale = 1
0.00.355.396 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.355.411 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.355.503 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.356.389 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.356.397 I llama_new_context_with_model: graph nodes  = 601
0.00.356.398 I llama_new_context_with_model: graph splits = 1
0.00.356.399 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.436.515 I main: llama threadpool init, n_threads = 4
0.00.436.527 I 
0.00.436.604 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.436.607 I 
0.00.436.646 I sampler seed: 3025432739
0.00.436.657 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.436.660 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.436.660 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.436.663 I 
 affors to provide an alternative to the traditional research model.

**A. Collaborative Research Networks:**

- Collaboration among researchers across disciplines
- Shared resources and

0.01.995.614 I llama_perf_sampler_print:    sampling time =       4.65 ms /    33 runs   (    0.14 ms per token,  7093.72 tokens per second)
0.01.995.616 I llama_perf_context_print:        load time =     434.62 ms
0.01.995.619 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.995.621 I llama_perf_context_print:        eval time =    1539.94 ms /    32 runs   (   48.12 ms per token,    20.78 tokens per second)
0.01.995.622 I llama_perf_context_print:       total time =    1559.10 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.636s
user	8m14.255s
sys	0m6.810s
