+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.672 I build: 3983 (8841ce3f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.871 I main: llama backend init
0.00.002.803 I main: load the model and apply lora adapter, if any
0.00.024.981 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.196 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.285 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.296 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.298 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.302 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.304 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.305 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.306 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.307 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.308 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.315 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.316 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.318 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.319 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.320 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.019 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.434 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.087 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.097 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.098 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.099 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.100 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.101 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.102 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.106 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.107 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.108 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.109 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.110 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.119 I llama_model_loader: - type  f32:   37 tensors
0.00.267.123 I llama_model_loader: - type q8_0:  127 tensors
0.00.453.339 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.520.997 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.521.969 I llm_load_vocab: special tokens cache size = 5
0.00.615.315 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.615.389 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.615.390 I llm_load_print_meta: arch             = gemma
0.00.615.391 I llm_load_print_meta: vocab type       = SPM
0.00.615.391 I llm_load_print_meta: n_vocab          = 256000
0.00.615.393 I llm_load_print_meta: n_merges         = 0
0.00.615.394 I llm_load_print_meta: vocab_only       = 0
0.00.615.394 I llm_load_print_meta: n_ctx_train      = 8192
0.00.615.395 I llm_load_print_meta: n_embd           = 2048
0.00.615.395 I llm_load_print_meta: n_layer          = 18
0.00.615.458 I llm_load_print_meta: n_head           = 8
0.00.615.465 I llm_load_print_meta: n_head_kv        = 1
0.00.615.466 I llm_load_print_meta: n_rot            = 256
0.00.615.466 I llm_load_print_meta: n_swa            = 0
0.00.615.467 I llm_load_print_meta: n_embd_head_k    = 256
0.00.615.467 I llm_load_print_meta: n_embd_head_v    = 256
0.00.615.493 I llm_load_print_meta: n_gqa            = 8
0.00.615.501 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.615.506 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.615.507 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.615.509 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.615.510 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.615.511 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.615.511 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.615.516 I llm_load_print_meta: n_ff             = 16384
0.00.615.517 I llm_load_print_meta: n_expert         = 0
0.00.615.536 I llm_load_print_meta: n_expert_used    = 0
0.00.615.536 I llm_load_print_meta: causal attn      = 1
0.00.615.537 I llm_load_print_meta: pooling type     = 0
0.00.615.537 I llm_load_print_meta: rope type        = 2
0.00.615.538 I llm_load_print_meta: rope scaling     = linear
0.00.615.539 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.615.540 I llm_load_print_meta: freq_scale_train = 1
0.00.615.540 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.615.541 I llm_load_print_meta: rope_finetuned   = unknown
0.00.615.541 I llm_load_print_meta: ssm_d_conv       = 0
0.00.615.541 I llm_load_print_meta: ssm_d_inner      = 0
0.00.615.542 I llm_load_print_meta: ssm_d_state      = 0
0.00.615.542 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.615.542 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.615.543 I llm_load_print_meta: model type       = 2B
0.00.615.544 I llm_load_print_meta: model ftype      = Q8_0
0.00.615.545 I llm_load_print_meta: model params     = 2.51 B
0.00.615.550 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.615.551 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.615.551 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.615.551 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.615.552 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.615.552 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.615.559 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.615.560 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.615.566 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.615.568 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.615.569 I llm_load_print_meta: max token length = 93
0.00.615.742 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.714.457 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.714.467 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.714.468 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.714.469 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.714.470 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.714.470 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.720.191 I llama_new_context_with_model: n_ctx      = 8192
0.00.720.198 I llama_new_context_with_model: n_batch    = 2048
0.00.720.198 I llama_new_context_with_model: n_ubatch   = 512
0.00.720.199 I llama_new_context_with_model: flash_attn = 0
0.00.720.201 I llama_new_context_with_model: freq_base  = 10000.0
0.00.720.202 I llama_new_context_with_model: freq_scale = 1
0.00.749.611 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.749.658 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.749.774 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.751.146 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.751.148 I llama_new_context_with_model: graph nodes  = 601
0.00.751.149 I llama_new_context_with_model: graph splits = 1
0.00.751.163 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.363.516 I main: llama threadpool init, n_threads = 4
0.01.363.535 I 
0.01.363.642 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.363.646 I 
0.01.363.883 I sampler seed: 835308112
0.01.363.896 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.363.905 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.363.905 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.363.906 I 
 increabling, and hissing sounds occur when the air passing through the trachea is not sufficient to propel the mucus and debris out of the lungs efficiently.

**a

0.14.841.452 I llama_perf_sampler_print:    sampling time =      48.29 ms /    33 runs   (    1.46 ms per token,   683.34 tokens per second)
0.14.841.455 I llama_perf_context_print:        load time =    1360.63 ms
0.14.841.457 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.841.458 I llama_perf_context_print:        eval time =   13384.19 ms /    32 runs   (  418.26 ms per token,     2.39 tokens per second)
0.14.841.459 I llama_perf_context_print:       total time =   13477.95 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.692 I build: 3983 (8841ce3f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.926 I main: llama backend init
0.00.002.878 I main: load the model and apply lora adapter, if any
0.00.025.029 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.119 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.131 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.135 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.139 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.141 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.142 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.143 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.144 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.145 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.151 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.152 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.163 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.165 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.166 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.080 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.853 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.462 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.470 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.472 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.473 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.474 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.475 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.477 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.480 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.481 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.483 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.484 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.266.486 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.496 I llama_model_loader: - type  f32:   37 tensors
0.00.266.503 I llama_model_loader: - type q8_0:  127 tensors
0.00.449.358 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.296 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.332 I llm_load_vocab: special tokens cache size = 5
0.00.611.775 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.611.848 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.611.849 I llm_load_print_meta: arch             = gemma
0.00.611.850 I llm_load_print_meta: vocab type       = SPM
0.00.611.851 I llm_load_print_meta: n_vocab          = 256000
0.00.611.854 I llm_load_print_meta: n_merges         = 0
0.00.611.854 I llm_load_print_meta: vocab_only       = 0
0.00.611.855 I llm_load_print_meta: n_ctx_train      = 8192
0.00.611.855 I llm_load_print_meta: n_embd           = 2048
0.00.611.855 I llm_load_print_meta: n_layer          = 18
0.00.611.919 I llm_load_print_meta: n_head           = 8
0.00.611.926 I llm_load_print_meta: n_head_kv        = 1
0.00.611.928 I llm_load_print_meta: n_rot            = 256
0.00.611.929 I llm_load_print_meta: n_swa            = 0
0.00.611.929 I llm_load_print_meta: n_embd_head_k    = 256
0.00.611.929 I llm_load_print_meta: n_embd_head_v    = 256
0.00.611.934 I llm_load_print_meta: n_gqa            = 8
0.00.611.939 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.611.947 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.611.948 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.611.949 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.611.950 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.950 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.950 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.955 I llm_load_print_meta: n_ff             = 16384
0.00.611.956 I llm_load_print_meta: n_expert         = 0
0.00.611.957 I llm_load_print_meta: n_expert_used    = 0
0.00.611.957 I llm_load_print_meta: causal attn      = 1
0.00.611.957 I llm_load_print_meta: pooling type     = 0
0.00.611.958 I llm_load_print_meta: rope type        = 2
0.00.611.958 I llm_load_print_meta: rope scaling     = linear
0.00.611.960 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.611.961 I llm_load_print_meta: freq_scale_train = 1
0.00.611.962 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.611.963 I llm_load_print_meta: rope_finetuned   = unknown
0.00.611.963 I llm_load_print_meta: ssm_d_conv       = 0
0.00.611.963 I llm_load_print_meta: ssm_d_inner      = 0
0.00.611.964 I llm_load_print_meta: ssm_d_state      = 0
0.00.611.964 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.611.965 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.611.965 I llm_load_print_meta: model type       = 2B
0.00.611.966 I llm_load_print_meta: model ftype      = Q8_0
0.00.611.967 I llm_load_print_meta: model params     = 2.51 B
0.00.611.968 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.611.968 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.611.969 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.611.969 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.611.970 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.611.971 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.611.971 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.611.972 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.611.977 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.611.979 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.611.980 I llm_load_print_meta: max token length = 93
0.00.612.159 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.705.548 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.711.356 I llama_new_context_with_model: n_ctx      = 8192
0.00.711.364 I llama_new_context_with_model: n_batch    = 2048
0.00.711.364 I llama_new_context_with_model: n_ubatch   = 512
0.00.711.365 I llama_new_context_with_model: flash_attn = 0
0.00.711.367 I llama_new_context_with_model: freq_base  = 10000.0
0.00.711.368 I llama_new_context_with_model: freq_scale = 1
0.00.740.628 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.740.677 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.740.794 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.742.205 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.742.209 I llama_new_context_with_model: graph nodes  = 601
0.00.742.210 I llama_new_context_with_model: graph splits = 1
0.00.742.225 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.358.670 I main: llama threadpool init, n_threads = 4
0.01.358.682 I 
0.01.358.799 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.358.811 I 
0.01.359.049 I sampler seed: 3875595077
0.01.359.062 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.359.069 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.359.072 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.359.073 I 
 increasively, and then faded away.

What happened? [end of text]


0.06.878.095 I llama_perf_sampler_print:    sampling time =      19.61 ms /    14 runs   (    1.40 ms per token,   714.10 tokens per second)
0.06.878.098 I llama_perf_context_print:        load time =    1355.69 ms
0.06.878.113 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.878.114 I llama_perf_context_print:        eval time =    5480.29 ms /    13 runs   (  421.56 ms per token,     2.37 tokens per second)
0.06.878.115 I llama_perf_context_print:       total time =    5519.43 ms /    14 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.652 I build: 3983 (8841ce3f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.877 I main: llama backend init
0.00.002.848 I main: load the model and apply lora adapter, if any
0.00.024.864 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.085 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.182 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.194 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.195 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.200 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.204 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.206 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.208 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.209 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.211 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.219 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.221 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.223 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.224 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.226 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.334 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.203 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.886 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.894 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.895 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.896 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.897 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.898 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.900 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.904 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.905 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.906 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.907 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.267.908 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.918 I llama_model_loader: - type  f32:   37 tensors
0.00.267.922 I llama_model_loader: - type q8_0:  127 tensors
0.00.444.323 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.237 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.237 I llm_load_vocab: special tokens cache size = 5
0.00.615.609 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.615.682 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.615.686 I llm_load_print_meta: arch             = gemma
0.00.615.687 I llm_load_print_meta: vocab type       = SPM
0.00.615.688 I llm_load_print_meta: n_vocab          = 256000
0.00.615.690 I llm_load_print_meta: n_merges         = 0
0.00.615.691 I llm_load_print_meta: vocab_only       = 0
0.00.615.691 I llm_load_print_meta: n_ctx_train      = 8192
0.00.615.692 I llm_load_print_meta: n_embd           = 2048
0.00.615.692 I llm_load_print_meta: n_layer          = 18
0.00.615.767 I llm_load_print_meta: n_head           = 8
0.00.615.778 I llm_load_print_meta: n_head_kv        = 1
0.00.615.779 I llm_load_print_meta: n_rot            = 256
0.00.615.780 I llm_load_print_meta: n_swa            = 0
0.00.615.780 I llm_load_print_meta: n_embd_head_k    = 256
0.00.615.780 I llm_load_print_meta: n_embd_head_v    = 256
0.00.615.785 I llm_load_print_meta: n_gqa            = 8
0.00.615.790 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.615.795 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.615.796 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.615.798 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.615.799 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.615.800 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.615.801 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.615.808 I llm_load_print_meta: n_ff             = 16384
0.00.615.809 I llm_load_print_meta: n_expert         = 0
0.00.615.810 I llm_load_print_meta: n_expert_used    = 0
0.00.615.810 I llm_load_print_meta: causal attn      = 1
0.00.615.811 I llm_load_print_meta: pooling type     = 0
0.00.615.812 I llm_load_print_meta: rope type        = 2
0.00.615.813 I llm_load_print_meta: rope scaling     = linear
0.00.615.815 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.615.816 I llm_load_print_meta: freq_scale_train = 1
0.00.615.817 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.615.818 I llm_load_print_meta: rope_finetuned   = unknown
0.00.615.819 I llm_load_print_meta: ssm_d_conv       = 0
0.00.615.820 I llm_load_print_meta: ssm_d_inner      = 0
0.00.615.821 I llm_load_print_meta: ssm_d_state      = 0
0.00.615.822 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.615.822 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.615.824 I llm_load_print_meta: model type       = 2B
0.00.615.825 I llm_load_print_meta: model ftype      = Q8_0
0.00.615.826 I llm_load_print_meta: model params     = 2.51 B
0.00.615.828 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.615.846 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.615.850 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.615.851 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.615.851 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.615.852 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.615.853 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.615.853 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.615.861 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.615.863 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.615.863 I llm_load_print_meta: max token length = 93
0.00.616.049 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.693.646 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.693.657 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.693.658 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.693.658 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.693.659 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.693.660 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.699.498 I llama_new_context_with_model: n_ctx      = 8192
0.00.699.505 I llama_new_context_with_model: n_batch    = 2048
0.00.699.506 I llama_new_context_with_model: n_ubatch   = 512
0.00.699.506 I llama_new_context_with_model: flash_attn = 0
0.00.699.509 I llama_new_context_with_model: freq_base  = 10000.0
0.00.699.510 I llama_new_context_with_model: freq_scale = 1
0.00.728.643 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.728.684 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.728.810 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.730.233 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.730.238 I llama_new_context_with_model: graph nodes  = 601
0.00.730.239 I llama_new_context_with_model: graph splits = 1
0.00.730.256 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.378.267 I main: llama threadpool init, n_threads = 4
0.01.378.279 I 
0.01.378.396 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.378.403 I 
0.01.378.647 I sampler seed: 503286832
0.01.378.660 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.378.668 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.378.669 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.378.669 I 
 increasities, and other sexual practices. [end of text]


0.05.187.796 I llama_perf_sampler_print:    sampling time =      13.71 ms /    10 runs   (    1.37 ms per token,   729.29 tokens per second)
0.05.187.811 I llama_perf_context_print:        load time =    1375.32 ms
0.05.187.812 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.187.815 I llama_perf_context_print:        eval time =    3781.54 ms /     9 runs   (  420.17 ms per token,     2.38 tokens per second)
0.05.187.816 I llama_perf_context_print:       total time =    3809.54 ms /    10 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 3983 (8841ce3f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.853 I main: llama backend init
0.00.002.798 I main: load the model and apply lora adapter, if any
0.00.024.581 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.826 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.921 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.931 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.932 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.937 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.938 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.940 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.941 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.942 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.944 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.950 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.956 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.957 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.959 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.960 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.139 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.958 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.563 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.570 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.572 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.573 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.574 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.576 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.577 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.581 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.582 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.583 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.584 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.266.585 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.593 I llama_model_loader: - type  f32:   37 tensors
0.00.266.597 I llama_model_loader: - type q8_0:  127 tensors
0.00.453.768 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.420 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.296 I llm_load_vocab: special tokens cache size = 5
0.00.608.287 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.355 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.356 I llm_load_print_meta: arch             = gemma
0.00.608.357 I llm_load_print_meta: vocab type       = SPM
0.00.608.357 I llm_load_print_meta: n_vocab          = 256000
0.00.608.360 I llm_load_print_meta: n_merges         = 0
0.00.608.360 I llm_load_print_meta: vocab_only       = 0
0.00.608.360 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.361 I llm_load_print_meta: n_embd           = 2048
0.00.608.361 I llm_load_print_meta: n_layer          = 18
0.00.608.426 I llm_load_print_meta: n_head           = 8
0.00.608.433 I llm_load_print_meta: n_head_kv        = 1
0.00.608.433 I llm_load_print_meta: n_rot            = 256
0.00.608.434 I llm_load_print_meta: n_swa            = 0
0.00.608.435 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.435 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.441 I llm_load_print_meta: n_gqa            = 8
0.00.608.454 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.461 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.462 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.464 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.465 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.467 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.467 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.475 I llm_load_print_meta: n_ff             = 16384
0.00.608.476 I llm_load_print_meta: n_expert         = 0
0.00.608.476 I llm_load_print_meta: n_expert_used    = 0
0.00.608.477 I llm_load_print_meta: causal attn      = 1
0.00.608.478 I llm_load_print_meta: pooling type     = 0
0.00.608.479 I llm_load_print_meta: rope type        = 2
0.00.608.480 I llm_load_print_meta: rope scaling     = linear
0.00.608.482 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.483 I llm_load_print_meta: freq_scale_train = 1
0.00.608.484 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.485 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.486 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.486 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.487 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.488 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.489 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.490 I llm_load_print_meta: model type       = 2B
0.00.608.492 I llm_load_print_meta: model ftype      = Q8_0
0.00.608.493 I llm_load_print_meta: model params     = 2.51 B
0.00.608.495 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.608.496 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.497 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.498 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.499 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.500 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.501 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.502 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.511 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.514 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.514 I llm_load_print_meta: max token length = 93
0.00.608.696 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.680.096 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.680.103 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.685.924 I llama_new_context_with_model: n_ctx      = 8192
0.00.685.931 I llama_new_context_with_model: n_batch    = 2048
0.00.685.932 I llama_new_context_with_model: n_ubatch   = 512
0.00.685.932 I llama_new_context_with_model: flash_attn = 0
0.00.685.935 I llama_new_context_with_model: freq_base  = 10000.0
0.00.685.936 I llama_new_context_with_model: freq_scale = 1
0.00.714.777 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.714.819 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.714.938 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.716.334 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.716.339 I llama_new_context_with_model: graph nodes  = 601
0.00.716.339 I llama_new_context_with_model: graph splits = 1
0.00.716.356 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.332.639 I main: llama threadpool init, n_threads = 4
0.01.332.653 I 
0.01.332.783 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.332.787 I 
0.01.333.021 I sampler seed: 1902339120
0.01.333.033 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.333.041 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.333.042 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.333.045 I 
 increamically. [end of text]


0.03.018.963 I llama_perf_sampler_print:    sampling time =       6.11 ms /     5 runs   (    1.22 ms per token,   817.80 tokens per second)
0.03.018.980 I llama_perf_context_print:        load time =    1329.75 ms
0.03.018.981 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.018.983 I llama_perf_context_print:        eval time =    1673.12 ms /     4 runs   (  418.28 ms per token,     2.39 tokens per second)
0.03.018.984 I llama_perf_context_print:       total time =    1686.34 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m39.482s
user	1m50.814s
sys	0m9.428s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3983 (8841ce3f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198795.84 ms
main:    total time = 198795.84 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 3983 (8841ce3f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.825 I main: llama backend init
0.00.002.760 I main: load the model and apply lora adapter, if any
0.00.024.813 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.024 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.113 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.123 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.125 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.130 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.131 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.132 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.133 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.135 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.135 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.141 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.143 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.145 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.146 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.147 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.334 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.851 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.396 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.404 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.406 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.406 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.407 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.409 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.410 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.414 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.415 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.416 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.417 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.419 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.427 I llama_model_loader: - type  f32:   37 tensors
0.00.266.431 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.433 I llama_model_loader: - type q6_K:   19 tensors
0.00.443.145 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.291 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.117 I llm_load_vocab: special tokens cache size = 5
0.00.597.329 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.597.404 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.597.408 I llm_load_print_meta: arch             = gemma
0.00.597.408 I llm_load_print_meta: vocab type       = SPM
0.00.597.409 I llm_load_print_meta: n_vocab          = 256000
0.00.597.411 I llm_load_print_meta: n_merges         = 0
0.00.597.412 I llm_load_print_meta: vocab_only       = 0
0.00.597.412 I llm_load_print_meta: n_ctx_train      = 8192
0.00.597.413 I llm_load_print_meta: n_embd           = 2048
0.00.597.413 I llm_load_print_meta: n_layer          = 18
0.00.597.476 I llm_load_print_meta: n_head           = 8
0.00.597.485 I llm_load_print_meta: n_head_kv        = 1
0.00.597.486 I llm_load_print_meta: n_rot            = 256
0.00.597.486 I llm_load_print_meta: n_swa            = 0
0.00.597.487 I llm_load_print_meta: n_embd_head_k    = 256
0.00.597.488 I llm_load_print_meta: n_embd_head_v    = 256
0.00.597.492 I llm_load_print_meta: n_gqa            = 8
0.00.597.497 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.597.502 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.597.504 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.597.506 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.597.507 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.597.508 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.597.508 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.597.513 I llm_load_print_meta: n_ff             = 16384
0.00.597.513 I llm_load_print_meta: n_expert         = 0
0.00.597.514 I llm_load_print_meta: n_expert_used    = 0
0.00.597.514 I llm_load_print_meta: causal attn      = 1
0.00.597.514 I llm_load_print_meta: pooling type     = 0
0.00.597.515 I llm_load_print_meta: rope type        = 2
0.00.597.516 I llm_load_print_meta: rope scaling     = linear
0.00.597.517 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.597.518 I llm_load_print_meta: freq_scale_train = 1
0.00.597.518 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.597.521 I llm_load_print_meta: rope_finetuned   = unknown
0.00.597.521 I llm_load_print_meta: ssm_d_conv       = 0
0.00.597.522 I llm_load_print_meta: ssm_d_inner      = 0
0.00.597.522 I llm_load_print_meta: ssm_d_state      = 0
0.00.597.522 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.597.522 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.597.523 I llm_load_print_meta: model type       = 2B
0.00.597.524 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.597.525 I llm_load_print_meta: model params     = 2.51 B
0.00.597.525 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.597.525 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.597.526 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.597.526 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.597.527 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.597.527 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.597.527 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.597.528 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.597.534 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.597.538 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.597.538 I llm_load_print_meta: max token length = 93
0.00.597.709 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.659.161 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.659.172 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.659.173 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.659.174 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.659.174 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.659.175 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.664.759 I llama_new_context_with_model: n_ctx      = 8192
0.00.664.766 I llama_new_context_with_model: n_batch    = 2048
0.00.664.766 I llama_new_context_with_model: n_ubatch   = 512
0.00.664.767 I llama_new_context_with_model: flash_attn = 0
0.00.664.770 I llama_new_context_with_model: freq_base  = 10000.0
0.00.664.771 I llama_new_context_with_model: freq_scale = 1
0.00.693.634 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.693.673 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.693.789 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.695.183 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.695.188 I llama_new_context_with_model: graph nodes  = 601
0.00.695.188 I llama_new_context_with_model: graph splits = 1
0.00.695.204 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.277.308 I main: llama threadpool init, n_threads = 4
0.01.277.321 I 
0.01.277.427 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.277.431 I 
0.01.277.662 I sampler seed: 2749324363
0.01.277.674 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.277.685 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.277.686 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.277.686 I 
 seconally:

**a) Explain the concept of a contingency table.**
**b) Outline the steps involved in creating a contingency table.**
**c

0.12.288.920 I llama_perf_sampler_print:    sampling time =      48.02 ms /    33 runs   (    1.46 ms per token,   687.20 tokens per second)
0.12.288.937 I llama_perf_context_print:        load time =    1274.46 ms
0.12.288.939 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.288.941 I llama_perf_context_print:        eval time =   10919.15 ms /    32 runs   (  341.22 ms per token,     2.93 tokens per second)
0.12.288.942 I llama_perf_context_print:       total time =   11011.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3983 (8841ce3f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199412.24 ms
main:    total time = 199412.24 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.618 I build: 3983 (8841ce3f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.814 I main: llama backend init
0.00.002.770 I main: load the model and apply lora adapter, if any
0.00.024.744 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.837 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.850 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.852 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.856 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.860 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.861 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.862 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.863 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.864 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.870 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.871 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.872 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.873 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.874 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.618 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.188 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.811 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.818 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.819 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.820 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.821 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.823 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.824 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.827 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.828 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.836 I llama_model_loader: - type  f32:   37 tensors
0.00.266.840 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.841 I llama_model_loader: - type q6_K:   19 tensors
0.00.443.386 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.108 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.004 I llm_load_vocab: special tokens cache size = 5
0.00.597.171 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.597.242 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.597.243 I llm_load_print_meta: arch             = gemma
0.00.597.244 I llm_load_print_meta: vocab type       = SPM
0.00.597.245 I llm_load_print_meta: n_vocab          = 256000
0.00.597.247 I llm_load_print_meta: n_merges         = 0
0.00.597.248 I llm_load_print_meta: vocab_only       = 0
0.00.597.248 I llm_load_print_meta: n_ctx_train      = 8192
0.00.597.248 I llm_load_print_meta: n_embd           = 2048
0.00.597.249 I llm_load_print_meta: n_layer          = 18
0.00.597.314 I llm_load_print_meta: n_head           = 8
0.00.597.321 I llm_load_print_meta: n_head_kv        = 1
0.00.597.322 I llm_load_print_meta: n_rot            = 256
0.00.597.322 I llm_load_print_meta: n_swa            = 0
0.00.597.323 I llm_load_print_meta: n_embd_head_k    = 256
0.00.597.323 I llm_load_print_meta: n_embd_head_v    = 256
0.00.597.328 I llm_load_print_meta: n_gqa            = 8
0.00.597.332 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.597.337 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.597.338 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.597.340 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.597.341 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.597.341 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.597.342 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.597.347 I llm_load_print_meta: n_ff             = 16384
0.00.597.348 I llm_load_print_meta: n_expert         = 0
0.00.597.348 I llm_load_print_meta: n_expert_used    = 0
0.00.597.349 I llm_load_print_meta: causal attn      = 1
0.00.597.349 I llm_load_print_meta: pooling type     = 0
0.00.597.350 I llm_load_print_meta: rope type        = 2
0.00.597.351 I llm_load_print_meta: rope scaling     = linear
0.00.597.352 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.597.353 I llm_load_print_meta: freq_scale_train = 1
0.00.597.353 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.597.354 I llm_load_print_meta: rope_finetuned   = unknown
0.00.597.355 I llm_load_print_meta: ssm_d_conv       = 0
0.00.597.355 I llm_load_print_meta: ssm_d_inner      = 0
0.00.597.355 I llm_load_print_meta: ssm_d_state      = 0
0.00.597.362 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.597.362 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.597.363 I llm_load_print_meta: model type       = 2B
0.00.597.364 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.597.364 I llm_load_print_meta: model params     = 2.51 B
0.00.597.365 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.597.366 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.597.366 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.597.367 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.597.367 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.597.368 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.597.368 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.597.369 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.597.374 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.597.376 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.597.377 I llm_load_print_meta: max token length = 93
0.00.597.538 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.655.494 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.661.029 I llama_new_context_with_model: n_ctx      = 8192
0.00.661.036 I llama_new_context_with_model: n_batch    = 2048
0.00.661.036 I llama_new_context_with_model: n_ubatch   = 512
0.00.661.037 I llama_new_context_with_model: flash_attn = 0
0.00.661.039 I llama_new_context_with_model: freq_base  = 10000.0
0.00.661.040 I llama_new_context_with_model: freq_scale = 1
0.00.691.074 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.691.116 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.691.230 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.692.614 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.692.619 I llama_new_context_with_model: graph nodes  = 601
0.00.692.620 I llama_new_context_with_model: graph splits = 1
0.00.692.635 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.271.857 I main: llama threadpool init, n_threads = 4
0.01.271.869 I 
0.01.271.976 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.271.980 I 
0.01.272.208 I sampler seed: 2025647559
0.01.272.220 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.272.227 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.272.230 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.272.230 I 
 seconally with the question.

I am unable to answer this question as I do not have access to personal or sensitive information. [end of text]


0.10.572.898 I llama_perf_sampler_print:    sampling time =      40.66 ms /    28 runs   (    1.45 ms per token,   688.55 tokens per second)
0.10.572.901 I llama_perf_context_print:        load time =    1269.00 ms
0.10.572.903 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.572.904 I llama_perf_context_print:        eval time =    9222.41 ms /    27 runs   (  341.57 ms per token,     2.93 tokens per second)
0.10.572.905 I llama_perf_context_print:       total time =    9301.05 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m3.923s
user	50m9.094s
sys	0m6.423s
