+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
main: build = 3738 (5a0d1642)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
[34m00000.00.000.510[0m [32mI [0mmain: llama backend init
[34m00000.00.002.518[0m [32mI [0mmain: load the model and apply lora adapter, if any
[34m00000.00.025.040[0m [32mI [0mllama_model_loader: additional 5 GGUFs metadata loaded.
[34m00000.00.025.258[0m [32mI [0mllama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
[34m00000.00.025.362[0m [32mI [0mllama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
[34m00000.00.025.375[0m [32mI [0mllama_model_loader: - kv   0:                       general.architecture str              = gemma
[34m00000.00.025.377[0m [32mI [0mllama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
[34m00000.00.025.383[0m [32mI [0mllama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
[34m00000.00.025.384[0m [32mI [0mllama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
[34m00000.00.025.385[0m [32mI [0mllama_model_loader: - kv   4:                          gemma.block_count u32              = 18
[34m00000.00.025.387[0m [32mI [0mllama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
[34m00000.00.025.388[0m [32mI [0mllama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
[34m00000.00.025.389[0m [32mI [0mllama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
[34m00000.00.025.406[0m [32mI [0mllama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
[34m00000.00.025.410[0m [32mI [0mllama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
[34m00000.00.025.411[0m [32mI [0mllama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
[34m00000.00.025.413[0m [32mI [0mllama_model_loader: - kv  11:                          general.file_type u32              = 7
[34m00000.00.025.414[0m [32mI [0mllama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
[34m00000.00.095.892[0m [32mI [0mllama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
[34m00000.00.184.530[0m [32mI [0mllama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
[34m00000.00.196.990[0m [32mI [0mllama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
[34m00000.00.196.997[0m [32mI [0mllama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
[34m00000.00.196.998[0m [32mI [0mllama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
[34m00000.00.196.999[0m [32mI [0mllama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
[34m00000.00.197.000[0m [32mI [0mllama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
[34m00000.00.197.001[0m [32mI [0mllama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
[34m00000.00.197.001[0m [32mI [0mllama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
[34m00000.00.197.005[0m [32mI [0mllama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
[34m00000.00.197.006[0m [32mI [0mllama_model_loader: - kv  23:               general.quantization_version u32              = 2
[34m00000.00.197.006[0m [32mI [0mllama_model_loader: - kv  24:                                   split.no u16              = 0
[34m00000.00.197.007[0m [32mI [0mllama_model_loader: - kv  25:                                split.count u16              = 6
[34m00000.00.197.008[0m [32mI [0mllama_model_loader: - kv  26:                        split.tensors.count i32              = 164
[34m00000.00.197.015[0m [32mI [0mllama_model_loader: - type  f32:   37 tensors
[34m00000.00.197.019[0m [32mI [0mllama_model_loader: - type q8_0:  127 tensors
[34m00000.00.490.599[0m [35mW llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
[0m[34m00000.00.491.661[0m [32mI [0mllm_load_vocab: special tokens cache size = 5
[34m00000.00.549.589[0m [32mI [0mllm_load_vocab: token to piece cache size = 1.6014 MB
[34m00000.00.549.653[0m [32mI [0mllm_load_print_meta: format           = GGUF V3 (latest)
[34m00000.00.549.654[0m [32mI [0mllm_load_print_meta: arch             = gemma
[34m00000.00.549.655[0m [32mI [0mllm_load_print_meta: vocab type       = SPM
[34m00000.00.549.657[0m [32mI [0mllm_load_print_meta: n_vocab          = 256000
[34m00000.00.549.659[0m [32mI [0mllm_load_print_meta: n_merges         = 0
[34m00000.00.549.660[0m [32mI [0mllm_load_print_meta: vocab_only       = 0
[34m00000.00.549.660[0m [32mI [0mllm_load_print_meta: n_ctx_train      = 8192
[34m00000.00.549.661[0m [32mI [0mllm_load_print_meta: n_embd           = 2048
[34m00000.00.549.661[0m [32mI [0mllm_load_print_meta: n_layer          = 18
[34m00000.00.549.696[0m [32mI [0mllm_load_print_meta: n_head           = 8
[34m00000.00.549.703[0m [32mI [0mllm_load_print_meta: n_head_kv        = 1
[34m00000.00.549.703[0m [32mI [0mllm_load_print_meta: n_rot            = 256
[34m00000.00.549.704[0m [32mI [0mllm_load_print_meta: n_swa            = 0
[34m00000.00.549.704[0m [32mI [0mllm_load_print_meta: n_embd_head_k    = 256
[34m00000.00.549.704[0m [32mI [0mllm_load_print_meta: n_embd_head_v    = 256
[34m00000.00.549.710[0m [32mI [0mllm_load_print_meta: n_gqa            = 8
[34m00000.00.549.714[0m [32mI [0mllm_load_print_meta: n_embd_k_gqa     = 256
[34m00000.00.549.719[0m [32mI [0mllm_load_print_meta: n_embd_v_gqa     = 256
[34m00000.00.549.720[0m [32mI [0mllm_load_print_meta: f_norm_eps       = 0.0e+00
[34m00000.00.549.721[0m [32mI [0mllm_load_print_meta: f_norm_rms_eps   = 1.0e-06
[34m00000.00.549.722[0m [32mI [0mllm_load_print_meta: f_clamp_kqv      = 0.0e+00
[34m00000.00.549.722[0m [32mI [0mllm_load_print_meta: f_max_alibi_bias = 0.0e+00
[34m00000.00.549.723[0m [32mI [0mllm_load_print_meta: f_logit_scale    = 0.0e+00
[34m00000.00.549.728[0m [32mI [0mllm_load_print_meta: n_ff             = 16384
[34m00000.00.549.728[0m [32mI [0mllm_load_print_meta: n_expert         = 0
[34m00000.00.549.729[0m [32mI [0mllm_load_print_meta: n_expert_used    = 0
[34m00000.00.549.729[0m [32mI [0mllm_load_print_meta: causal attn      = 1
[34m00000.00.549.730[0m [32mI [0mllm_load_print_meta: pooling type     = 0
[34m00000.00.549.730[0m [32mI [0mllm_load_print_meta: rope type        = 2
[34m00000.00.549.730[0m [32mI [0mllm_load_print_meta: rope scaling     = linear
[34m00000.00.549.749[0m [32mI [0mllm_load_print_meta: freq_base_train  = 10000.0
[34m00000.00.549.750[0m [32mI [0mllm_load_print_meta: freq_scale_train = 1
[34m00000.00.549.750[0m [32mI [0mllm_load_print_meta: n_ctx_orig_yarn  = 8192
[34m00000.00.549.751[0m [32mI [0mllm_load_print_meta: rope_finetuned   = unknown
[34m00000.00.549.751[0m [32mI [0mllm_load_print_meta: ssm_d_conv       = 0
[34m00000.00.549.752[0m [32mI [0mllm_load_print_meta: ssm_d_inner      = 0
[34m00000.00.549.752[0m [32mI [0mllm_load_print_meta: ssm_d_state      = 0
[34m00000.00.549.752[0m [32mI [0mllm_load_print_meta: ssm_dt_rank      = 0
[34m00000.00.549.753[0m [32mI [0mllm_load_print_meta: ssm_dt_b_c_rms   = 0
[34m00000.00.549.753[0m [32mI [0mllm_load_print_meta: model type       = 2B
[34m00000.00.549.754[0m [32mI [0mllm_load_print_meta: model ftype      = Q8_0
[34m00000.00.549.755[0m [32mI [0mllm_load_print_meta: model params     = 2.51 B
[34m00000.00.549.756[0m [32mI [0mllm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
[34m00000.00.549.756[0m [32mI [0mllm_load_print_meta: general.name     = gemma-1.1-2b-it
[34m00000.00.549.757[0m [32mI [0mllm_load_print_meta: BOS token        = 2 '<bos>'
[34m00000.00.549.758[0m [32mI [0mllm_load_print_meta: EOS token        = 1 '<eos>'
[34m00000.00.549.758[0m [32mI [0mllm_load_print_meta: UNK token        = 3 '<unk>'
[34m00000.00.549.759[0m [32mI [0mllm_load_print_meta: PAD token        = 0 '<pad>'
[34m00000.00.549.759[0m [32mI [0mllm_load_print_meta: LF token         = 227 '<0x0A>'
[34m00000.00.549.760[0m [32mI [0mllm_load_print_meta: EOT token        = 107 '<end_of_turn>'
[34m00000.00.549.760[0m [32mI [0mllm_load_print_meta: max token length = 93
[34m00000.00.549.932[0m [32mI [0mllm_load_tensors: ggml ctx size =    0.08 MiB
[34m00000.00.648.738[0m [32mI [0mllm_load_tensors:        CPU buffer size =   865.98 MiB
[34m00000.00.648.748[0m [32mI [0mllm_load_tensors:        CPU buffer size =   334.74 MiB
[34m00000.00.648.749[0m [32mI [0mllm_load_tensors:        CPU buffer size =   402.73 MiB
[34m00000.00.648.750[0m [32mI [0mllm_load_tensors:        CPU buffer size =   335.27 MiB
[34m00000.00.648.750[0m [32mI [0mllm_load_tensors:        CPU buffer size =   338.98 MiB
[34m00000.00.648.751[0m [32mI [0mllm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
[34m00000.00.654.689[0m [32mI [0mllama_new_context_with_model: n_ctx      = 8192
[34m00000.00.654.697[0m [32mI [0mllama_new_context_with_model: n_batch    = 2048
[34m00000.00.654.697[0m [32mI [0mllama_new_context_with_model: n_ubatch   = 512
[34m00000.00.654.698[0m [32mI [0mllama_new_context_with_model: flash_attn = 0
[34m00000.00.654.702[0m [32mI [0mllama_new_context_with_model: freq_base  = 10000.0
[34m00000.00.654.703[0m [32mI [0mllama_new_context_with_model: freq_scale = 1
[34m00000.00.684.381[0m [32mI [0mllama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
[34m00000.00.684.424[0m [32mI [0mllama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
[34m00000.00.684.536[0m [32mI [0mllama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
[34m00000.00.685.926[0m [32mI [0mllama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
[34m00000.00.685.932[0m [32mI [0mllama_new_context_with_model: graph nodes  = 601
[34m00000.00.685.933[0m [32mI [0mllama_new_context_with_model: graph splits = 1
[34m00000.00.685.951[0m [35mW llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
[0m[34m00000.01.301.576[0m [32mI [0mmain: llama threadpool init, n_threads = 4
[34m00000.01.301.587[0m [32mI [0m
[34m00000.01.301.679[0m [32mI [0msystem_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
[34m00000.01.301.685[0m [32mI [0m
[34m00000.01.301.853[0m [32mI [0msampler seed: 4007252171
[34m00000.01.301.865[0m [32mI [0msampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
[34m00000.01.301.874[0m [32mI [0msampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
[34m00000.01.301.875[0m [32mI [0mgenerate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically. [end of text]


[34m00000.02.992.170[0m [32mI [0mllama_perf_print:    sampling time =       6.24 ms /     5 runs   (    1.25 ms per token,   801.80 tokens per second)
[34m00000.02.992.175[0m [32mI [0mllama_perf_print:        load time =     751.81 ms
[34m00000.02.992.185[0m [32mI [0mllama_perf_print: prompt eval time =       0.00 ms /     0 tokens (    -nan ms per token,     -nan tokens per second)
[34m00000.02.992.188[0m [32mI [0mllama_perf_print:        eval time =    1678.89 ms /     4 runs   (  419.72 ms per token,     2.38 tokens per second)
[34m00000.02.992.189[0m [32mI [0mllama_perf_print:       total time =    1690.51 ms /     4 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
main: build = 3738 (5a0d1642)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
[34m00000.00.000.494[0m [32mI [0mmain: llama backend init
[34m00000.00.002.498[0m [32mI [0mmain: load the model and apply lora adapter, if any
[34m00000.00.025.193[0m [32mI [0mllama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
[34m00000.00.025.292[0m [32mI [0mllama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
[34m00000.00.025.308[0m [32mI [0mllama_model_loader: - kv   0:                       general.architecture str              = gemma
[34m00000.00.025.309[0m [32mI [0mllama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
[34m00000.00.025.314[0m [32mI [0mllama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
[34m00000.00.025.320[0m [32mI [0mllama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
[34m00000.00.025.321[0m [32mI [0mllama_model_loader: - kv   4:                          gemma.block_count u32              = 18
[34m00000.00.025.322[0m [32mI [0mllama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
[34m00000.00.025.323[0m [32mI [0mllama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
[34m00000.00.025.324[0m [32mI [0mllama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
[34m00000.00.025.331[0m [32mI [0mllama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
[34m00000.00.025.332[0m [32mI [0mllama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
[34m00000.00.025.346[0m [32mI [0mllama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
[34m00000.00.025.347[0m [32mI [0mllama_model_loader: - kv  11:                          general.file_type u32              = 7
[34m00000.00.025.348[0m [32mI [0mllama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
[34m00000.00.096.644[0m [32mI [0mllama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
[34m00000.00.185.354[0m [32mI [0mllama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
[34m00000.00.197.760[0m [32mI [0mllama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
[34m00000.00.197.770[0m [32mI [0mllama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
[34m00000.00.197.771[0m [32mI [0mllama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
[34m00000.00.197.772[0m [32mI [0mllama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
[34m00000.00.197.773[0m [32mI [0mllama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
[34m00000.00.197.776[0m [32mI [0mllama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
[34m00000.00.197.777[0m [32mI [0mllama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
[34m00000.00.197.780[0m [32mI [0mllama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
[34m00000.00.197.781[0m [32mI [0mllama_model_loader: - kv  23:               general.quantization_version u32              = 2
[34m00000.00.197.782[0m [32mI [0mllama_model_loader: - kv  24:                                   split.no u16              = 0
[34m00000.00.197.783[0m [32mI [0mllama_model_loader: - kv  25:                                split.count u16              = 0
[34m00000.00.197.784[0m [32mI [0mllama_model_loader: - kv  26:                        split.tensors.count i32              = 164
[34m00000.00.197.793[0m [32mI [0mllama_model_loader: - type  f32:   37 tensors
[34m00000.00.197.796[0m [32mI [0mllama_model_loader: - type q8_0:  127 tensors
[34m00000.00.497.890[0m [35mW llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
[0m[34m00000.00.498.896[0m [32mI [0mllm_load_vocab: special tokens cache size = 5
[34m00000.00.556.225[0m [32mI [0mllm_load_vocab: token to piece cache size = 1.6014 MB
[34m00000.00.556.284[0m [32mI [0mllm_load_print_meta: format           = GGUF V3 (latest)
[34m00000.00.556.285[0m [32mI [0mllm_load_print_meta: arch             = gemma
[34m00000.00.556.285[0m [32mI [0mllm_load_print_meta: vocab type       = SPM
[34m00000.00.556.286[0m [32mI [0mllm_load_print_meta: n_vocab          = 256000
[34m00000.00.556.289[0m [32mI [0mllm_load_print_meta: n_merges         = 0
[34m00000.00.556.289[0m [32mI [0mllm_load_print_meta: vocab_only       = 0
[34m00000.00.556.290[0m [32mI [0mllm_load_print_meta: n_ctx_train      = 8192
[34m00000.00.556.290[0m [32mI [0mllm_load_print_meta: n_embd           = 2048
[34m00000.00.556.290[0m [32mI [0mllm_load_print_meta: n_layer          = 18
[34m00000.00.556.326[0m [32mI [0mllm_load_print_meta: n_head           = 8
[34m00000.00.556.333[0m [32mI [0mllm_load_print_meta: n_head_kv        = 1
[34m00000.00.556.333[0m [32mI [0mllm_load_print_meta: n_rot            = 256
[34m00000.00.556.334[0m [32mI [0mllm_load_print_meta: n_swa            = 0
[34m00000.00.556.334[0m [32mI [0mllm_load_print_meta: n_embd_head_k    = 256
[34m00000.00.556.334[0m [32mI [0mllm_load_print_meta: n_embd_head_v    = 256
[34m00000.00.556.339[0m [32mI [0mllm_load_print_meta: n_gqa            = 8
[34m00000.00.556.343[0m [32mI [0mllm_load_print_meta: n_embd_k_gqa     = 256
[34m00000.00.556.348[0m [32mI [0mllm_load_print_meta: n_embd_v_gqa     = 256
[34m00000.00.556.349[0m [32mI [0mllm_load_print_meta: f_norm_eps       = 0.0e+00
[34m00000.00.556.350[0m [32mI [0mllm_load_print_meta: f_norm_rms_eps   = 1.0e-06
[34m00000.00.556.350[0m [32mI [0mllm_load_print_meta: f_clamp_kqv      = 0.0e+00
[34m00000.00.556.351[0m [32mI [0mllm_load_print_meta: f_max_alibi_bias = 0.0e+00
[34m00000.00.556.351[0m [32mI [0mllm_load_print_meta: f_logit_scale    = 0.0e+00
[34m00000.00.556.356[0m [32mI [0mllm_load_print_meta: n_ff             = 16384
[34m00000.00.556.357[0m [32mI [0mllm_load_print_meta: n_expert         = 0
[34m00000.00.556.357[0m [32mI [0mllm_load_print_meta: n_expert_used    = 0
[34m00000.00.556.357[0m [32mI [0mllm_load_print_meta: causal attn      = 1
[34m00000.00.556.358[0m [32mI [0mllm_load_print_meta: pooling type     = 0
[34m00000.00.556.358[0m [32mI [0mllm_load_print_meta: rope type        = 2
[34m00000.00.556.358[0m [32mI [0mllm_load_print_meta: rope scaling     = linear
[34m00000.00.556.360[0m [32mI [0mllm_load_print_meta: freq_base_train  = 10000.0
[34m00000.00.556.360[0m [32mI [0mllm_load_print_meta: freq_scale_train = 1
[34m00000.00.556.361[0m [32mI [0mllm_load_print_meta: n_ctx_orig_yarn  = 8192
[34m00000.00.556.361[0m [32mI [0mllm_load_print_meta: rope_finetuned   = unknown
[34m00000.00.556.361[0m [32mI [0mllm_load_print_meta: ssm_d_conv       = 0
[34m00000.00.556.361[0m [32mI [0mllm_load_print_meta: ssm_d_inner      = 0
[34m00000.00.556.362[0m [32mI [0mllm_load_print_meta: ssm_d_state      = 0
[34m00000.00.556.362[0m [32mI [0mllm_load_print_meta: ssm_dt_rank      = 0
[34m00000.00.556.362[0m [32mI [0mllm_load_print_meta: ssm_dt_b_c_rms   = 0
[34m00000.00.556.363[0m [32mI [0mllm_load_print_meta: model type       = 2B
[34m00000.00.556.364[0m [32mI [0mllm_load_print_meta: model ftype      = Q8_0
[34m00000.00.556.364[0m [32mI [0mllm_load_print_meta: model params     = 2.51 B
[34m00000.00.556.365[0m [32mI [0mllm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
[34m00000.00.556.366[0m [32mI [0mllm_load_print_meta: general.name     = gemma-1.1-2b-it
[34m00000.00.556.366[0m [32mI [0mllm_load_print_meta: BOS token        = 2 '<bos>'
[34m00000.00.556.367[0m [32mI [0mllm_load_print_meta: EOS token        = 1 '<eos>'
[34m00000.00.556.367[0m [32mI [0mllm_load_print_meta: UNK token        = 3 '<unk>'
[34m00000.00.556.368[0m [32mI [0mllm_load_print_meta: PAD token        = 0 '<pad>'
[34m00000.00.556.368[0m [32mI [0mllm_load_print_meta: LF token         = 227 '<0x0A>'
[34m00000.00.556.391[0m [32mI [0mllm_load_print_meta: EOT token        = 107 '<end_of_turn>'
[34m00000.00.556.392[0m [32mI [0mllm_load_print_meta: max token length = 93
[34m00000.00.556.563[0m [32mI [0mllm_load_tensors: ggml ctx size =    0.08 MiB
[34m00000.00.649.012[0m [32mI [0mllm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
[34m00000.00.654.660[0m [32mI [0mllama_new_context_with_model: n_ctx      = 8192
[34m00000.00.654.667[0m [32mI [0mllama_new_context_with_model: n_batch    = 2048
[34m00000.00.654.667[0m [32mI [0mllama_new_context_with_model: n_ubatch   = 512
[34m00000.00.654.668[0m [32mI [0mllama_new_context_with_model: flash_attn = 0
[34m00000.00.654.671[0m [32mI [0mllama_new_context_with_model: freq_base  = 10000.0
[34m00000.00.654.671[0m [32mI [0mllama_new_context_with_model: freq_scale = 1
[34m00000.00.684.347[0m [32mI [0mllama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
[34m00000.00.684.389[0m [32mI [0mllama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
[34m00000.00.684.503[0m [32mI [0mllama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
[34m00000.00.685.869[0m [32mI [0mllama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
[34m00000.00.685.874[0m [32mI [0mllama_new_context_with_model: graph nodes  = 601
[34m00000.00.685.874[0m [32mI [0mllama_new_context_with_model: graph splits = 1
[34m00000.00.685.890[0m [35mW llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
[0m[34m00000.01.301.570[0m [32mI [0mmain: llama threadpool init, n_threads = 4
[34m00000.01.301.582[0m [32mI [0m
[34m00000.01.301.676[0m [32mI [0msystem_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
[34m00000.01.301.680[0m [32mI [0m
[34m00000.01.301.838[0m [32mI [0msampler seed: 116132221
[34m00000.01.301.850[0m [32mI [0msampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
[34m00000.01.301.857[0m [32mI [0msampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
[34m00000.01.301.858[0m [32mI [0mgenerate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities in the ancient Egyptian culture.

## The Curse of the King's Daughter: A Play on Words

This section will explore the connection between the

[34m00000.14.784.484[0m [32mI [0mllama_perf_print:    sampling time =      49.13 ms /    33 runs   (    1.49 ms per token,   671.63 tokens per second)
[34m00000.14.784.489[0m [32mI [0mllama_perf_print:        load time =     745.17 ms
[34m00000.14.784.490[0m [32mI [0mllama_perf_print: prompt eval time =       0.00 ms /     0 tokens (    -nan ms per token,     -nan tokens per second)
[34m00000.14.784.492[0m [32mI [0mllama_perf_print:        eval time =   13401.01 ms /    32 runs   (  418.78 ms per token,     2.39 tokens per second)
[34m00000.14.784.493[0m [32mI [0mllama_perf_print:       total time =   13482.30 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
main: build = 3738 (5a0d1642)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
[34m00000.00.000.519[0m [32mI [0mmain: llama backend init
[34m00000.00.002.532[0m [32mI [0mmain: load the model and apply lora adapter, if any
[34m00000.00.024.929[0m [32mI [0mllama_model_loader: additional 6 GGUFs metadata loaded.
[34m00000.00.025.139[0m [32mI [0mllama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
[34m00000.00.025.246[0m [32mI [0mllama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
[34m00000.00.025.258[0m [32mI [0mllama_model_loader: - kv   0:                       general.architecture str              = gemma
[34m00000.00.025.260[0m [32mI [0mllama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
[34m00000.00.025.265[0m [32mI [0mllama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
[34m00000.00.025.266[0m [32mI [0mllama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
[34m00000.00.025.268[0m [32mI [0mllama_model_loader: - kv   4:                          gemma.block_count u32              = 18
[34m00000.00.025.275[0m [32mI [0mllama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
[34m00000.00.025.277[0m [32mI [0mllama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
[34m00000.00.025.279[0m [32mI [0mllama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
[34m00000.00.025.289[0m [32mI [0mllama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
[34m00000.00.025.291[0m [32mI [0mllama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
[34m00000.00.025.292[0m [32mI [0mllama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
[34m00000.00.025.293[0m [32mI [0mllama_model_loader: - kv  11:                          general.file_type u32              = 7
[34m00000.00.025.295[0m [32mI [0mllama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
[34m00000.00.096.324[0m [32mI [0mllama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
[34m00000.00.185.307[0m [32mI [0mllama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
[34m00000.00.197.837[0m [32mI [0mllama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
[34m00000.00.197.848[0m [32mI [0mllama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
[34m00000.00.197.849[0m [32mI [0mllama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
[34m00000.00.197.849[0m [32mI [0mllama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
[34m00000.00.197.850[0m [32mI [0mllama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
[34m00000.00.197.851[0m [32mI [0mllama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
[34m00000.00.197.852[0m [32mI [0mllama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
[34m00000.00.197.855[0m [32mI [0mllama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
[34m00000.00.197.856[0m [32mI [0mllama_model_loader: - kv  23:               general.quantization_version u32              = 2
[34m00000.00.197.857[0m [32mI [0mllama_model_loader: - kv  24:                                   split.no u16              = 0
[34m00000.00.197.857[0m [32mI [0mllama_model_loader: - kv  25:                                split.count u16              = 7
[34m00000.00.197.858[0m [32mI [0mllama_model_loader: - kv  26:                        split.tensors.count i32              = 164
[34m00000.00.197.869[0m [32mI [0mllama_model_loader: - type  f32:   37 tensors
[34m00000.00.197.873[0m [32mI [0mllama_model_loader: - type q8_0:  127 tensors
[34m00000.00.511.336[0m [35mW llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
[0m[34m00000.00.512.432[0m [32mI [0mllm_load_vocab: special tokens cache size = 5
[34m00000.00.569.723[0m [32mI [0mllm_load_vocab: token to piece cache size = 1.6014 MB
[34m00000.00.569.785[0m [32mI [0mllm_load_print_meta: format           = GGUF V3 (latest)
[34m00000.00.569.788[0m [32mI [0mllm_load_print_meta: arch             = gemma
[34m00000.00.569.789[0m [32mI [0mllm_load_print_meta: vocab type       = SPM
[34m00000.00.569.790[0m [32mI [0mllm_load_print_meta: n_vocab          = 256000
[34m00000.00.569.792[0m [32mI [0mllm_load_print_meta: n_merges         = 0
[34m00000.00.569.793[0m [32mI [0mllm_load_print_meta: vocab_only       = 0
[34m00000.00.569.793[0m [32mI [0mllm_load_print_meta: n_ctx_train      = 8192
[34m00000.00.569.794[0m [32mI [0mllm_load_print_meta: n_embd           = 2048
[34m00000.00.569.794[0m [32mI [0mllm_load_print_meta: n_layer          = 18
[34m00000.00.569.837[0m [32mI [0mllm_load_print_meta: n_head           = 8
[34m00000.00.569.849[0m [32mI [0mllm_load_print_meta: n_head_kv        = 1
[34m00000.00.569.859[0m [32mI [0mllm_load_print_meta: n_rot            = 256
[34m00000.00.569.863[0m [32mI [0mllm_load_print_meta: n_swa            = 0
[34m00000.00.569.865[0m [32mI [0mllm_load_print_meta: n_embd_head_k    = 256
[34m00000.00.569.866[0m [32mI [0mllm_load_print_meta: n_embd_head_v    = 256
[34m00000.00.569.885[0m [32mI [0mllm_load_print_meta: n_gqa            = 8
[34m00000.00.569.906[0m [32mI [0mllm_load_print_meta: n_embd_k_gqa     = 256
[34m00000.00.569.913[0m [32mI [0mllm_load_print_meta: n_embd_v_gqa     = 256
[34m00000.00.569.915[0m [32mI [0mllm_load_print_meta: f_norm_eps       = 0.0e+00
[34m00000.00.569.918[0m [32mI [0mllm_load_print_meta: f_norm_rms_eps   = 1.0e-06
[34m00000.00.569.919[0m [32mI [0mllm_load_print_meta: f_clamp_kqv      = 0.0e+00
[34m00000.00.569.929[0m [32mI [0mllm_load_print_meta: f_max_alibi_bias = 0.0e+00
[34m00000.00.569.929[0m [32mI [0mllm_load_print_meta: f_logit_scale    = 0.0e+00
[34m00000.00.569.937[0m [32mI [0mllm_load_print_meta: n_ff             = 16384
[34m00000.00.569.939[0m [32mI [0mllm_load_print_meta: n_expert         = 0
[34m00000.00.569.940[0m [32mI [0mllm_load_print_meta: n_expert_used    = 0
[34m00000.00.569.940[0m [32mI [0mllm_load_print_meta: causal attn      = 1
[34m00000.00.569.941[0m [32mI [0mllm_load_print_meta: pooling type     = 0
[34m00000.00.569.942[0m [32mI [0mllm_load_print_meta: rope type        = 2
[34m00000.00.569.943[0m [32mI [0mllm_load_print_meta: rope scaling     = linear
[34m00000.00.569.945[0m [32mI [0mllm_load_print_meta: freq_base_train  = 10000.0
[34m00000.00.569.946[0m [32mI [0mllm_load_print_meta: freq_scale_train = 1
[34m00000.00.569.946[0m [32mI [0mllm_load_print_meta: n_ctx_orig_yarn  = 8192
[34m00000.00.569.947[0m [32mI [0mllm_load_print_meta: rope_finetuned   = unknown
[34m00000.00.569.947[0m [32mI [0mllm_load_print_meta: ssm_d_conv       = 0
[34m00000.00.569.948[0m [32mI [0mllm_load_print_meta: ssm_d_inner      = 0
[34m00000.00.569.949[0m [32mI [0mllm_load_print_meta: ssm_d_state      = 0
[34m00000.00.569.950[0m [32mI [0mllm_load_print_meta: ssm_dt_rank      = 0
[34m00000.00.569.951[0m [32mI [0mllm_load_print_meta: ssm_dt_b_c_rms   = 0
[34m00000.00.569.952[0m [32mI [0mllm_load_print_meta: model type       = 2B
[34m00000.00.569.953[0m [32mI [0mllm_load_print_meta: model ftype      = Q8_0
[34m00000.00.569.954[0m [32mI [0mllm_load_print_meta: model params     = 2.51 B
[34m00000.00.569.956[0m [32mI [0mllm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
[34m00000.00.569.956[0m [32mI [0mllm_load_print_meta: general.name     = gemma-1.1-2b-it
[34m00000.00.569.957[0m [32mI [0mllm_load_print_meta: BOS token        = 2 '<bos>'
[34m00000.00.569.958[0m [32mI [0mllm_load_print_meta: EOS token        = 1 '<eos>'
[34m00000.00.569.959[0m [32mI [0mllm_load_print_meta: UNK token        = 3 '<unk>'
[34m00000.00.569.960[0m [32mI [0mllm_load_print_meta: PAD token        = 0 '<pad>'
[34m00000.00.569.961[0m [32mI [0mllm_load_print_meta: LF token         = 227 '<0x0A>'
[34m00000.00.569.964[0m [32mI [0mllm_load_print_meta: EOT token        = 107 '<end_of_turn>'
[34m00000.00.569.965[0m [32mI [0mllm_load_print_meta: max token length = 93
[34m00000.00.570.155[0m [32mI [0mllm_load_tensors: ggml ctx size =    0.08 MiB
[34m00000.00.646.995[0m [32mI [0mllm_load_tensors:        CPU buffer size =   967.99 MiB
[34m00000.00.647.006[0m [32mI [0mllm_load_tensors:        CPU buffer size =   344.30 MiB
[34m00000.00.647.007[0m [32mI [0mllm_load_tensors:        CPU buffer size =   411.77 MiB
[34m00000.00.647.008[0m [32mI [0mllm_load_tensors:        CPU buffer size =   437.27 MiB
[34m00000.00.647.008[0m [32mI [0mllm_load_tensors:        CPU buffer size =   344.30 MiB
[34m00000.00.647.009[0m [32mI [0mllm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
[34m00000.00.653.035[0m [32mI [0mllama_new_context_with_model: n_ctx      = 8192
[34m00000.00.653.043[0m [32mI [0mllama_new_context_with_model: n_batch    = 2048
[34m00000.00.653.044[0m [32mI [0mllama_new_context_with_model: n_ubatch   = 512
[34m00000.00.653.045[0m [32mI [0mllama_new_context_with_model: flash_attn = 0
[34m00000.00.653.049[0m [32mI [0mllama_new_context_with_model: freq_base  = 10000.0
[34m00000.00.653.050[0m [32mI [0mllama_new_context_with_model: freq_scale = 1
[34m00000.00.683.435[0m [32mI [0mllama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
[34m00000.00.683.481[0m [32mI [0mllama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
[34m00000.00.683.613[0m [32mI [0mllama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
[34m00000.00.685.072[0m [32mI [0mllama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
[34m00000.00.685.079[0m [32mI [0mllama_new_context_with_model: graph nodes  = 601
[34m00000.00.685.079[0m [32mI [0mllama_new_context_with_model: graph splits = 1
[34m00000.00.685.097[0m [35mW llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
[0m[34m00000.01.302.102[0m [32mI [0mmain: llama threadpool init, n_threads = 4
[34m00000.01.302.115[0m [32mI [0m
[34m00000.01.302.215[0m [32mI [0msystem_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
[34m00000.01.302.220[0m [32mI [0m
[34m00000.01.302.386[0m [32mI [0msampler seed: 3395481076
[34m00000.01.302.397[0m [32mI [0msampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
[34m00000.01.302.402[0m [32mI [0msampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
[34m00000.01.302.403[0m [32mI [0mgenerate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically.

**Assistant**

I understand. I will be careful to use proper grammar and spelling when responding to your queries. I will also strive to

[34m00000.14.983.509[0m [32mI [0mllama_perf_print:    sampling time =      49.17 ms /    33 runs   (    1.49 ms per token,   671.11 tokens per second)
[34m00000.14.983.516[0m [32mI [0mllama_perf_print:        load time =     732.12 ms
[34m00000.14.983.518[0m [32mI [0mllama_perf_print: prompt eval time =       0.00 ms /     0 tokens (    -nan ms per token,     -nan tokens per second)
[34m00000.14.983.520[0m [32mI [0mllama_perf_print:        eval time =   13599.79 ms /    32 runs   (  424.99 ms per token,     2.35 tokens per second)
[34m00000.14.983.521[0m [32mI [0mllama_perf_print:       total time =   13681.01 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
main: build = 3738 (5a0d1642)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
[34m00000.00.000.513[0m [32mI [0mmain: llama backend init
[34m00000.00.002.509[0m [32mI [0mmain: load the model and apply lora adapter, if any
[34m00000.00.024.414[0m [32mI [0mllama_model_loader: additional 1 GGUFs metadata loaded.
[34m00000.00.024.618[0m [32mI [0mllama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
[34m00000.00.024.716[0m [32mI [0mllama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
[34m00000.00.024.729[0m [32mI [0mllama_model_loader: - kv   0:                       general.architecture str              = gemma
[34m00000.00.024.732[0m [32mI [0mllama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
[34m00000.00.024.737[0m [32mI [0mllama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
[34m00000.00.024.742[0m [32mI [0mllama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
[34m00000.00.024.743[0m [32mI [0mllama_model_loader: - kv   4:                          gemma.block_count u32              = 18
[34m00000.00.024.745[0m [32mI [0mllama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
[34m00000.00.024.747[0m [32mI [0mllama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
[34m00000.00.024.749[0m [32mI [0mllama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
[34m00000.00.024.759[0m [32mI [0mllama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
[34m00000.00.024.764[0m [32mI [0mllama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
[34m00000.00.024.765[0m [32mI [0mllama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
[34m00000.00.024.767[0m [32mI [0mllama_model_loader: - kv  11:                          general.file_type u32              = 7
[34m00000.00.024.768[0m [32mI [0mllama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
[34m00000.00.095.663[0m [32mI [0mllama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
[34m00000.00.184.341[0m [32mI [0mllama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
[34m00000.00.196.782[0m [32mI [0mllama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
[34m00000.00.196.791[0m [32mI [0mllama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
[34m00000.00.196.792[0m [32mI [0mllama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
[34m00000.00.196.793[0m [32mI [0mllama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
[34m00000.00.196.794[0m [32mI [0mllama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
[34m00000.00.196.795[0m [32mI [0mllama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
[34m00000.00.196.796[0m [32mI [0mllama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
[34m00000.00.196.799[0m [32mI [0mllama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
[34m00000.00.196.800[0m [32mI [0mllama_model_loader: - kv  23:               general.quantization_version u32              = 2
[34m00000.00.196.801[0m [32mI [0mllama_model_loader: - kv  24:                                   split.no u16              = 0
[34m00000.00.196.801[0m [32mI [0mllama_model_loader: - kv  25:                                split.count u16              = 2
[34m00000.00.196.802[0m [32mI [0mllama_model_loader: - kv  26:                        split.tensors.count i32              = 164
[34m00000.00.196.810[0m [32mI [0mllama_model_loader: - type  f32:   37 tensors
[34m00000.00.196.814[0m [32mI [0mllama_model_loader: - type q8_0:  127 tensors
[34m00000.00.493.003[0m [35mW llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
[0m[34m00000.00.494.043[0m [32mI [0mllm_load_vocab: special tokens cache size = 5
[34m00000.00.551.258[0m [32mI [0mllm_load_vocab: token to piece cache size = 1.6014 MB
[34m00000.00.551.314[0m [32mI [0mllm_load_print_meta: format           = GGUF V3 (latest)
[34m00000.00.551.315[0m [32mI [0mllm_load_print_meta: arch             = gemma
[34m00000.00.551.315[0m [32mI [0mllm_load_print_meta: vocab type       = SPM
[34m00000.00.551.316[0m [32mI [0mllm_load_print_meta: n_vocab          = 256000
[34m00000.00.551.318[0m [32mI [0mllm_load_print_meta: n_merges         = 0
[34m00000.00.551.319[0m [32mI [0mllm_load_print_meta: vocab_only       = 0
[34m00000.00.551.319[0m [32mI [0mllm_load_print_meta: n_ctx_train      = 8192
[34m00000.00.551.320[0m [32mI [0mllm_load_print_meta: n_embd           = 2048
[34m00000.00.551.320[0m [32mI [0mllm_load_print_meta: n_layer          = 18
[34m00000.00.551.362[0m [32mI [0mllm_load_print_meta: n_head           = 8
[34m00000.00.551.369[0m [32mI [0mllm_load_print_meta: n_head_kv        = 1
[34m00000.00.551.369[0m [32mI [0mllm_load_print_meta: n_rot            = 256
[34m00000.00.551.370[0m [32mI [0mllm_load_print_meta: n_swa            = 0
[34m00000.00.551.370[0m [32mI [0mllm_load_print_meta: n_embd_head_k    = 256
[34m00000.00.551.370[0m [32mI [0mllm_load_print_meta: n_embd_head_v    = 256
[34m00000.00.551.376[0m [32mI [0mllm_load_print_meta: n_gqa            = 8
[34m00000.00.551.380[0m [32mI [0mllm_load_print_meta: n_embd_k_gqa     = 256
[34m00000.00.551.385[0m [32mI [0mllm_load_print_meta: n_embd_v_gqa     = 256
[34m00000.00.551.386[0m [32mI [0mllm_load_print_meta: f_norm_eps       = 0.0e+00
[34m00000.00.551.387[0m [32mI [0mllm_load_print_meta: f_norm_rms_eps   = 1.0e-06
[34m00000.00.551.388[0m [32mI [0mllm_load_print_meta: f_clamp_kqv      = 0.0e+00
[34m00000.00.551.388[0m [32mI [0mllm_load_print_meta: f_max_alibi_bias = 0.0e+00
[34m00000.00.551.389[0m [32mI [0mllm_load_print_meta: f_logit_scale    = 0.0e+00
[34m00000.00.551.395[0m [32mI [0mllm_load_print_meta: n_ff             = 16384
[34m00000.00.551.397[0m [32mI [0mllm_load_print_meta: n_expert         = 0
[34m00000.00.551.397[0m [32mI [0mllm_load_print_meta: n_expert_used    = 0
[34m00000.00.551.406[0m [32mI [0mllm_load_print_meta: causal attn      = 1
[34m00000.00.551.407[0m [32mI [0mllm_load_print_meta: pooling type     = 0
[34m00000.00.551.408[0m [32mI [0mllm_load_print_meta: rope type        = 2
[34m00000.00.551.412[0m [32mI [0mllm_load_print_meta: rope scaling     = linear
[34m00000.00.551.415[0m [32mI [0mllm_load_print_meta: freq_base_train  = 10000.0
[34m00000.00.551.416[0m [32mI [0mllm_load_print_meta: freq_scale_train = 1
[34m00000.00.551.417[0m [32mI [0mllm_load_print_meta: n_ctx_orig_yarn  = 8192
[34m00000.00.551.418[0m [32mI [0mllm_load_print_meta: rope_finetuned   = unknown
[34m00000.00.551.419[0m [32mI [0mllm_load_print_meta: ssm_d_conv       = 0
[34m00000.00.551.420[0m [32mI [0mllm_load_print_meta: ssm_d_inner      = 0
[34m00000.00.551.420[0m [32mI [0mllm_load_print_meta: ssm_d_state      = 0
[34m00000.00.551.421[0m [32mI [0mllm_load_print_meta: ssm_dt_rank      = 0
[34m00000.00.551.422[0m [32mI [0mllm_load_print_meta: ssm_dt_b_c_rms   = 0
[34m00000.00.551.424[0m [32mI [0mllm_load_print_meta: model type       = 2B
[34m00000.00.551.439[0m [32mI [0mllm_load_print_meta: model ftype      = Q8_0
[34m00000.00.551.444[0m [32mI [0mllm_load_print_meta: model params     = 2.51 B
[34m00000.00.551.445[0m [32mI [0mllm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
[34m00000.00.551.446[0m [32mI [0mllm_load_print_meta: general.name     = gemma-1.1-2b-it
[34m00000.00.551.447[0m [32mI [0mllm_load_print_meta: BOS token        = 2 '<bos>'
[34m00000.00.551.447[0m [32mI [0mllm_load_print_meta: EOS token        = 1 '<eos>'
[34m00000.00.551.448[0m [32mI [0mllm_load_print_meta: UNK token        = 3 '<unk>'
[34m00000.00.551.449[0m [32mI [0mllm_load_print_meta: PAD token        = 0 '<pad>'
[34m00000.00.551.449[0m [32mI [0mllm_load_print_meta: LF token         = 227 '<0x0A>'
[34m00000.00.551.459[0m [32mI [0mllm_load_print_meta: EOT token        = 107 '<end_of_turn>'
[34m00000.00.551.460[0m [32mI [0mllm_load_print_meta: max token length = 93
[34m00000.00.551.640[0m [32mI [0mllm_load_tensors: ggml ctx size =    0.08 MiB
[34m00000.00.622.980[0m [32mI [0mllm_load_tensors:        CPU buffer size =  1904.18 MiB
[34m00000.00.622.990[0m [32mI [0mllm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
[34m00000.00.628.702[0m [32mI [0mllama_new_context_with_model: n_ctx      = 8192
[34m00000.00.628.710[0m [32mI [0mllama_new_context_with_model: n_batch    = 2048
[34m00000.00.628.710[0m [32mI [0mllama_new_context_with_model: n_ubatch   = 512
[34m00000.00.628.710[0m [32mI [0mllama_new_context_with_model: flash_attn = 0
[34m00000.00.628.713[0m [32mI [0mllama_new_context_with_model: freq_base  = 10000.0
[34m00000.00.628.713[0m [32mI [0mllama_new_context_with_model: freq_scale = 1
[34m00000.00.658.556[0m [32mI [0mllama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
[34m00000.00.658.596[0m [32mI [0mllama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
[34m00000.00.658.713[0m [32mI [0mllama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
[34m00000.00.660.127[0m [32mI [0mllama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
[34m00000.00.660.133[0m [32mI [0mllama_new_context_with_model: graph nodes  = 601
[34m00000.00.660.134[0m [32mI [0mllama_new_context_with_model: graph splits = 1
[34m00000.00.660.154[0m [35mW llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
[0m[34m00000.01.277.316[0m [32mI [0mmain: llama threadpool init, n_threads = 4
[34m00000.01.277.328[0m [32mI [0m
[34m00000.01.277.434[0m [32mI [0msystem_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
[34m00000.01.277.438[0m [32mI [0m
[34m00000.01.277.604[0m [32mI [0msampler seed: 1988294091
[34m00000.01.277.615[0m [32mI [0msampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
[34m00000.01.277.620[0m [32mI [0msampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
[34m00000.01.277.621[0m [32mI [0mgenerate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably. [end of text]


[34m00000.02.973.429[0m [32mI [0mllama_perf_print:    sampling time =       6.22 ms /     5 runs   (    1.24 ms per token,   804.12 tokens per second)
[34m00000.02.973.435[0m [32mI [0mllama_perf_print:        load time =     725.84 ms
[34m00000.02.973.436[0m [32mI [0mllama_perf_print: prompt eval time =       0.00 ms /     0 tokens (    -nan ms per token,     -nan tokens per second)
[34m00000.02.973.438[0m [32mI [0mllama_perf_print:        eval time =    1684.53 ms /     4 runs   (  421.13 ms per token,     2.37 tokens per second)
[34m00000.02.973.439[0m [32mI [0mllama_perf_print:       total time =    1696.02 ms /     4 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m45.417s
user	2m14.779s
sys	0m9.365s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3738 (5a0d1642)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200307.67 ms
main:    total time = 200307.67 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
main: build = 3738 (5a0d1642)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
[34m00000.00.000.449[0m [32mI [0mmain: llama backend init
[34m00000.00.002.471[0m [32mI [0mmain: load the model and apply lora adapter, if any
[34m00000.00.024.614[0m [32mI [0mllama_model_loader: additional 5 GGUFs metadata loaded.
[34m00000.00.024.827[0m [32mI [0mllama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
[34m00000.00.024.928[0m [32mI [0mllama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
[34m00000.00.024.941[0m [32mI [0mllama_model_loader: - kv   0:                       general.architecture str              = gemma
[34m00000.00.024.943[0m [32mI [0mllama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
[34m00000.00.024.948[0m [32mI [0mllama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
[34m00000.00.024.952[0m [32mI [0mllama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
[34m00000.00.024.953[0m [32mI [0mllama_model_loader: - kv   4:                          gemma.block_count u32              = 18
[34m00000.00.024.954[0m [32mI [0mllama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
[34m00000.00.024.955[0m [32mI [0mllama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
[34m00000.00.024.956[0m [32mI [0mllama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
[34m00000.00.024.965[0m [32mI [0mllama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
[34m00000.00.024.966[0m [32mI [0mllama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
[34m00000.00.024.968[0m [32mI [0mllama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
[34m00000.00.024.969[0m [32mI [0mllama_model_loader: - kv  11:                          general.file_type u32              = 15
[34m00000.00.024.970[0m [32mI [0mllama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
[34m00000.00.095.886[0m [32mI [0mllama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
[34m00000.00.184.091[0m [32mI [0mllama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
[34m00000.00.196.455[0m [32mI [0mllama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
[34m00000.00.196.463[0m [32mI [0mllama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
[34m00000.00.196.464[0m [32mI [0mllama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
[34m00000.00.196.465[0m [32mI [0mllama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
[34m00000.00.196.466[0m [32mI [0mllama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
[34m00000.00.196.467[0m [32mI [0mllama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
[34m00000.00.196.468[0m [32mI [0mllama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
[34m00000.00.196.471[0m [32mI [0mllama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
[34m00000.00.196.472[0m [32mI [0mllama_model_loader: - kv  23:               general.quantization_version u32              = 2
[34m00000.00.196.473[0m [32mI [0mllama_model_loader: - kv  24:                                   split.no u16              = 0
[34m00000.00.196.473[0m [32mI [0mllama_model_loader: - kv  25:                                split.count u16              = 6
[34m00000.00.196.474[0m [32mI [0mllama_model_loader: - kv  26:                        split.tensors.count i32              = 164
[34m00000.00.196.482[0m [32mI [0mllama_model_loader: - type  f32:   37 tensors
[34m00000.00.196.486[0m [32mI [0mllama_model_loader: - type q4_K:  108 tensors
[34m00000.00.196.487[0m [32mI [0mllama_model_loader: - type q6_K:   19 tensors
[34m00000.00.482.603[0m [35mW llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
[0m[34m00000.00.483.632[0m [32mI [0mllm_load_vocab: special tokens cache size = 5
[34m00000.00.540.891[0m [32mI [0mllm_load_vocab: token to piece cache size = 1.6014 MB
[34m00000.00.540.958[0m [32mI [0mllm_load_print_meta: format           = GGUF V3 (latest)
[34m00000.00.540.959[0m [32mI [0mllm_load_print_meta: arch             = gemma
[34m00000.00.540.959[0m [32mI [0mllm_load_print_meta: vocab type       = SPM
[34m00000.00.540.960[0m [32mI [0mllm_load_print_meta: n_vocab          = 256000
[34m00000.00.540.962[0m [32mI [0mllm_load_print_meta: n_merges         = 0
[34m00000.00.540.963[0m [32mI [0mllm_load_print_meta: vocab_only       = 0
[34m00000.00.540.963[0m [32mI [0mllm_load_print_meta: n_ctx_train      = 8192
[34m00000.00.540.963[0m [32mI [0mllm_load_print_meta: n_embd           = 2048
[34m00000.00.540.964[0m [32mI [0mllm_load_print_meta: n_layer          = 18
[34m00000.00.540.999[0m [32mI [0mllm_load_print_meta: n_head           = 8
[34m00000.00.541.006[0m [32mI [0mllm_load_print_meta: n_head_kv        = 1
[34m00000.00.541.006[0m [32mI [0mllm_load_print_meta: n_rot            = 256
[34m00000.00.541.007[0m [32mI [0mllm_load_print_meta: n_swa            = 0
[34m00000.00.541.007[0m [32mI [0mllm_load_print_meta: n_embd_head_k    = 256
[34m00000.00.541.007[0m [32mI [0mllm_load_print_meta: n_embd_head_v    = 256
[34m00000.00.541.012[0m [32mI [0mllm_load_print_meta: n_gqa            = 8
[34m00000.00.541.016[0m [32mI [0mllm_load_print_meta: n_embd_k_gqa     = 256
[34m00000.00.541.021[0m [32mI [0mllm_load_print_meta: n_embd_v_gqa     = 256
[34m00000.00.541.022[0m [32mI [0mllm_load_print_meta: f_norm_eps       = 0.0e+00
[34m00000.00.541.023[0m [32mI [0mllm_load_print_meta: f_norm_rms_eps   = 1.0e-06
[34m00000.00.541.024[0m [32mI [0mllm_load_print_meta: f_clamp_kqv      = 0.0e+00
[34m00000.00.541.025[0m [32mI [0mllm_load_print_meta: f_max_alibi_bias = 0.0e+00
[34m00000.00.541.026[0m [32mI [0mllm_load_print_meta: f_logit_scale    = 0.0e+00
[34m00000.00.541.053[0m [32mI [0mllm_load_print_meta: n_ff             = 16384
[34m00000.00.541.054[0m [32mI [0mllm_load_print_meta: n_expert         = 0
[34m00000.00.541.054[0m [32mI [0mllm_load_print_meta: n_expert_used    = 0
[34m00000.00.541.055[0m [32mI [0mllm_load_print_meta: causal attn      = 1
[34m00000.00.541.055[0m [32mI [0mllm_load_print_meta: pooling type     = 0
[34m00000.00.541.055[0m [32mI [0mllm_load_print_meta: rope type        = 2
[34m00000.00.541.056[0m [32mI [0mllm_load_print_meta: rope scaling     = linear
[34m00000.00.541.058[0m [32mI [0mllm_load_print_meta: freq_base_train  = 10000.0
[34m00000.00.541.058[0m [32mI [0mllm_load_print_meta: freq_scale_train = 1
[34m00000.00.541.059[0m [32mI [0mllm_load_print_meta: n_ctx_orig_yarn  = 8192
[34m00000.00.541.059[0m [32mI [0mllm_load_print_meta: rope_finetuned   = unknown
[34m00000.00.541.059[0m [32mI [0mllm_load_print_meta: ssm_d_conv       = 0
[34m00000.00.541.060[0m [32mI [0mllm_load_print_meta: ssm_d_inner      = 0
[34m00000.00.541.060[0m [32mI [0mllm_load_print_meta: ssm_d_state      = 0
[34m00000.00.541.060[0m [32mI [0mllm_load_print_meta: ssm_dt_rank      = 0
[34m00000.00.541.061[0m [32mI [0mllm_load_print_meta: ssm_dt_b_c_rms   = 0
[34m00000.00.541.061[0m [32mI [0mllm_load_print_meta: model type       = 2B
[34m00000.00.541.062[0m [32mI [0mllm_load_print_meta: model ftype      = Q4_K - Medium
[34m00000.00.541.063[0m [32mI [0mllm_load_print_meta: model params     = 2.51 B
[34m00000.00.541.064[0m [32mI [0mllm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
[34m00000.00.541.077[0m [32mI [0mllm_load_print_meta: general.name     = gemma-1.1-2b-it
[34m00000.00.541.079[0m [32mI [0mllm_load_print_meta: BOS token        = 2 '<bos>'
[34m00000.00.541.079[0m [32mI [0mllm_load_print_meta: EOS token        = 1 '<eos>'
[34m00000.00.541.080[0m [32mI [0mllm_load_print_meta: UNK token        = 3 '<unk>'
[34m00000.00.541.081[0m [32mI [0mllm_load_print_meta: PAD token        = 0 '<pad>'
[34m00000.00.541.085[0m [32mI [0mllm_load_print_meta: LF token         = 227 '<0x0A>'
[34m00000.00.541.086[0m [32mI [0mllm_load_print_meta: EOT token        = 107 '<end_of_turn>'
[34m00000.00.541.086[0m [32mI [0mllm_load_print_meta: max token length = 93
[34m00000.00.541.267[0m [32mI [0mllm_load_tensors: ggml ctx size =    0.08 MiB
[34m00000.00.600.488[0m [32mI [0mllm_load_tensors:        CPU buffer size =   604.15 MiB
[34m00000.00.600.499[0m [32mI [0mllm_load_tensors:        CPU buffer size =   185.62 MiB
[34m00000.00.600.500[0m [32mI [0mllm_load_tensors:        CPU buffer size =   221.61 MiB
[34m00000.00.600.501[0m [32mI [0mllm_load_tensors:        CPU buffer size =   185.89 MiB
[34m00000.00.600.501[0m [32mI [0mllm_load_tensors:        CPU buffer size =   187.86 MiB
[34m00000.00.600.502[0m [32mI [0mllm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
[34m00000.00.606.274[0m [32mI [0mllama_new_context_with_model: n_ctx      = 8192
[34m00000.00.606.282[0m [32mI [0mllama_new_context_with_model: n_batch    = 2048
[34m00000.00.606.283[0m [32mI [0mllama_new_context_with_model: n_ubatch   = 512
[34m00000.00.606.283[0m [32mI [0mllama_new_context_with_model: flash_attn = 0
[34m00000.00.606.286[0m [32mI [0mllama_new_context_with_model: freq_base  = 10000.0
[34m00000.00.606.287[0m [32mI [0mllama_new_context_with_model: freq_scale = 1
[34m00000.00.636.038[0m [32mI [0mllama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
[34m00000.00.636.079[0m [32mI [0mllama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
[34m00000.00.636.184[0m [32mI [0mllama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
[34m00000.00.637.612[0m [32mI [0mllama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
[34m00000.00.637.617[0m [32mI [0mllama_new_context_with_model: graph nodes  = 601
[34m00000.00.637.617[0m [32mI [0mllama_new_context_with_model: graph splits = 1
[34m00000.00.637.648[0m [35mW llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
[0m[34m00000.01.211.911[0m [32mI [0mmain: llama threadpool init, n_threads = 4
[34m00000.01.211.924[0m [32mI [0m
[34m00000.01.212.023[0m [32mI [0msystem_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
[34m00000.01.212.028[0m [32mI [0m
[34m00000.01.212.190[0m [32mI [0msampler seed: 1645843269
[34m00000.01.212.201[0m [32mI [0msampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
[34m00000.01.212.205[0m [32mI [0msampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
[34m00000.01.212.206[0m [32mI [0mgenerate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally. The following is my response:

"I understand your request, but I am unable to generate responses that contain sexually suggestive or explicit content. My

[34m00000.12.048.846[0m [32mI [0mllama_perf_print:    sampling time =      49.05 ms /    33 runs   (    1.49 ms per token,   672.74 tokens per second)
[34m00000.12.048.851[0m [32mI [0mllama_perf_print:        load time =     670.81 ms
[34m00000.12.048.852[0m [32mI [0mllama_perf_print: prompt eval time =       0.00 ms /     0 tokens (    -nan ms per token,     -nan tokens per second)
[34m00000.12.048.854[0m [32mI [0mllama_perf_print:        eval time =   10755.44 ms /    32 runs   (  336.11 ms per token,     2.98 tokens per second)
[34m00000.12.048.855[0m [32mI [0mllama_perf_print:       total time =   10836.60 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3738 (5a0d1642)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200238.37 ms
main:    total time = 200238.37 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
main: build = 3738 (5a0d1642)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
[34m00000.00.000.455[0m [32mI [0mmain: llama backend init
[34m00000.00.002.509[0m [32mI [0mmain: load the model and apply lora adapter, if any
[34m00000.00.024.424[0m [32mI [0mllama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
[34m00000.00.024.515[0m [32mI [0mllama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
[34m00000.00.024.530[0m [32mI [0mllama_model_loader: - kv   0:                       general.architecture str              = gemma
[34m00000.00.024.534[0m [32mI [0mllama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
[34m00000.00.024.538[0m [32mI [0mllama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
[34m00000.00.024.539[0m [32mI [0mllama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
[34m00000.00.024.540[0m [32mI [0mllama_model_loader: - kv   4:                          gemma.block_count u32              = 18
[34m00000.00.024.541[0m [32mI [0mllama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
[34m00000.00.024.542[0m [32mI [0mllama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
[34m00000.00.024.543[0m [32mI [0mllama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
[34m00000.00.024.549[0m [32mI [0mllama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
[34m00000.00.024.550[0m [32mI [0mllama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
[34m00000.00.024.551[0m [32mI [0mllama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
[34m00000.00.024.553[0m [32mI [0mllama_model_loader: - kv  11:                          general.file_type u32              = 15
[34m00000.00.024.554[0m [32mI [0mllama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
[34m00000.00.094.943[0m [32mI [0mllama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
[34m00000.00.183.474[0m [32mI [0mllama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
[34m00000.00.195.843[0m [32mI [0mllama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
[34m00000.00.195.852[0m [32mI [0mllama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
[34m00000.00.195.852[0m [32mI [0mllama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
[34m00000.00.195.853[0m [32mI [0mllama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
[34m00000.00.195.854[0m [32mI [0mllama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
[34m00000.00.195.855[0m [32mI [0mllama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
[34m00000.00.195.856[0m [32mI [0mllama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
[34m00000.00.195.860[0m [32mI [0mllama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
[34m00000.00.195.860[0m [32mI [0mllama_model_loader: - kv  23:               general.quantization_version u32              = 2
[34m00000.00.195.869[0m [32mI [0mllama_model_loader: - type  f32:   37 tensors
[34m00000.00.195.874[0m [32mI [0mllama_model_loader: - type q4_K:  108 tensors
[34m00000.00.195.874[0m [32mI [0mllama_model_loader: - type q6_K:   19 tensors
[34m00000.00.468.990[0m [35mW llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
[0m[34m00000.00.469.986[0m [32mI [0mllm_load_vocab: special tokens cache size = 5
[34m00000.00.527.636[0m [32mI [0mllm_load_vocab: token to piece cache size = 1.6014 MB
[34m00000.00.527.697[0m [32mI [0mllm_load_print_meta: format           = GGUF V3 (latest)
[34m00000.00.527.698[0m [32mI [0mllm_load_print_meta: arch             = gemma
[34m00000.00.527.699[0m [32mI [0mllm_load_print_meta: vocab type       = SPM
[34m00000.00.527.700[0m [32mI [0mllm_load_print_meta: n_vocab          = 256000
[34m00000.00.527.702[0m [32mI [0mllm_load_print_meta: n_merges         = 0
[34m00000.00.527.703[0m [32mI [0mllm_load_print_meta: vocab_only       = 0
[34m00000.00.527.703[0m [32mI [0mllm_load_print_meta: n_ctx_train      = 8192
[34m00000.00.527.704[0m [32mI [0mllm_load_print_meta: n_embd           = 2048
[34m00000.00.527.704[0m [32mI [0mllm_load_print_meta: n_layer          = 18
[34m00000.00.527.739[0m [32mI [0mllm_load_print_meta: n_head           = 8
[34m00000.00.527.746[0m [32mI [0mllm_load_print_meta: n_head_kv        = 1
[34m00000.00.527.746[0m [32mI [0mllm_load_print_meta: n_rot            = 256
[34m00000.00.527.747[0m [32mI [0mllm_load_print_meta: n_swa            = 0
[34m00000.00.527.747[0m [32mI [0mllm_load_print_meta: n_embd_head_k    = 256
[34m00000.00.527.747[0m [32mI [0mllm_load_print_meta: n_embd_head_v    = 256
[34m00000.00.527.752[0m [32mI [0mllm_load_print_meta: n_gqa            = 8
[34m00000.00.527.756[0m [32mI [0mllm_load_print_meta: n_embd_k_gqa     = 256
[34m00000.00.527.762[0m [32mI [0mllm_load_print_meta: n_embd_v_gqa     = 256
[34m00000.00.527.763[0m [32mI [0mllm_load_print_meta: f_norm_eps       = 0.0e+00
[34m00000.00.527.765[0m [32mI [0mllm_load_print_meta: f_norm_rms_eps   = 1.0e-06
[34m00000.00.527.766[0m [32mI [0mllm_load_print_meta: f_clamp_kqv      = 0.0e+00
[34m00000.00.527.766[0m [32mI [0mllm_load_print_meta: f_max_alibi_bias = 0.0e+00
[34m00000.00.527.767[0m [32mI [0mllm_load_print_meta: f_logit_scale    = 0.0e+00
[34m00000.00.527.771[0m [32mI [0mllm_load_print_meta: n_ff             = 16384
[34m00000.00.527.772[0m [32mI [0mllm_load_print_meta: n_expert         = 0
[34m00000.00.527.772[0m [32mI [0mllm_load_print_meta: n_expert_used    = 0
[34m00000.00.527.773[0m [32mI [0mllm_load_print_meta: causal attn      = 1
[34m00000.00.527.773[0m [32mI [0mllm_load_print_meta: pooling type     = 0
[34m00000.00.527.773[0m [32mI [0mllm_load_print_meta: rope type        = 2
[34m00000.00.527.774[0m [32mI [0mllm_load_print_meta: rope scaling     = linear
[34m00000.00.527.775[0m [32mI [0mllm_load_print_meta: freq_base_train  = 10000.0
[34m00000.00.527.776[0m [32mI [0mllm_load_print_meta: freq_scale_train = 1
[34m00000.00.527.776[0m [32mI [0mllm_load_print_meta: n_ctx_orig_yarn  = 8192
[34m00000.00.527.777[0m [32mI [0mllm_load_print_meta: rope_finetuned   = unknown
[34m00000.00.527.777[0m [32mI [0mllm_load_print_meta: ssm_d_conv       = 0
[34m00000.00.527.778[0m [32mI [0mllm_load_print_meta: ssm_d_inner      = 0
[34m00000.00.527.778[0m [32mI [0mllm_load_print_meta: ssm_d_state      = 0
[34m00000.00.527.778[0m [32mI [0mllm_load_print_meta: ssm_dt_rank      = 0
[34m00000.00.527.779[0m [32mI [0mllm_load_print_meta: ssm_dt_b_c_rms   = 0
[34m00000.00.527.779[0m [32mI [0mllm_load_print_meta: model type       = 2B
[34m00000.00.527.780[0m [32mI [0mllm_load_print_meta: model ftype      = Q4_K - Medium
[34m00000.00.527.781[0m [32mI [0mllm_load_print_meta: model params     = 2.51 B
[34m00000.00.527.782[0m [32mI [0mllm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
[34m00000.00.527.782[0m [32mI [0mllm_load_print_meta: general.name     = gemma-1.1-2b-it
[34m00000.00.527.783[0m [32mI [0mllm_load_print_meta: BOS token        = 2 '<bos>'
[34m00000.00.527.783[0m [32mI [0mllm_load_print_meta: EOS token        = 1 '<eos>'
[34m00000.00.527.784[0m [32mI [0mllm_load_print_meta: UNK token        = 3 '<unk>'
[34m00000.00.527.784[0m [32mI [0mllm_load_print_meta: PAD token        = 0 '<pad>'
[34m00000.00.527.785[0m [32mI [0mllm_load_print_meta: LF token         = 227 '<0x0A>'
[34m00000.00.527.785[0m [32mI [0mllm_load_print_meta: EOT token        = 107 '<end_of_turn>'
[34m00000.00.527.786[0m [32mI [0mllm_load_print_meta: max token length = 93
[34m00000.00.527.970[0m [32mI [0mllm_load_tensors: ggml ctx size =    0.08 MiB
[34m00000.00.586.403[0m [32mI [0mllm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
[34m00000.00.591.904[0m [32mI [0mllama_new_context_with_model: n_ctx      = 8192
[34m00000.00.591.912[0m [32mI [0mllama_new_context_with_model: n_batch    = 2048
[34m00000.00.591.912[0m [32mI [0mllama_new_context_with_model: n_ubatch   = 512
[34m00000.00.591.913[0m [32mI [0mllama_new_context_with_model: flash_attn = 0
[34m00000.00.591.915[0m [32mI [0mllama_new_context_with_model: freq_base  = 10000.0
[34m00000.00.591.916[0m [32mI [0mllama_new_context_with_model: freq_scale = 1
[34m00000.00.620.922[0m [32mI [0mllama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
[34m00000.00.620.967[0m [32mI [0mllama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
[34m00000.00.621.077[0m [32mI [0mllama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
[34m00000.00.622.471[0m [32mI [0mllama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
[34m00000.00.622.476[0m [32mI [0mllama_new_context_with_model: graph nodes  = 601
[34m00000.00.622.477[0m [32mI [0mllama_new_context_with_model: graph splits = 1
[34m00000.00.622.493[0m [35mW llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
[0m[34m00000.01.198.413[0m [32mI [0mmain: llama threadpool init, n_threads = 4
[34m00000.01.198.424[0m [32mI [0m
[34m00000.01.198.518[0m [32mI [0msystem_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
[34m00000.01.198.521[0m [32mI [0m
[34m00000.01.198.673[0m [32mI [0msampler seed: 284448852
[34m00000.01.198.683[0m [32mI [0msampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
[34m00000.01.198.688[0m [32mI [0msampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
[34m00000.01.198.689[0m [32mI [0mgenerate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities in the comments section of the article. [end of text]


[34m00000.04.916.088[0m [32mI [0mllama_perf_print:    sampling time =      16.96 ms /    12 runs   (    1.41 ms per token,   707.38 tokens per second)
[34m00000.04.916.092[0m [32mI [0mllama_perf_print:        load time =     670.62 ms
[34m00000.04.916.093[0m [32mI [0mllama_perf_print: prompt eval time =       0.00 ms /     0 tokens (    -nan ms per token,     -nan tokens per second)
[34m00000.04.916.095[0m [32mI [0mllama_perf_print:        eval time =    3687.95 ms /    11 runs   (  335.27 ms per token,     2.98 tokens per second)
[34m00000.04.916.096[0m [32mI [0mllama_perf_print:       total time =    3716.93 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m0.368s
user	49m44.687s
sys	0m6.236s
