+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.553 I build: 4160 (5a898779) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.751 I main: llama backend init
0.00.000.758 I main: load the model and apply lora adapter, if any
0.00.021.351 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.361 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.368 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.373 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.374 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.378 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.378 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.379 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.380 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.380 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.381 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.384 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.385 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.386 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.386 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.387 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.310 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.378 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.250 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.256 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.257 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.257 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.258 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.259 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.260 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.261 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.262 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.264 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.264 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.265 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.269 I llama_model_loader: - type  f32:   37 tensors
0.00.131.270 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.997 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.070 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.608 I llm_load_vocab: special tokens cache size = 5
0.00.263.293 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.309 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.309 I llm_load_print_meta: arch             = gemma
0.00.263.310 I llm_load_print_meta: vocab type       = SPM
0.00.263.310 I llm_load_print_meta: n_vocab          = 256000
0.00.263.311 I llm_load_print_meta: n_merges         = 0
0.00.263.311 I llm_load_print_meta: vocab_only       = 0
0.00.263.311 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.312 I llm_load_print_meta: n_embd           = 2048
0.00.263.312 I llm_load_print_meta: n_layer          = 18
0.00.263.322 I llm_load_print_meta: n_head           = 8
0.00.263.323 I llm_load_print_meta: n_head_kv        = 1
0.00.263.324 I llm_load_print_meta: n_rot            = 256
0.00.263.324 I llm_load_print_meta: n_swa            = 0
0.00.263.324 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.324 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.325 I llm_load_print_meta: n_gqa            = 8
0.00.263.327 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.327 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.328 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.329 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.330 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.330 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.331 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.331 I llm_load_print_meta: n_ff             = 16384
0.00.263.332 I llm_load_print_meta: n_expert         = 0
0.00.263.332 I llm_load_print_meta: n_expert_used    = 0
0.00.263.332 I llm_load_print_meta: causal attn      = 1
0.00.263.333 I llm_load_print_meta: pooling type     = 0
0.00.263.333 I llm_load_print_meta: rope type        = 2
0.00.263.333 I llm_load_print_meta: rope scaling     = linear
0.00.263.335 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.335 I llm_load_print_meta: freq_scale_train = 1
0.00.263.336 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.336 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.336 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.337 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.337 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.337 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.337 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.338 I llm_load_print_meta: model type       = 2B
0.00.263.338 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.339 I llm_load_print_meta: model params     = 2.51 B
0.00.263.340 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.340 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.341 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.341 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.341 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.342 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.342 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.342 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.343 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.343 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.343 I llm_load_print_meta: max token length = 93
0.00.363.789 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.363.797 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.363.798 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.363.799 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.363.799 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.363.800 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.369.029 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.035 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.035 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.036 I llama_new_context_with_model: n_batch       = 2048
0.00.369.036 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.037 I llama_new_context_with_model: flash_attn    = 0
0.00.369.039 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.040 I llama_new_context_with_model: freq_scale    = 1
0.00.369.041 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.383.220 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.235 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.322 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.531 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.538 I llama_new_context_with_model: graph nodes  = 601
0.00.384.538 I llama_new_context_with_model: graph splits = 1
0.00.384.540 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.538 I main: llama threadpool init, n_threads = 4
0.00.472.555 I 
0.00.472.633 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.472.636 I 
0.00.472.677 I sampler seed: 1094659276
0.00.472.688 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.691 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.472.691 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.472.692 I 
 increasities, a flamboyant dandy, and a grumpy duchess.

Who are they?

The cast of a play. [end of text]


0.02.228.224 I llama_perf_sampler_print:    sampling time =       3.72 ms /    26 runs   (    0.14 ms per token,  6996.77 tokens per second)
0.02.228.227 I llama_perf_context_print:        load time =     471.76 ms
0.02.228.228 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.228.230 I llama_perf_context_print:        eval time =    1741.06 ms /    25 runs   (   69.64 ms per token,    14.36 tokens per second)
0.02.228.230 I llama_perf_context_print:       total time =    1755.69 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.404 I build: 4160 (5a898779) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.595 I main: llama backend init
0.00.000.602 I main: load the model and apply lora adapter, if any
0.00.021.015 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.029 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.039 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.040 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.043 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.045 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.046 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.047 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.047 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.048 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.051 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.052 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.052 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.053 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.053 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.133 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.830 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.705 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.712 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.713 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.714 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.715 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.716 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.717 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.721 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.722 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.723 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.724 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.726 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.730 I llama_model_loader: - type  f32:   37 tensors
0.00.131.732 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.675 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.229 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.729 I llm_load_vocab: special tokens cache size = 5
0.00.261.367 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.383 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.384 I llm_load_print_meta: arch             = gemma
0.00.261.385 I llm_load_print_meta: vocab type       = SPM
0.00.261.385 I llm_load_print_meta: n_vocab          = 256000
0.00.261.386 I llm_load_print_meta: n_merges         = 0
0.00.261.386 I llm_load_print_meta: vocab_only       = 0
0.00.261.386 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.387 I llm_load_print_meta: n_embd           = 2048
0.00.261.387 I llm_load_print_meta: n_layer          = 18
0.00.261.399 I llm_load_print_meta: n_head           = 8
0.00.261.400 I llm_load_print_meta: n_head_kv        = 1
0.00.261.401 I llm_load_print_meta: n_rot            = 256
0.00.261.402 I llm_load_print_meta: n_swa            = 0
0.00.261.402 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.402 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.403 I llm_load_print_meta: n_gqa            = 8
0.00.261.404 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.405 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.406 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.407 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.408 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.409 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.409 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.410 I llm_load_print_meta: n_ff             = 16384
0.00.261.411 I llm_load_print_meta: n_expert         = 0
0.00.261.411 I llm_load_print_meta: n_expert_used    = 0
0.00.261.412 I llm_load_print_meta: causal attn      = 1
0.00.261.413 I llm_load_print_meta: pooling type     = 0
0.00.261.413 I llm_load_print_meta: rope type        = 2
0.00.261.413 I llm_load_print_meta: rope scaling     = linear
0.00.261.415 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.415 I llm_load_print_meta: freq_scale_train = 1
0.00.261.415 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.416 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.417 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.417 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.417 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.417 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.418 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.418 I llm_load_print_meta: model type       = 2B
0.00.261.419 I llm_load_print_meta: model ftype      = Q8_0
0.00.261.420 I llm_load_print_meta: model params     = 2.51 B
0.00.261.420 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.261.421 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.421 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.422 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.422 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.422 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.422 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.423 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.424 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.424 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.424 I llm_load_print_meta: max token length = 93
0.00.355.040 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.360.296 I llama_new_context_with_model: n_seq_max     = 1
0.00.360.304 I llama_new_context_with_model: n_ctx         = 4096
0.00.360.304 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.360.305 I llama_new_context_with_model: n_batch       = 2048
0.00.360.305 I llama_new_context_with_model: n_ubatch      = 512
0.00.360.306 I llama_new_context_with_model: flash_attn    = 0
0.00.360.309 I llama_new_context_with_model: freq_base     = 10000.0
0.00.360.310 I llama_new_context_with_model: freq_scale    = 1
0.00.360.311 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.375.184 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.375.200 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.375.296 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.553 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.376.558 I llama_new_context_with_model: graph nodes  = 601
0.00.376.558 I llama_new_context_with_model: graph splits = 1
0.00.376.561 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.457.502 I main: llama threadpool init, n_threads = 4
0.00.457.518 I 
0.00.457.590 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.457.593 I 
0.00.457.634 I sampler seed: 378764982
0.00.457.645 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.457.648 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.457.649 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.457.651 I 
 secon.

I am unable to access the requested content, as it is either private or blocked.

I apologize for any inconvenience this may cause. [end of text]


0.02.581.868 I llama_perf_sampler_print:    sampling time =       4.99 ms /    32 runs   (    0.16 ms per token,  6407.69 tokens per second)
0.02.581.870 I llama_perf_context_print:        load time =     456.88 ms
0.02.581.873 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.581.875 I llama_perf_context_print:        eval time =    2104.98 ms /    31 runs   (   67.90 ms per token,    14.73 tokens per second)
0.02.581.875 I llama_perf_context_print:       total time =    2124.37 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.539 I build: 4160 (5a898779) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.736 I main: llama backend init
0.00.000.742 I main: load the model and apply lora adapter, if any
0.00.020.890 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.900 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.907 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.912 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.913 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.916 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.917 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.917 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.918 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.918 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.920 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.924 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.924 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.925 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.925 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.926 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.725 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.691 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.524 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.530 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.531 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.532 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.532 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.533 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.534 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.536 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.537 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.538 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.538 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.539 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.542 I llama_model_loader: - type  f32:   37 tensors
0.00.130.543 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.784 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.038 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.562 I llm_load_vocab: special tokens cache size = 5
0.00.260.243 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.258 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.259 I llm_load_print_meta: arch             = gemma
0.00.260.259 I llm_load_print_meta: vocab type       = SPM
0.00.260.260 I llm_load_print_meta: n_vocab          = 256000
0.00.260.260 I llm_load_print_meta: n_merges         = 0
0.00.260.261 I llm_load_print_meta: vocab_only       = 0
0.00.260.261 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.261 I llm_load_print_meta: n_embd           = 2048
0.00.260.262 I llm_load_print_meta: n_layer          = 18
0.00.260.271 I llm_load_print_meta: n_head           = 8
0.00.260.272 I llm_load_print_meta: n_head_kv        = 1
0.00.260.273 I llm_load_print_meta: n_rot            = 256
0.00.260.273 I llm_load_print_meta: n_swa            = 0
0.00.260.273 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.274 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.274 I llm_load_print_meta: n_gqa            = 8
0.00.260.275 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.276 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.277 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.278 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.279 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.279 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.280 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.281 I llm_load_print_meta: n_ff             = 16384
0.00.260.281 I llm_load_print_meta: n_expert         = 0
0.00.260.281 I llm_load_print_meta: n_expert_used    = 0
0.00.260.281 I llm_load_print_meta: causal attn      = 1
0.00.260.282 I llm_load_print_meta: pooling type     = 0
0.00.260.282 I llm_load_print_meta: rope type        = 2
0.00.260.282 I llm_load_print_meta: rope scaling     = linear
0.00.260.284 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.284 I llm_load_print_meta: freq_scale_train = 1
0.00.260.285 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.285 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.285 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.286 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.286 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.286 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.286 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.287 I llm_load_print_meta: model type       = 2B
0.00.260.287 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.289 I llm_load_print_meta: model params     = 2.51 B
0.00.260.289 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.290 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.290 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.290 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.291 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.291 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.291 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.291 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.292 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.292 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.293 I llm_load_print_meta: max token length = 93
0.00.333.335 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.333.342 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.333.342 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.333.343 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.333.344 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.333.344 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.338.487 I llama_new_context_with_model: n_seq_max     = 1
0.00.338.493 I llama_new_context_with_model: n_ctx         = 4096
0.00.338.494 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.338.494 I llama_new_context_with_model: n_batch       = 2048
0.00.338.495 I llama_new_context_with_model: n_ubatch      = 512
0.00.338.496 I llama_new_context_with_model: flash_attn    = 0
0.00.338.498 I llama_new_context_with_model: freq_base     = 10000.0
0.00.338.499 I llama_new_context_with_model: freq_scale    = 1
0.00.338.499 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.352.573 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.352.585 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.352.673 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.353.999 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.354.003 I llama_new_context_with_model: graph nodes  = 601
0.00.354.003 I llama_new_context_with_model: graph splits = 1
0.00.354.005 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.437.165 I main: llama threadpool init, n_threads = 4
0.00.437.177 I 
0.00.437.247 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.437.250 I 
0.00.437.295 I sampler seed: 458747785
0.00.437.306 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.437.309 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.437.310 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.437.312 I 
 increamentalism in the 19th century.

**Answer:**

**Decadentism**

Decadentism was a philosophical and artistic

0.02.699.919 I llama_perf_sampler_print:    sampling time =       5.16 ms /    33 runs   (    0.16 ms per token,  6401.55 tokens per second)
0.02.699.922 I llama_perf_context_print:        load time =     436.41 ms
0.02.699.924 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.699.926 I llama_perf_context_print:        eval time =    2243.67 ms /    32 runs   (   70.11 ms per token,    14.26 tokens per second)
0.02.699.927 I llama_perf_context_print:       total time =    2262.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.536 I build: 4160 (5a898779) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.774 I main: llama backend init
0.00.000.781 I main: load the model and apply lora adapter, if any
0.00.021.302 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.309 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.317 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.322 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.323 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.327 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.328 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.329 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.330 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.331 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.331 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.335 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.336 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.336 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.337 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.338 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.441 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.648 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.555 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.561 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.562 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.563 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.564 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.566 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.566 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.568 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.569 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.570 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.570 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.571 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.575 I llama_model_loader: - type  f32:   37 tensors
0.00.131.576 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.128 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.753 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.314 I llm_load_vocab: special tokens cache size = 5
0.00.265.107 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.122 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.123 I llm_load_print_meta: arch             = gemma
0.00.265.123 I llm_load_print_meta: vocab type       = SPM
0.00.265.124 I llm_load_print_meta: n_vocab          = 256000
0.00.265.124 I llm_load_print_meta: n_merges         = 0
0.00.265.125 I llm_load_print_meta: vocab_only       = 0
0.00.265.125 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.125 I llm_load_print_meta: n_embd           = 2048
0.00.265.125 I llm_load_print_meta: n_layer          = 18
0.00.265.137 I llm_load_print_meta: n_head           = 8
0.00.265.138 I llm_load_print_meta: n_head_kv        = 1
0.00.265.138 I llm_load_print_meta: n_rot            = 256
0.00.265.139 I llm_load_print_meta: n_swa            = 0
0.00.265.139 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.139 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.140 I llm_load_print_meta: n_gqa            = 8
0.00.265.141 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.142 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.143 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.145 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.145 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.145 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.146 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.147 I llm_load_print_meta: n_ff             = 16384
0.00.265.147 I llm_load_print_meta: n_expert         = 0
0.00.265.147 I llm_load_print_meta: n_expert_used    = 0
0.00.265.148 I llm_load_print_meta: causal attn      = 1
0.00.265.148 I llm_load_print_meta: pooling type     = 0
0.00.265.148 I llm_load_print_meta: rope type        = 2
0.00.265.149 I llm_load_print_meta: rope scaling     = linear
0.00.265.150 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.150 I llm_load_print_meta: freq_scale_train = 1
0.00.265.150 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.151 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.151 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.151 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.152 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.152 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.152 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.152 I llm_load_print_meta: model type       = 2B
0.00.265.153 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.154 I llm_load_print_meta: model params     = 2.51 B
0.00.265.155 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.155 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.155 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.156 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.156 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.156 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.156 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.157 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.157 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.158 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.158 I llm_load_print_meta: max token length = 93
0.00.336.686 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.336.694 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.341.962 I llama_new_context_with_model: n_seq_max     = 1
0.00.341.969 I llama_new_context_with_model: n_ctx         = 4096
0.00.341.970 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.341.970 I llama_new_context_with_model: n_batch       = 2048
0.00.341.970 I llama_new_context_with_model: n_ubatch      = 512
0.00.341.971 I llama_new_context_with_model: flash_attn    = 0
0.00.341.975 I llama_new_context_with_model: freq_base     = 10000.0
0.00.341.975 I llama_new_context_with_model: freq_scale    = 1
0.00.341.976 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.584 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.597 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.688 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.949 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.956 I llama_new_context_with_model: graph nodes  = 601
0.00.357.957 I llama_new_context_with_model: graph splits = 1
0.00.357.958 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.029 I main: llama threadpool init, n_threads = 4
0.00.445.044 I 
0.00.445.125 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.445.130 I 
0.00.445.187 I sampler seed: 2813939189
0.00.445.198 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.200 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.445.201 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.445.201 I 
 seconary to secondary level biology.

**Match the terms with their definitions:**

**Term:** Mitosis
**Definition:** The process by which a cell

0.02.841.690 I llama_perf_sampler_print:    sampling time =       4.87 ms /    33 runs   (    0.15 ms per token,  6774.79 tokens per second)
0.02.841.693 I llama_perf_context_print:        load time =     444.23 ms
0.02.841.694 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.841.695 I llama_perf_context_print:        eval time =    2377.82 ms /    32 runs   (   74.31 ms per token,    13.46 tokens per second)
0.02.841.696 I llama_perf_context_print:       total time =    2396.67 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.701s
user	0m36.966s
sys	0m9.303s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4160 (5a898779)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40172.95 ms
main:    total time = 40172.95 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.599 I build: 4160 (5a898779) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.835 I main: llama backend init
0.00.000.842 I main: load the model and apply lora adapter, if any
0.00.021.214 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.226 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.235 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.240 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.241 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.246 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.246 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.247 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.247 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.248 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.248 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.254 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.254 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.255 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.256 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.257 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.475 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.638 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.508 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.515 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.515 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.516 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.517 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.518 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.518 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.521 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.521 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.522 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.522 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.523 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.527 I llama_model_loader: - type  f32:   37 tensors
0.00.131.528 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.529 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.686 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.288 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.238.767 I llm_load_vocab: special tokens cache size = 5
0.00.259.547 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.259.561 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.259.562 I llm_load_print_meta: arch             = gemma
0.00.259.562 I llm_load_print_meta: vocab type       = SPM
0.00.259.563 I llm_load_print_meta: n_vocab          = 256000
0.00.259.563 I llm_load_print_meta: n_merges         = 0
0.00.259.563 I llm_load_print_meta: vocab_only       = 0
0.00.259.564 I llm_load_print_meta: n_ctx_train      = 8192
0.00.259.564 I llm_load_print_meta: n_embd           = 2048
0.00.259.564 I llm_load_print_meta: n_layer          = 18
0.00.259.575 I llm_load_print_meta: n_head           = 8
0.00.259.576 I llm_load_print_meta: n_head_kv        = 1
0.00.259.577 I llm_load_print_meta: n_rot            = 256
0.00.259.577 I llm_load_print_meta: n_swa            = 0
0.00.259.577 I llm_load_print_meta: n_embd_head_k    = 256
0.00.259.577 I llm_load_print_meta: n_embd_head_v    = 256
0.00.259.578 I llm_load_print_meta: n_gqa            = 8
0.00.259.579 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.259.580 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.259.581 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.259.582 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.259.582 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.259.583 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.259.583 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.259.584 I llm_load_print_meta: n_ff             = 16384
0.00.259.584 I llm_load_print_meta: n_expert         = 0
0.00.259.585 I llm_load_print_meta: n_expert_used    = 0
0.00.259.585 I llm_load_print_meta: causal attn      = 1
0.00.259.585 I llm_load_print_meta: pooling type     = 0
0.00.259.586 I llm_load_print_meta: rope type        = 2
0.00.259.586 I llm_load_print_meta: rope scaling     = linear
0.00.259.587 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.259.588 I llm_load_print_meta: freq_scale_train = 1
0.00.259.588 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.259.588 I llm_load_print_meta: rope_finetuned   = unknown
0.00.259.589 I llm_load_print_meta: ssm_d_conv       = 0
0.00.259.589 I llm_load_print_meta: ssm_d_inner      = 0
0.00.259.589 I llm_load_print_meta: ssm_d_state      = 0
0.00.259.589 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.259.590 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.259.590 I llm_load_print_meta: model type       = 2B
0.00.259.591 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.259.592 I llm_load_print_meta: model params     = 2.51 B
0.00.259.592 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.259.593 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.259.593 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.259.593 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.259.594 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.259.594 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.259.594 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.259.594 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.259.595 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.259.595 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.259.596 I llm_load_print_meta: max token length = 93
0.00.319.551 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.319.558 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.319.559 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.319.559 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.319.560 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.319.560 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.324.666 I llama_new_context_with_model: n_seq_max     = 1
0.00.324.673 I llama_new_context_with_model: n_ctx         = 4096
0.00.324.673 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.324.674 I llama_new_context_with_model: n_batch       = 2048
0.00.324.674 I llama_new_context_with_model: n_ubatch      = 512
0.00.324.675 I llama_new_context_with_model: flash_attn    = 0
0.00.324.677 I llama_new_context_with_model: freq_base     = 10000.0
0.00.324.678 I llama_new_context_with_model: freq_scale    = 1
0.00.324.679 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.338.984 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.338.997 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.339.085 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.340.302 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.340.308 I llama_new_context_with_model: graph nodes  = 601
0.00.340.308 I llama_new_context_with_model: graph splits = 1
0.00.340.310 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.414.169 I main: llama threadpool init, n_threads = 4
0.00.414.185 I 
0.00.414.262 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.414.265 I 
0.00.414.311 I sampler seed: 947395514
0.00.414.322 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.414.325 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.414.326 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.414.327 I 
 seconary
## What is the primary purpose of a database management system?

**a) To store and manage data**
**b) To retrieve and

0.01.973.982 I llama_perf_sampler_print:    sampling time =       5.01 ms /    33 runs   (    0.15 ms per token,  6581.57 tokens per second)
0.01.973.984 I llama_perf_context_print:        load time =     413.31 ms
0.01.973.986 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.973.988 I llama_perf_context_print:        eval time =    1541.18 ms /    32 runs   (   48.16 ms per token,    20.76 tokens per second)
0.01.974.013 I llama_perf_context_print:       total time =    1559.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4160 (5a898779)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40138.32 ms
main:    total time = 40138.32 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.559 I build: 4160 (5a898779) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.764 I main: llama backend init
0.00.000.771 I main: load the model and apply lora adapter, if any
0.00.021.165 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.179 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.187 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.188 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.193 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.194 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.195 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.196 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.196 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.197 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.202 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.202 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.203 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.204 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.204 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.313 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.716 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.616 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.622 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.623 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.623 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.624 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.625 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.626 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.628 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.629 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.634 I llama_model_loader: - type  f32:   37 tensors
0.00.131.635 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.635 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.918 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.862 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.319 I llm_load_vocab: special tokens cache size = 5
0.00.259.989 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.004 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.005 I llm_load_print_meta: arch             = gemma
0.00.260.005 I llm_load_print_meta: vocab type       = SPM
0.00.260.006 I llm_load_print_meta: n_vocab          = 256000
0.00.260.006 I llm_load_print_meta: n_merges         = 0
0.00.260.007 I llm_load_print_meta: vocab_only       = 0
0.00.260.007 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.007 I llm_load_print_meta: n_embd           = 2048
0.00.260.008 I llm_load_print_meta: n_layer          = 18
0.00.260.019 I llm_load_print_meta: n_head           = 8
0.00.260.020 I llm_load_print_meta: n_head_kv        = 1
0.00.260.020 I llm_load_print_meta: n_rot            = 256
0.00.260.021 I llm_load_print_meta: n_swa            = 0
0.00.260.021 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.021 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.022 I llm_load_print_meta: n_gqa            = 8
0.00.260.023 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.024 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.026 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.027 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.027 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.027 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.028 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.029 I llm_load_print_meta: n_ff             = 16384
0.00.260.029 I llm_load_print_meta: n_expert         = 0
0.00.260.029 I llm_load_print_meta: n_expert_used    = 0
0.00.260.030 I llm_load_print_meta: causal attn      = 1
0.00.260.030 I llm_load_print_meta: pooling type     = 0
0.00.260.030 I llm_load_print_meta: rope type        = 2
0.00.260.031 I llm_load_print_meta: rope scaling     = linear
0.00.260.033 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.033 I llm_load_print_meta: freq_scale_train = 1
0.00.260.034 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.034 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.034 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.035 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.035 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.035 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.035 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.036 I llm_load_print_meta: model type       = 2B
0.00.260.037 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.260.037 I llm_load_print_meta: model params     = 2.51 B
0.00.260.038 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.260.039 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.039 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.040 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.040 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.040 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.041 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.041 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.041 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.042 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.042 I llm_load_print_meta: max token length = 93
0.00.314.966 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.320.004 I llama_new_context_with_model: n_seq_max     = 1
0.00.320.010 I llama_new_context_with_model: n_ctx         = 4096
0.00.320.011 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.320.011 I llama_new_context_with_model: n_batch       = 2048
0.00.320.011 I llama_new_context_with_model: n_ubatch      = 512
0.00.320.012 I llama_new_context_with_model: flash_attn    = 0
0.00.320.014 I llama_new_context_with_model: freq_base     = 10000.0
0.00.320.015 I llama_new_context_with_model: freq_scale    = 1
0.00.320.016 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.334.512 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.334.526 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.334.626 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.335.939 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.335.945 I llama_new_context_with_model: graph nodes  = 601
0.00.335.946 I llama_new_context_with_model: graph splits = 1
0.00.335.948 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.409.594 I main: llama threadpool init, n_threads = 4
0.00.409.608 I 
0.00.409.687 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.409.690 I 
0.00.409.738 I sampler seed: 3322521611
0.00.409.752 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.409.756 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.409.756 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.409.757 I 
 guaranteing that the Earth is flat and that the sun revolves around the Earth.

This question is inappropriate as it perpetuates false and misleading information that undermines scientific

0.01.962.908 I llama_perf_sampler_print:    sampling time =       5.73 ms /    33 runs   (    0.17 ms per token,  5758.16 tokens per second)
0.01.962.910 I llama_perf_context_print:        load time =     408.80 ms
0.01.962.911 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.962.913 I llama_perf_context_print:        eval time =    1534.04 ms /    32 runs   (   47.94 ms per token,    20.86 tokens per second)
0.01.962.913 I llama_perf_context_print:       total time =    1553.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.009s
user	10m23.469s
sys	0m6.915s
