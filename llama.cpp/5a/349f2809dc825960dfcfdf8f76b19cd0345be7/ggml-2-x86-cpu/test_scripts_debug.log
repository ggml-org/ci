+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.670 I build: 4189 (5a349f28) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.866 I main: llama backend init
0.00.000.874 I main: load the model and apply lora adapter, if any
0.00.023.566 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.579 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.674 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.686 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.688 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.697 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.699 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.701 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.703 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.704 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.706 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.713 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.717 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.719 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.720 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.731 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.793 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.935 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.918 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.930 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.931 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.933 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.934 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.935 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.937 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.942 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.943 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.945 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.946 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.350.947 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.956 I llama_model_loader: - type  f32:   37 tensors
0.00.350.959 I llama_model_loader: - type q8_0:  127 tensors
0.00.589.872 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.656.379 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.657.337 I llm_load_vocab: special tokens cache size = 5
0.00.858.296 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.858.375 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.858.376 I llm_load_print_meta: arch             = gemma
0.00.858.376 I llm_load_print_meta: vocab type       = SPM
0.00.858.378 I llm_load_print_meta: n_vocab          = 256000
0.00.858.380 I llm_load_print_meta: n_merges         = 0
0.00.858.381 I llm_load_print_meta: vocab_only       = 0
0.00.858.381 I llm_load_print_meta: n_ctx_train      = 8192
0.00.858.382 I llm_load_print_meta: n_embd           = 2048
0.00.858.382 I llm_load_print_meta: n_layer          = 18
0.00.858.449 I llm_load_print_meta: n_head           = 8
0.00.858.456 I llm_load_print_meta: n_head_kv        = 1
0.00.858.457 I llm_load_print_meta: n_rot            = 256
0.00.858.457 I llm_load_print_meta: n_swa            = 0
0.00.858.457 I llm_load_print_meta: n_embd_head_k    = 256
0.00.858.458 I llm_load_print_meta: n_embd_head_v    = 256
0.00.858.462 I llm_load_print_meta: n_gqa            = 8
0.00.858.467 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.858.471 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.858.473 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.858.474 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.858.474 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.858.475 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.858.475 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.858.480 I llm_load_print_meta: n_ff             = 16384
0.00.858.481 I llm_load_print_meta: n_expert         = 0
0.00.858.481 I llm_load_print_meta: n_expert_used    = 0
0.00.858.481 I llm_load_print_meta: causal attn      = 1
0.00.858.482 I llm_load_print_meta: pooling type     = 0
0.00.858.482 I llm_load_print_meta: rope type        = 2
0.00.858.483 I llm_load_print_meta: rope scaling     = linear
0.00.858.484 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.858.485 I llm_load_print_meta: freq_scale_train = 1
0.00.858.485 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.858.485 I llm_load_print_meta: rope_finetuned   = unknown
0.00.858.486 I llm_load_print_meta: ssm_d_conv       = 0
0.00.858.486 I llm_load_print_meta: ssm_d_inner      = 0
0.00.858.486 I llm_load_print_meta: ssm_d_state      = 0
0.00.858.488 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.858.488 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.858.513 I llm_load_print_meta: model type       = 2B
0.00.858.515 I llm_load_print_meta: model ftype      = Q8_0
0.00.858.516 I llm_load_print_meta: model params     = 2.51 B
0.00.858.525 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.858.526 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.858.527 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.858.527 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.858.528 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.858.529 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.858.529 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.858.530 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.858.537 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.858.538 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.858.539 I llm_load_print_meta: max token length = 93
0.00.960.659 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.960.671 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.960.672 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.960.673 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.960.674 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.960.674 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.966.677 I llama_new_context_with_model: n_seq_max     = 1
0.00.966.685 I llama_new_context_with_model: n_ctx         = 4096
0.00.966.685 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.966.686 I llama_new_context_with_model: n_batch       = 2048
0.00.966.686 I llama_new_context_with_model: n_ubatch      = 512
0.00.966.687 I llama_new_context_with_model: flash_attn    = 0
0.00.966.690 I llama_new_context_with_model: freq_base     = 10000.0
0.00.966.691 I llama_new_context_with_model: freq_scale    = 1
0.00.966.691 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.981.789 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.981.832 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.981.959 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.984.501 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.984.506 I llama_new_context_with_model: graph nodes  = 601
0.00.984.506 I llama_new_context_with_model: graph splits = 1
0.00.984.529 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.595.022 I main: llama threadpool init, n_threads = 4
0.01.595.039 I 
0.01.595.151 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.595.152 I 
0.01.595.394 I sampler seed: 3859839993
0.01.595.409 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.595.417 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.595.418 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.595.418 I 
 increasities with the intention of capturing or killing her. [end of text]


0.06.700.759 I llama_perf_sampler_print:    sampling time =      18.54 ms /    13 runs   (    1.43 ms per token,   701.22 tokens per second)
0.06.700.762 I llama_perf_context_print:        load time =    1594.06 ms
0.06.700.764 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.700.765 I llama_perf_context_print:        eval time =    5070.74 ms /    12 runs   (  422.56 ms per token,     2.37 tokens per second)
0.06.700.766 I llama_perf_context_print:       total time =    5105.75 ms /    13 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.659 I build: 4189 (5a349f28) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.863 I main: llama backend init
0.00.000.871 I main: load the model and apply lora adapter, if any
0.00.023.738 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.845 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.862 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.867 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.874 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.875 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.877 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.878 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.880 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.882 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.893 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.897 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.899 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.900 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.901 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.443 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.500 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.434 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.446 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.447 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.449 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.450 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.451 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.453 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.458 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.459 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.460 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.462 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.349.463 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.473 I llama_model_loader: - type  f32:   37 tensors
0.00.349.475 I llama_model_loader: - type q8_0:  127 tensors
0.00.585.184 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.651.754 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.652.747 I llm_load_vocab: special tokens cache size = 5
0.00.843.557 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.843.630 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.843.631 I llm_load_print_meta: arch             = gemma
0.00.843.632 I llm_load_print_meta: vocab type       = SPM
0.00.843.632 I llm_load_print_meta: n_vocab          = 256000
0.00.843.634 I llm_load_print_meta: n_merges         = 0
0.00.843.635 I llm_load_print_meta: vocab_only       = 0
0.00.843.635 I llm_load_print_meta: n_ctx_train      = 8192
0.00.843.636 I llm_load_print_meta: n_embd           = 2048
0.00.843.636 I llm_load_print_meta: n_layer          = 18
0.00.843.701 I llm_load_print_meta: n_head           = 8
0.00.843.708 I llm_load_print_meta: n_head_kv        = 1
0.00.843.709 I llm_load_print_meta: n_rot            = 256
0.00.843.709 I llm_load_print_meta: n_swa            = 0
0.00.843.709 I llm_load_print_meta: n_embd_head_k    = 256
0.00.843.710 I llm_load_print_meta: n_embd_head_v    = 256
0.00.843.714 I llm_load_print_meta: n_gqa            = 8
0.00.843.718 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.843.723 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.843.724 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.843.725 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.843.726 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.843.726 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.843.727 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.843.731 I llm_load_print_meta: n_ff             = 16384
0.00.843.732 I llm_load_print_meta: n_expert         = 0
0.00.843.732 I llm_load_print_meta: n_expert_used    = 0
0.00.843.732 I llm_load_print_meta: causal attn      = 1
0.00.843.733 I llm_load_print_meta: pooling type     = 0
0.00.843.733 I llm_load_print_meta: rope type        = 2
0.00.843.734 I llm_load_print_meta: rope scaling     = linear
0.00.843.735 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.843.736 I llm_load_print_meta: freq_scale_train = 1
0.00.843.736 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.843.736 I llm_load_print_meta: rope_finetuned   = unknown
0.00.843.737 I llm_load_print_meta: ssm_d_conv       = 0
0.00.843.737 I llm_load_print_meta: ssm_d_inner      = 0
0.00.843.737 I llm_load_print_meta: ssm_d_state      = 0
0.00.843.738 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.843.738 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.843.739 I llm_load_print_meta: model type       = 2B
0.00.843.740 I llm_load_print_meta: model ftype      = Q8_0
0.00.843.740 I llm_load_print_meta: model params     = 2.51 B
0.00.843.751 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.843.751 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.843.752 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.843.753 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.843.753 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.843.753 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.843.754 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.843.754 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.843.760 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.843.762 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.843.762 I llm_load_print_meta: max token length = 93
0.00.939.985 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.946.090 I llama_new_context_with_model: n_seq_max     = 1
0.00.946.098 I llama_new_context_with_model: n_ctx         = 4096
0.00.946.099 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.946.099 I llama_new_context_with_model: n_batch       = 2048
0.00.946.100 I llama_new_context_with_model: n_ubatch      = 512
0.00.946.100 I llama_new_context_with_model: flash_attn    = 0
0.00.946.104 I llama_new_context_with_model: freq_base     = 10000.0
0.00.946.105 I llama_new_context_with_model: freq_scale    = 1
0.00.946.106 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.961.970 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.962.017 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.962.147 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.964.747 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.964.752 I llama_new_context_with_model: graph nodes  = 601
0.00.964.752 I llama_new_context_with_model: graph splits = 1
0.00.964.775 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.575.330 I main: llama threadpool init, n_threads = 4
0.01.575.346 I 
0.01.575.465 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.575.470 I 
0.01.575.705 I sampler seed: 3369017878
0.01.575.719 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.575.728 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.575.731 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.575.731 I 
 increably, its branches reaching skyward, bearing leaves of emerald and crimson. Beneath its leafy canopy, the ground is alive with the scurrying of insects and

0.15.276.554 I llama_perf_sampler_print:    sampling time =      49.35 ms /    33 runs   (    1.50 ms per token,   668.65 tokens per second)
0.15.276.557 I llama_perf_context_print:        load time =    1574.35 ms
0.15.276.558 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.276.560 I llama_perf_context_print:        eval time =   13611.47 ms /    32 runs   (  425.36 ms per token,     2.35 tokens per second)
0.15.276.561 I llama_perf_context_print:       total time =   13701.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.675 I build: 4189 (5a349f28) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.877 I main: llama backend init
0.00.000.886 I main: load the model and apply lora adapter, if any
0.00.023.594 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.606 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.700 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.713 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.715 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.722 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.725 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.726 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.729 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.730 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.732 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.740 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.742 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.743 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.745 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.747 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.333 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.289 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.283 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.297 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.298 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.300 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.301 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.302 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.304 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.308 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.310 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.311 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.313 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.349.314 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.323 I llama_model_loader: - type  f32:   37 tensors
0.00.349.325 I llama_model_loader: - type q8_0:  127 tensors
0.00.602.901 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.667.832 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.668.823 I llm_load_vocab: special tokens cache size = 5
0.00.851.732 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.851.804 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.851.805 I llm_load_print_meta: arch             = gemma
0.00.851.806 I llm_load_print_meta: vocab type       = SPM
0.00.851.807 I llm_load_print_meta: n_vocab          = 256000
0.00.851.809 I llm_load_print_meta: n_merges         = 0
0.00.851.810 I llm_load_print_meta: vocab_only       = 0
0.00.851.810 I llm_load_print_meta: n_ctx_train      = 8192
0.00.851.810 I llm_load_print_meta: n_embd           = 2048
0.00.851.811 I llm_load_print_meta: n_layer          = 18
0.00.851.890 I llm_load_print_meta: n_head           = 8
0.00.851.898 I llm_load_print_meta: n_head_kv        = 1
0.00.851.899 I llm_load_print_meta: n_rot            = 256
0.00.851.899 I llm_load_print_meta: n_swa            = 0
0.00.851.899 I llm_load_print_meta: n_embd_head_k    = 256
0.00.851.899 I llm_load_print_meta: n_embd_head_v    = 256
0.00.851.904 I llm_load_print_meta: n_gqa            = 8
0.00.851.908 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.851.913 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.851.918 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.851.920 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.851.921 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.851.921 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.851.922 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.851.927 I llm_load_print_meta: n_ff             = 16384
0.00.851.927 I llm_load_print_meta: n_expert         = 0
0.00.851.928 I llm_load_print_meta: n_expert_used    = 0
0.00.851.929 I llm_load_print_meta: causal attn      = 1
0.00.851.929 I llm_load_print_meta: pooling type     = 0
0.00.851.929 I llm_load_print_meta: rope type        = 2
0.00.851.930 I llm_load_print_meta: rope scaling     = linear
0.00.851.931 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.851.932 I llm_load_print_meta: freq_scale_train = 1
0.00.851.932 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.851.933 I llm_load_print_meta: rope_finetuned   = unknown
0.00.851.934 I llm_load_print_meta: ssm_d_conv       = 0
0.00.851.934 I llm_load_print_meta: ssm_d_inner      = 0
0.00.851.935 I llm_load_print_meta: ssm_d_state      = 0
0.00.851.940 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.851.941 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.851.946 I llm_load_print_meta: model type       = 2B
0.00.851.947 I llm_load_print_meta: model ftype      = Q8_0
0.00.851.948 I llm_load_print_meta: model params     = 2.51 B
0.00.851.957 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.851.957 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.851.958 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.851.959 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.851.960 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.851.960 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.851.961 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.851.962 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.851.981 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.851.983 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.851.983 I llm_load_print_meta: max token length = 93
0.00.929.370 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.929.382 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.929.383 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.929.383 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.929.384 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.929.385 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.935.490 I llama_new_context_with_model: n_seq_max     = 1
0.00.935.499 I llama_new_context_with_model: n_ctx         = 4096
0.00.935.500 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.935.500 I llama_new_context_with_model: n_batch       = 2048
0.00.935.500 I llama_new_context_with_model: n_ubatch      = 512
0.00.935.501 I llama_new_context_with_model: flash_attn    = 0
0.00.935.503 I llama_new_context_with_model: freq_base     = 10000.0
0.00.935.504 I llama_new_context_with_model: freq_scale    = 1
0.00.935.505 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.951.008 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.951.050 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.951.183 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.953.765 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.953.769 I llama_new_context_with_model: graph nodes  = 601
0.00.953.769 I llama_new_context_with_model: graph splits = 1
0.00.953.794 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.565.492 I main: llama threadpool init, n_threads = 4
0.01.565.508 I 
0.01.565.621 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.565.625 I 
0.01.565.864 I sampler seed: 3871981301
0.01.565.878 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.565.887 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.565.891 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.565.891 I 
 increably. [end of text]


0.03.273.032 I llama_perf_sampler_print:    sampling time =       6.21 ms /     5 runs   (    1.24 ms per token,   804.76 tokens per second)
0.03.273.035 I llama_perf_context_print:        load time =    1564.51 ms
0.03.273.037 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.273.049 I llama_perf_context_print:        eval time =    1694.78 ms /     4 runs   (  423.69 ms per token,     2.36 tokens per second)
0.03.273.050 I llama_perf_context_print:       total time =    1707.55 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.664 I build: 4189 (5a349f28) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.000.865 I main: load the model and apply lora adapter, if any
0.00.023.317 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.331 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.426 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.439 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.441 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.449 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.456 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.458 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.459 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.460 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.461 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.472 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.474 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.475 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.476 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.478 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.649 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.707 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.700 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.712 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.714 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.715 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.716 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.718 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.719 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.724 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.725 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.727 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.728 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.348.729 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.738 I llama_model_loader: - type  f32:   37 tensors
0.00.348.740 I llama_model_loader: - type q8_0:  127 tensors
0.00.607.113 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.674.864 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.675.871 I llm_load_vocab: special tokens cache size = 5
0.00.869.054 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.869.128 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.869.132 I llm_load_print_meta: arch             = gemma
0.00.869.132 I llm_load_print_meta: vocab type       = SPM
0.00.869.133 I llm_load_print_meta: n_vocab          = 256000
0.00.869.136 I llm_load_print_meta: n_merges         = 0
0.00.869.137 I llm_load_print_meta: vocab_only       = 0
0.00.869.137 I llm_load_print_meta: n_ctx_train      = 8192
0.00.869.137 I llm_load_print_meta: n_embd           = 2048
0.00.869.138 I llm_load_print_meta: n_layer          = 18
0.00.869.201 I llm_load_print_meta: n_head           = 8
0.00.869.211 I llm_load_print_meta: n_head_kv        = 1
0.00.869.212 I llm_load_print_meta: n_rot            = 256
0.00.869.213 I llm_load_print_meta: n_swa            = 0
0.00.869.213 I llm_load_print_meta: n_embd_head_k    = 256
0.00.869.214 I llm_load_print_meta: n_embd_head_v    = 256
0.00.869.218 I llm_load_print_meta: n_gqa            = 8
0.00.869.223 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.869.228 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.869.229 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.869.231 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.869.231 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.869.232 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.869.232 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.869.237 I llm_load_print_meta: n_ff             = 16384
0.00.869.237 I llm_load_print_meta: n_expert         = 0
0.00.869.237 I llm_load_print_meta: n_expert_used    = 0
0.00.869.238 I llm_load_print_meta: causal attn      = 1
0.00.869.238 I llm_load_print_meta: pooling type     = 0
0.00.869.238 I llm_load_print_meta: rope type        = 2
0.00.869.240 I llm_load_print_meta: rope scaling     = linear
0.00.869.241 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.869.252 I llm_load_print_meta: freq_scale_train = 1
0.00.869.253 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.869.253 I llm_load_print_meta: rope_finetuned   = unknown
0.00.869.266 I llm_load_print_meta: ssm_d_conv       = 0
0.00.869.267 I llm_load_print_meta: ssm_d_inner      = 0
0.00.869.267 I llm_load_print_meta: ssm_d_state      = 0
0.00.869.268 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.869.276 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.869.283 I llm_load_print_meta: model type       = 2B
0.00.869.285 I llm_load_print_meta: model ftype      = Q8_0
0.00.869.286 I llm_load_print_meta: model params     = 2.51 B
0.00.869.295 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.869.295 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.869.296 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.869.296 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.869.297 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.869.297 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.869.298 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.869.299 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.869.315 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.869.317 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.869.317 I llm_load_print_meta: max token length = 93
0.00.942.318 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.942.330 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.948.562 I llama_new_context_with_model: n_seq_max     = 1
0.00.948.571 I llama_new_context_with_model: n_ctx         = 4096
0.00.948.571 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.948.572 I llama_new_context_with_model: n_batch       = 2048
0.00.948.572 I llama_new_context_with_model: n_ubatch      = 512
0.00.948.573 I llama_new_context_with_model: flash_attn    = 0
0.00.948.577 I llama_new_context_with_model: freq_base     = 10000.0
0.00.948.578 I llama_new_context_with_model: freq_scale    = 1
0.00.948.579 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.964.371 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.964.413 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.964.545 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.967.187 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.967.191 I llama_new_context_with_model: graph nodes  = 601
0.00.967.191 I llama_new_context_with_model: graph splits = 1
0.00.967.215 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.580.877 I main: llama threadpool init, n_threads = 4
0.01.580.893 I 
0.01.581.008 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.581.012 I 
0.01.581.247 I sampler seed: 1287510818
0.01.581.262 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.581.271 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.581.273 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.581.273 I 
 secon.

I'm sorry, but I am unable to provide any response that contains sexually suggestive or inappropriate content. [end of text]


0.12.256.840 I llama_perf_sampler_print:    sampling time =      38.30 ms /    26 runs   (    1.47 ms per token,   678.85 tokens per second)
0.12.256.842 I llama_perf_context_print:        load time =    1579.92 ms
0.12.256.844 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.256.846 I llama_perf_context_print:        eval time =   10605.83 ms /    25 runs   (  424.23 ms per token,     2.36 tokens per second)
0.12.256.847 I llama_perf_context_print:       total time =   10675.97 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m47.569s
user	2m18.504s
sys	0m9.548s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4189 (5a349f28)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186437.68 ms
main:    total time = 186437.68 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.689 I build: 4189 (5a349f28) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.903 I main: llama backend init
0.00.000.912 I main: load the model and apply lora adapter, if any
0.00.023.589 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.602 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.700 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.713 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.715 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.723 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.728 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.729 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.730 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.732 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.733 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.740 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.742 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.743 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.745 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.746 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.807 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.330.007 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.949 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.960 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.962 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.963 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.964 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.966 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.967 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.972 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.974 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.975 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.353.976 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.353.978 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.353.988 I llama_model_loader: - type  f32:   37 tensors
0.00.353.990 I llama_model_loader: - type q4_K:  108 tensors
0.00.353.991 I llama_model_loader: - type q6_K:   19 tensors
0.00.600.891 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.671.820 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.672.870 I llm_load_vocab: special tokens cache size = 5
0.00.874.585 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.874.667 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.874.668 I llm_load_print_meta: arch             = gemma
0.00.874.668 I llm_load_print_meta: vocab type       = SPM
0.00.874.669 I llm_load_print_meta: n_vocab          = 256000
0.00.874.672 I llm_load_print_meta: n_merges         = 0
0.00.874.672 I llm_load_print_meta: vocab_only       = 0
0.00.874.673 I llm_load_print_meta: n_ctx_train      = 8192
0.00.874.673 I llm_load_print_meta: n_embd           = 2048
0.00.874.673 I llm_load_print_meta: n_layer          = 18
0.00.874.743 I llm_load_print_meta: n_head           = 8
0.00.874.750 I llm_load_print_meta: n_head_kv        = 1
0.00.874.750 I llm_load_print_meta: n_rot            = 256
0.00.874.751 I llm_load_print_meta: n_swa            = 0
0.00.874.751 I llm_load_print_meta: n_embd_head_k    = 256
0.00.874.751 I llm_load_print_meta: n_embd_head_v    = 256
0.00.874.756 I llm_load_print_meta: n_gqa            = 8
0.00.874.773 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.874.778 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.874.780 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.874.782 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.874.782 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.874.783 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.874.783 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.874.788 I llm_load_print_meta: n_ff             = 16384
0.00.874.802 I llm_load_print_meta: n_expert         = 0
0.00.874.811 I llm_load_print_meta: n_expert_used    = 0
0.00.874.812 I llm_load_print_meta: causal attn      = 1
0.00.874.812 I llm_load_print_meta: pooling type     = 0
0.00.874.813 I llm_load_print_meta: rope type        = 2
0.00.874.814 I llm_load_print_meta: rope scaling     = linear
0.00.874.815 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.874.816 I llm_load_print_meta: freq_scale_train = 1
0.00.874.816 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.874.817 I llm_load_print_meta: rope_finetuned   = unknown
0.00.874.822 I llm_load_print_meta: ssm_d_conv       = 0
0.00.874.822 I llm_load_print_meta: ssm_d_inner      = 0
0.00.874.822 I llm_load_print_meta: ssm_d_state      = 0
0.00.874.823 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.874.823 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.874.824 I llm_load_print_meta: model type       = 2B
0.00.874.825 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.874.826 I llm_load_print_meta: model params     = 2.51 B
0.00.874.836 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.874.837 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.874.838 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.874.838 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.874.839 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.874.840 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.874.840 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.874.841 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.874.847 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.874.848 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.874.849 I llm_load_print_meta: max token length = 93
0.00.936.965 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.936.975 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.936.976 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.936.977 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.936.978 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.936.978 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.943.015 I llama_new_context_with_model: n_seq_max     = 1
0.00.943.024 I llama_new_context_with_model: n_ctx         = 4096
0.00.943.024 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.943.025 I llama_new_context_with_model: n_batch       = 2048
0.00.943.025 I llama_new_context_with_model: n_ubatch      = 512
0.00.943.026 I llama_new_context_with_model: flash_attn    = 0
0.00.943.030 I llama_new_context_with_model: freq_base     = 10000.0
0.00.943.030 I llama_new_context_with_model: freq_scale    = 1
0.00.943.031 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.958.973 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.959.018 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.959.157 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.961.765 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.961.769 I llama_new_context_with_model: graph nodes  = 601
0.00.961.769 I llama_new_context_with_model: graph splits = 1
0.00.961.792 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.545.634 I main: llama threadpool init, n_threads = 4
0.01.545.651 I 
0.01.545.774 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.545.779 I 
0.01.546.027 I sampler seed: 332454702
0.01.546.043 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.546.064 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.546.073 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.546.076 I 
 maneuvously.

The sentence should convey a playful and informal tone.

I am not sure if I should get a puppy or a cat. They both

0.12.704.974 I llama_perf_sampler_print:    sampling time =      49.13 ms /    33 runs   (    1.49 ms per token,   671.71 tokens per second)
0.12.704.978 I llama_perf_context_print:        load time =    1544.60 ms
0.12.704.979 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.704.993 I llama_perf_context_print:        eval time =   11069.45 ms /    32 runs   (  345.92 ms per token,     2.89 tokens per second)
0.12.704.995 I llama_perf_context_print:       total time =   11159.35 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4189 (5a349f28)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186400.58 ms
main:    total time = 186400.58 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.718 I build: 4189 (5a349f28) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.924 I main: llama backend init
0.00.000.943 I main: load the model and apply lora adapter, if any
0.00.023.563 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.675 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.691 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.695 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.703 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.704 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.706 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.707 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.709 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.710 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.723 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.727 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.728 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.729 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.731 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.844 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.975 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.098 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.110 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.111 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.124 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.128 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.130 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.131 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.136 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.144 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.157 I llama_model_loader: - type  f32:   37 tensors
0.00.353.159 I llama_model_loader: - type q4_K:  108 tensors
0.00.353.159 I llama_model_loader: - type q6_K:   19 tensors
0.00.602.101 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.672.351 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.673.323 I llm_load_vocab: special tokens cache size = 5
0.00.872.107 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.872.186 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.872.187 I llm_load_print_meta: arch             = gemma
0.00.872.187 I llm_load_print_meta: vocab type       = SPM
0.00.872.188 I llm_load_print_meta: n_vocab          = 256000
0.00.872.190 I llm_load_print_meta: n_merges         = 0
0.00.872.191 I llm_load_print_meta: vocab_only       = 0
0.00.872.191 I llm_load_print_meta: n_ctx_train      = 8192
0.00.872.191 I llm_load_print_meta: n_embd           = 2048
0.00.872.192 I llm_load_print_meta: n_layer          = 18
0.00.872.256 I llm_load_print_meta: n_head           = 8
0.00.872.263 I llm_load_print_meta: n_head_kv        = 1
0.00.872.264 I llm_load_print_meta: n_rot            = 256
0.00.872.264 I llm_load_print_meta: n_swa            = 0
0.00.872.264 I llm_load_print_meta: n_embd_head_k    = 256
0.00.872.265 I llm_load_print_meta: n_embd_head_v    = 256
0.00.872.269 I llm_load_print_meta: n_gqa            = 8
0.00.872.275 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.872.280 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.872.281 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.872.282 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.872.283 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.872.283 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.872.285 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.872.290 I llm_load_print_meta: n_ff             = 16384
0.00.872.290 I llm_load_print_meta: n_expert         = 0
0.00.872.290 I llm_load_print_meta: n_expert_used    = 0
0.00.872.291 I llm_load_print_meta: causal attn      = 1
0.00.872.291 I llm_load_print_meta: pooling type     = 0
0.00.872.292 I llm_load_print_meta: rope type        = 2
0.00.872.293 I llm_load_print_meta: rope scaling     = linear
0.00.872.294 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.872.295 I llm_load_print_meta: freq_scale_train = 1
0.00.872.296 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.872.297 I llm_load_print_meta: rope_finetuned   = unknown
0.00.872.297 I llm_load_print_meta: ssm_d_conv       = 0
0.00.872.297 I llm_load_print_meta: ssm_d_inner      = 0
0.00.872.297 I llm_load_print_meta: ssm_d_state      = 0
0.00.872.298 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.872.299 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.872.299 I llm_load_print_meta: model type       = 2B
0.00.872.300 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.872.305 I llm_load_print_meta: model params     = 2.51 B
0.00.872.335 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.872.335 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.872.336 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.872.336 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.872.337 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.872.337 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.872.338 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.872.338 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.872.344 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.872.345 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.872.346 I llm_load_print_meta: max token length = 93
0.00.930.687 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.936.695 I llama_new_context_with_model: n_seq_max     = 1
0.00.936.703 I llama_new_context_with_model: n_ctx         = 4096
0.00.936.704 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.936.704 I llama_new_context_with_model: n_batch       = 2048
0.00.936.705 I llama_new_context_with_model: n_ubatch      = 512
0.00.936.705 I llama_new_context_with_model: flash_attn    = 0
0.00.936.709 I llama_new_context_with_model: freq_base     = 10000.0
0.00.936.709 I llama_new_context_with_model: freq_scale    = 1
0.00.936.710 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.951.881 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.951.923 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.952.047 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.954.662 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.954.666 I llama_new_context_with_model: graph nodes  = 601
0.00.954.667 I llama_new_context_with_model: graph splits = 1
0.00.954.690 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.540.879 I main: llama threadpool init, n_threads = 4
0.01.540.895 I 
0.01.541.013 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.541.017 I 
0.01.541.259 I sampler seed: 3972115953
0.01.541.273 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.541.283 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.541.284 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.541.284 I 
 seconded.  I have a question about the "second" meaning of "resected."

Could you explain the context and meaning of the second definition of

0.12.687.918 I llama_perf_sampler_print:    sampling time =      49.09 ms /    33 runs   (    1.49 ms per token,   672.25 tokens per second)
0.12.687.935 I llama_perf_context_print:        load time =    1539.82 ms
0.12.687.937 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.687.939 I llama_perf_context_print:        eval time =   11057.30 ms /    32 runs   (  345.54 ms per token,     2.89 tokens per second)
0.12.687.940 I llama_perf_context_print:       total time =   11147.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m41.112s
user	46m44.429s
sys	0m6.490s
