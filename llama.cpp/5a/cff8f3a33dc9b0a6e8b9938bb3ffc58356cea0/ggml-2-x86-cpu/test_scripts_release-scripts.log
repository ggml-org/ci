+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.471 I build: 4210 (5acff8f3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.735 I main: llama backend init
0.00.000.745 I main: load the model and apply lora adapter, if any
0.00.021.712 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.724 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.732 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.741 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.745 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.749 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.750 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.750 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.751 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.751 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.751 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.756 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.757 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.757 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.757 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.758 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.594 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.512 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.429 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.437 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.437 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.438 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.439 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.440 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.440 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.443 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.444 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.445 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.446 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.447 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.451 I llama_model_loader: - type  f32:   37 tensors
0.00.133.453 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.534 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.853 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.439 I llm_load_vocab: special tokens cache size = 5
0.00.274.507 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.527 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.527 I llm_load_print_meta: arch             = gemma
0.00.274.528 I llm_load_print_meta: vocab type       = SPM
0.00.274.528 I llm_load_print_meta: n_vocab          = 256000
0.00.274.529 I llm_load_print_meta: n_merges         = 0
0.00.274.529 I llm_load_print_meta: vocab_only       = 0
0.00.274.530 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.530 I llm_load_print_meta: n_embd           = 2048
0.00.274.531 I llm_load_print_meta: n_layer          = 18
0.00.274.541 I llm_load_print_meta: n_head           = 8
0.00.274.542 I llm_load_print_meta: n_head_kv        = 1
0.00.274.542 I llm_load_print_meta: n_rot            = 256
0.00.274.543 I llm_load_print_meta: n_swa            = 0
0.00.274.543 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.543 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.544 I llm_load_print_meta: n_gqa            = 8
0.00.274.545 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.546 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.547 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.548 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.549 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.549 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.550 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.550 I llm_load_print_meta: n_ff             = 16384
0.00.274.551 I llm_load_print_meta: n_expert         = 0
0.00.274.551 I llm_load_print_meta: n_expert_used    = 0
0.00.274.551 I llm_load_print_meta: causal attn      = 1
0.00.274.551 I llm_load_print_meta: pooling type     = 0
0.00.274.552 I llm_load_print_meta: rope type        = 2
0.00.274.552 I llm_load_print_meta: rope scaling     = linear
0.00.274.554 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.554 I llm_load_print_meta: freq_scale_train = 1
0.00.274.554 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.555 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.555 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.556 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.556 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.556 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.556 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.557 I llm_load_print_meta: model type       = 2B
0.00.274.557 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.559 I llm_load_print_meta: model params     = 2.51 B
0.00.274.559 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.560 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.560 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.561 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.561 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.561 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.562 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.562 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.562 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.563 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.563 I llm_load_print_meta: max token length = 93
0.00.374.712 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.374.720 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.374.721 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.374.721 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.374.722 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.374.722 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.380.214 I llama_new_context_with_model: n_seq_max     = 1
0.00.380.221 I llama_new_context_with_model: n_ctx         = 4096
0.00.380.222 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.380.222 I llama_new_context_with_model: n_batch       = 2048
0.00.380.222 I llama_new_context_with_model: n_ubatch      = 512
0.00.380.223 I llama_new_context_with_model: flash_attn    = 0
0.00.380.226 I llama_new_context_with_model: freq_base     = 10000.0
0.00.380.226 I llama_new_context_with_model: freq_scale    = 1
0.00.380.227 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.394.360 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.394.375 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.394.466 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.395.779 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.395.784 I llama_new_context_with_model: graph nodes  = 601
0.00.395.785 I llama_new_context_with_model: graph splits = 1
0.00.395.786 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.480.658 I main: llama threadpool init, n_threads = 4
0.00.480.676 I 
0.00.480.755 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.480.759 I 
0.00.480.806 I sampler seed: 2485669319
0.00.480.817 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.480.829 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.480.834 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.480.834 I 
 increasities with the grace and elegance of a ballet dancer. [end of text]


0.01.402.148 I llama_perf_sampler_print:    sampling time =       2.16 ms /    14 runs   (    0.15 ms per token,  6484.48 tokens per second)
0.01.402.150 I llama_perf_context_print:        load time =     479.89 ms
0.01.402.151 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.402.153 I llama_perf_context_print:        eval time =     913.12 ms /    13 runs   (   70.24 ms per token,    14.24 tokens per second)
0.01.402.153 I llama_perf_context_print:       total time =     921.50 ms /    14 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.530 I build: 4210 (5acff8f3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.744 I main: llama backend init
0.00.000.751 I main: load the model and apply lora adapter, if any
0.00.021.177 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.191 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.201 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.205 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.209 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.210 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.212 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.212 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.213 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.214 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.219 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.220 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.221 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.221 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.222 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.707 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.213 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.076 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.081 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.082 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.083 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.083 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.084 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.085 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.088 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.088 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.089 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.090 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.091 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.095 I llama_model_loader: - type  f32:   37 tensors
0.00.131.096 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.384 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.377 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.238.871 I llm_load_vocab: special tokens cache size = 5
0.00.259.712 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.259.727 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.259.727 I llm_load_print_meta: arch             = gemma
0.00.259.728 I llm_load_print_meta: vocab type       = SPM
0.00.259.729 I llm_load_print_meta: n_vocab          = 256000
0.00.259.729 I llm_load_print_meta: n_merges         = 0
0.00.259.730 I llm_load_print_meta: vocab_only       = 0
0.00.259.730 I llm_load_print_meta: n_ctx_train      = 8192
0.00.259.730 I llm_load_print_meta: n_embd           = 2048
0.00.259.730 I llm_load_print_meta: n_layer          = 18
0.00.259.741 I llm_load_print_meta: n_head           = 8
0.00.259.742 I llm_load_print_meta: n_head_kv        = 1
0.00.259.743 I llm_load_print_meta: n_rot            = 256
0.00.259.743 I llm_load_print_meta: n_swa            = 0
0.00.259.743 I llm_load_print_meta: n_embd_head_k    = 256
0.00.259.744 I llm_load_print_meta: n_embd_head_v    = 256
0.00.259.745 I llm_load_print_meta: n_gqa            = 8
0.00.259.745 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.259.746 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.259.747 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.259.748 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.259.749 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.259.749 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.259.749 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.259.750 I llm_load_print_meta: n_ff             = 16384
0.00.259.751 I llm_load_print_meta: n_expert         = 0
0.00.259.751 I llm_load_print_meta: n_expert_used    = 0
0.00.259.751 I llm_load_print_meta: causal attn      = 1
0.00.259.751 I llm_load_print_meta: pooling type     = 0
0.00.259.752 I llm_load_print_meta: rope type        = 2
0.00.259.752 I llm_load_print_meta: rope scaling     = linear
0.00.259.753 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.259.754 I llm_load_print_meta: freq_scale_train = 1
0.00.259.754 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.259.755 I llm_load_print_meta: rope_finetuned   = unknown
0.00.259.755 I llm_load_print_meta: ssm_d_conv       = 0
0.00.259.755 I llm_load_print_meta: ssm_d_inner      = 0
0.00.259.755 I llm_load_print_meta: ssm_d_state      = 0
0.00.259.756 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.259.756 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.259.756 I llm_load_print_meta: model type       = 2B
0.00.259.757 I llm_load_print_meta: model ftype      = Q8_0
0.00.259.758 I llm_load_print_meta: model params     = 2.51 B
0.00.259.759 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.259.759 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.259.759 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.259.760 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.259.760 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.259.761 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.259.761 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.259.761 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.259.762 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.259.762 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.259.763 I llm_load_print_meta: max token length = 93
0.00.354.871 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.360.184 I llama_new_context_with_model: n_seq_max     = 1
0.00.360.190 I llama_new_context_with_model: n_ctx         = 4096
0.00.360.191 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.360.191 I llama_new_context_with_model: n_batch       = 2048
0.00.360.191 I llama_new_context_with_model: n_ubatch      = 512
0.00.360.192 I llama_new_context_with_model: flash_attn    = 0
0.00.360.194 I llama_new_context_with_model: freq_base     = 10000.0
0.00.360.195 I llama_new_context_with_model: freq_scale    = 1
0.00.360.196 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.763 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.374.777 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.374.865 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.137 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.376.145 I llama_new_context_with_model: graph nodes  = 601
0.00.376.145 I llama_new_context_with_model: graph splits = 1
0.00.376.147 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.457.140 I main: llama threadpool init, n_threads = 4
0.00.457.156 I 
0.00.457.236 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.457.241 I 
0.00.457.302 I sampler seed: 975869074
0.00.457.314 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.457.324 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.457.328 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.457.329 I 
 increasities:

* The first sentence is missing its verb.
* The second sentence contains a grammatical error.
* The third sentence is grammatically correct

0.02.625.850 I llama_perf_sampler_print:    sampling time =       4.88 ms /    33 runs   (    0.15 ms per token,  6760.91 tokens per second)
0.02.625.852 I llama_perf_context_print:        load time =     456.37 ms
0.02.625.853 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.625.854 I llama_perf_context_print:        eval time =    2149.40 ms /    32 runs   (   67.17 ms per token,    14.89 tokens per second)
0.02.625.855 I llama_perf_context_print:       total time =    2168.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.529 I build: 4210 (5acff8f3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.758 I main: llama backend init
0.00.000.765 I main: load the model and apply lora adapter, if any
0.00.020.742 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.753 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.760 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.764 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.765 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.769 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.769 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.770 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.771 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.771 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.772 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.775 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.776 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.777 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.778 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.779 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.366 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.509 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.366 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.374 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.375 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.375 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.376 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.377 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.378 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.382 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.382 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.383 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.384 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.385 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.390 I llama_model_loader: - type  f32:   37 tensors
0.00.131.392 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.819 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.115 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.709 I llm_load_vocab: special tokens cache size = 5
0.00.264.750 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.769 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.769 I llm_load_print_meta: arch             = gemma
0.00.264.770 I llm_load_print_meta: vocab type       = SPM
0.00.264.771 I llm_load_print_meta: n_vocab          = 256000
0.00.264.771 I llm_load_print_meta: n_merges         = 0
0.00.264.771 I llm_load_print_meta: vocab_only       = 0
0.00.264.772 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.772 I llm_load_print_meta: n_embd           = 2048
0.00.264.772 I llm_load_print_meta: n_layer          = 18
0.00.264.784 I llm_load_print_meta: n_head           = 8
0.00.264.785 I llm_load_print_meta: n_head_kv        = 1
0.00.264.785 I llm_load_print_meta: n_rot            = 256
0.00.264.785 I llm_load_print_meta: n_swa            = 0
0.00.264.786 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.786 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.787 I llm_load_print_meta: n_gqa            = 8
0.00.264.788 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.789 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.790 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.791 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.791 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.792 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.792 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.793 I llm_load_print_meta: n_ff             = 16384
0.00.264.793 I llm_load_print_meta: n_expert         = 0
0.00.264.794 I llm_load_print_meta: n_expert_used    = 0
0.00.264.794 I llm_load_print_meta: causal attn      = 1
0.00.264.794 I llm_load_print_meta: pooling type     = 0
0.00.264.795 I llm_load_print_meta: rope type        = 2
0.00.264.795 I llm_load_print_meta: rope scaling     = linear
0.00.264.797 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.797 I llm_load_print_meta: freq_scale_train = 1
0.00.264.798 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.798 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.798 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.799 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.799 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.799 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.799 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.800 I llm_load_print_meta: model type       = 2B
0.00.264.800 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.801 I llm_load_print_meta: model params     = 2.51 B
0.00.264.802 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.803 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.803 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.803 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.804 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.804 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.805 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.805 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.805 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.806 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.806 I llm_load_print_meta: max token length = 93
0.00.340.920 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.340.926 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.340.927 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.340.928 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.340.928 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.340.929 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.346.105 I llama_new_context_with_model: n_seq_max     = 1
0.00.346.112 I llama_new_context_with_model: n_ctx         = 4096
0.00.346.113 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.346.113 I llama_new_context_with_model: n_batch       = 2048
0.00.346.114 I llama_new_context_with_model: n_ubatch      = 512
0.00.346.114 I llama_new_context_with_model: flash_attn    = 0
0.00.346.117 I llama_new_context_with_model: freq_base     = 10000.0
0.00.346.118 I llama_new_context_with_model: freq_scale    = 1
0.00.346.119 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.360.604 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.360.617 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.360.714 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.955 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.960 I llama_new_context_with_model: graph nodes  = 601
0.00.361.961 I llama_new_context_with_model: graph splits = 1
0.00.361.963 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.458.349 I main: llama threadpool init, n_threads = 4
0.00.458.365 I 
0.00.458.448 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.458.453 I 
0.00.458.506 I sampler seed: 1932427777
0.00.458.519 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.458.527 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.458.528 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.458.529 I 
 increably.

I am unable to generate the requested content due to safety concerns. [end of text]


0.01.727.383 I llama_perf_sampler_print:    sampling time =       2.71 ms /    19 runs   (    0.14 ms per token,  7003.32 tokens per second)
0.01.727.386 I llama_perf_context_print:        load time =     457.56 ms
0.01.727.387 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.727.390 I llama_perf_context_print:        eval time =    1257.58 ms /    18 runs   (   69.87 ms per token,    14.31 tokens per second)
0.01.727.391 I llama_perf_context_print:       total time =    1269.04 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.176 I build: 4210 (5acff8f3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.405 I main: llama backend init
0.00.000.411 I main: load the model and apply lora adapter, if any
0.00.020.654 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.662 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.669 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.674 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.675 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.678 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.679 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.680 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.681 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.681 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.682 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.686 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.687 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.688 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.688 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.689 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.123 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.983 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.903 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.909 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.910 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.911 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.911 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.912 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.913 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.915 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.916 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.917 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.917 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.918 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.921 I llama_model_loader: - type  f32:   37 tensors
0.00.130.922 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.324 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.707 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.262.347 I llm_load_vocab: special tokens cache size = 5
0.00.283.506 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.522 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.523 I llm_load_print_meta: arch             = gemma
0.00.283.523 I llm_load_print_meta: vocab type       = SPM
0.00.283.524 I llm_load_print_meta: n_vocab          = 256000
0.00.283.525 I llm_load_print_meta: n_merges         = 0
0.00.283.525 I llm_load_print_meta: vocab_only       = 0
0.00.283.525 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.526 I llm_load_print_meta: n_embd           = 2048
0.00.283.526 I llm_load_print_meta: n_layer          = 18
0.00.283.538 I llm_load_print_meta: n_head           = 8
0.00.283.539 I llm_load_print_meta: n_head_kv        = 1
0.00.283.539 I llm_load_print_meta: n_rot            = 256
0.00.283.539 I llm_load_print_meta: n_swa            = 0
0.00.283.540 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.540 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.541 I llm_load_print_meta: n_gqa            = 8
0.00.283.542 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.543 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.544 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.545 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.545 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.546 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.546 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.547 I llm_load_print_meta: n_ff             = 16384
0.00.283.547 I llm_load_print_meta: n_expert         = 0
0.00.283.547 I llm_load_print_meta: n_expert_used    = 0
0.00.283.548 I llm_load_print_meta: causal attn      = 1
0.00.283.548 I llm_load_print_meta: pooling type     = 0
0.00.283.548 I llm_load_print_meta: rope type        = 2
0.00.283.549 I llm_load_print_meta: rope scaling     = linear
0.00.283.550 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.550 I llm_load_print_meta: freq_scale_train = 1
0.00.283.551 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.551 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.552 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.552 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.552 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.552 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.553 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.553 I llm_load_print_meta: model type       = 2B
0.00.283.554 I llm_load_print_meta: model ftype      = Q8_0
0.00.283.555 I llm_load_print_meta: model params     = 2.51 B
0.00.283.556 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.283.556 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.557 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.557 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.558 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.558 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.558 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.559 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.559 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.560 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.560 I llm_load_print_meta: max token length = 93
0.00.354.656 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.354.662 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.359.638 I llama_new_context_with_model: n_seq_max     = 1
0.00.359.645 I llama_new_context_with_model: n_ctx         = 4096
0.00.359.645 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.359.645 I llama_new_context_with_model: n_batch       = 2048
0.00.359.646 I llama_new_context_with_model: n_ubatch      = 512
0.00.359.646 I llama_new_context_with_model: flash_attn    = 0
0.00.359.648 I llama_new_context_with_model: freq_base     = 10000.0
0.00.359.649 I llama_new_context_with_model: freq_scale    = 1
0.00.359.650 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.373.968 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.373.983 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.374.074 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.375.372 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.375.378 I llama_new_context_with_model: graph nodes  = 601
0.00.375.379 I llama_new_context_with_model: graph splits = 1
0.00.375.381 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.672 I main: llama threadpool init, n_threads = 4
0.00.461.687 I 
0.00.461.766 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.461.770 I 
0.00.461.835 I sampler seed: 2150930345
0.00.461.846 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.862 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.461.866 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.866 I 
 increasities with a touch of whimsy, to bring a smile to the face of any child who encounters them. [end of text]


0.02.279.146 I llama_perf_sampler_print:    sampling time =       3.75 ms /    25 runs   (    0.15 ms per token,  6659.56 tokens per second)
0.02.279.148 I llama_perf_context_print:        load time =     461.24 ms
0.02.279.150 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.279.151 I llama_perf_context_print:        eval time =    1802.85 ms /    24 runs   (   75.12 ms per token,    13.31 tokens per second)
0.02.279.152 I llama_perf_context_print:       total time =    1817.48 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.581s
user	0m27.614s
sys	0m9.310s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4210 (5acff8f3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40355.01 ms
main:    total time = 40355.01 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.534 I build: 4210 (5acff8f3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.717 I main: llama backend init
0.00.000.724 I main: load the model and apply lora adapter, if any
0.00.021.057 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.067 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.076 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.080 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.081 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.085 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.086 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.086 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.087 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.088 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.089 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.092 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.093 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.094 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.095 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.095 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.858 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.199 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.075 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.081 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.082 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.083 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.083 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.084 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.085 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.087 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.088 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.090 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.091 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.092 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.095 I llama_model_loader: - type  f32:   37 tensors
0.00.132.096 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.096 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.579 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.711 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.337 I llm_load_vocab: special tokens cache size = 5
0.00.277.482 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.499 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.500 I llm_load_print_meta: arch             = gemma
0.00.277.500 I llm_load_print_meta: vocab type       = SPM
0.00.277.501 I llm_load_print_meta: n_vocab          = 256000
0.00.277.501 I llm_load_print_meta: n_merges         = 0
0.00.277.502 I llm_load_print_meta: vocab_only       = 0
0.00.277.502 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.502 I llm_load_print_meta: n_embd           = 2048
0.00.277.502 I llm_load_print_meta: n_layer          = 18
0.00.277.515 I llm_load_print_meta: n_head           = 8
0.00.277.516 I llm_load_print_meta: n_head_kv        = 1
0.00.277.517 I llm_load_print_meta: n_rot            = 256
0.00.277.517 I llm_load_print_meta: n_swa            = 0
0.00.277.517 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.518 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.519 I llm_load_print_meta: n_gqa            = 8
0.00.277.520 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.521 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.521 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.523 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.523 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.524 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.524 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.525 I llm_load_print_meta: n_ff             = 16384
0.00.277.525 I llm_load_print_meta: n_expert         = 0
0.00.277.525 I llm_load_print_meta: n_expert_used    = 0
0.00.277.525 I llm_load_print_meta: causal attn      = 1
0.00.277.526 I llm_load_print_meta: pooling type     = 0
0.00.277.526 I llm_load_print_meta: rope type        = 2
0.00.277.527 I llm_load_print_meta: rope scaling     = linear
0.00.277.528 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.529 I llm_load_print_meta: freq_scale_train = 1
0.00.277.529 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.529 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.530 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.530 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.530 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.530 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.530 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.531 I llm_load_print_meta: model type       = 2B
0.00.277.532 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.277.533 I llm_load_print_meta: model params     = 2.51 B
0.00.277.534 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.277.534 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.534 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.535 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.535 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.536 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.536 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.536 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.537 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.537 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.537 I llm_load_print_meta: max token length = 93
0.00.336.927 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.336.935 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.336.936 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.336.937 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.336.937 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.336.938 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.342.169 I llama_new_context_with_model: n_seq_max     = 1
0.00.342.175 I llama_new_context_with_model: n_ctx         = 4096
0.00.342.176 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.342.176 I llama_new_context_with_model: n_batch       = 2048
0.00.342.177 I llama_new_context_with_model: n_ubatch      = 512
0.00.342.177 I llama_new_context_with_model: flash_attn    = 0
0.00.342.181 I llama_new_context_with_model: freq_base     = 10000.0
0.00.342.181 I llama_new_context_with_model: freq_scale    = 1
0.00.342.182 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.939 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.954 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.047 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.362 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.369 I llama_new_context_with_model: graph nodes  = 601
0.00.358.369 I llama_new_context_with_model: graph splits = 1
0.00.358.372 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.434.515 I main: llama threadpool init, n_threads = 4
0.00.434.532 I 
0.00.434.608 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.434.611 I 
0.00.434.658 I sampler seed: 1090747075
0.00.434.672 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.434.675 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.434.676 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.434.676 I 
 seconally, with the exception of the last item.

I am a student in your class. I am seeking help with a question on [insert topic].

0.02.062.208 I llama_perf_sampler_print:    sampling time =       4.84 ms /    33 runs   (    0.15 ms per token,  6816.77 tokens per second)
0.02.062.211 I llama_perf_context_print:        load time =     433.77 ms
0.02.062.212 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.062.213 I llama_perf_context_print:        eval time =    1608.99 ms /    32 runs   (   50.28 ms per token,    19.89 tokens per second)
0.02.062.214 I llama_perf_context_print:       total time =    1627.70 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4210 (5acff8f3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40212.97 ms
main:    total time = 40212.97 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.179 I build: 4210 (5acff8f3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.361 I main: llama backend init
0.00.000.368 I main: load the model and apply lora adapter, if any
0.00.020.680 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.695 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.705 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.709 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.712 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.712 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.713 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.714 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.715 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.716 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.720 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.720 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.721 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.721 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.722 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.438 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.678 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.561 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.567 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.568 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.568 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.569 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.570 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.570 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.573 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.574 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.577 I llama_model_loader: - type  f32:   37 tensors
0.00.131.578 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.579 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.281 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.215 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.791 I llm_load_vocab: special tokens cache size = 5
0.00.274.837 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.852 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.853 I llm_load_print_meta: arch             = gemma
0.00.274.853 I llm_load_print_meta: vocab type       = SPM
0.00.274.854 I llm_load_print_meta: n_vocab          = 256000
0.00.274.854 I llm_load_print_meta: n_merges         = 0
0.00.274.855 I llm_load_print_meta: vocab_only       = 0
0.00.274.855 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.855 I llm_load_print_meta: n_embd           = 2048
0.00.274.855 I llm_load_print_meta: n_layer          = 18
0.00.274.866 I llm_load_print_meta: n_head           = 8
0.00.274.867 I llm_load_print_meta: n_head_kv        = 1
0.00.274.867 I llm_load_print_meta: n_rot            = 256
0.00.274.868 I llm_load_print_meta: n_swa            = 0
0.00.274.868 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.868 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.869 I llm_load_print_meta: n_gqa            = 8
0.00.274.871 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.871 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.872 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.874 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.874 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.875 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.875 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.876 I llm_load_print_meta: n_ff             = 16384
0.00.274.876 I llm_load_print_meta: n_expert         = 0
0.00.274.876 I llm_load_print_meta: n_expert_used    = 0
0.00.274.876 I llm_load_print_meta: causal attn      = 1
0.00.274.877 I llm_load_print_meta: pooling type     = 0
0.00.274.877 I llm_load_print_meta: rope type        = 2
0.00.274.877 I llm_load_print_meta: rope scaling     = linear
0.00.274.879 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.879 I llm_load_print_meta: freq_scale_train = 1
0.00.274.880 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.880 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.881 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.881 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.881 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.881 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.882 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.882 I llm_load_print_meta: model type       = 2B
0.00.274.883 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.274.883 I llm_load_print_meta: model params     = 2.51 B
0.00.274.884 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.274.884 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.885 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.885 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.885 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.886 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.886 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.886 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.887 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.887 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.888 I llm_load_print_meta: max token length = 93
0.00.330.758 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.335.797 I llama_new_context_with_model: n_seq_max     = 1
0.00.335.804 I llama_new_context_with_model: n_ctx         = 4096
0.00.335.805 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.335.805 I llama_new_context_with_model: n_batch       = 2048
0.00.335.805 I llama_new_context_with_model: n_ubatch      = 512
0.00.335.806 I llama_new_context_with_model: flash_attn    = 0
0.00.335.809 I llama_new_context_with_model: freq_base     = 10000.0
0.00.335.810 I llama_new_context_with_model: freq_scale    = 1
0.00.335.811 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.264 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.350.279 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.350.370 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.351.580 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.351.587 I llama_new_context_with_model: graph nodes  = 601
0.00.351.588 I llama_new_context_with_model: graph splits = 1
0.00.351.590 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.426.841 I main: llama threadpool init, n_threads = 4
0.00.426.856 I 
0.00.426.930 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.426.934 I 
0.00.426.977 I sampler seed: 3816084329
0.00.426.989 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.427.001 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.427.004 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.427.004 I 
 increasities, and the emotional consequences they can have on both the individual and the relationship.

**Answer:**

**The Impact of Emotional Consequences of Deciding

0.02.027.304 I llama_perf_sampler_print:    sampling time =       5.45 ms /    33 runs   (    0.17 ms per token,  6056.16 tokens per second)
0.02.027.307 I llama_perf_context_print:        load time =     426.46 ms
0.02.027.308 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.027.311 I llama_perf_context_print:        eval time =    1580.53 ms /    32 runs   (   49.39 ms per token,    20.25 tokens per second)
0.02.027.312 I llama_perf_context_print:       total time =    1600.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.433s
user	10m24.392s
sys	0m7.055s
