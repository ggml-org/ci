+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 4210 (5acff8f3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.000.846 I main: load the model and apply lora adapter, if any
0.00.023.718 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.727 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.818 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.831 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.833 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.839 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.845 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.847 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.848 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.849 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.851 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.858 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.860 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.861 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.862 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.863 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.233.103 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.334.939 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.358.801 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.358.812 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.358.813 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.358.815 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.358.816 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.358.818 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.358.819 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.358.824 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.358.825 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.827 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.358.828 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.358.830 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.358.838 I llama_model_loader: - type  f32:   37 tensors
0.00.358.840 I llama_model_loader: - type q8_0:  127 tensors
0.00.593.063 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.651.992 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.652.976 I llm_load_vocab: special tokens cache size = 5
0.00.843.847 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.843.922 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.843.923 I llm_load_print_meta: arch             = gemma
0.00.843.924 I llm_load_print_meta: vocab type       = SPM
0.00.843.925 I llm_load_print_meta: n_vocab          = 256000
0.00.843.927 I llm_load_print_meta: n_merges         = 0
0.00.843.927 I llm_load_print_meta: vocab_only       = 0
0.00.843.928 I llm_load_print_meta: n_ctx_train      = 8192
0.00.843.928 I llm_load_print_meta: n_embd           = 2048
0.00.843.928 I llm_load_print_meta: n_layer          = 18
0.00.843.996 I llm_load_print_meta: n_head           = 8
0.00.844.003 I llm_load_print_meta: n_head_kv        = 1
0.00.844.003 I llm_load_print_meta: n_rot            = 256
0.00.844.004 I llm_load_print_meta: n_swa            = 0
0.00.844.004 I llm_load_print_meta: n_embd_head_k    = 256
0.00.844.004 I llm_load_print_meta: n_embd_head_v    = 256
0.00.844.009 I llm_load_print_meta: n_gqa            = 8
0.00.844.014 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.844.018 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.844.020 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.844.021 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.844.021 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.844.022 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.844.022 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.844.027 I llm_load_print_meta: n_ff             = 16384
0.00.844.027 I llm_load_print_meta: n_expert         = 0
0.00.844.028 I llm_load_print_meta: n_expert_used    = 0
0.00.844.028 I llm_load_print_meta: causal attn      = 1
0.00.844.028 I llm_load_print_meta: pooling type     = 0
0.00.844.029 I llm_load_print_meta: rope type        = 2
0.00.844.030 I llm_load_print_meta: rope scaling     = linear
0.00.844.031 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.844.032 I llm_load_print_meta: freq_scale_train = 1
0.00.844.032 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.844.033 I llm_load_print_meta: rope_finetuned   = unknown
0.00.844.033 I llm_load_print_meta: ssm_d_conv       = 0
0.00.844.033 I llm_load_print_meta: ssm_d_inner      = 0
0.00.844.033 I llm_load_print_meta: ssm_d_state      = 0
0.00.844.034 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.844.034 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.844.035 I llm_load_print_meta: model type       = 2B
0.00.844.036 I llm_load_print_meta: model ftype      = Q8_0
0.00.844.036 I llm_load_print_meta: model params     = 2.51 B
0.00.844.047 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.844.047 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.844.048 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.844.048 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.844.049 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.844.049 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.844.049 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.844.050 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.844.055 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.844.056 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.844.056 I llm_load_print_meta: max token length = 93
0.00.948.108 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.948.116 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.948.117 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.948.118 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.948.119 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.948.120 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.954.131 I llama_new_context_with_model: n_seq_max     = 1
0.00.954.139 I llama_new_context_with_model: n_ctx         = 4096
0.00.954.140 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.954.140 I llama_new_context_with_model: n_batch       = 2048
0.00.954.140 I llama_new_context_with_model: n_ubatch      = 512
0.00.954.141 I llama_new_context_with_model: flash_attn    = 0
0.00.954.143 I llama_new_context_with_model: freq_base     = 10000.0
0.00.954.144 I llama_new_context_with_model: freq_scale    = 1
0.00.954.145 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.968.516 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.968.556 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.968.684 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.971.185 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.971.189 I llama_new_context_with_model: graph nodes  = 601
0.00.971.189 I llama_new_context_with_model: graph splits = 1
0.00.971.213 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.579.105 I main: llama threadpool init, n_threads = 4
0.01.579.121 I 
0.01.579.236 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.579.240 I 
0.01.579.489 I sampler seed: 1948229895
0.01.579.502 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.579.512 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.579.515 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.579.516 I 
 increasities, and the allure of power in the realm of magic.

The world is shrouded in mystery, and the secrets of magic lie hidden within the shadows

0.15.139.573 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.01 tokens per second)
0.15.139.577 I llama_perf_context_print:        load time =    1578.16 ms
0.15.139.591 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.139.596 I llama_perf_context_print:        eval time =   13470.68 ms /    32 runs   (  420.96 ms per token,     2.38 tokens per second)
0.15.139.597 I llama_perf_context_print:       total time =   13560.48 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.651 I build: 4210 (5acff8f3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.000.859 I main: load the model and apply lora adapter, if any
0.00.023.566 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.660 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.675 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.676 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.682 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.684 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.685 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.687 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.688 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.689 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.700 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.704 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.705 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.706 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.707 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.426 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.361 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.243 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.252 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.253 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.254 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.256 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.257 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.259 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.263 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.264 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.266 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.267 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.350.269 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.277 I llama_model_loader: - type  f32:   37 tensors
0.00.350.280 I llama_model_loader: - type q8_0:  127 tensors
0.00.577.761 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.643.068 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.644.014 I llm_load_vocab: special tokens cache size = 5
0.00.845.719 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.845.790 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.845.791 I llm_load_print_meta: arch             = gemma
0.00.845.792 I llm_load_print_meta: vocab type       = SPM
0.00.845.793 I llm_load_print_meta: n_vocab          = 256000
0.00.845.795 I llm_load_print_meta: n_merges         = 0
0.00.845.795 I llm_load_print_meta: vocab_only       = 0
0.00.845.796 I llm_load_print_meta: n_ctx_train      = 8192
0.00.845.796 I llm_load_print_meta: n_embd           = 2048
0.00.845.796 I llm_load_print_meta: n_layer          = 18
0.00.845.863 I llm_load_print_meta: n_head           = 8
0.00.845.872 I llm_load_print_meta: n_head_kv        = 1
0.00.845.873 I llm_load_print_meta: n_rot            = 256
0.00.845.874 I llm_load_print_meta: n_swa            = 0
0.00.845.874 I llm_load_print_meta: n_embd_head_k    = 256
0.00.845.874 I llm_load_print_meta: n_embd_head_v    = 256
0.00.845.879 I llm_load_print_meta: n_gqa            = 8
0.00.845.884 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.845.889 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.845.891 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.845.892 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.845.893 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.845.893 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.845.894 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.845.899 I llm_load_print_meta: n_ff             = 16384
0.00.845.910 I llm_load_print_meta: n_expert         = 0
0.00.845.914 I llm_load_print_meta: n_expert_used    = 0
0.00.845.915 I llm_load_print_meta: causal attn      = 1
0.00.845.915 I llm_load_print_meta: pooling type     = 0
0.00.845.916 I llm_load_print_meta: rope type        = 2
0.00.845.917 I llm_load_print_meta: rope scaling     = linear
0.00.845.919 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.845.919 I llm_load_print_meta: freq_scale_train = 1
0.00.845.931 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.845.932 I llm_load_print_meta: rope_finetuned   = unknown
0.00.845.932 I llm_load_print_meta: ssm_d_conv       = 0
0.00.845.933 I llm_load_print_meta: ssm_d_inner      = 0
0.00.845.933 I llm_load_print_meta: ssm_d_state      = 0
0.00.845.933 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.845.934 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.845.934 I llm_load_print_meta: model type       = 2B
0.00.845.935 I llm_load_print_meta: model ftype      = Q8_0
0.00.845.936 I llm_load_print_meta: model params     = 2.51 B
0.00.845.946 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.845.946 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.845.947 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.845.954 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.845.956 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.845.956 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.845.956 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.845.957 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.845.963 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.845.965 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.845.965 I llm_load_print_meta: max token length = 93
0.00.942.938 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.948.955 I llama_new_context_with_model: n_seq_max     = 1
0.00.948.962 I llama_new_context_with_model: n_ctx         = 4096
0.00.948.963 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.948.963 I llama_new_context_with_model: n_batch       = 2048
0.00.948.964 I llama_new_context_with_model: n_ubatch      = 512
0.00.948.964 I llama_new_context_with_model: flash_attn    = 0
0.00.948.967 I llama_new_context_with_model: freq_base     = 10000.0
0.00.948.969 I llama_new_context_with_model: freq_scale    = 1
0.00.948.969 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.963.785 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.963.827 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.963.948 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.966.524 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.966.528 I llama_new_context_with_model: graph nodes  = 601
0.00.966.529 I llama_new_context_with_model: graph splits = 1
0.00.966.552 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.575.357 I main: llama threadpool init, n_threads = 4
0.01.575.383 I 
0.01.575.498 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.575.502 I 
0.01.575.740 I sampler seed: 3888445595
0.01.575.754 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.575.763 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.575.766 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.575.766 I 
 increasities, but I don't have the energy to decipher them.

Answer: I am unable to provide an interpretation or clarification of complex or technical terms

0.15.261.363 I llama_perf_sampler_print:    sampling time =      49.04 ms /    33 runs   (    1.49 ms per token,   672.87 tokens per second)
0.15.261.366 I llama_perf_context_print:        load time =    1574.41 ms
0.15.261.367 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.261.368 I llama_perf_context_print:        eval time =   13596.70 ms /    32 runs   (  424.90 ms per token,     2.35 tokens per second)
0.15.261.369 I llama_perf_context_print:       total time =   13686.01 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 4210 (5acff8f3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.000.841 I main: load the model and apply lora adapter, if any
0.00.023.245 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.255 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.339 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.350 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.352 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.357 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.359 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.360 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.362 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.363 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.364 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.375 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.377 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.378 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.380 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.381 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.364 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.422 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.275 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.284 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.286 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.287 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.288 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.290 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.291 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.295 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.296 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.298 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.299 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.350.300 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.309 I llama_model_loader: - type  f32:   37 tensors
0.00.350.311 I llama_model_loader: - type q8_0:  127 tensors
0.00.574.583 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.633.024 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.634.068 I llm_load_vocab: special tokens cache size = 5
0.00.833.364 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.833.441 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.833.442 I llm_load_print_meta: arch             = gemma
0.00.833.443 I llm_load_print_meta: vocab type       = SPM
0.00.833.444 I llm_load_print_meta: n_vocab          = 256000
0.00.833.446 I llm_load_print_meta: n_merges         = 0
0.00.833.447 I llm_load_print_meta: vocab_only       = 0
0.00.833.447 I llm_load_print_meta: n_ctx_train      = 8192
0.00.833.447 I llm_load_print_meta: n_embd           = 2048
0.00.833.448 I llm_load_print_meta: n_layer          = 18
0.00.833.515 I llm_load_print_meta: n_head           = 8
0.00.833.522 I llm_load_print_meta: n_head_kv        = 1
0.00.833.523 I llm_load_print_meta: n_rot            = 256
0.00.833.524 I llm_load_print_meta: n_swa            = 0
0.00.833.524 I llm_load_print_meta: n_embd_head_k    = 256
0.00.833.529 I llm_load_print_meta: n_embd_head_v    = 256
0.00.833.534 I llm_load_print_meta: n_gqa            = 8
0.00.833.539 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.833.545 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.833.546 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.833.548 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.833.549 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.833.549 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.833.550 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.833.555 I llm_load_print_meta: n_ff             = 16384
0.00.833.556 I llm_load_print_meta: n_expert         = 0
0.00.833.556 I llm_load_print_meta: n_expert_used    = 0
0.00.833.557 I llm_load_print_meta: causal attn      = 1
0.00.833.557 I llm_load_print_meta: pooling type     = 0
0.00.833.558 I llm_load_print_meta: rope type        = 2
0.00.833.559 I llm_load_print_meta: rope scaling     = linear
0.00.833.560 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.833.561 I llm_load_print_meta: freq_scale_train = 1
0.00.833.561 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.833.562 I llm_load_print_meta: rope_finetuned   = unknown
0.00.833.563 I llm_load_print_meta: ssm_d_conv       = 0
0.00.833.563 I llm_load_print_meta: ssm_d_inner      = 0
0.00.833.563 I llm_load_print_meta: ssm_d_state      = 0
0.00.833.563 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.833.564 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.833.565 I llm_load_print_meta: model type       = 2B
0.00.833.566 I llm_load_print_meta: model ftype      = Q8_0
0.00.833.567 I llm_load_print_meta: model params     = 2.51 B
0.00.833.577 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.833.577 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.833.578 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.833.579 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.833.582 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.833.582 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.833.583 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.833.583 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.833.588 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.833.590 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.833.599 I llm_load_print_meta: max token length = 93
0.00.911.601 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.911.613 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.911.614 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.911.615 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.911.615 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.911.616 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.917.656 I llama_new_context_with_model: n_seq_max     = 1
0.00.917.665 I llama_new_context_with_model: n_ctx         = 4096
0.00.917.666 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.917.666 I llama_new_context_with_model: n_batch       = 2048
0.00.917.666 I llama_new_context_with_model: n_ubatch      = 512
0.00.917.667 I llama_new_context_with_model: flash_attn    = 0
0.00.917.670 I llama_new_context_with_model: freq_base     = 10000.0
0.00.917.671 I llama_new_context_with_model: freq_scale    = 1
0.00.917.672 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.933.394 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.933.440 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.933.569 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.936.112 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.936.116 I llama_new_context_with_model: graph nodes  = 601
0.00.936.116 I llama_new_context_with_model: graph splits = 1
0.00.936.140 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.547.724 I main: llama threadpool init, n_threads = 4
0.01.547.739 I 
0.01.547.854 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.547.858 I 
0.01.548.098 I sampler seed: 2808387476
0.01.548.112 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.548.122 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.548.126 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.548.126 I 
 increasements. 

I am unable to generate responses that contain sexually suggestive or inappropriate content. [end of text]


0.10.054.300 I llama_perf_sampler_print:    sampling time =      30.71 ms /    21 runs   (    1.46 ms per token,   683.77 tokens per second)
0.10.054.303 I llama_perf_context_print:        load time =    1546.79 ms
0.10.054.304 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.054.306 I llama_perf_context_print:        eval time =    8449.93 ms /    20 runs   (  422.50 ms per token,     2.37 tokens per second)
0.10.054.307 I llama_perf_context_print:       total time =    8506.59 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.684 I build: 4210 (5acff8f3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.883 I main: llama backend init
0.00.000.891 I main: load the model and apply lora adapter, if any
0.00.023.472 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.484 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.577 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.589 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.592 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.599 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.603 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.605 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.606 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.607 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.608 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.615 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.617 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.618 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.620 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.622 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.263 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.017 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.848 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.858 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.859 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.860 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.862 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.863 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.865 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.889 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.893 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.894 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.895 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.349.897 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.906 I llama_model_loader: - type  f32:   37 tensors
0.00.349.908 I llama_model_loader: - type q8_0:  127 tensors
0.00.577.744 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.641.729 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.642.706 I llm_load_vocab: special tokens cache size = 5
0.00.824.767 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.824.842 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.824.843 I llm_load_print_meta: arch             = gemma
0.00.824.844 I llm_load_print_meta: vocab type       = SPM
0.00.824.845 I llm_load_print_meta: n_vocab          = 256000
0.00.824.847 I llm_load_print_meta: n_merges         = 0
0.00.824.848 I llm_load_print_meta: vocab_only       = 0
0.00.824.848 I llm_load_print_meta: n_ctx_train      = 8192
0.00.824.849 I llm_load_print_meta: n_embd           = 2048
0.00.824.849 I llm_load_print_meta: n_layer          = 18
0.00.824.915 I llm_load_print_meta: n_head           = 8
0.00.824.922 I llm_load_print_meta: n_head_kv        = 1
0.00.824.923 I llm_load_print_meta: n_rot            = 256
0.00.824.923 I llm_load_print_meta: n_swa            = 0
0.00.824.924 I llm_load_print_meta: n_embd_head_k    = 256
0.00.824.924 I llm_load_print_meta: n_embd_head_v    = 256
0.00.824.929 I llm_load_print_meta: n_gqa            = 8
0.00.824.933 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.824.938 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.824.939 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.824.940 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.824.941 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.824.941 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.824.942 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.824.946 I llm_load_print_meta: n_ff             = 16384
0.00.824.947 I llm_load_print_meta: n_expert         = 0
0.00.824.947 I llm_load_print_meta: n_expert_used    = 0
0.00.824.947 I llm_load_print_meta: causal attn      = 1
0.00.824.948 I llm_load_print_meta: pooling type     = 0
0.00.824.948 I llm_load_print_meta: rope type        = 2
0.00.824.948 I llm_load_print_meta: rope scaling     = linear
0.00.824.950 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.824.950 I llm_load_print_meta: freq_scale_train = 1
0.00.824.951 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.824.951 I llm_load_print_meta: rope_finetuned   = unknown
0.00.824.951 I llm_load_print_meta: ssm_d_conv       = 0
0.00.824.952 I llm_load_print_meta: ssm_d_inner      = 0
0.00.824.952 I llm_load_print_meta: ssm_d_state      = 0
0.00.824.953 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.824.953 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.824.953 I llm_load_print_meta: model type       = 2B
0.00.824.955 I llm_load_print_meta: model ftype      = Q8_0
0.00.824.955 I llm_load_print_meta: model params     = 2.51 B
0.00.824.965 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.824.965 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.824.966 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.824.967 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.824.967 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.824.967 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.824.968 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.824.968 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.824.974 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.824.976 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.824.976 I llm_load_print_meta: max token length = 93
0.00.898.058 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.898.068 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.904.036 I llama_new_context_with_model: n_seq_max     = 1
0.00.904.046 I llama_new_context_with_model: n_ctx         = 4096
0.00.904.046 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.904.047 I llama_new_context_with_model: n_batch       = 2048
0.00.904.047 I llama_new_context_with_model: n_ubatch      = 512
0.00.904.048 I llama_new_context_with_model: flash_attn    = 0
0.00.904.052 I llama_new_context_with_model: freq_base     = 10000.0
0.00.904.053 I llama_new_context_with_model: freq_scale    = 1
0.00.904.053 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.919.680 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.919.722 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.919.851 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.922.500 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.922.504 I llama_new_context_with_model: graph nodes  = 601
0.00.922.504 I llama_new_context_with_model: graph splits = 1
0.00.922.528 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.531.002 I main: llama threadpool init, n_threads = 4
0.01.531.019 I 
0.01.531.135 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.531.139 I 
0.01.531.385 I sampler seed: 1550861381
0.01.531.399 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.531.410 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.531.411 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.531.411 I 
 increasities in the context of machine learning and deep learning.

**Question:**

Discuss the key differences between zero-padding and edge padding in terms of their

0.15.126.833 I llama_perf_sampler_print:    sampling time =      49.02 ms /    33 runs   (    1.49 ms per token,   673.15 tokens per second)
0.15.126.836 I llama_perf_context_print:        load time =    1530.01 ms
0.15.126.837 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.126.839 I llama_perf_context_print:        eval time =   13506.83 ms /    32 runs   (  422.09 ms per token,     2.37 tokens per second)
0.15.126.840 I llama_perf_context_print:       total time =   13595.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m5.281s
user	3m30.970s
sys	0m9.475s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4210 (5acff8f3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186276.79 ms
main:    total time = 186276.79 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.682 I build: 4210 (5acff8f3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.875 I main: llama backend init
0.00.000.883 I main: load the model and apply lora adapter, if any
0.00.023.705 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.716 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.809 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.821 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.823 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.829 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.833 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.834 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.836 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.837 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.838 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.847 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.849 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.850 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.851 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.853 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.910 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.583 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.471 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.482 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.483 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.485 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.486 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.487 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.489 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.493 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.495 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.496 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.497 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.349.499 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.508 I llama_model_loader: - type  f32:   37 tensors
0.00.349.510 I llama_model_loader: - type q4_K:  108 tensors
0.00.349.511 I llama_model_loader: - type q6_K:   19 tensors
0.00.583.161 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.644.549 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.645.555 I llm_load_vocab: special tokens cache size = 5
0.00.835.890 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.835.967 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.835.968 I llm_load_print_meta: arch             = gemma
0.00.835.969 I llm_load_print_meta: vocab type       = SPM
0.00.835.970 I llm_load_print_meta: n_vocab          = 256000
0.00.835.972 I llm_load_print_meta: n_merges         = 0
0.00.835.973 I llm_load_print_meta: vocab_only       = 0
0.00.835.973 I llm_load_print_meta: n_ctx_train      = 8192
0.00.835.973 I llm_load_print_meta: n_embd           = 2048
0.00.835.974 I llm_load_print_meta: n_layer          = 18
0.00.836.040 I llm_load_print_meta: n_head           = 8
0.00.836.047 I llm_load_print_meta: n_head_kv        = 1
0.00.836.048 I llm_load_print_meta: n_rot            = 256
0.00.836.050 I llm_load_print_meta: n_swa            = 0
0.00.836.050 I llm_load_print_meta: n_embd_head_k    = 256
0.00.836.051 I llm_load_print_meta: n_embd_head_v    = 256
0.00.836.055 I llm_load_print_meta: n_gqa            = 8
0.00.836.060 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.836.065 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.836.066 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.836.068 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.836.068 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.836.069 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.836.069 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.836.074 I llm_load_print_meta: n_ff             = 16384
0.00.836.075 I llm_load_print_meta: n_expert         = 0
0.00.836.075 I llm_load_print_meta: n_expert_used    = 0
0.00.836.076 I llm_load_print_meta: causal attn      = 1
0.00.836.076 I llm_load_print_meta: pooling type     = 0
0.00.836.081 I llm_load_print_meta: rope type        = 2
0.00.836.081 I llm_load_print_meta: rope scaling     = linear
0.00.836.092 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.836.093 I llm_load_print_meta: freq_scale_train = 1
0.00.836.093 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.836.093 I llm_load_print_meta: rope_finetuned   = unknown
0.00.836.108 I llm_load_print_meta: ssm_d_conv       = 0
0.00.836.109 I llm_load_print_meta: ssm_d_inner      = 0
0.00.836.109 I llm_load_print_meta: ssm_d_state      = 0
0.00.836.109 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.836.118 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.836.119 I llm_load_print_meta: model type       = 2B
0.00.836.120 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.836.121 I llm_load_print_meta: model params     = 2.51 B
0.00.836.137 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.836.139 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.836.140 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.836.140 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.836.140 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.836.141 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.836.141 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.836.141 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.836.147 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.836.149 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.836.150 I llm_load_print_meta: max token length = 93
0.00.899.635 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.899.646 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.899.646 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.899.647 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.899.648 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.899.649 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.905.617 I llama_new_context_with_model: n_seq_max     = 1
0.00.905.625 I llama_new_context_with_model: n_ctx         = 4096
0.00.905.626 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.905.626 I llama_new_context_with_model: n_batch       = 2048
0.00.905.626 I llama_new_context_with_model: n_ubatch      = 512
0.00.905.627 I llama_new_context_with_model: flash_attn    = 0
0.00.905.630 I llama_new_context_with_model: freq_base     = 10000.0
0.00.905.631 I llama_new_context_with_model: freq_scale    = 1
0.00.905.632 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.920.646 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.920.688 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.920.812 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.923.334 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.923.338 I llama_new_context_with_model: graph nodes  = 601
0.00.923.338 I llama_new_context_with_model: graph splits = 1
0.00.923.361 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.511.402 I main: llama threadpool init, n_threads = 4
0.01.511.421 I 
0.01.511.554 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.511.560 I 
0.01.511.810 I sampler seed: 4219559102
0.01.511.824 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.511.834 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.511.839 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.511.839 I 
 increamically that the question of whether or not one has the right to remove a person from one's household is a complex one that has been debated for centuries

0.12.619.932 I llama_perf_sampler_print:    sampling time =      49.17 ms /    33 runs   (    1.49 ms per token,   671.11 tokens per second)
0.12.619.935 I llama_perf_context_print:        load time =    1510.42 ms
0.12.619.936 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.619.951 I llama_perf_context_print:        eval time =   11019.51 ms /    32 runs   (  344.36 ms per token,     2.90 tokens per second)
0.12.619.953 I llama_perf_context_print:       total time =   11108.54 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4210 (5acff8f3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186395.11 ms
main:    total time = 186395.11 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 4210 (5acff8f3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.000.844 I main: load the model and apply lora adapter, if any
0.00.023.379 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.479 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.494 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.498 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.504 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.505 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.507 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.509 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.510 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.511 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.522 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.526 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.527 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.528 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.529 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.056 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.323.955 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.347.751 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.347.759 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.347.760 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.347.762 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.347.763 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.347.764 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.347.766 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.347.770 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.347.771 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.347.781 I llama_model_loader: - type  f32:   37 tensors
0.00.347.784 I llama_model_loader: - type q4_K:  108 tensors
0.00.347.784 I llama_model_loader: - type q6_K:   19 tensors
0.00.567.066 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.625.358 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.626.227 I llm_load_vocab: special tokens cache size = 5
0.00.811.009 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.811.080 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.811.081 I llm_load_print_meta: arch             = gemma
0.00.811.082 I llm_load_print_meta: vocab type       = SPM
0.00.811.083 I llm_load_print_meta: n_vocab          = 256000
0.00.811.086 I llm_load_print_meta: n_merges         = 0
0.00.811.086 I llm_load_print_meta: vocab_only       = 0
0.00.811.087 I llm_load_print_meta: n_ctx_train      = 8192
0.00.811.087 I llm_load_print_meta: n_embd           = 2048
0.00.811.088 I llm_load_print_meta: n_layer          = 18
0.00.811.154 I llm_load_print_meta: n_head           = 8
0.00.811.161 I llm_load_print_meta: n_head_kv        = 1
0.00.811.162 I llm_load_print_meta: n_rot            = 256
0.00.811.162 I llm_load_print_meta: n_swa            = 0
0.00.811.162 I llm_load_print_meta: n_embd_head_k    = 256
0.00.811.164 I llm_load_print_meta: n_embd_head_v    = 256
0.00.811.169 I llm_load_print_meta: n_gqa            = 8
0.00.811.173 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.811.178 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.811.183 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.811.185 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.811.186 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.811.186 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.811.198 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.811.204 I llm_load_print_meta: n_ff             = 16384
0.00.811.208 I llm_load_print_meta: n_expert         = 0
0.00.811.208 I llm_load_print_meta: n_expert_used    = 0
0.00.811.208 I llm_load_print_meta: causal attn      = 1
0.00.811.209 I llm_load_print_meta: pooling type     = 0
0.00.811.209 I llm_load_print_meta: rope type        = 2
0.00.811.209 I llm_load_print_meta: rope scaling     = linear
0.00.811.211 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.811.225 I llm_load_print_meta: freq_scale_train = 1
0.00.811.225 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.811.226 I llm_load_print_meta: rope_finetuned   = unknown
0.00.811.234 I llm_load_print_meta: ssm_d_conv       = 0
0.00.811.235 I llm_load_print_meta: ssm_d_inner      = 0
0.00.811.235 I llm_load_print_meta: ssm_d_state      = 0
0.00.811.236 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.811.236 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.811.237 I llm_load_print_meta: model type       = 2B
0.00.811.238 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.811.239 I llm_load_print_meta: model params     = 2.51 B
0.00.811.248 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.811.249 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.811.252 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.811.253 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.811.253 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.811.254 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.811.254 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.811.255 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.811.261 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.811.262 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.811.265 I llm_load_print_meta: max token length = 93
0.00.870.744 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.876.600 I llama_new_context_with_model: n_seq_max     = 1
0.00.876.607 I llama_new_context_with_model: n_ctx         = 4096
0.00.876.608 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.876.608 I llama_new_context_with_model: n_batch       = 2048
0.00.876.608 I llama_new_context_with_model: n_ubatch      = 512
0.00.876.609 I llama_new_context_with_model: flash_attn    = 0
0.00.876.612 I llama_new_context_with_model: freq_base     = 10000.0
0.00.876.613 I llama_new_context_with_model: freq_scale    = 1
0.00.876.613 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.891.716 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.891.760 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.891.894 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.894.560 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.894.564 I llama_new_context_with_model: graph nodes  = 601
0.00.894.565 I llama_new_context_with_model: graph splits = 1
0.00.894.588 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.478.324 I main: llama threadpool init, n_threads = 4
0.01.478.340 I 
0.01.478.455 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.478.459 I 
0.01.478.695 I sampler seed: 3390855424
0.01.478.709 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.478.718 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.478.721 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.478.721 I 
 increasities. [end of text]


0.02.866.152 I llama_perf_sampler_print:    sampling time =       6.26 ms /     5 runs   (    1.25 ms per token,   798.59 tokens per second)
0.02.866.155 I llama_perf_context_print:        load time =    1477.39 ms
0.02.866.177 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.866.179 I llama_perf_context_print:        eval time =    1374.93 ms /     4 runs   (  343.73 ms per token,     2.91 tokens per second)
0.02.866.180 I llama_perf_context_print:       total time =    1387.84 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m31.056s
user	46m4.158s
sys	0m6.320s
