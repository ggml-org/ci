+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.625 I build: 3911 (fd69ef16) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.002.817 I main: load the model and apply lora adapter, if any
0.00.027.626 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.027.825 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.027.909 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.027.920 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.027.922 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.027.926 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.027.928 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.027.937 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.027.939 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.027.940 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.027.941 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.027.949 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.027.951 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.027.952 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.027.953 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.027.954 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.162.137 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.260.354 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.278.865 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.278.872 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.278.873 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.278.874 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.278.875 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.278.877 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.278.878 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.278.881 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.278.882 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.278.883 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.278.884 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.278.885 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.278.892 I llama_model_loader: - type  f32:   37 tensors
0.00.278.896 I llama_model_loader: - type q8_0:  127 tensors
0.00.453.839 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.511.694 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.512.739 I llm_load_vocab: special tokens cache size = 5
0.00.611.984 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.052 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.053 I llm_load_print_meta: arch             = gemma
0.00.612.053 I llm_load_print_meta: vocab type       = SPM
0.00.612.054 I llm_load_print_meta: n_vocab          = 256000
0.00.612.057 I llm_load_print_meta: n_merges         = 0
0.00.612.057 I llm_load_print_meta: vocab_only       = 0
0.00.612.058 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.058 I llm_load_print_meta: n_embd           = 2048
0.00.612.058 I llm_load_print_meta: n_layer          = 18
0.00.612.120 I llm_load_print_meta: n_head           = 8
0.00.612.126 I llm_load_print_meta: n_head_kv        = 1
0.00.612.127 I llm_load_print_meta: n_rot            = 256
0.00.612.128 I llm_load_print_meta: n_swa            = 0
0.00.612.128 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.128 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.133 I llm_load_print_meta: n_gqa            = 8
0.00.612.143 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.149 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.150 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.152 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.152 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.153 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.153 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.612.158 I llm_load_print_meta: n_ff             = 16384
0.00.612.158 I llm_load_print_meta: n_expert         = 0
0.00.612.159 I llm_load_print_meta: n_expert_used    = 0
0.00.612.160 I llm_load_print_meta: causal attn      = 1
0.00.612.160 I llm_load_print_meta: pooling type     = 0
0.00.612.160 I llm_load_print_meta: rope type        = 2
0.00.612.161 I llm_load_print_meta: rope scaling     = linear
0.00.612.162 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.164 I llm_load_print_meta: freq_scale_train = 1
0.00.612.165 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.166 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.167 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.167 I llm_load_print_meta: ssm_d_inner      = 0
0.00.612.167 I llm_load_print_meta: ssm_d_state      = 0
0.00.612.168 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.612.168 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.612.169 I llm_load_print_meta: model type       = 2B
0.00.612.170 I llm_load_print_meta: model ftype      = Q8_0
0.00.612.171 I llm_load_print_meta: model params     = 2.51 B
0.00.612.172 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.612.172 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.612.173 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.612.174 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.612.175 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.612.175 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.612.176 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.612.176 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.612.182 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.612.184 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.612.185 I llm_load_print_meta: max token length = 93
0.00.612.347 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.715.264 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.715.272 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.715.273 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.715.274 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.715.274 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.715.275 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.721.074 I llama_new_context_with_model: n_ctx      = 8192
0.00.721.081 I llama_new_context_with_model: n_batch    = 2048
0.00.721.081 I llama_new_context_with_model: n_ubatch   = 512
0.00.721.082 I llama_new_context_with_model: flash_attn = 0
0.00.721.084 I llama_new_context_with_model: freq_base  = 10000.0
0.00.721.085 I llama_new_context_with_model: freq_scale = 1
0.00.750.473 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.750.515 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.750.649 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.752.076 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.752.083 I llama_new_context_with_model: graph nodes  = 601
0.00.752.084 I llama_new_context_with_model: graph splits = 1
0.00.752.099 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.363.209 I main: llama threadpool init, n_threads = 4
0.01.363.220 I 
0.01.363.325 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.363.329 I 
0.01.363.494 I sampler seed: 3224692226
0.01.363.505 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.363.512 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.363.529 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.363.532 I 
 maneuvrant.

I am unable to generate a response as requested as I am unable to access or process external websites or specific data sources. [end of text]


0.14.068.630 I llama_perf_sampler_print:    sampling time =      46.15 ms /    31 runs   (    1.49 ms per token,   671.78 tokens per second)
0.14.068.645 I llama_perf_context_print:        load time =    1360.30 ms
0.14.068.647 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.068.649 I llama_perf_context_print:        eval time =   12628.59 ms /    30 runs   (  420.95 ms per token,     2.38 tokens per second)
0.14.068.651 I llama_perf_context_print:       total time =   12705.43 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 3911 (fd69ef16) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.829 I main: llama backend init
0.00.002.761 I main: load the model and apply lora adapter, if any
0.00.024.896 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.983 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.995 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.000 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.003 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.005 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.005 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.007 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.008 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.009 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.015 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.016 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.018 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.018 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.019 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.902 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.083 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.567 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.575 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.576 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.577 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.579 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.580 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.582 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.585 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.586 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.587 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.588 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.270.590 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.597 I llama_model_loader: - type  f32:   37 tensors
0.00.270.602 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.188 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.496.361 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.497.466 I llm_load_vocab: special tokens cache size = 5
0.00.593.101 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.593.175 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.593.176 I llm_load_print_meta: arch             = gemma
0.00.593.177 I llm_load_print_meta: vocab type       = SPM
0.00.593.178 I llm_load_print_meta: n_vocab          = 256000
0.00.593.180 I llm_load_print_meta: n_merges         = 0
0.00.593.181 I llm_load_print_meta: vocab_only       = 0
0.00.593.181 I llm_load_print_meta: n_ctx_train      = 8192
0.00.593.181 I llm_load_print_meta: n_embd           = 2048
0.00.593.182 I llm_load_print_meta: n_layer          = 18
0.00.593.247 I llm_load_print_meta: n_head           = 8
0.00.593.255 I llm_load_print_meta: n_head_kv        = 1
0.00.593.256 I llm_load_print_meta: n_rot            = 256
0.00.593.257 I llm_load_print_meta: n_swa            = 0
0.00.593.257 I llm_load_print_meta: n_embd_head_k    = 256
0.00.593.257 I llm_load_print_meta: n_embd_head_v    = 256
0.00.593.262 I llm_load_print_meta: n_gqa            = 8
0.00.593.267 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.593.273 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.593.286 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.593.289 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.593.290 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.593.294 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.593.295 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.593.300 I llm_load_print_meta: n_ff             = 16384
0.00.593.300 I llm_load_print_meta: n_expert         = 0
0.00.593.301 I llm_load_print_meta: n_expert_used    = 0
0.00.593.301 I llm_load_print_meta: causal attn      = 1
0.00.593.302 I llm_load_print_meta: pooling type     = 0
0.00.593.302 I llm_load_print_meta: rope type        = 2
0.00.593.303 I llm_load_print_meta: rope scaling     = linear
0.00.593.307 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.593.307 I llm_load_print_meta: freq_scale_train = 1
0.00.593.308 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.593.308 I llm_load_print_meta: rope_finetuned   = unknown
0.00.593.308 I llm_load_print_meta: ssm_d_conv       = 0
0.00.593.309 I llm_load_print_meta: ssm_d_inner      = 0
0.00.593.309 I llm_load_print_meta: ssm_d_state      = 0
0.00.593.309 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.593.310 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.593.310 I llm_load_print_meta: model type       = 2B
0.00.593.311 I llm_load_print_meta: model ftype      = Q8_0
0.00.593.312 I llm_load_print_meta: model params     = 2.51 B
0.00.593.312 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.593.313 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.593.314 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.593.327 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.593.329 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.593.329 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.593.329 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.593.338 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.593.344 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.593.346 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.593.354 I llm_load_print_meta: max token length = 93
0.00.593.523 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.688.241 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.693.976 I llama_new_context_with_model: n_ctx      = 8192
0.00.693.983 I llama_new_context_with_model: n_batch    = 2048
0.00.693.983 I llama_new_context_with_model: n_ubatch   = 512
0.00.693.984 I llama_new_context_with_model: flash_attn = 0
0.00.693.987 I llama_new_context_with_model: freq_base  = 10000.0
0.00.693.987 I llama_new_context_with_model: freq_scale = 1
0.00.723.048 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.723.093 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.723.207 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.724.560 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.724.567 I llama_new_context_with_model: graph nodes  = 601
0.00.724.568 I llama_new_context_with_model: graph splits = 1
0.00.724.584 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.335.754 I main: llama threadpool init, n_threads = 4
0.01.335.766 I 
0.01.335.873 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.335.873 I 
0.01.336.048 I sampler seed: 3176349125
0.01.336.061 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.336.070 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.336.070 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.336.071 I 
 increably. The heavens open, and a blinding light floods the land.

What is the event?

A) Solar eclipse
B) Asteroid impact


0.15.080.160 I llama_perf_sampler_print:    sampling time =      49.34 ms /    33 runs   (    1.50 ms per token,   668.76 tokens per second)
0.15.080.166 I llama_perf_context_print:        load time =    1332.91 ms
0.15.080.174 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.080.177 I llama_perf_context_print:        eval time =   13662.41 ms /    32 runs   (  426.95 ms per token,     2.34 tokens per second)
0.15.080.181 I llama_perf_context_print:       total time =   13744.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.612 I build: 3911 (fd69ef16) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.002.764 I main: load the model and apply lora adapter, if any
0.00.024.648 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.852 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.934 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.944 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.946 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.950 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.951 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.953 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.954 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.955 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.956 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.962 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.966 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.967 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.968 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.969 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.961 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.946 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.411 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.418 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.420 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.421 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.422 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.423 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.424 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.428 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.429 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.431 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.432 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.270.433 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.440 I llama_model_loader: - type  f32:   37 tensors
0.00.270.444 I llama_model_loader: - type q8_0:  127 tensors
0.00.456.653 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.508.249 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.509.253 I llm_load_vocab: special tokens cache size = 5
0.00.604.525 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.604.594 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.604.595 I llm_load_print_meta: arch             = gemma
0.00.604.595 I llm_load_print_meta: vocab type       = SPM
0.00.604.596 I llm_load_print_meta: n_vocab          = 256000
0.00.604.598 I llm_load_print_meta: n_merges         = 0
0.00.604.599 I llm_load_print_meta: vocab_only       = 0
0.00.604.599 I llm_load_print_meta: n_ctx_train      = 8192
0.00.604.599 I llm_load_print_meta: n_embd           = 2048
0.00.604.600 I llm_load_print_meta: n_layer          = 18
0.00.604.662 I llm_load_print_meta: n_head           = 8
0.00.604.669 I llm_load_print_meta: n_head_kv        = 1
0.00.604.669 I llm_load_print_meta: n_rot            = 256
0.00.604.670 I llm_load_print_meta: n_swa            = 0
0.00.604.671 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.672 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.676 I llm_load_print_meta: n_gqa            = 8
0.00.604.681 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.685 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.691 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.693 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.694 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.694 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.694 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.700 I llm_load_print_meta: n_ff             = 16384
0.00.604.700 I llm_load_print_meta: n_expert         = 0
0.00.604.701 I llm_load_print_meta: n_expert_used    = 0
0.00.604.702 I llm_load_print_meta: causal attn      = 1
0.00.604.702 I llm_load_print_meta: pooling type     = 0
0.00.604.702 I llm_load_print_meta: rope type        = 2
0.00.604.703 I llm_load_print_meta: rope scaling     = linear
0.00.604.704 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.705 I llm_load_print_meta: freq_scale_train = 1
0.00.604.716 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.719 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.719 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.720 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.720 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.720 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.721 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.721 I llm_load_print_meta: model type       = 2B
0.00.604.722 I llm_load_print_meta: model ftype      = Q8_0
0.00.604.723 I llm_load_print_meta: model params     = 2.51 B
0.00.604.724 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.604.724 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.725 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.726 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.726 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.739 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.740 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.740 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.746 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.748 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.748 I llm_load_print_meta: max token length = 93
0.00.604.917 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.683.744 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.683.751 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.683.752 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.683.753 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.683.754 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.683.754 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.689.377 I llama_new_context_with_model: n_ctx      = 8192
0.00.689.385 I llama_new_context_with_model: n_batch    = 2048
0.00.689.386 I llama_new_context_with_model: n_ubatch   = 512
0.00.689.386 I llama_new_context_with_model: flash_attn = 0
0.00.689.389 I llama_new_context_with_model: freq_base  = 10000.0
0.00.689.389 I llama_new_context_with_model: freq_scale = 1
0.00.719.351 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.719.394 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.719.513 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.720.892 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.720.899 I llama_new_context_with_model: graph nodes  = 601
0.00.720.899 I llama_new_context_with_model: graph splits = 1
0.00.720.915 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.331.798 I main: llama threadpool init, n_threads = 4
0.01.331.809 I 
0.01.331.915 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.331.919 I 
0.01.332.084 I sampler seed: 2673516290
0.01.332.094 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.332.101 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.332.102 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.332.102 I 
 increasities:

"I think it's important to acknowledge the historical context of the issue and to understand the perspectives of all stakeholders involved."

**Response

0.14.840.380 I llama_perf_sampler_print:    sampling time =      49.32 ms /    33 runs   (    1.49 ms per token,   669.10 tokens per second)
0.14.840.383 I llama_perf_context_print:        load time =    1328.95 ms
0.14.840.406 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.840.408 I llama_perf_context_print:        eval time =   13427.11 ms /    32 runs   (  419.60 ms per token,     2.38 tokens per second)
0.14.840.409 I llama_perf_context_print:       total time =   13508.59 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 3911 (fd69ef16) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.002.814 I main: load the model and apply lora adapter, if any
0.00.024.758 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.969 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.055 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.066 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.068 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.072 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.076 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.077 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.078 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.079 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.079 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.086 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.088 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.097 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.098 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.105 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.154.263 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.879 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.360 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.368 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.369 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.371 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.372 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.373 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.374 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.378 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.379 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.380 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.381 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.271.383 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.390 I llama_model_loader: - type  f32:   37 tensors
0.00.271.394 I llama_model_loader: - type q8_0:  127 tensors
0.00.441.387 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.488.502 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.489.494 I llm_load_vocab: special tokens cache size = 5
0.00.599.776 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.599.848 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.599.849 I llm_load_print_meta: arch             = gemma
0.00.599.850 I llm_load_print_meta: vocab type       = SPM
0.00.599.850 I llm_load_print_meta: n_vocab          = 256000
0.00.599.853 I llm_load_print_meta: n_merges         = 0
0.00.599.853 I llm_load_print_meta: vocab_only       = 0
0.00.599.854 I llm_load_print_meta: n_ctx_train      = 8192
0.00.599.854 I llm_load_print_meta: n_embd           = 2048
0.00.599.854 I llm_load_print_meta: n_layer          = 18
0.00.599.916 I llm_load_print_meta: n_head           = 8
0.00.599.924 I llm_load_print_meta: n_head_kv        = 1
0.00.599.924 I llm_load_print_meta: n_rot            = 256
0.00.599.925 I llm_load_print_meta: n_swa            = 0
0.00.599.925 I llm_load_print_meta: n_embd_head_k    = 256
0.00.599.927 I llm_load_print_meta: n_embd_head_v    = 256
0.00.599.932 I llm_load_print_meta: n_gqa            = 8
0.00.599.936 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.599.941 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.599.942 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.599.943 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.599.944 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.599.954 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.599.955 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.599.960 I llm_load_print_meta: n_ff             = 16384
0.00.599.960 I llm_load_print_meta: n_expert         = 0
0.00.599.961 I llm_load_print_meta: n_expert_used    = 0
0.00.599.962 I llm_load_print_meta: causal attn      = 1
0.00.599.963 I llm_load_print_meta: pooling type     = 0
0.00.599.963 I llm_load_print_meta: rope type        = 2
0.00.599.963 I llm_load_print_meta: rope scaling     = linear
0.00.599.965 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.599.965 I llm_load_print_meta: freq_scale_train = 1
0.00.599.966 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.599.967 I llm_load_print_meta: rope_finetuned   = unknown
0.00.599.967 I llm_load_print_meta: ssm_d_conv       = 0
0.00.599.967 I llm_load_print_meta: ssm_d_inner      = 0
0.00.599.968 I llm_load_print_meta: ssm_d_state      = 0
0.00.599.968 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.599.969 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.599.970 I llm_load_print_meta: model type       = 2B
0.00.599.971 I llm_load_print_meta: model ftype      = Q8_0
0.00.599.971 I llm_load_print_meta: model params     = 2.51 B
0.00.599.972 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.599.973 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.599.974 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.599.979 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.599.979 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.599.980 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.599.980 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.599.995 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.600.005 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.600.007 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.600.015 I llm_load_print_meta: max token length = 93
0.00.600.183 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.671.451 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.671.462 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.677.067 I llama_new_context_with_model: n_ctx      = 8192
0.00.677.074 I llama_new_context_with_model: n_batch    = 2048
0.00.677.075 I llama_new_context_with_model: n_ubatch   = 512
0.00.677.076 I llama_new_context_with_model: flash_attn = 0
0.00.677.078 I llama_new_context_with_model: freq_base  = 10000.0
0.00.677.079 I llama_new_context_with_model: freq_scale = 1
0.00.705.651 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.705.693 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.705.802 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.707.187 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.707.194 I llama_new_context_with_model: graph nodes  = 601
0.00.707.194 I llama_new_context_with_model: graph splits = 1
0.00.707.211 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.319.902 I main: llama threadpool init, n_threads = 4
0.01.319.913 I 
0.01.320.027 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.320.032 I 
0.01.320.231 I sampler seed: 318410822
0.01.320.245 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.320.254 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.320.258 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.320.258 I 
 increasities.
I am unable to generate a response that includes sexually suggestive or inappropriate content. [end of text]


0.09.770.473 I llama_perf_sampler_print:    sampling time =      30.82 ms /    21 runs   (    1.47 ms per token,   681.31 tokens per second)
0.09.770.475 I llama_perf_context_print:        load time =    1317.00 ms
0.09.770.477 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.770.478 I llama_perf_context_print:        eval time =    8398.71 ms /    20 runs   (  419.94 ms per token,     2.38 tokens per second)
0.09.770.479 I llama_perf_context_print:       total time =    8450.58 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m3.266s
user	3m26.259s
sys	0m9.332s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3911 (fd69ef16)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199119.63 ms
main:    total time = 199119.63 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.653 I build: 3911 (fd69ef16) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.002.803 I main: load the model and apply lora adapter, if any
0.00.024.703 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.915 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.092 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.104 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.106 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.111 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.112 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.114 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.123 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.126 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.127 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.135 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.138 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.139 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.139 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.141 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.154.064 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.457 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.015 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.025 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.026 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.027 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.028 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.029 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.030 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.034 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.035 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.036 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.037 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.038 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.046 I llama_model_loader: - type  f32:   37 tensors
0.00.271.049 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.050 I llama_model_loader: - type q6_K:   19 tensors
0.00.452.204 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.508.011 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.508.996 I llm_load_vocab: special tokens cache size = 5
0.00.604.260 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.604.331 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.604.332 I llm_load_print_meta: arch             = gemma
0.00.604.333 I llm_load_print_meta: vocab type       = SPM
0.00.604.334 I llm_load_print_meta: n_vocab          = 256000
0.00.604.336 I llm_load_print_meta: n_merges         = 0
0.00.604.337 I llm_load_print_meta: vocab_only       = 0
0.00.604.338 I llm_load_print_meta: n_ctx_train      = 8192
0.00.604.338 I llm_load_print_meta: n_embd           = 2048
0.00.604.338 I llm_load_print_meta: n_layer          = 18
0.00.604.400 I llm_load_print_meta: n_head           = 8
0.00.604.407 I llm_load_print_meta: n_head_kv        = 1
0.00.604.407 I llm_load_print_meta: n_rot            = 256
0.00.604.408 I llm_load_print_meta: n_swa            = 0
0.00.604.408 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.409 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.414 I llm_load_print_meta: n_gqa            = 8
0.00.604.419 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.424 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.430 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.458 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.462 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.462 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.463 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.469 I llm_load_print_meta: n_ff             = 16384
0.00.604.479 I llm_load_print_meta: n_expert         = 0
0.00.604.482 I llm_load_print_meta: n_expert_used    = 0
0.00.604.482 I llm_load_print_meta: causal attn      = 1
0.00.604.482 I llm_load_print_meta: pooling type     = 0
0.00.604.483 I llm_load_print_meta: rope type        = 2
0.00.604.483 I llm_load_print_meta: rope scaling     = linear
0.00.604.485 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.486 I llm_load_print_meta: freq_scale_train = 1
0.00.604.486 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.486 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.487 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.487 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.487 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.488 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.488 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.488 I llm_load_print_meta: model type       = 2B
0.00.604.490 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.604.491 I llm_load_print_meta: model params     = 2.51 B
0.00.604.492 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.604.492 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.501 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.502 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.502 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.503 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.503 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.504 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.510 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.511 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.512 I llm_load_print_meta: max token length = 93
0.00.604.680 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.665.193 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.665.202 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.665.203 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.665.204 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.665.204 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.665.205 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.670.720 I llama_new_context_with_model: n_ctx      = 8192
0.00.670.727 I llama_new_context_with_model: n_batch    = 2048
0.00.670.727 I llama_new_context_with_model: n_ubatch   = 512
0.00.670.728 I llama_new_context_with_model: flash_attn = 0
0.00.670.730 I llama_new_context_with_model: freq_base  = 10000.0
0.00.670.731 I llama_new_context_with_model: freq_scale = 1
0.00.699.340 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.699.386 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.699.504 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.700.920 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.700.927 I llama_new_context_with_model: graph nodes  = 601
0.00.700.927 I llama_new_context_with_model: graph splits = 1
0.00.700.944 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.278.792 I main: llama threadpool init, n_threads = 4
0.01.278.803 I 
0.01.278.910 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.278.914 I 
0.01.279.082 I sampler seed: 2501292115
0.01.279.092 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.279.098 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.279.099 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.279.099 I 
 fufing.

This is a beautiful and complex sentence. It contains several interesting features:

* **Parallelism:** The use of parallelism creates a sense

0.12.167.352 I llama_perf_sampler_print:    sampling time =      49.14 ms /    33 runs   (    1.49 ms per token,   671.56 tokens per second)
0.12.167.355 I llama_perf_context_print:        load time =    1275.89 ms
0.12.167.357 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.167.373 I llama_perf_context_print:        eval time =   10807.04 ms /    32 runs   (  337.72 ms per token,     2.96 tokens per second)
0.12.167.376 I llama_perf_context_print:       total time =   10888.57 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3911 (fd69ef16)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198779.29 ms
main:    total time = 198779.29 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 3911 (fd69ef16) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.816 I main: llama backend init
0.00.002.757 I main: load the model and apply lora adapter, if any
0.00.024.655 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.744 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.756 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.758 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.762 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.765 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.767 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.768 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.768 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.769 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.775 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.776 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.777 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.778 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.779 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.854 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.098 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.576 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.583 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.584 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.585 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.586 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.588 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.589 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.592 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.593 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.601 I llama_model_loader: - type  f32:   37 tensors
0.00.270.604 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.605 I llama_model_loader: - type q6_K:   19 tensors
0.00.456.998 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.510.500 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.511.492 I llm_load_vocab: special tokens cache size = 5
0.00.607.030 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.607.103 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.607.104 I llm_load_print_meta: arch             = gemma
0.00.607.105 I llm_load_print_meta: vocab type       = SPM
0.00.607.106 I llm_load_print_meta: n_vocab          = 256000
0.00.607.108 I llm_load_print_meta: n_merges         = 0
0.00.607.108 I llm_load_print_meta: vocab_only       = 0
0.00.607.109 I llm_load_print_meta: n_ctx_train      = 8192
0.00.607.109 I llm_load_print_meta: n_embd           = 2048
0.00.607.110 I llm_load_print_meta: n_layer          = 18
0.00.607.175 I llm_load_print_meta: n_head           = 8
0.00.607.182 I llm_load_print_meta: n_head_kv        = 1
0.00.607.183 I llm_load_print_meta: n_rot            = 256
0.00.607.183 I llm_load_print_meta: n_swa            = 0
0.00.607.183 I llm_load_print_meta: n_embd_head_k    = 256
0.00.607.184 I llm_load_print_meta: n_embd_head_v    = 256
0.00.607.189 I llm_load_print_meta: n_gqa            = 8
0.00.607.194 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.607.199 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.607.202 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.607.203 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.607.204 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.607.205 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.607.206 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.607.211 I llm_load_print_meta: n_ff             = 16384
0.00.607.212 I llm_load_print_meta: n_expert         = 0
0.00.607.212 I llm_load_print_meta: n_expert_used    = 0
0.00.607.212 I llm_load_print_meta: causal attn      = 1
0.00.607.213 I llm_load_print_meta: pooling type     = 0
0.00.607.213 I llm_load_print_meta: rope type        = 2
0.00.607.226 I llm_load_print_meta: rope scaling     = linear
0.00.607.227 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.607.228 I llm_load_print_meta: freq_scale_train = 1
0.00.607.234 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.607.235 I llm_load_print_meta: rope_finetuned   = unknown
0.00.607.247 I llm_load_print_meta: ssm_d_conv       = 0
0.00.607.248 I llm_load_print_meta: ssm_d_inner      = 0
0.00.607.257 I llm_load_print_meta: ssm_d_state      = 0
0.00.607.258 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.607.258 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.607.259 I llm_load_print_meta: model type       = 2B
0.00.607.261 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.607.262 I llm_load_print_meta: model params     = 2.51 B
0.00.607.263 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.607.263 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.607.268 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.607.269 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.607.269 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.607.269 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.607.278 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.607.279 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.607.284 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.607.289 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.607.289 I llm_load_print_meta: max token length = 93
0.00.607.457 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.666.866 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.672.466 I llama_new_context_with_model: n_ctx      = 8192
0.00.672.473 I llama_new_context_with_model: n_batch    = 2048
0.00.672.473 I llama_new_context_with_model: n_ubatch   = 512
0.00.672.474 I llama_new_context_with_model: flash_attn = 0
0.00.672.476 I llama_new_context_with_model: freq_base  = 10000.0
0.00.672.477 I llama_new_context_with_model: freq_scale = 1
0.00.701.103 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.701.145 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.701.259 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.702.605 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.702.611 I llama_new_context_with_model: graph nodes  = 601
0.00.702.612 I llama_new_context_with_model: graph splits = 1
0.00.702.628 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.280.307 I main: llama threadpool init, n_threads = 4
0.01.280.318 I 
0.01.280.423 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.280.426 I 
0.01.280.594 I sampler seed: 1359210322
0.01.280.604 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.280.610 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.280.611 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.280.612 I 
 seconally. I am unable to generate a response due to limitations in my computational resources. [end of text]


0.07.812.536 I llama_perf_sampler_print:    sampling time =      29.30 ms /    20 runs   (    1.47 ms per token,   682.59 tokens per second)
0.07.812.539 I llama_perf_context_print:        load time =    1277.46 ms
0.07.812.540 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.812.542 I llama_perf_context_print:        eval time =    6483.39 ms /    19 runs   (  341.23 ms per token,     2.93 tokens per second)
0.07.812.542 I llama_perf_context_print:       total time =    6532.24 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m0.743s
user	49m58.855s
sys	0m6.358s
