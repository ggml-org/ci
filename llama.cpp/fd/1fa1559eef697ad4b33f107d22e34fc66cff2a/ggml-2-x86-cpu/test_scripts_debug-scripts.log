+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 4017 (fd1fa155) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.001.097 I main: load the model and apply lora adapter, if any
0.00.024.024 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.040 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.140 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.153 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.158 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.164 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.166 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.168 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.170 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.171 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.173 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.183 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.188 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.190 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.192 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.193 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.755 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.909 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.263.985 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.263.993 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.263.995 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.263.997 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.263.998 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.000 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.002 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.007 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.009 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.011 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.013 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.264.015 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.023 I llama_model_loader: - type  f32:   37 tensors
0.00.264.026 I llama_model_loader: - type q8_0:  127 tensors
0.00.444.466 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.510 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.407 I llm_load_vocab: special tokens cache size = 5
0.00.600.529 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.600.603 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.600.606 I llm_load_print_meta: arch             = gemma
0.00.600.607 I llm_load_print_meta: vocab type       = SPM
0.00.600.608 I llm_load_print_meta: n_vocab          = 256000
0.00.600.611 I llm_load_print_meta: n_merges         = 0
0.00.600.612 I llm_load_print_meta: vocab_only       = 0
0.00.600.612 I llm_load_print_meta: n_ctx_train      = 8192
0.00.600.613 I llm_load_print_meta: n_embd           = 2048
0.00.600.613 I llm_load_print_meta: n_layer          = 18
0.00.600.686 I llm_load_print_meta: n_head           = 8
0.00.600.698 I llm_load_print_meta: n_head_kv        = 1
0.00.600.699 I llm_load_print_meta: n_rot            = 256
0.00.600.700 I llm_load_print_meta: n_swa            = 0
0.00.600.701 I llm_load_print_meta: n_embd_head_k    = 256
0.00.600.702 I llm_load_print_meta: n_embd_head_v    = 256
0.00.600.710 I llm_load_print_meta: n_gqa            = 8
0.00.600.718 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.600.733 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.600.735 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.600.737 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.600.737 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.600.738 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.600.739 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.600.747 I llm_load_print_meta: n_ff             = 16384
0.00.600.748 I llm_load_print_meta: n_expert         = 0
0.00.600.749 I llm_load_print_meta: n_expert_used    = 0
0.00.600.751 I llm_load_print_meta: causal attn      = 1
0.00.600.752 I llm_load_print_meta: pooling type     = 0
0.00.600.752 I llm_load_print_meta: rope type        = 2
0.00.600.753 I llm_load_print_meta: rope scaling     = linear
0.00.600.755 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.600.756 I llm_load_print_meta: freq_scale_train = 1
0.00.600.757 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.600.757 I llm_load_print_meta: rope_finetuned   = unknown
0.00.600.766 I llm_load_print_meta: ssm_d_conv       = 0
0.00.600.767 I llm_load_print_meta: ssm_d_inner      = 0
0.00.600.767 I llm_load_print_meta: ssm_d_state      = 0
0.00.600.768 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.600.768 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.600.772 I llm_load_print_meta: model type       = 2B
0.00.600.773 I llm_load_print_meta: model ftype      = Q8_0
0.00.600.774 I llm_load_print_meta: model params     = 2.51 B
0.00.600.786 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.600.787 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.600.789 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.600.789 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.600.790 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.600.791 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.600.792 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.600.792 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.600.800 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.600.804 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.600.805 I llm_load_print_meta: max token length = 93
0.00.706.689 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.706.696 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.706.698 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.706.699 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.706.700 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.706.701 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.712.968 I llama_new_context_with_model: n_seq_max     = 1
0.00.712.976 I llama_new_context_with_model: n_ctx         = 4096
0.00.712.976 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.712.977 I llama_new_context_with_model: n_batch       = 2048
0.00.712.977 I llama_new_context_with_model: n_ubatch      = 512
0.00.712.978 I llama_new_context_with_model: flash_attn    = 0
0.00.712.980 I llama_new_context_with_model: freq_base     = 10000.0
0.00.712.981 I llama_new_context_with_model: freq_scale    = 1
0.00.712.982 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.729.181 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.729.224 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.729.344 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.731.913 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.731.917 I llama_new_context_with_model: graph nodes  = 601
0.00.731.918 I llama_new_context_with_model: graph splits = 1
0.00.731.947 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.337.896 I main: llama threadpool init, n_threads = 4
0.01.337.909 I 
0.01.338.024 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.338.028 I 
0.01.338.265 I sampler seed: 88407886
0.01.338.280 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.338.289 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.338.292 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.338.293 I 
 increamically.

A man stands in a field with a slingshot in his hand. He aims at a distant bird and fires. The slingshot flies straight

0.14.865.643 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   671.05 tokens per second)
0.14.865.646 I llama_perf_context_print:        load time =    1336.70 ms
0.14.865.648 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.865.650 I llama_perf_context_print:        eval time =   13435.82 ms /    32 runs   (  419.87 ms per token,     2.38 tokens per second)
0.14.865.651 I llama_perf_context_print:       total time =   13527.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.631 I build: 4017 (fd1fa155) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.863 I main: llama backend init
0.00.001.131 I main: load the model and apply lora adapter, if any
0.00.023.654 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.753 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.768 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.772 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.777 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.779 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.780 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.781 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.782 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.792 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.803 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.806 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.807 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.809 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.810 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.993 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.753 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.833 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.842 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.843 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.844 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.845 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.847 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.848 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.852 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.853 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.855 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.856 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.264.857 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.866 I llama_model_loader: - type  f32:   37 tensors
0.00.264.869 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.755 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.134 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.135 I llm_load_vocab: special tokens cache size = 5
0.00.611.808 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.611.881 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.611.885 I llm_load_print_meta: arch             = gemma
0.00.611.886 I llm_load_print_meta: vocab type       = SPM
0.00.611.887 I llm_load_print_meta: n_vocab          = 256000
0.00.611.889 I llm_load_print_meta: n_merges         = 0
0.00.611.890 I llm_load_print_meta: vocab_only       = 0
0.00.611.890 I llm_load_print_meta: n_ctx_train      = 8192
0.00.611.890 I llm_load_print_meta: n_embd           = 2048
0.00.611.891 I llm_load_print_meta: n_layer          = 18
0.00.611.958 I llm_load_print_meta: n_head           = 8
0.00.611.967 I llm_load_print_meta: n_head_kv        = 1
0.00.611.969 I llm_load_print_meta: n_rot            = 256
0.00.611.970 I llm_load_print_meta: n_swa            = 0
0.00.611.970 I llm_load_print_meta: n_embd_head_k    = 256
0.00.611.971 I llm_load_print_meta: n_embd_head_v    = 256
0.00.611.976 I llm_load_print_meta: n_gqa            = 8
0.00.611.981 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.611.986 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.611.987 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.611.989 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.611.990 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.991 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.991 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.996 I llm_load_print_meta: n_ff             = 16384
0.00.611.996 I llm_load_print_meta: n_expert         = 0
0.00.611.997 I llm_load_print_meta: n_expert_used    = 0
0.00.611.998 I llm_load_print_meta: causal attn      = 1
0.00.611.998 I llm_load_print_meta: pooling type     = 0
0.00.611.999 I llm_load_print_meta: rope type        = 2
0.00.612.000 I llm_load_print_meta: rope scaling     = linear
0.00.612.001 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.002 I llm_load_print_meta: freq_scale_train = 1
0.00.612.003 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.004 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.004 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.004 I llm_load_print_meta: ssm_d_inner      = 0
0.00.612.004 I llm_load_print_meta: ssm_d_state      = 0
0.00.612.005 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.612.005 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.612.006 I llm_load_print_meta: model type       = 2B
0.00.612.007 I llm_load_print_meta: model ftype      = Q8_0
0.00.612.008 I llm_load_print_meta: model params     = 2.51 B
0.00.612.020 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.612.021 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.612.022 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.612.022 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.612.023 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.612.025 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.612.025 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.612.026 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.612.033 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.612.035 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.612.039 I llm_load_print_meta: max token length = 93
0.00.710.173 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.716.566 I llama_new_context_with_model: n_seq_max     = 1
0.00.716.574 I llama_new_context_with_model: n_ctx         = 4096
0.00.716.574 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.716.575 I llama_new_context_with_model: n_batch       = 2048
0.00.716.575 I llama_new_context_with_model: n_ubatch      = 512
0.00.716.576 I llama_new_context_with_model: flash_attn    = 0
0.00.716.578 I llama_new_context_with_model: freq_base     = 10000.0
0.00.716.579 I llama_new_context_with_model: freq_scale    = 1
0.00.716.579 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.733.546 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.733.586 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.733.724 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.736.306 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.736.310 I llama_new_context_with_model: graph nodes  = 601
0.00.736.311 I llama_new_context_with_model: graph splits = 1
0.00.736.336 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.344.287 I main: llama threadpool init, n_threads = 4
0.01.344.301 I 
0.01.344.420 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.344.425 I 
0.01.344.663 I sampler seed: 2274019729
0.01.344.676 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.344.683 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.344.686 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.344.686 I 
 increasements. [end of text]


0.03.046.962 I llama_perf_sampler_print:    sampling time =       6.25 ms /     5 runs   (    1.25 ms per token,   799.36 tokens per second)
0.03.046.966 I llama_perf_context_print:        load time =    1343.05 ms
0.03.046.968 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.046.970 I llama_perf_context_print:        eval time =    1689.52 ms /     4 runs   (  422.38 ms per token,     2.37 tokens per second)
0.03.046.971 I llama_perf_context_print:       total time =    1702.69 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.671 I build: 4017 (fd1fa155) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.882 I main: llama backend init
0.00.001.139 I main: load the model and apply lora adapter, if any
0.00.023.648 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.661 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.751 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.763 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.765 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.769 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.771 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.773 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.774 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.775 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.776 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.782 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.785 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.786 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.787 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.788 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.640 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.186 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.400 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.408 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.409 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.410 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.412 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.413 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.414 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.418 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.419 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.421 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.421 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.265.423 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.430 I llama_model_loader: - type  f32:   37 tensors
0.00.265.433 I llama_model_loader: - type q8_0:  127 tensors
0.00.460.230 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.522.112 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.523.031 I llm_load_vocab: special tokens cache size = 5
0.00.616.571 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.616.642 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.616.643 I llm_load_print_meta: arch             = gemma
0.00.616.644 I llm_load_print_meta: vocab type       = SPM
0.00.616.645 I llm_load_print_meta: n_vocab          = 256000
0.00.616.647 I llm_load_print_meta: n_merges         = 0
0.00.616.648 I llm_load_print_meta: vocab_only       = 0
0.00.616.648 I llm_load_print_meta: n_ctx_train      = 8192
0.00.616.648 I llm_load_print_meta: n_embd           = 2048
0.00.616.649 I llm_load_print_meta: n_layer          = 18
0.00.616.710 I llm_load_print_meta: n_head           = 8
0.00.616.717 I llm_load_print_meta: n_head_kv        = 1
0.00.616.717 I llm_load_print_meta: n_rot            = 256
0.00.616.718 I llm_load_print_meta: n_swa            = 0
0.00.616.718 I llm_load_print_meta: n_embd_head_k    = 256
0.00.616.718 I llm_load_print_meta: n_embd_head_v    = 256
0.00.616.723 I llm_load_print_meta: n_gqa            = 8
0.00.616.728 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.616.733 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.616.734 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.616.737 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.616.737 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.616.738 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.616.739 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.616.744 I llm_load_print_meta: n_ff             = 16384
0.00.616.745 I llm_load_print_meta: n_expert         = 0
0.00.616.745 I llm_load_print_meta: n_expert_used    = 0
0.00.616.754 I llm_load_print_meta: causal attn      = 1
0.00.616.770 I llm_load_print_meta: pooling type     = 0
0.00.616.778 I llm_load_print_meta: rope type        = 2
0.00.616.778 I llm_load_print_meta: rope scaling     = linear
0.00.616.780 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.616.781 I llm_load_print_meta: freq_scale_train = 1
0.00.616.782 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.616.782 I llm_load_print_meta: rope_finetuned   = unknown
0.00.616.782 I llm_load_print_meta: ssm_d_conv       = 0
0.00.616.783 I llm_load_print_meta: ssm_d_inner      = 0
0.00.616.784 I llm_load_print_meta: ssm_d_state      = 0
0.00.616.784 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.616.785 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.616.792 I llm_load_print_meta: model type       = 2B
0.00.616.794 I llm_load_print_meta: model ftype      = Q8_0
0.00.616.795 I llm_load_print_meta: model params     = 2.51 B
0.00.616.803 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.616.803 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.804 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.804 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.805 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.805 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.811 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.812 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.818 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.820 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.821 I llm_load_print_meta: max token length = 93
0.00.714.334 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.714.341 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.714.342 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.714.343 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.714.343 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.714.344 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.720.191 I llama_new_context_with_model: n_seq_max     = 1
0.00.720.198 I llama_new_context_with_model: n_ctx         = 4096
0.00.720.199 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.720.199 I llama_new_context_with_model: n_batch       = 2048
0.00.720.200 I llama_new_context_with_model: n_ubatch      = 512
0.00.720.200 I llama_new_context_with_model: flash_attn    = 0
0.00.720.203 I llama_new_context_with_model: freq_base     = 10000.0
0.00.720.203 I llama_new_context_with_model: freq_scale    = 1
0.00.720.204 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.736.845 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.736.883 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.737.005 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.739.580 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.739.584 I llama_new_context_with_model: graph nodes  = 601
0.00.739.585 I llama_new_context_with_model: graph splits = 1
0.00.739.608 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.346.977 I main: llama threadpool init, n_threads = 4
0.01.346.989 I 
0.01.347.098 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.347.102 I 
0.01.347.341 I sampler seed: 441775728
0.01.347.354 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.347.363 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.347.365 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.347.365 I 
 increably! [end of text]


0.03.033.495 I llama_perf_sampler_print:    sampling time =       6.25 ms /     5 runs   (    1.25 ms per token,   800.38 tokens per second)
0.03.033.498 I llama_perf_context_print:        load time =    1345.74 ms
0.03.033.520 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.033.523 I llama_perf_context_print:        eval time =    1673.40 ms /     4 runs   (  418.35 ms per token,     2.39 tokens per second)
0.03.033.525 I llama_perf_context_print:       total time =    1686.53 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.643 I build: 4017 (fd1fa155) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.880 I main: llama backend init
0.00.001.151 I main: load the model and apply lora adapter, if any
0.00.023.447 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.455 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.550 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.562 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.563 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.568 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.572 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.573 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.575 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.577 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.579 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.587 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.592 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.594 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.595 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.597 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.903 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.481 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.641 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.653 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.654 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.655 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.656 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.658 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.659 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.663 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.663 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.665 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.666 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.264.667 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.676 I llama_model_loader: - type  f32:   37 tensors
0.00.264.679 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.670 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.508.527 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.509.425 I llm_load_vocab: special tokens cache size = 5
0.00.602.861 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.602.931 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.602.932 I llm_load_print_meta: arch             = gemma
0.00.602.932 I llm_load_print_meta: vocab type       = SPM
0.00.602.934 I llm_load_print_meta: n_vocab          = 256000
0.00.602.936 I llm_load_print_meta: n_merges         = 0
0.00.602.937 I llm_load_print_meta: vocab_only       = 0
0.00.602.937 I llm_load_print_meta: n_ctx_train      = 8192
0.00.602.938 I llm_load_print_meta: n_embd           = 2048
0.00.602.938 I llm_load_print_meta: n_layer          = 18
0.00.603.005 I llm_load_print_meta: n_head           = 8
0.00.603.012 I llm_load_print_meta: n_head_kv        = 1
0.00.603.013 I llm_load_print_meta: n_rot            = 256
0.00.603.013 I llm_load_print_meta: n_swa            = 0
0.00.603.013 I llm_load_print_meta: n_embd_head_k    = 256
0.00.603.014 I llm_load_print_meta: n_embd_head_v    = 256
0.00.603.018 I llm_load_print_meta: n_gqa            = 8
0.00.603.023 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.603.028 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.603.028 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.603.030 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.603.030 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.603.031 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.603.031 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.603.036 I llm_load_print_meta: n_ff             = 16384
0.00.603.037 I llm_load_print_meta: n_expert         = 0
0.00.603.037 I llm_load_print_meta: n_expert_used    = 0
0.00.603.038 I llm_load_print_meta: causal attn      = 1
0.00.603.038 I llm_load_print_meta: pooling type     = 0
0.00.603.038 I llm_load_print_meta: rope type        = 2
0.00.603.039 I llm_load_print_meta: rope scaling     = linear
0.00.603.040 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.603.041 I llm_load_print_meta: freq_scale_train = 1
0.00.603.042 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.603.042 I llm_load_print_meta: rope_finetuned   = unknown
0.00.603.043 I llm_load_print_meta: ssm_d_conv       = 0
0.00.603.055 I llm_load_print_meta: ssm_d_inner      = 0
0.00.603.058 I llm_load_print_meta: ssm_d_state      = 0
0.00.603.059 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.603.059 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.603.061 I llm_load_print_meta: model type       = 2B
0.00.603.063 I llm_load_print_meta: model ftype      = Q8_0
0.00.603.067 I llm_load_print_meta: model params     = 2.51 B
0.00.603.076 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.603.077 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.603.078 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.603.078 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.603.080 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.603.080 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.603.081 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.603.082 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.603.091 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.603.101 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.603.102 I llm_load_print_meta: max token length = 93
0.00.677.563 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.677.573 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.683.763 I llama_new_context_with_model: n_seq_max     = 1
0.00.683.769 I llama_new_context_with_model: n_ctx         = 4096
0.00.683.769 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.683.770 I llama_new_context_with_model: n_batch       = 2048
0.00.683.770 I llama_new_context_with_model: n_ubatch      = 512
0.00.683.771 I llama_new_context_with_model: flash_attn    = 0
0.00.683.773 I llama_new_context_with_model: freq_base     = 10000.0
0.00.683.774 I llama_new_context_with_model: freq_scale    = 1
0.00.683.775 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.700.429 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.700.467 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.700.587 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.703.079 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.703.083 I llama_new_context_with_model: graph nodes  = 601
0.00.703.083 I llama_new_context_with_model: graph splits = 1
0.00.703.107 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.343.793 I main: llama threadpool init, n_threads = 4
0.01.343.806 I 
0.01.343.923 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.343.928 I 
0.01.344.170 I sampler seed: 4009914045
0.01.344.183 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.344.193 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.344.193 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.344.194 I 
 increably! 

I am unable to answer your query as I am not able to access personal or sensitive information. [end of text]


0.11.962.757 I llama_perf_sampler_print:    sampling time =      38.94 ms /    26 runs   (    1.50 ms per token,   667.66 tokens per second)
0.11.962.780 I llama_perf_context_print:        load time =    1342.54 ms
0.11.962.782 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.962.784 I llama_perf_context_print:        eval time =   10547.51 ms /    25 runs   (  421.90 ms per token,     2.37 tokens per second)
0.11.962.784 I llama_perf_context_print:       total time =   10618.97 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m42.545s
user	2m2.910s
sys	0m9.443s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4017 (fd1fa155)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198872.21 ms
main:    total time = 198872.21 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 4017 (fd1fa155) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.001.092 I main: load the model and apply lora adapter, if any
0.00.023.692 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.701 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.793 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.803 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.805 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.808 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.810 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.811 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.813 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.814 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.815 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.827 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.831 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.833 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.834 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.835 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.103 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.972 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.115 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.122 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.124 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.125 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.126 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.127 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.128 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.132 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.133 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.134 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.135 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.264.136 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.144 I llama_model_loader: - type  f32:   37 tensors
0.00.264.146 I llama_model_loader: - type q4_K:  108 tensors
0.00.264.147 I llama_model_loader: - type q6_K:   19 tensors
0.00.444.057 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.593 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.617 I llm_load_vocab: special tokens cache size = 5
0.00.607.907 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.607.978 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.607.979 I llm_load_print_meta: arch             = gemma
0.00.607.980 I llm_load_print_meta: vocab type       = SPM
0.00.607.980 I llm_load_print_meta: n_vocab          = 256000
0.00.607.983 I llm_load_print_meta: n_merges         = 0
0.00.607.983 I llm_load_print_meta: vocab_only       = 0
0.00.607.984 I llm_load_print_meta: n_ctx_train      = 8192
0.00.607.984 I llm_load_print_meta: n_embd           = 2048
0.00.607.984 I llm_load_print_meta: n_layer          = 18
0.00.608.050 I llm_load_print_meta: n_head           = 8
0.00.608.058 I llm_load_print_meta: n_head_kv        = 1
0.00.608.059 I llm_load_print_meta: n_rot            = 256
0.00.608.060 I llm_load_print_meta: n_swa            = 0
0.00.608.061 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.062 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.076 I llm_load_print_meta: n_gqa            = 8
0.00.608.086 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.091 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.093 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.095 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.095 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.096 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.096 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.104 I llm_load_print_meta: n_ff             = 16384
0.00.608.105 I llm_load_print_meta: n_expert         = 0
0.00.608.105 I llm_load_print_meta: n_expert_used    = 0
0.00.608.105 I llm_load_print_meta: causal attn      = 1
0.00.608.106 I llm_load_print_meta: pooling type     = 0
0.00.608.106 I llm_load_print_meta: rope type        = 2
0.00.608.107 I llm_load_print_meta: rope scaling     = linear
0.00.608.108 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.108 I llm_load_print_meta: freq_scale_train = 1
0.00.608.109 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.109 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.109 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.110 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.110 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.110 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.111 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.111 I llm_load_print_meta: model type       = 2B
0.00.608.112 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.608.115 I llm_load_print_meta: model params     = 2.51 B
0.00.608.125 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.608.128 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.128 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.129 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.129 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.130 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.130 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.130 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.136 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.138 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.138 I llm_load_print_meta: max token length = 93
0.00.672.273 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.672.280 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.672.281 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.672.281 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.672.282 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.672.283 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.678.121 I llama_new_context_with_model: n_seq_max     = 1
0.00.678.128 I llama_new_context_with_model: n_ctx         = 4096
0.00.678.129 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.678.129 I llama_new_context_with_model: n_batch       = 2048
0.00.678.129 I llama_new_context_with_model: n_ubatch      = 512
0.00.678.130 I llama_new_context_with_model: flash_attn    = 0
0.00.678.132 I llama_new_context_with_model: freq_base     = 10000.0
0.00.678.133 I llama_new_context_with_model: freq_scale    = 1
0.00.678.134 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.694.736 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.694.775 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.694.893 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.697.408 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.697.412 I llama_new_context_with_model: graph nodes  = 601
0.00.697.413 I llama_new_context_with_model: graph splits = 1
0.00.697.438 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.267.822 I main: llama threadpool init, n_threads = 4
0.01.267.835 I 
0.01.267.943 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.267.947 I 
0.01.268.175 I sampler seed: 3140817449
0.01.268.188 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.268.194 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.268.198 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.268.198 I 
 seconde (2013)

**Title:** The Impact of Social Media Use on Adolescent Mental Health

**Introduction:**

* Social media has become

0.12.146.941 I llama_perf_sampler_print:    sampling time =      49.21 ms /    33 runs   (    1.49 ms per token,   670.57 tokens per second)
0.12.146.943 I llama_perf_context_print:        load time =    1266.64 ms
0.12.146.945 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.146.970 I llama_perf_context_print:        eval time =   10789.52 ms /    32 runs   (  337.17 ms per token,     2.97 tokens per second)
0.12.146.971 I llama_perf_context_print:       total time =   10879.13 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4017 (fd1fa155)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198881.14 ms
main:    total time = 198881.14 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 4017 (fd1fa155) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.001.099 I main: load the model and apply lora adapter, if any
0.00.023.521 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.619 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.634 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.638 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.643 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.644 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.645 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.647 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.648 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.649 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.656 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.658 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.659 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.660 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.661 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.277 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.200 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.263.430 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.263.440 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.263.441 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.263.442 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.263.443 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.263.444 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.263.445 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.263.449 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.263.450 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.263.459 I llama_model_loader: - type  f32:   37 tensors
0.00.263.462 I llama_model_loader: - type q4_K:  108 tensors
0.00.263.462 I llama_model_loader: - type q6_K:   19 tensors
0.00.453.001 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.520.863 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.521.826 I llm_load_vocab: special tokens cache size = 5
0.00.615.527 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.615.601 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.615.602 I llm_load_print_meta: arch             = gemma
0.00.615.603 I llm_load_print_meta: vocab type       = SPM
0.00.615.604 I llm_load_print_meta: n_vocab          = 256000
0.00.615.606 I llm_load_print_meta: n_merges         = 0
0.00.615.607 I llm_load_print_meta: vocab_only       = 0
0.00.615.607 I llm_load_print_meta: n_ctx_train      = 8192
0.00.615.607 I llm_load_print_meta: n_embd           = 2048
0.00.615.608 I llm_load_print_meta: n_layer          = 18
0.00.615.673 I llm_load_print_meta: n_head           = 8
0.00.615.680 I llm_load_print_meta: n_head_kv        = 1
0.00.615.681 I llm_load_print_meta: n_rot            = 256
0.00.615.682 I llm_load_print_meta: n_swa            = 0
0.00.615.683 I llm_load_print_meta: n_embd_head_k    = 256
0.00.615.683 I llm_load_print_meta: n_embd_head_v    = 256
0.00.615.693 I llm_load_print_meta: n_gqa            = 8
0.00.615.700 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.615.705 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.615.707 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.615.709 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.615.710 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.615.711 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.615.711 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.615.716 I llm_load_print_meta: n_ff             = 16384
0.00.615.717 I llm_load_print_meta: n_expert         = 0
0.00.615.718 I llm_load_print_meta: n_expert_used    = 0
0.00.615.718 I llm_load_print_meta: causal attn      = 1
0.00.615.718 I llm_load_print_meta: pooling type     = 0
0.00.615.719 I llm_load_print_meta: rope type        = 2
0.00.615.720 I llm_load_print_meta: rope scaling     = linear
0.00.615.721 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.615.722 I llm_load_print_meta: freq_scale_train = 1
0.00.615.722 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.615.723 I llm_load_print_meta: rope_finetuned   = unknown
0.00.615.723 I llm_load_print_meta: ssm_d_conv       = 0
0.00.615.724 I llm_load_print_meta: ssm_d_inner      = 0
0.00.615.724 I llm_load_print_meta: ssm_d_state      = 0
0.00.615.724 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.615.725 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.615.727 I llm_load_print_meta: model type       = 2B
0.00.615.728 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.615.729 I llm_load_print_meta: model params     = 2.51 B
0.00.615.739 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.615.739 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.615.740 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.615.741 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.615.741 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.615.741 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.615.742 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.615.743 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.615.748 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.615.750 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.615.750 I llm_load_print_meta: max token length = 93
0.00.675.614 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.681.412 I llama_new_context_with_model: n_seq_max     = 1
0.00.681.420 I llama_new_context_with_model: n_ctx         = 4096
0.00.681.421 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.681.421 I llama_new_context_with_model: n_batch       = 2048
0.00.681.421 I llama_new_context_with_model: n_ubatch      = 512
0.00.681.422 I llama_new_context_with_model: flash_attn    = 0
0.00.681.425 I llama_new_context_with_model: freq_base     = 10000.0
0.00.681.425 I llama_new_context_with_model: freq_scale    = 1
0.00.681.426 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.698.532 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.698.573 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.698.694 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.701.252 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.701.256 I llama_new_context_with_model: graph nodes  = 601
0.00.701.256 I llama_new_context_with_model: graph splits = 1
0.00.701.282 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.272.677 I main: llama threadpool init, n_threads = 4
0.01.272.690 I 
0.01.272.799 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.272.802 I 
0.01.273.035 I sampler seed: 958775148
0.01.273.047 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.273.053 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.273.056 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.273.057 I 
 maneupherously, but found himself with an insatiable curiosity that eclipsed even his boundless knowledge.

The question is: What does the sentence mean?

The

0.12.141.201 I llama_perf_sampler_print:    sampling time =      49.13 ms /    33 runs   (    1.49 ms per token,   671.74 tokens per second)
0.12.141.205 I llama_perf_context_print:        load time =    1271.49 ms
0.12.141.206 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.141.208 I llama_perf_context_print:        eval time =   10778.55 ms /    32 runs   (  336.83 ms per token,     2.97 tokens per second)
0.12.141.209 I llama_perf_context_print:       total time =   10868.53 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.912s
user	50m5.803s
sys	0m6.412s
