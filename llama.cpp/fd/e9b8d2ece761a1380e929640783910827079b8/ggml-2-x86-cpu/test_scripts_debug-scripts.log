+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 3919 (fde9b8d2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.002.781 I main: load the model and apply lora adapter, if any
0.00.024.946 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.142 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.224 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.234 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.235 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.239 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.241 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.243 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.244 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.244 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.246 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.252 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.254 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.262 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.270 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.274 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.840 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.194 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.038 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.046 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.047 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.048 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.049 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.051 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.052 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.056 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.057 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.058 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.059 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.061 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.069 I llama_model_loader: - type  f32:   37 tensors
0.00.269.073 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.563 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.492.223 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.494.261 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.500.563 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.514.051 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.071 I llm_load_vocab: special tokens cache size = 5
0.00.609.132 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.609.209 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.609.210 I llm_load_print_meta: arch             = gemma
0.00.609.210 I llm_load_print_meta: vocab type       = SPM
0.00.609.211 I llm_load_print_meta: n_vocab          = 256000
0.00.609.214 I llm_load_print_meta: n_merges         = 0
0.00.609.215 I llm_load_print_meta: vocab_only       = 0
0.00.609.215 I llm_load_print_meta: n_ctx_train      = 8192
0.00.609.216 I llm_load_print_meta: n_embd           = 2048
0.00.609.216 I llm_load_print_meta: n_layer          = 18
0.00.609.281 I llm_load_print_meta: n_head           = 8
0.00.609.288 I llm_load_print_meta: n_head_kv        = 1
0.00.609.290 I llm_load_print_meta: n_rot            = 256
0.00.609.291 I llm_load_print_meta: n_swa            = 0
0.00.609.291 I llm_load_print_meta: n_embd_head_k    = 256
0.00.609.291 I llm_load_print_meta: n_embd_head_v    = 256
0.00.609.296 I llm_load_print_meta: n_gqa            = 8
0.00.609.301 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.609.310 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.609.312 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.609.313 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.609.313 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.609.314 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.609.314 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.609.319 I llm_load_print_meta: n_ff             = 16384
0.00.609.320 I llm_load_print_meta: n_expert         = 0
0.00.609.321 I llm_load_print_meta: n_expert_used    = 0
0.00.609.321 I llm_load_print_meta: causal attn      = 1
0.00.609.322 I llm_load_print_meta: pooling type     = 0
0.00.609.323 I llm_load_print_meta: rope type        = 2
0.00.609.323 I llm_load_print_meta: rope scaling     = linear
0.00.609.325 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.609.325 I llm_load_print_meta: freq_scale_train = 1
0.00.609.326 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.609.327 I llm_load_print_meta: rope_finetuned   = unknown
0.00.609.327 I llm_load_print_meta: ssm_d_conv       = 0
0.00.609.328 I llm_load_print_meta: ssm_d_inner      = 0
0.00.609.331 I llm_load_print_meta: ssm_d_state      = 0
0.00.609.331 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.609.331 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.609.332 I llm_load_print_meta: model type       = 2B
0.00.609.334 I llm_load_print_meta: model ftype      = Q8_0
0.00.609.334 I llm_load_print_meta: model params     = 2.51 B
0.00.609.335 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.609.336 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.609.336 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.609.337 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.609.337 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.609.338 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.609.338 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.609.339 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.609.345 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.609.347 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.609.348 I llm_load_print_meta: max token length = 93
0.00.609.515 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.711.902 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.711.915 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.711.916 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.711.917 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.711.917 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.711.918 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.717.549 I llama_new_context_with_model: n_ctx      = 8192
0.00.717.556 I llama_new_context_with_model: n_batch    = 2048
0.00.717.556 I llama_new_context_with_model: n_ubatch   = 512
0.00.717.557 I llama_new_context_with_model: flash_attn = 0
0.00.717.560 I llama_new_context_with_model: freq_base  = 10000.0
0.00.717.561 I llama_new_context_with_model: freq_scale = 1
0.00.746.460 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.746.503 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.746.615 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.747.989 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.747.994 I llama_new_context_with_model: graph nodes  = 601
0.00.747.994 I llama_new_context_with_model: graph splits = 1
0.00.748.010 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.362.313 I main: llama threadpool init, n_threads = 4
0.01.362.325 I 
0.01.362.438 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.362.442 I 
0.01.362.607 I sampler seed: 425272673
0.01.362.617 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.362.623 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.362.623 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.362.624 I 
 increamental fashion.

**Question:**

How would you describe the style of this outfit?

**Answer:**

The provided text does not contain any information

0.14.951.544 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.75 tokens per second)
0.14.951.548 I llama_perf_context_print:        load time =    1359.44 ms
0.14.951.550 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.951.552 I llama_perf_context_print:        eval time =   13507.49 ms /    32 runs   (  422.11 ms per token,     2.37 tokens per second)
0.14.951.554 I llama_perf_context_print:       total time =   13589.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.671 I build: 3919 (fde9b8d2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.900 I main: llama backend init
0.00.002.839 I main: load the model and apply lora adapter, if any
0.00.024.947 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.043 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.057 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.059 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.062 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.066 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.067 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.068 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.069 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.070 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.077 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.078 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.078 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.079 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.080 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.679 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.050 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.874 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.882 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.883 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.884 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.885 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.886 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.887 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.891 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.891 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.893 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.893 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.895 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.903 I llama_model_loader: - type  f32:   37 tensors
0.00.268.907 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.296 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.489.117 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.490.807 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.495.829 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.506.803 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.797 I llm_load_vocab: special tokens cache size = 5
0.00.601.334 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.601.405 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.601.406 I llm_load_print_meta: arch             = gemma
0.00.601.407 I llm_load_print_meta: vocab type       = SPM
0.00.601.408 I llm_load_print_meta: n_vocab          = 256000
0.00.601.410 I llm_load_print_meta: n_merges         = 0
0.00.601.411 I llm_load_print_meta: vocab_only       = 0
0.00.601.412 I llm_load_print_meta: n_ctx_train      = 8192
0.00.601.412 I llm_load_print_meta: n_embd           = 2048
0.00.601.412 I llm_load_print_meta: n_layer          = 18
0.00.601.476 I llm_load_print_meta: n_head           = 8
0.00.601.483 I llm_load_print_meta: n_head_kv        = 1
0.00.601.483 I llm_load_print_meta: n_rot            = 256
0.00.601.484 I llm_load_print_meta: n_swa            = 0
0.00.601.484 I llm_load_print_meta: n_embd_head_k    = 256
0.00.601.484 I llm_load_print_meta: n_embd_head_v    = 256
0.00.601.489 I llm_load_print_meta: n_gqa            = 8
0.00.601.494 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.601.499 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.601.500 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.601.501 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.601.502 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.601.502 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.601.502 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.601.507 I llm_load_print_meta: n_ff             = 16384
0.00.601.508 I llm_load_print_meta: n_expert         = 0
0.00.601.508 I llm_load_print_meta: n_expert_used    = 0
0.00.601.508 I llm_load_print_meta: causal attn      = 1
0.00.601.509 I llm_load_print_meta: pooling type     = 0
0.00.601.509 I llm_load_print_meta: rope type        = 2
0.00.601.509 I llm_load_print_meta: rope scaling     = linear
0.00.601.510 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.601.511 I llm_load_print_meta: freq_scale_train = 1
0.00.601.512 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.601.512 I llm_load_print_meta: rope_finetuned   = unknown
0.00.601.512 I llm_load_print_meta: ssm_d_conv       = 0
0.00.601.513 I llm_load_print_meta: ssm_d_inner      = 0
0.00.601.513 I llm_load_print_meta: ssm_d_state      = 0
0.00.601.513 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.601.513 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.601.514 I llm_load_print_meta: model type       = 2B
0.00.601.515 I llm_load_print_meta: model ftype      = Q8_0
0.00.601.515 I llm_load_print_meta: model params     = 2.51 B
0.00.601.516 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.601.517 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.601.518 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.601.518 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.601.519 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.601.519 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.601.520 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.601.520 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.601.538 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.601.540 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.601.541 I llm_load_print_meta: max token length = 93
0.00.601.707 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.695.375 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.701.027 I llama_new_context_with_model: n_ctx      = 8192
0.00.701.035 I llama_new_context_with_model: n_batch    = 2048
0.00.701.035 I llama_new_context_with_model: n_ubatch   = 512
0.00.701.036 I llama_new_context_with_model: flash_attn = 0
0.00.701.039 I llama_new_context_with_model: freq_base  = 10000.0
0.00.701.040 I llama_new_context_with_model: freq_scale = 1
0.00.729.919 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.729.967 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.730.086 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.731.441 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.731.446 I llama_new_context_with_model: graph nodes  = 601
0.00.731.446 I llama_new_context_with_model: graph splits = 1
0.00.731.461 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.369.492 I main: llama threadpool init, n_threads = 4
0.01.369.502 I 
0.01.369.607 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.369.611 I 
0.01.369.774 I sampler seed: 2906433013
0.01.369.784 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.369.790 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.369.791 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.369.791 I 
 increably. [end of text]


0.03.103.122 I llama_perf_sampler_print:    sampling time =       6.46 ms /     5 runs   (    1.29 ms per token,   773.63 tokens per second)
0.03.103.141 I llama_perf_context_print:        load time =    1366.56 ms
0.03.103.143 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.103.145 I llama_perf_context_print:        eval time =    1720.98 ms /     4 runs   (  430.24 ms per token,     2.32 tokens per second)
0.03.103.146 I llama_perf_context_print:       total time =    1733.64 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.629 I build: 3919 (fde9b8d2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.818 I main: llama backend init
0.00.002.762 I main: load the model and apply lora adapter, if any
0.00.024.528 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.729 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.820 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.830 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.832 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.835 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.836 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.837 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.838 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.839 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.840 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.846 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.847 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.848 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.849 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.851 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.627 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.664 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.612 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.619 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.621 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.622 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.623 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.624 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.625 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.629 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.630 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.631 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.632 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.267.634 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.641 I llama_model_loader: - type  f32:   37 tensors
0.00.267.645 I llama_model_loader: - type q8_0:  127 tensors
0.00.453.507 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.132 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.499.797 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.504.886 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.516.399 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.517.361 I llm_load_vocab: special tokens cache size = 5
0.00.610.695 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.610.764 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.610.765 I llm_load_print_meta: arch             = gemma
0.00.610.766 I llm_load_print_meta: vocab type       = SPM
0.00.610.766 I llm_load_print_meta: n_vocab          = 256000
0.00.610.769 I llm_load_print_meta: n_merges         = 0
0.00.610.769 I llm_load_print_meta: vocab_only       = 0
0.00.610.770 I llm_load_print_meta: n_ctx_train      = 8192
0.00.610.770 I llm_load_print_meta: n_embd           = 2048
0.00.610.771 I llm_load_print_meta: n_layer          = 18
0.00.610.834 I llm_load_print_meta: n_head           = 8
0.00.610.842 I llm_load_print_meta: n_head_kv        = 1
0.00.610.843 I llm_load_print_meta: n_rot            = 256
0.00.610.843 I llm_load_print_meta: n_swa            = 0
0.00.610.843 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.844 I llm_load_print_meta: n_embd_head_v    = 256
0.00.610.848 I llm_load_print_meta: n_gqa            = 8
0.00.610.853 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.858 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.859 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.860 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.861 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.610.861 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.610.862 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.610.866 I llm_load_print_meta: n_ff             = 16384
0.00.610.867 I llm_load_print_meta: n_expert         = 0
0.00.610.867 I llm_load_print_meta: n_expert_used    = 0
0.00.610.868 I llm_load_print_meta: causal attn      = 1
0.00.610.888 I llm_load_print_meta: pooling type     = 0
0.00.610.889 I llm_load_print_meta: rope type        = 2
0.00.610.890 I llm_load_print_meta: rope scaling     = linear
0.00.610.891 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.610.892 I llm_load_print_meta: freq_scale_train = 1
0.00.610.893 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.610.893 I llm_load_print_meta: rope_finetuned   = unknown
0.00.610.893 I llm_load_print_meta: ssm_d_conv       = 0
0.00.610.894 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.894 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.903 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.903 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.904 I llm_load_print_meta: model type       = 2B
0.00.610.905 I llm_load_print_meta: model ftype      = Q8_0
0.00.610.906 I llm_load_print_meta: model params     = 2.51 B
0.00.610.907 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.610.908 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.909 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.909 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.910 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.917 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.918 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.918 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.931 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.932 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.933 I llm_load_print_meta: max token length = 93
0.00.611.097 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.688.716 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.688.726 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.688.727 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.688.728 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.688.728 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.688.729 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.694.304 I llama_new_context_with_model: n_ctx      = 8192
0.00.694.311 I llama_new_context_with_model: n_batch    = 2048
0.00.694.312 I llama_new_context_with_model: n_ubatch   = 512
0.00.694.312 I llama_new_context_with_model: flash_attn = 0
0.00.694.315 I llama_new_context_with_model: freq_base  = 10000.0
0.00.694.316 I llama_new_context_with_model: freq_scale = 1
0.00.723.038 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.723.082 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.723.190 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.724.531 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.724.536 I llama_new_context_with_model: graph nodes  = 601
0.00.724.537 I llama_new_context_with_model: graph splits = 1
0.00.724.552 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.338.365 I main: llama threadpool init, n_threads = 4
0.01.338.378 I 
0.01.338.494 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.338.498 I 
0.01.338.664 I sampler seed: 4080168888
0.01.338.674 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.338.680 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.338.681 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.338.681 I 
 increadibly, and there is no end in sight. [end of text]


0.06.441.250 I llama_perf_sampler_print:    sampling time =      18.55 ms /    13 runs   (    1.43 ms per token,   700.92 tokens per second)
0.06.441.253 I llama_perf_context_print:        load time =    1335.52 ms
0.06.441.255 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.441.257 I llama_perf_context_print:        eval time =    5071.22 ms /    12 runs   (  422.60 ms per token,     2.37 tokens per second)
0.06.441.258 I llama_perf_context_print:       total time =    5102.89 ms /    13 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.656 I build: 3919 (fde9b8d2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.002.801 I main: load the model and apply lora adapter, if any
0.00.030.158 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.030.370 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.030.465 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.477 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.478 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.483 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.485 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.487 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.488 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.497 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.498 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.506 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.510 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.511 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.512 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.030.513 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.163.225 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.267.964 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.285.797 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.285.806 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.285.807 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.285.808 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.285.809 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.285.810 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.285.811 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.285.815 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.285.816 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.285.818 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.285.819 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.285.820 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.285.829 I llama_model_loader: - type  f32:   37 tensors
0.00.285.833 I llama_model_loader: - type q8_0:  127 tensors
0.00.478.915 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.527.541 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.529.354 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.534.779 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.546.003 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.546.941 I llm_load_vocab: special tokens cache size = 5
0.00.642.339 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.642.414 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.642.418 I llm_load_print_meta: arch             = gemma
0.00.642.419 I llm_load_print_meta: vocab type       = SPM
0.00.642.420 I llm_load_print_meta: n_vocab          = 256000
0.00.642.422 I llm_load_print_meta: n_merges         = 0
0.00.642.422 I llm_load_print_meta: vocab_only       = 0
0.00.642.423 I llm_load_print_meta: n_ctx_train      = 8192
0.00.642.423 I llm_load_print_meta: n_embd           = 2048
0.00.642.423 I llm_load_print_meta: n_layer          = 18
0.00.642.488 I llm_load_print_meta: n_head           = 8
0.00.642.497 I llm_load_print_meta: n_head_kv        = 1
0.00.642.499 I llm_load_print_meta: n_rot            = 256
0.00.642.499 I llm_load_print_meta: n_swa            = 0
0.00.642.500 I llm_load_print_meta: n_embd_head_k    = 256
0.00.642.500 I llm_load_print_meta: n_embd_head_v    = 256
0.00.642.505 I llm_load_print_meta: n_gqa            = 8
0.00.642.510 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.642.515 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.642.518 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.642.520 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.642.520 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.642.520 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.642.521 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.642.526 I llm_load_print_meta: n_ff             = 16384
0.00.642.526 I llm_load_print_meta: n_expert         = 0
0.00.642.527 I llm_load_print_meta: n_expert_used    = 0
0.00.642.528 I llm_load_print_meta: causal attn      = 1
0.00.642.528 I llm_load_print_meta: pooling type     = 0
0.00.642.529 I llm_load_print_meta: rope type        = 2
0.00.642.530 I llm_load_print_meta: rope scaling     = linear
0.00.642.532 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.642.533 I llm_load_print_meta: freq_scale_train = 1
0.00.642.533 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.642.533 I llm_load_print_meta: rope_finetuned   = unknown
0.00.642.534 I llm_load_print_meta: ssm_d_conv       = 0
0.00.642.534 I llm_load_print_meta: ssm_d_inner      = 0
0.00.642.536 I llm_load_print_meta: ssm_d_state      = 0
0.00.642.537 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.642.537 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.642.538 I llm_load_print_meta: model type       = 2B
0.00.642.539 I llm_load_print_meta: model ftype      = Q8_0
0.00.642.539 I llm_load_print_meta: model params     = 2.51 B
0.00.642.540 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.642.541 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.642.541 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.642.544 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.642.544 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.642.544 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.642.545 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.642.545 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.642.551 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.642.553 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.642.553 I llm_load_print_meta: max token length = 93
0.00.642.728 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.714.627 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.714.636 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.720.538 I llama_new_context_with_model: n_ctx      = 8192
0.00.720.546 I llama_new_context_with_model: n_batch    = 2048
0.00.720.546 I llama_new_context_with_model: n_ubatch   = 512
0.00.720.546 I llama_new_context_with_model: flash_attn = 0
0.00.720.549 I llama_new_context_with_model: freq_base  = 10000.0
0.00.720.550 I llama_new_context_with_model: freq_scale = 1
0.00.749.807 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.749.848 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.749.960 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.751.321 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.751.326 I llama_new_context_with_model: graph nodes  = 601
0.00.751.327 I llama_new_context_with_model: graph splits = 1
0.00.751.342 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.367.279 I main: llama threadpool init, n_threads = 4
0.01.367.290 I 
0.01.367.414 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.367.419 I 
0.01.367.586 I sampler seed: 1839312067
0.01.367.597 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.367.604 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.367.605 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.367.605 I 
 increasities. [end of text]


0.03.066.998 I llama_perf_sampler_print:    sampling time =       6.24 ms /     5 runs   (    1.25 ms per token,   801.80 tokens per second)
0.03.067.012 I llama_perf_context_print:        load time =    1364.38 ms
0.03.067.014 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.067.016 I llama_perf_context_print:        eval time =    1688.00 ms /     4 runs   (  422.00 ms per token,     2.37 tokens per second)
0.03.067.017 I llama_perf_context_print:       total time =    1699.73 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m37.200s
user	1m41.359s
sys	0m9.384s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3919 (fde9b8d2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199271.93 ms
main:    total time = 199271.93 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.621 I build: 3919 (fde9b8d2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.869 I main: llama backend init
0.00.002.801 I main: load the model and apply lora adapter, if any
0.00.024.964 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.160 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.245 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.257 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.258 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.262 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.264 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.265 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.266 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.267 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.268 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.274 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.275 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.276 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.278 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.279 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.292 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.736 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.532 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.539 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.540 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.541 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.542 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.543 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.544 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.547 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.548 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.550 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.551 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.552 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.559 I llama_model_loader: - type  f32:   37 tensors
0.00.267.563 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.564 I llama_model_loader: - type q6_K:   19 tensors
0.00.438.985 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.479.373 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.481.003 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.485.918 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.496.199 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.497.126 I llm_load_vocab: special tokens cache size = 5
0.00.590.734 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.590.801 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.590.802 I llm_load_print_meta: arch             = gemma
0.00.590.803 I llm_load_print_meta: vocab type       = SPM
0.00.590.804 I llm_load_print_meta: n_vocab          = 256000
0.00.590.806 I llm_load_print_meta: n_merges         = 0
0.00.590.807 I llm_load_print_meta: vocab_only       = 0
0.00.590.807 I llm_load_print_meta: n_ctx_train      = 8192
0.00.590.808 I llm_load_print_meta: n_embd           = 2048
0.00.590.808 I llm_load_print_meta: n_layer          = 18
0.00.590.873 I llm_load_print_meta: n_head           = 8
0.00.590.880 I llm_load_print_meta: n_head_kv        = 1
0.00.590.891 I llm_load_print_meta: n_rot            = 256
0.00.590.892 I llm_load_print_meta: n_swa            = 0
0.00.590.893 I llm_load_print_meta: n_embd_head_k    = 256
0.00.590.893 I llm_load_print_meta: n_embd_head_v    = 256
0.00.590.900 I llm_load_print_meta: n_gqa            = 8
0.00.590.905 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.590.910 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.590.914 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.590.916 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.590.916 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.590.916 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.590.917 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.590.922 I llm_load_print_meta: n_ff             = 16384
0.00.590.922 I llm_load_print_meta: n_expert         = 0
0.00.590.923 I llm_load_print_meta: n_expert_used    = 0
0.00.590.926 I llm_load_print_meta: causal attn      = 1
0.00.590.926 I llm_load_print_meta: pooling type     = 0
0.00.590.927 I llm_load_print_meta: rope type        = 2
0.00.590.927 I llm_load_print_meta: rope scaling     = linear
0.00.590.929 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.590.929 I llm_load_print_meta: freq_scale_train = 1
0.00.590.930 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.590.930 I llm_load_print_meta: rope_finetuned   = unknown
0.00.590.930 I llm_load_print_meta: ssm_d_conv       = 0
0.00.590.931 I llm_load_print_meta: ssm_d_inner      = 0
0.00.590.931 I llm_load_print_meta: ssm_d_state      = 0
0.00.590.931 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.590.932 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.590.932 I llm_load_print_meta: model type       = 2B
0.00.590.933 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.590.935 I llm_load_print_meta: model params     = 2.51 B
0.00.590.936 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.590.936 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.590.937 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.590.938 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.590.938 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.590.951 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.590.952 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.590.953 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.590.959 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.590.961 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.590.961 I llm_load_print_meta: max token length = 93
0.00.591.136 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.651.240 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.651.251 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.651.252 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.651.253 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.651.254 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.651.254 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.656.976 I llama_new_context_with_model: n_ctx      = 8192
0.00.656.982 I llama_new_context_with_model: n_batch    = 2048
0.00.656.982 I llama_new_context_with_model: n_ubatch   = 512
0.00.656.983 I llama_new_context_with_model: flash_attn = 0
0.00.656.986 I llama_new_context_with_model: freq_base  = 10000.0
0.00.656.987 I llama_new_context_with_model: freq_scale = 1
0.00.685.981 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.686.022 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.686.134 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.687.539 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.687.544 I llama_new_context_with_model: graph nodes  = 601
0.00.687.544 I llama_new_context_with_model: graph splits = 1
0.00.687.560 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.265.987 I main: llama threadpool init, n_threads = 4
0.01.265.998 I 
0.01.266.103 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.266.107 I 
0.01.266.269 I sampler seed: 2581747354
0.01.266.280 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.266.287 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.266.287 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.266.288 I 
 squaRED FOR LIFE.

**Answer the question by identifying the key points and providing a concise answer.**

**Question:** Identify the key points and provide a

0.12.184.958 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.00 tokens per second)
0.12.184.962 I llama_perf_context_print:        load time =    1263.10 ms
0.12.184.963 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.184.966 I llama_perf_context_print:        eval time =   10837.28 ms /    32 runs   (  338.67 ms per token,     2.95 tokens per second)
0.12.184.967 I llama_perf_context_print:       total time =   10918.98 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3919 (fde9b8d2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199169.56 ms
main:    total time = 199169.56 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 3919 (fde9b8d2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.796 I main: load the model and apply lora adapter, if any
0.00.024.479 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.569 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.583 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.585 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.588 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.590 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.592 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.593 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.594 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.595 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.601 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.602 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.603 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.604 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.605 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.574 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.359 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.268 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.277 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.279 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.280 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.281 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.282 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.283 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.287 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.287 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.296 I llama_model_loader: - type  f32:   37 tensors
0.00.267.301 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.301 I llama_model_loader: - type q6_K:   19 tensors
0.00.436.652 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.482.017 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.483.865 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.489.385 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.500.936 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.501.871 I llm_load_vocab: special tokens cache size = 5
0.00.596.280 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.596.353 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.596.357 I llm_load_print_meta: arch             = gemma
0.00.596.358 I llm_load_print_meta: vocab type       = SPM
0.00.596.358 I llm_load_print_meta: n_vocab          = 256000
0.00.596.360 I llm_load_print_meta: n_merges         = 0
0.00.596.361 I llm_load_print_meta: vocab_only       = 0
0.00.596.361 I llm_load_print_meta: n_ctx_train      = 8192
0.00.596.362 I llm_load_print_meta: n_embd           = 2048
0.00.596.362 I llm_load_print_meta: n_layer          = 18
0.00.596.426 I llm_load_print_meta: n_head           = 8
0.00.596.436 I llm_load_print_meta: n_head_kv        = 1
0.00.596.437 I llm_load_print_meta: n_rot            = 256
0.00.596.437 I llm_load_print_meta: n_swa            = 0
0.00.596.438 I llm_load_print_meta: n_embd_head_k    = 256
0.00.596.439 I llm_load_print_meta: n_embd_head_v    = 256
0.00.596.444 I llm_load_print_meta: n_gqa            = 8
0.00.596.449 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.596.454 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.596.458 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.596.460 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.596.460 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.596.461 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.596.461 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.596.466 I llm_load_print_meta: n_ff             = 16384
0.00.596.466 I llm_load_print_meta: n_expert         = 0
0.00.596.466 I llm_load_print_meta: n_expert_used    = 0
0.00.596.467 I llm_load_print_meta: causal attn      = 1
0.00.596.467 I llm_load_print_meta: pooling type     = 0
0.00.596.467 I llm_load_print_meta: rope type        = 2
0.00.596.468 I llm_load_print_meta: rope scaling     = linear
0.00.596.469 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.596.470 I llm_load_print_meta: freq_scale_train = 1
0.00.596.471 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.596.471 I llm_load_print_meta: rope_finetuned   = unknown
0.00.596.472 I llm_load_print_meta: ssm_d_conv       = 0
0.00.596.472 I llm_load_print_meta: ssm_d_inner      = 0
0.00.596.484 I llm_load_print_meta: ssm_d_state      = 0
0.00.596.485 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.596.498 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.596.499 I llm_load_print_meta: model type       = 2B
0.00.596.501 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.596.510 I llm_load_print_meta: model params     = 2.51 B
0.00.596.511 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.596.512 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.596.513 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.596.513 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.596.521 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.596.522 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.596.523 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.596.530 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.596.537 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.596.541 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.596.541 I llm_load_print_meta: max token length = 93
0.00.596.708 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.656.426 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.661.899 I llama_new_context_with_model: n_ctx      = 8192
0.00.661.905 I llama_new_context_with_model: n_batch    = 2048
0.00.661.906 I llama_new_context_with_model: n_ubatch   = 512
0.00.661.906 I llama_new_context_with_model: flash_attn = 0
0.00.661.909 I llama_new_context_with_model: freq_base  = 10000.0
0.00.661.910 I llama_new_context_with_model: freq_scale = 1
0.00.690.747 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.690.792 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.690.905 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.692.241 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.692.247 I llama_new_context_with_model: graph nodes  = 601
0.00.692.247 I llama_new_context_with_model: graph splits = 1
0.00.692.262 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.272.176 I main: llama threadpool init, n_threads = 4
0.01.272.187 I 
0.01.272.291 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.272.295 I 
0.01.272.464 I sampler seed: 3422026237
0.01.272.474 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.272.480 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.272.481 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.272.481 I 
 increasively.

I am just wondering if there is any way to make a list of words that are anagrams of each other.

Yes, there are

0.12.286.632 I llama_perf_sampler_print:    sampling time =      49.15 ms /    33 runs   (    1.49 ms per token,   671.36 tokens per second)
0.12.286.635 I llama_perf_context_print:        load time =    1269.29 ms
0.12.286.648 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.286.650 I llama_perf_context_print:        eval time =   10932.80 ms /    32 runs   (  341.65 ms per token,     2.93 tokens per second)
0.12.286.651 I llama_perf_context_print:       total time =   11014.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.777s
user	50m9.110s
sys	0m6.296s
