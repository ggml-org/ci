+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.566 I build: 3919 (fde9b8d2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.743 I main: llama backend init
0.00.001.864 I main: load the model and apply lora adapter, if any
0.00.021.886 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.933 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.944 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.949 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.952 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.956 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.957 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.957 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.958 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.959 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.959 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.963 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.964 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.964 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.965 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.966 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.005 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.835 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.790 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.798 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.799 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.800 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.801 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.802 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.803 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.807 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.807 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.808 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.809 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.811 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.813 I llama_model_loader: - type  f32:   37 tensors
0.00.133.816 I llama_model_loader: - type q8_0:  127 tensors
0.00.213.540 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.990 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.244.177 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.247.641 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.254.728 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.246 I llm_load_vocab: special tokens cache size = 5
0.00.276.095 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.110 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.110 I llm_load_print_meta: arch             = gemma
0.00.276.111 I llm_load_print_meta: vocab type       = SPM
0.00.276.111 I llm_load_print_meta: n_vocab          = 256000
0.00.276.112 I llm_load_print_meta: n_merges         = 0
0.00.276.112 I llm_load_print_meta: vocab_only       = 0
0.00.276.112 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.112 I llm_load_print_meta: n_embd           = 2048
0.00.276.113 I llm_load_print_meta: n_layer          = 18
0.00.276.124 I llm_load_print_meta: n_head           = 8
0.00.276.125 I llm_load_print_meta: n_head_kv        = 1
0.00.276.126 I llm_load_print_meta: n_rot            = 256
0.00.276.126 I llm_load_print_meta: n_swa            = 0
0.00.276.126 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.126 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.127 I llm_load_print_meta: n_gqa            = 8
0.00.276.128 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.129 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.130 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.131 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.132 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.132 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.132 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.133 I llm_load_print_meta: n_ff             = 16384
0.00.276.134 I llm_load_print_meta: n_expert         = 0
0.00.276.135 I llm_load_print_meta: n_expert_used    = 0
0.00.276.135 I llm_load_print_meta: causal attn      = 1
0.00.276.136 I llm_load_print_meta: pooling type     = 0
0.00.276.136 I llm_load_print_meta: rope type        = 2
0.00.276.137 I llm_load_print_meta: rope scaling     = linear
0.00.276.139 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.140 I llm_load_print_meta: freq_scale_train = 1
0.00.276.140 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.140 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.141 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.141 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.142 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.142 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.142 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.143 I llm_load_print_meta: model type       = 2B
0.00.276.143 I llm_load_print_meta: model ftype      = Q8_0
0.00.276.144 I llm_load_print_meta: model params     = 2.51 B
0.00.276.145 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.276.146 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.146 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.146 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.147 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.148 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.148 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.148 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.149 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.149 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.150 I llm_load_print_meta: max token length = 93
0.00.276.169 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.376.897 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.376.904 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.376.905 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.376.906 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.376.906 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.376.907 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.381.893 I llama_new_context_with_model: n_ctx      = 8192
0.00.381.899 I llama_new_context_with_model: n_batch    = 2048
0.00.381.899 I llama_new_context_with_model: n_ubatch   = 512
0.00.381.900 I llama_new_context_with_model: flash_attn = 0
0.00.381.902 I llama_new_context_with_model: freq_base  = 10000.0
0.00.381.903 I llama_new_context_with_model: freq_scale = 1
0.00.410.781 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.410.796 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.410.886 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.411.759 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.411.766 I llama_new_context_with_model: graph nodes  = 601
0.00.411.766 I llama_new_context_with_model: graph splits = 1
0.00.411.769 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.502.284 I main: llama threadpool init, n_threads = 4
0.00.502.296 I 
0.00.502.370 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.502.373 I 
0.00.502.409 I sampler seed: 2935268470
0.00.502.418 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.502.420 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.502.421 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.502.421 I 
 increasels, and other whimsical creatures.

The setting is a whimsical forest where trees sprout miniature houses and mushrooms sprout twinkling lights.

**Scene:**

The

0.02.748.866 I llama_perf_sampler_print:    sampling time =       5.09 ms /    33 runs   (    0.15 ms per token,  6482.03 tokens per second)
0.02.748.868 I llama_perf_context_print:        load time =     500.40 ms
0.02.748.869 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.748.871 I llama_perf_context_print:        eval time =    2228.48 ms /    32 runs   (   69.64 ms per token,    14.36 tokens per second)
0.02.748.872 I llama_perf_context_print:       total time =    2246.59 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.554 I build: 3919 (fde9b8d2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.758 I main: llama backend init
0.00.001.846 I main: load the model and apply lora adapter, if any
0.00.022.233 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.248 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.256 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.257 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.261 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.262 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.263 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.264 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.264 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.265 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.269 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.270 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.270 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.271 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.271 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.725 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.582 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.430 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.438 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.439 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.439 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.440 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.441 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.441 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.444 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.444 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.445 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.445 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.447 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.451 I llama_model_loader: - type  f32:   37 tensors
0.00.133.454 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.150 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.237.942 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.239.093 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.242.560 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.249.456 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.982 I llm_load_vocab: special tokens cache size = 5
0.00.270.990 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.008 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.008 I llm_load_print_meta: arch             = gemma
0.00.271.008 I llm_load_print_meta: vocab type       = SPM
0.00.271.009 I llm_load_print_meta: n_vocab          = 256000
0.00.271.009 I llm_load_print_meta: n_merges         = 0
0.00.271.010 I llm_load_print_meta: vocab_only       = 0
0.00.271.010 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.010 I llm_load_print_meta: n_embd           = 2048
0.00.271.011 I llm_load_print_meta: n_layer          = 18
0.00.271.022 I llm_load_print_meta: n_head           = 8
0.00.271.022 I llm_load_print_meta: n_head_kv        = 1
0.00.271.023 I llm_load_print_meta: n_rot            = 256
0.00.271.023 I llm_load_print_meta: n_swa            = 0
0.00.271.023 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.024 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.025 I llm_load_print_meta: n_gqa            = 8
0.00.271.026 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.026 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.027 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.029 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.029 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.029 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.030 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.030 I llm_load_print_meta: n_ff             = 16384
0.00.271.031 I llm_load_print_meta: n_expert         = 0
0.00.271.031 I llm_load_print_meta: n_expert_used    = 0
0.00.271.031 I llm_load_print_meta: causal attn      = 1
0.00.271.032 I llm_load_print_meta: pooling type     = 0
0.00.271.032 I llm_load_print_meta: rope type        = 2
0.00.271.032 I llm_load_print_meta: rope scaling     = linear
0.00.271.034 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.034 I llm_load_print_meta: freq_scale_train = 1
0.00.271.035 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.035 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.035 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.035 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.036 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.036 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.036 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.036 I llm_load_print_meta: model type       = 2B
0.00.271.037 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.038 I llm_load_print_meta: model params     = 2.51 B
0.00.271.039 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.039 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.039 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.040 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.040 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.040 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.041 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.041 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.041 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.042 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.042 I llm_load_print_meta: max token length = 93
0.00.271.064 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.364.333 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.369.515 I llama_new_context_with_model: n_ctx      = 8192
0.00.369.521 I llama_new_context_with_model: n_batch    = 2048
0.00.369.521 I llama_new_context_with_model: n_ubatch   = 512
0.00.369.522 I llama_new_context_with_model: flash_attn = 0
0.00.369.524 I llama_new_context_with_model: freq_base  = 10000.0
0.00.369.525 I llama_new_context_with_model: freq_scale = 1
0.00.398.648 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.398.663 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.398.756 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.399.585 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.399.594 I llama_new_context_with_model: graph nodes  = 601
0.00.399.594 I llama_new_context_with_model: graph splits = 1
0.00.399.595 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.486.593 I main: llama threadpool init, n_threads = 4
0.00.486.603 I 
0.00.486.677 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.486.681 I 
0.00.486.721 I sampler seed: 755475749
0.00.486.730 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.486.733 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.486.733 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.486.733 I 
 increasities.

I am unable to generate the requested content as it involves sexually explicit and inappropriate material. [end of text]


0.01.978.138 I llama_perf_sampler_print:    sampling time =       3.41 ms /    23 runs   (    0.15 ms per token,  6744.87 tokens per second)
0.01.978.141 I llama_perf_context_print:        load time =     484.73 ms
0.01.978.143 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.978.144 I llama_perf_context_print:        eval time =    1478.99 ms /    22 runs   (   67.23 ms per token,    14.87 tokens per second)
0.01.978.147 I llama_perf_context_print:       total time =    1491.55 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.542 I build: 3919 (fde9b8d2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.781 I main: llama backend init
0.00.001.909 I main: load the model and apply lora adapter, if any
0.00.021.972 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.036 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.044 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.049 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.050 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.055 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.059 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.060 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.061 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.061 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.062 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.068 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.069 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.070 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.071 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.072 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.531 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.905 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.752 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.758 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.759 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.760 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.760 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.761 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.762 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.764 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.765 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.765 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.766 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.766 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.769 I llama_model_loader: - type  f32:   37 tensors
0.00.132.772 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.976 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.037 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.243.403 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.247.581 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.256.605 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.255 I llm_load_vocab: special tokens cache size = 5
0.00.278.305 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.323 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.323 I llm_load_print_meta: arch             = gemma
0.00.278.324 I llm_load_print_meta: vocab type       = SPM
0.00.278.325 I llm_load_print_meta: n_vocab          = 256000
0.00.278.325 I llm_load_print_meta: n_merges         = 0
0.00.278.326 I llm_load_print_meta: vocab_only       = 0
0.00.278.326 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.326 I llm_load_print_meta: n_embd           = 2048
0.00.278.327 I llm_load_print_meta: n_layer          = 18
0.00.278.340 I llm_load_print_meta: n_head           = 8
0.00.278.342 I llm_load_print_meta: n_head_kv        = 1
0.00.278.342 I llm_load_print_meta: n_rot            = 256
0.00.278.342 I llm_load_print_meta: n_swa            = 0
0.00.278.343 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.343 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.345 I llm_load_print_meta: n_gqa            = 8
0.00.278.347 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.349 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.350 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.352 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.352 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.354 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.354 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.356 I llm_load_print_meta: n_ff             = 16384
0.00.278.357 I llm_load_print_meta: n_expert         = 0
0.00.278.358 I llm_load_print_meta: n_expert_used    = 0
0.00.278.358 I llm_load_print_meta: causal attn      = 1
0.00.278.359 I llm_load_print_meta: pooling type     = 0
0.00.278.359 I llm_load_print_meta: rope type        = 2
0.00.278.360 I llm_load_print_meta: rope scaling     = linear
0.00.278.362 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.363 I llm_load_print_meta: freq_scale_train = 1
0.00.278.364 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.364 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.365 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.365 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.366 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.367 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.368 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.368 I llm_load_print_meta: model type       = 2B
0.00.278.369 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.372 I llm_load_print_meta: model params     = 2.51 B
0.00.278.373 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.373 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.374 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.374 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.375 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.375 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.376 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.376 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.377 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.378 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.379 I llm_load_print_meta: max token length = 93
0.00.278.414 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.354.171 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.354.178 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.354.178 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.354.179 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.354.180 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.354.180 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.359.335 I llama_new_context_with_model: n_ctx      = 8192
0.00.359.342 I llama_new_context_with_model: n_batch    = 2048
0.00.359.343 I llama_new_context_with_model: n_ubatch   = 512
0.00.359.343 I llama_new_context_with_model: flash_attn = 0
0.00.359.346 I llama_new_context_with_model: freq_base  = 10000.0
0.00.359.347 I llama_new_context_with_model: freq_scale = 1
0.00.388.618 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.388.631 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.388.733 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.581 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.389.590 I llama_new_context_with_model: graph nodes  = 601
0.00.389.590 I llama_new_context_with_model: graph splits = 1
0.00.389.593 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.480.729 I main: llama threadpool init, n_threads = 4
0.00.480.742 I 
0.00.480.829 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.480.833 I 
0.00.480.876 I sampler seed: 54503979
0.00.480.888 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.480.892 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.480.893 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.480.893 I 
 seconde à la nature.

**Question 1 :**
Quel est le nom de la ville la plus grande au monde ?

**Réponse :**

0.02.724.384 I llama_perf_sampler_print:    sampling time =       4.79 ms /    33 runs   (    0.15 ms per token,  6889.35 tokens per second)
0.02.724.387 I llama_perf_context_print:        load time =     478.80 ms
0.02.724.389 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.724.391 I llama_perf_context_print:        eval time =    2224.96 ms /    32 runs   (   69.53 ms per token,    14.38 tokens per second)
0.02.724.392 I llama_perf_context_print:       total time =    2243.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.540 I build: 3919 (fde9b8d2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.001.868 I main: load the model and apply lora adapter, if any
0.00.021.883 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.929 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.940 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.945 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.946 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.950 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.952 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.952 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.953 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.953 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.954 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.958 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.958 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.959 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.959 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.960 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.691 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.151 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.055 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.062 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.063 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.063 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.064 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.065 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.065 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.068 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.069 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.070 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.071 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.134.071 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.074 I llama_model_loader: - type  f32:   37 tensors
0.00.134.077 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.844 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.553 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.242.008 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.246.490 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.255.713 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.323 I llm_load_vocab: special tokens cache size = 5
0.00.277.276 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.295 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.296 I llm_load_print_meta: arch             = gemma
0.00.277.297 I llm_load_print_meta: vocab type       = SPM
0.00.277.300 I llm_load_print_meta: n_vocab          = 256000
0.00.277.301 I llm_load_print_meta: n_merges         = 0
0.00.277.302 I llm_load_print_meta: vocab_only       = 0
0.00.277.303 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.303 I llm_load_print_meta: n_embd           = 2048
0.00.277.303 I llm_load_print_meta: n_layer          = 18
0.00.277.316 I llm_load_print_meta: n_head           = 8
0.00.277.317 I llm_load_print_meta: n_head_kv        = 1
0.00.277.317 I llm_load_print_meta: n_rot            = 256
0.00.277.318 I llm_load_print_meta: n_swa            = 0
0.00.277.318 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.318 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.320 I llm_load_print_meta: n_gqa            = 8
0.00.277.321 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.324 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.325 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.326 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.327 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.327 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.327 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.328 I llm_load_print_meta: n_ff             = 16384
0.00.277.328 I llm_load_print_meta: n_expert         = 0
0.00.277.329 I llm_load_print_meta: n_expert_used    = 0
0.00.277.329 I llm_load_print_meta: causal attn      = 1
0.00.277.329 I llm_load_print_meta: pooling type     = 0
0.00.277.330 I llm_load_print_meta: rope type        = 2
0.00.277.330 I llm_load_print_meta: rope scaling     = linear
0.00.277.332 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.332 I llm_load_print_meta: freq_scale_train = 1
0.00.277.333 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.333 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.334 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.334 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.334 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.335 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.335 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.336 I llm_load_print_meta: model type       = 2B
0.00.277.336 I llm_load_print_meta: model ftype      = Q8_0
0.00.277.337 I llm_load_print_meta: model params     = 2.51 B
0.00.277.338 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.277.339 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.353 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.354 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.354 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.354 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.355 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.356 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.356 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.357 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.357 I llm_load_print_meta: max token length = 93
0.00.277.381 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.347.663 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.347.671 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.352.883 I llama_new_context_with_model: n_ctx      = 8192
0.00.352.889 I llama_new_context_with_model: n_batch    = 2048
0.00.352.890 I llama_new_context_with_model: n_ubatch   = 512
0.00.352.890 I llama_new_context_with_model: flash_attn = 0
0.00.352.892 I llama_new_context_with_model: freq_base  = 10000.0
0.00.352.893 I llama_new_context_with_model: freq_scale = 1
0.00.382.645 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.382.660 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.382.752 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.383.611 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.383.618 I llama_new_context_with_model: graph nodes  = 601
0.00.383.618 I llama_new_context_with_model: graph splits = 1
0.00.383.620 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.479.316 I main: llama threadpool init, n_threads = 4
0.00.479.327 I 
0.00.479.406 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.479.409 I 
0.00.479.445 I sampler seed: 3996453350
0.00.479.455 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.479.457 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.479.457 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.479.457 I 
 increasities. [end of text]


0.00.781.568 I llama_perf_sampler_print:    sampling time =       0.63 ms /     5 runs   (    0.13 ms per token,  7898.89 tokens per second)
0.00.781.571 I llama_perf_context_print:        load time =     477.43 ms
0.00.781.572 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.781.573 I llama_perf_context_print:        eval time =     299.20 ms /     4 runs   (   74.80 ms per token,    13.37 tokens per second)
0.00.781.574 I llama_perf_context_print:       total time =     302.26 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.069s
user	0m28.012s
sys	0m9.452s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3919 (fde9b8d2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32198.27 ms
main:    total time = 32198.27 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.532 I build: 3919 (fde9b8d2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.732 I main: llama backend init
0.00.001.816 I main: load the model and apply lora adapter, if any
0.00.021.846 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.890 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.897 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.902 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.903 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.907 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.908 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.909 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.909 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.910 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.910 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.913 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.914 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.915 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.915 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.916 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.237 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.254 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.109 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.116 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.116 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.117 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.118 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.119 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.120 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.122 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.123 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.124 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.124 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.125 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.128 I llama_model_loader: - type  f32:   37 tensors
0.00.133.131 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.132 I llama_model_loader: - type q6_K:   19 tensors
0.00.209.880 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.237.959 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.239.073 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.242.434 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.249.060 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.568 I llm_load_vocab: special tokens cache size = 5
0.00.271.080 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.096 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.096 I llm_load_print_meta: arch             = gemma
0.00.271.097 I llm_load_print_meta: vocab type       = SPM
0.00.271.097 I llm_load_print_meta: n_vocab          = 256000
0.00.271.097 I llm_load_print_meta: n_merges         = 0
0.00.271.098 I llm_load_print_meta: vocab_only       = 0
0.00.271.098 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.098 I llm_load_print_meta: n_embd           = 2048
0.00.271.099 I llm_load_print_meta: n_layer          = 18
0.00.271.110 I llm_load_print_meta: n_head           = 8
0.00.271.111 I llm_load_print_meta: n_head_kv        = 1
0.00.271.112 I llm_load_print_meta: n_rot            = 256
0.00.271.112 I llm_load_print_meta: n_swa            = 0
0.00.271.113 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.113 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.115 I llm_load_print_meta: n_gqa            = 8
0.00.271.116 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.117 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.118 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.120 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.120 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.120 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.121 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.122 I llm_load_print_meta: n_ff             = 16384
0.00.271.123 I llm_load_print_meta: n_expert         = 0
0.00.271.123 I llm_load_print_meta: n_expert_used    = 0
0.00.271.126 I llm_load_print_meta: causal attn      = 1
0.00.271.127 I llm_load_print_meta: pooling type     = 0
0.00.271.127 I llm_load_print_meta: rope type        = 2
0.00.271.127 I llm_load_print_meta: rope scaling     = linear
0.00.271.128 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.129 I llm_load_print_meta: freq_scale_train = 1
0.00.271.129 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.130 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.130 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.130 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.130 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.131 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.131 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.131 I llm_load_print_meta: model type       = 2B
0.00.271.132 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.271.133 I llm_load_print_meta: model params     = 2.51 B
0.00.271.135 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.271.135 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.135 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.136 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.137 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.137 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.137 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.137 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.138 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.139 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.139 I llm_load_print_meta: max token length = 93
0.00.271.164 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.330.581 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.330.588 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.330.588 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.330.589 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.330.590 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.330.590 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.335.452 I llama_new_context_with_model: n_ctx      = 8192
0.00.335.459 I llama_new_context_with_model: n_batch    = 2048
0.00.335.460 I llama_new_context_with_model: n_ubatch   = 512
0.00.335.460 I llama_new_context_with_model: flash_attn = 0
0.00.335.462 I llama_new_context_with_model: freq_base  = 10000.0
0.00.335.463 I llama_new_context_with_model: freq_scale = 1
0.00.364.050 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.364.065 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.364.157 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.365.003 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.365.011 I llama_new_context_with_model: graph nodes  = 601
0.00.365.011 I llama_new_context_with_model: graph splits = 1
0.00.365.013 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.452.770 I main: llama threadpool init, n_threads = 4
0.00.452.785 I 
0.00.452.885 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.452.888 I 
0.00.452.934 I sampler seed: 108412905
0.00.452.944 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.452.947 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.452.948 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.452.949 I 
 squaRED SCREEN 

**Questions:**

1. What does the phrase "squared screen" mean?
2. What is the significance of the

0.02.045.469 I llama_perf_sampler_print:    sampling time =       4.81 ms /    33 runs   (    0.15 ms per token,  6857.86 tokens per second)
0.02.045.472 I llama_perf_context_print:        load time =     450.91 ms
0.02.045.473 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.045.475 I llama_perf_context_print:        eval time =    1575.38 ms /    32 runs   (   49.23 ms per token,    20.31 tokens per second)
0.02.045.475 I llama_perf_context_print:       total time =    1592.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3919 (fde9b8d2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32027.79 ms
main:    total time = 32027.80 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.524 I build: 3919 (fde9b8d2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.721 I main: llama backend init
0.00.001.847 I main: load the model and apply lora adapter, if any
0.00.022.104 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.116 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.122 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.123 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.126 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.127 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.128 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.129 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.130 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.130 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.134 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.134 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.135 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.135 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.136 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.915 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.275 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.154 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.160 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.161 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.162 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.163 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.163 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.164 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.166 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.167 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.171 I llama_model_loader: - type  f32:   37 tensors
0.00.133.173 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.174 I llama_model_loader: - type q6_K:   19 tensors
0.00.211.740 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.457 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.243.745 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.247.687 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.255.644 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.215 I llm_load_vocab: special tokens cache size = 5
0.00.277.217 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.236 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.237 I llm_load_print_meta: arch             = gemma
0.00.277.237 I llm_load_print_meta: vocab type       = SPM
0.00.277.238 I llm_load_print_meta: n_vocab          = 256000
0.00.277.238 I llm_load_print_meta: n_merges         = 0
0.00.277.239 I llm_load_print_meta: vocab_only       = 0
0.00.277.239 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.239 I llm_load_print_meta: n_embd           = 2048
0.00.277.239 I llm_load_print_meta: n_layer          = 18
0.00.277.252 I llm_load_print_meta: n_head           = 8
0.00.277.253 I llm_load_print_meta: n_head_kv        = 1
0.00.277.253 I llm_load_print_meta: n_rot            = 256
0.00.277.253 I llm_load_print_meta: n_swa            = 0
0.00.277.254 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.254 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.255 I llm_load_print_meta: n_gqa            = 8
0.00.277.256 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.257 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.258 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.259 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.259 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.260 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.260 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.261 I llm_load_print_meta: n_ff             = 16384
0.00.277.261 I llm_load_print_meta: n_expert         = 0
0.00.277.261 I llm_load_print_meta: n_expert_used    = 0
0.00.277.262 I llm_load_print_meta: causal attn      = 1
0.00.277.262 I llm_load_print_meta: pooling type     = 0
0.00.277.263 I llm_load_print_meta: rope type        = 2
0.00.277.263 I llm_load_print_meta: rope scaling     = linear
0.00.277.265 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.265 I llm_load_print_meta: freq_scale_train = 1
0.00.277.266 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.266 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.267 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.267 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.267 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.267 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.268 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.268 I llm_load_print_meta: model type       = 2B
0.00.277.269 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.277.269 I llm_load_print_meta: model params     = 2.51 B
0.00.277.270 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.277.271 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.271 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.271 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.272 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.272 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.272 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.273 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.273 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.273 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.274 I llm_load_print_meta: max token length = 93
0.00.277.298 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.335.183 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.340.181 I llama_new_context_with_model: n_ctx      = 8192
0.00.340.187 I llama_new_context_with_model: n_batch    = 2048
0.00.340.187 I llama_new_context_with_model: n_ubatch   = 512
0.00.340.188 I llama_new_context_with_model: flash_attn = 0
0.00.340.191 I llama_new_context_with_model: freq_base  = 10000.0
0.00.340.192 I llama_new_context_with_model: freq_scale = 1
0.00.371.531 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.371.546 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.371.645 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.372.487 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.372.494 I llama_new_context_with_model: graph nodes  = 601
0.00.372.495 I llama_new_context_with_model: graph splits = 1
0.00.372.497 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.505 I main: llama threadpool init, n_threads = 4
0.00.453.516 I 
0.00.453.592 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.453.596 I 
0.00.453.633 I sampler seed: 1549914624
0.00.453.641 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.644 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.453.644 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.453.645 I 
 seconary.

**Instructions:** Write a creative short story about a young girl who discovers a magical box in her attic.

Ava, a curious and adventurous

0.02.058.473 I llama_perf_sampler_print:    sampling time =       4.64 ms /    33 runs   (    0.14 ms per token,  7105.94 tokens per second)
0.02.058.475 I llama_perf_context_print:        load time =     451.64 ms
0.02.058.477 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.058.478 I llama_perf_context_print:        eval time =    1587.14 ms /    32 runs   (   49.60 ms per token,    20.16 tokens per second)
0.02.058.480 I llama_perf_context_print:       total time =    1604.97 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.463s
user	8m14.819s
sys	0m6.879s
