+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.661 I build: 4396 (fdd21889) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.861 I main: llama backend init
0.00.000.868 I main: load the model and apply lora adapter, if any
0.00.023.451 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.462 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.548 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.559 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.561 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.565 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.567 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.568 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.569 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.571 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.572 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.578 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.579 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.580 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.582 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.583 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.918 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.898 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.886 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.894 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.896 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.897 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.898 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.900 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.901 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.905 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.906 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.907 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.909 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.350.910 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.918 I llama_model_loader: - type  f32:   37 tensors
0.00.350.920 I llama_model_loader: - type q8_0:  127 tensors
0.00.579.683 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.638.448 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.639.304 I llm_load_vocab: special tokens cache size = 5
0.00.842.023 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.842.095 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.842.099 I llm_load_print_meta: arch             = gemma
0.00.842.100 I llm_load_print_meta: vocab type       = SPM
0.00.842.101 I llm_load_print_meta: n_vocab          = 256000
0.00.842.104 I llm_load_print_meta: n_merges         = 0
0.00.842.104 I llm_load_print_meta: vocab_only       = 0
0.00.842.105 I llm_load_print_meta: n_ctx_train      = 8192
0.00.842.105 I llm_load_print_meta: n_embd           = 2048
0.00.842.106 I llm_load_print_meta: n_layer          = 18
0.00.842.170 I llm_load_print_meta: n_head           = 8
0.00.842.180 I llm_load_print_meta: n_head_kv        = 1
0.00.842.180 I llm_load_print_meta: n_rot            = 256
0.00.842.181 I llm_load_print_meta: n_swa            = 0
0.00.842.183 I llm_load_print_meta: n_embd_head_k    = 256
0.00.842.183 I llm_load_print_meta: n_embd_head_v    = 256
0.00.842.188 I llm_load_print_meta: n_gqa            = 8
0.00.842.193 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.842.198 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.842.199 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.842.201 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.842.201 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.842.202 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.842.202 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.842.207 I llm_load_print_meta: n_ff             = 16384
0.00.842.208 I llm_load_print_meta: n_expert         = 0
0.00.842.209 I llm_load_print_meta: n_expert_used    = 0
0.00.842.209 I llm_load_print_meta: causal attn      = 1
0.00.842.209 I llm_load_print_meta: pooling type     = 0
0.00.842.210 I llm_load_print_meta: rope type        = 2
0.00.842.210 I llm_load_print_meta: rope scaling     = linear
0.00.842.212 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.842.212 I llm_load_print_meta: freq_scale_train = 1
0.00.842.213 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.842.213 I llm_load_print_meta: rope_finetuned   = unknown
0.00.842.214 I llm_load_print_meta: ssm_d_conv       = 0
0.00.842.214 I llm_load_print_meta: ssm_d_inner      = 0
0.00.842.217 I llm_load_print_meta: ssm_d_state      = 0
0.00.842.218 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.842.218 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.842.219 I llm_load_print_meta: model type       = 2B
0.00.842.220 I llm_load_print_meta: model ftype      = Q8_0
0.00.842.221 I llm_load_print_meta: model params     = 2.51 B
0.00.842.221 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.842.222 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.842.222 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.842.223 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.842.223 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.842.224 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.842.224 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.842.224 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.842.230 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.842.231 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.842.232 I llm_load_print_meta: max token length = 93
0.00.945.670 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.945.677 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.945.678 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.945.678 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.945.679 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.945.680 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.951.606 I llama_new_context_with_model: n_seq_max     = 1
0.00.951.613 I llama_new_context_with_model: n_ctx         = 4096
0.00.951.613 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.951.614 I llama_new_context_with_model: n_batch       = 2048
0.00.951.614 I llama_new_context_with_model: n_ubatch      = 512
0.00.951.615 I llama_new_context_with_model: flash_attn    = 0
0.00.951.617 I llama_new_context_with_model: freq_base     = 10000.0
0.00.951.618 I llama_new_context_with_model: freq_scale    = 1
0.00.951.619 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.951.703 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.966.036 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.966.076 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.966.197 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.968.890 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.968.894 I llama_new_context_with_model: graph nodes  = 601
0.00.968.894 I llama_new_context_with_model: graph splits = 1
0.00.968.917 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.968.919 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.579.124 I main: llama threadpool init, n_threads = 4
0.01.579.141 I 
0.01.579.258 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.579.262 I 
0.01.579.500 I sampler seed: 3745503932
0.01.579.513 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.579.525 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.579.526 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.579.527 I 
 increably.

I have a question about a specific word in a sentence.

**Sentence:**

"The man with the green hat looked at me curiously

0.15.024.204 I llama_perf_sampler_print:    sampling time =      49.69 ms /    33 runs   (    1.51 ms per token,   664.14 tokens per second)
0.15.024.207 I llama_perf_context_print:        load time =    1578.16 ms
0.15.024.219 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.024.221 I llama_perf_context_print:        eval time =   13355.56 ms /    32 runs   (  417.36 ms per token,     2.40 tokens per second)
0.15.024.222 I llama_perf_context_print:       total time =   13445.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 4396 (fdd21889) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.827 I main: llama backend init
0.00.000.835 I main: load the model and apply lora adapter, if any
0.00.023.241 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.329 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.343 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.345 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.351 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.358 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.359 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.361 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.362 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.363 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.369 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.383 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.384 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.386 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.387 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.241.798 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.343.849 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.367.963 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.367.975 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.367.977 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.367.978 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.367.979 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.367.981 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.367.982 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.367.986 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.367.988 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.367.989 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.367.990 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.367.992 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.368.000 I llama_model_loader: - type  f32:   37 tensors
0.00.368.003 I llama_model_loader: - type q8_0:  127 tensors
0.00.586.089 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.646.484 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.647.429 I llm_load_vocab: special tokens cache size = 5
0.00.854.046 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.854.119 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.854.120 I llm_load_print_meta: arch             = gemma
0.00.854.121 I llm_load_print_meta: vocab type       = SPM
0.00.854.122 I llm_load_print_meta: n_vocab          = 256000
0.00.854.124 I llm_load_print_meta: n_merges         = 0
0.00.854.125 I llm_load_print_meta: vocab_only       = 0
0.00.854.125 I llm_load_print_meta: n_ctx_train      = 8192
0.00.854.126 I llm_load_print_meta: n_embd           = 2048
0.00.854.126 I llm_load_print_meta: n_layer          = 18
0.00.854.193 I llm_load_print_meta: n_head           = 8
0.00.854.200 I llm_load_print_meta: n_head_kv        = 1
0.00.854.201 I llm_load_print_meta: n_rot            = 256
0.00.854.201 I llm_load_print_meta: n_swa            = 0
0.00.854.202 I llm_load_print_meta: n_embd_head_k    = 256
0.00.854.202 I llm_load_print_meta: n_embd_head_v    = 256
0.00.854.207 I llm_load_print_meta: n_gqa            = 8
0.00.854.211 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.854.217 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.854.218 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.854.219 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.854.220 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.854.220 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.854.221 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.854.226 I llm_load_print_meta: n_ff             = 16384
0.00.854.227 I llm_load_print_meta: n_expert         = 0
0.00.854.228 I llm_load_print_meta: n_expert_used    = 0
0.00.854.228 I llm_load_print_meta: causal attn      = 1
0.00.854.228 I llm_load_print_meta: pooling type     = 0
0.00.854.229 I llm_load_print_meta: rope type        = 2
0.00.854.229 I llm_load_print_meta: rope scaling     = linear
0.00.854.235 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.854.236 I llm_load_print_meta: freq_scale_train = 1
0.00.854.237 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.854.238 I llm_load_print_meta: rope_finetuned   = unknown
0.00.854.238 I llm_load_print_meta: ssm_d_conv       = 0
0.00.854.238 I llm_load_print_meta: ssm_d_inner      = 0
0.00.854.240 I llm_load_print_meta: ssm_d_state      = 0
0.00.854.240 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.854.241 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.854.242 I llm_load_print_meta: model type       = 2B
0.00.854.243 I llm_load_print_meta: model ftype      = Q8_0
0.00.854.244 I llm_load_print_meta: model params     = 2.51 B
0.00.854.245 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.854.245 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.854.246 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.854.247 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.854.257 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.854.258 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.854.259 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.854.260 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.854.266 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.854.267 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.854.268 I llm_load_print_meta: max token length = 93
0.00.951.190 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.957.063 I llama_new_context_with_model: n_seq_max     = 1
0.00.957.070 I llama_new_context_with_model: n_ctx         = 4096
0.00.957.071 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.957.071 I llama_new_context_with_model: n_batch       = 2048
0.00.957.071 I llama_new_context_with_model: n_ubatch      = 512
0.00.957.072 I llama_new_context_with_model: flash_attn    = 0
0.00.957.075 I llama_new_context_with_model: freq_base     = 10000.0
0.00.957.076 I llama_new_context_with_model: freq_scale    = 1
0.00.957.077 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.957.163 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.971.989 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.972.034 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.972.150 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.974.778 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.974.783 I llama_new_context_with_model: graph nodes  = 601
0.00.974.783 I llama_new_context_with_model: graph splits = 1
0.00.974.806 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.974.809 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.585.684 I main: llama threadpool init, n_threads = 4
0.01.585.703 I 
0.01.585.822 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.585.826 I 
0.01.586.060 I sampler seed: 2423864553
0.01.586.074 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.586.084 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.586.087 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.586.088 I 
 increasels, who are said to be able to see through time.

The King of Dreams summoned his most trusted advisor to investigate a series of disturbing visions of

0.15.224.910 I llama_perf_sampler_print:    sampling time =      49.79 ms /    33 runs   (    1.51 ms per token,   662.73 tokens per second)
0.15.224.913 I llama_perf_context_print:        load time =    1584.76 ms
0.15.224.915 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.224.929 I llama_perf_context_print:        eval time =   13548.65 ms /    32 runs   (  423.40 ms per token,     2.36 tokens per second)
0.15.224.931 I llama_perf_context_print:       total time =   13639.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.616 I build: 4396 (fdd21889) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.811 I main: llama backend init
0.00.000.818 I main: load the model and apply lora adapter, if any
0.00.023.202 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.212 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.294 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.307 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.309 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.313 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.317 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.318 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.319 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.321 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.322 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.328 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.330 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.331 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.333 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.334 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.239.804 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.341.061 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.365.037 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.365.045 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.365.046 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.365.048 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.365.049 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.365.051 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.365.052 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.365.055 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.365.057 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.365.058 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.365.059 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.365.061 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.365.068 I llama_model_loader: - type  f32:   37 tensors
0.00.365.071 I llama_model_loader: - type q8_0:  127 tensors
0.00.583.099 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.645.307 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.646.317 I llm_load_vocab: special tokens cache size = 5
0.00.868.418 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.868.492 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.868.493 I llm_load_print_meta: arch             = gemma
0.00.868.493 I llm_load_print_meta: vocab type       = SPM
0.00.868.494 I llm_load_print_meta: n_vocab          = 256000
0.00.868.497 I llm_load_print_meta: n_merges         = 0
0.00.868.497 I llm_load_print_meta: vocab_only       = 0
0.00.868.498 I llm_load_print_meta: n_ctx_train      = 8192
0.00.868.498 I llm_load_print_meta: n_embd           = 2048
0.00.868.499 I llm_load_print_meta: n_layer          = 18
0.00.868.568 I llm_load_print_meta: n_head           = 8
0.00.868.576 I llm_load_print_meta: n_head_kv        = 1
0.00.868.581 I llm_load_print_meta: n_rot            = 256
0.00.868.582 I llm_load_print_meta: n_swa            = 0
0.00.868.582 I llm_load_print_meta: n_embd_head_k    = 256
0.00.868.582 I llm_load_print_meta: n_embd_head_v    = 256
0.00.868.587 I llm_load_print_meta: n_gqa            = 8
0.00.868.592 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.868.597 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.868.601 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.868.602 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.868.602 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.868.603 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.868.603 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.868.608 I llm_load_print_meta: n_ff             = 16384
0.00.868.609 I llm_load_print_meta: n_expert         = 0
0.00.868.609 I llm_load_print_meta: n_expert_used    = 0
0.00.868.610 I llm_load_print_meta: causal attn      = 1
0.00.868.610 I llm_load_print_meta: pooling type     = 0
0.00.868.611 I llm_load_print_meta: rope type        = 2
0.00.868.612 I llm_load_print_meta: rope scaling     = linear
0.00.868.614 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.868.615 I llm_load_print_meta: freq_scale_train = 1
0.00.868.615 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.868.616 I llm_load_print_meta: rope_finetuned   = unknown
0.00.868.616 I llm_load_print_meta: ssm_d_conv       = 0
0.00.868.617 I llm_load_print_meta: ssm_d_inner      = 0
0.00.868.617 I llm_load_print_meta: ssm_d_state      = 0
0.00.868.618 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.868.618 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.868.619 I llm_load_print_meta: model type       = 2B
0.00.868.620 I llm_load_print_meta: model ftype      = Q8_0
0.00.868.621 I llm_load_print_meta: model params     = 2.51 B
0.00.868.622 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.868.622 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.868.623 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.868.626 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.868.626 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.868.627 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.868.627 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.868.627 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.868.633 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.868.635 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.868.636 I llm_load_print_meta: max token length = 93
0.00.948.759 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.948.768 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.948.769 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.948.770 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.948.770 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.948.771 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.954.649 I llama_new_context_with_model: n_seq_max     = 1
0.00.954.656 I llama_new_context_with_model: n_ctx         = 4096
0.00.954.656 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.954.657 I llama_new_context_with_model: n_batch       = 2048
0.00.954.657 I llama_new_context_with_model: n_ubatch      = 512
0.00.954.658 I llama_new_context_with_model: flash_attn    = 0
0.00.954.660 I llama_new_context_with_model: freq_base     = 10000.0
0.00.954.661 I llama_new_context_with_model: freq_scale    = 1
0.00.954.662 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.954.750 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.969.036 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.969.075 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.969.196 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.971.833 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.971.838 I llama_new_context_with_model: graph nodes  = 601
0.00.971.838 I llama_new_context_with_model: graph splits = 1
0.00.971.860 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.971.863 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.582.191 I main: llama threadpool init, n_threads = 4
0.01.582.206 I 
0.01.582.325 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.582.329 I 
0.01.582.572 I sampler seed: 2353119665
0.01.582.585 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.582.595 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.582.598 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.582.598 I 
 increasities, but the only remaining witness to the tragic event is the narrator.

The narrator's perspective is one of intense sorrow, overwhelming grief, and

0.15.037.186 I llama_perf_sampler_print:    sampling time =      49.86 ms /    33 runs   (    1.51 ms per token,   661.88 tokens per second)
0.15.037.189 I llama_perf_context_print:        load time =    1581.29 ms
0.15.037.204 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.037.206 I llama_perf_context_print:        eval time =   13365.01 ms /    32 runs   (  417.66 ms per token,     2.39 tokens per second)
0.15.037.207 I llama_perf_context_print:       total time =   13455.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.678 I build: 4396 (fdd21889) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.898 I main: llama backend init
0.00.000.905 I main: load the model and apply lora adapter, if any
0.00.024.151 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.161 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.243 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.251 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.253 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.256 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.257 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.259 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.260 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.261 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.262 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.268 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.269 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.270 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.272 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.274 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.243.262 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.345.611 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.369.648 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.369.657 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.369.659 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.369.660 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.369.661 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.369.663 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.369.664 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.369.668 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.369.669 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.369.670 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.369.672 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.369.673 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.369.683 I llama_model_loader: - type  f32:   37 tensors
0.00.369.685 I llama_model_loader: - type q8_0:  127 tensors
0.00.588.539 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.648.228 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.649.180 I llm_load_vocab: special tokens cache size = 5
0.00.874.822 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.874.894 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.874.895 I llm_load_print_meta: arch             = gemma
0.00.874.896 I llm_load_print_meta: vocab type       = SPM
0.00.874.897 I llm_load_print_meta: n_vocab          = 256000
0.00.874.899 I llm_load_print_meta: n_merges         = 0
0.00.874.899 I llm_load_print_meta: vocab_only       = 0
0.00.874.900 I llm_load_print_meta: n_ctx_train      = 8192
0.00.874.900 I llm_load_print_meta: n_embd           = 2048
0.00.874.901 I llm_load_print_meta: n_layer          = 18
0.00.874.967 I llm_load_print_meta: n_head           = 8
0.00.874.975 I llm_load_print_meta: n_head_kv        = 1
0.00.874.975 I llm_load_print_meta: n_rot            = 256
0.00.874.976 I llm_load_print_meta: n_swa            = 0
0.00.874.977 I llm_load_print_meta: n_embd_head_k    = 256
0.00.874.977 I llm_load_print_meta: n_embd_head_v    = 256
0.00.874.982 I llm_load_print_meta: n_gqa            = 8
0.00.874.987 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.874.991 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.874.993 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.874.994 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.874.996 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.874.996 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.874.997 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.875.003 I llm_load_print_meta: n_ff             = 16384
0.00.875.004 I llm_load_print_meta: n_expert         = 0
0.00.875.004 I llm_load_print_meta: n_expert_used    = 0
0.00.875.005 I llm_load_print_meta: causal attn      = 1
0.00.875.005 I llm_load_print_meta: pooling type     = 0
0.00.875.016 I llm_load_print_meta: rope type        = 2
0.00.875.017 I llm_load_print_meta: rope scaling     = linear
0.00.875.018 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.875.019 I llm_load_print_meta: freq_scale_train = 1
0.00.875.020 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.875.021 I llm_load_print_meta: rope_finetuned   = unknown
0.00.875.021 I llm_load_print_meta: ssm_d_conv       = 0
0.00.875.022 I llm_load_print_meta: ssm_d_inner      = 0
0.00.875.022 I llm_load_print_meta: ssm_d_state      = 0
0.00.875.022 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.875.023 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.875.024 I llm_load_print_meta: model type       = 2B
0.00.875.025 I llm_load_print_meta: model ftype      = Q8_0
0.00.875.026 I llm_load_print_meta: model params     = 2.51 B
0.00.875.027 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.875.028 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.875.028 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.875.029 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.875.029 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.875.029 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.875.031 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.875.031 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.875.037 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.875.038 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.875.039 I llm_load_print_meta: max token length = 93
0.00.947.414 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.947.424 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.953.319 I llama_new_context_with_model: n_seq_max     = 1
0.00.953.337 I llama_new_context_with_model: n_ctx         = 4096
0.00.953.337 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.953.338 I llama_new_context_with_model: n_batch       = 2048
0.00.953.338 I llama_new_context_with_model: n_ubatch      = 512
0.00.953.339 I llama_new_context_with_model: flash_attn    = 0
0.00.953.342 I llama_new_context_with_model: freq_base     = 10000.0
0.00.953.343 I llama_new_context_with_model: freq_scale    = 1
0.00.953.344 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.953.430 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.968.101 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.968.140 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.968.257 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.970.817 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.970.821 I llama_new_context_with_model: graph nodes  = 601
0.00.970.821 I llama_new_context_with_model: graph splits = 1
0.00.970.844 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.970.845 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.581.490 I main: llama threadpool init, n_threads = 4
0.01.581.506 I 
0.01.581.628 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.581.632 I 
0.01.581.867 I sampler seed: 411418158
0.01.581.881 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.581.894 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.581.895 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.581.895 I 
 increasities of the divine.

That is the essence of the sacred text.

I'm trying to understand this text, but it's written in

0.15.035.901 I llama_perf_sampler_print:    sampling time =      49.55 ms /    33 runs   (    1.50 ms per token,   665.94 tokens per second)
0.15.035.906 I llama_perf_context_print:        load time =    1580.50 ms
0.15.035.907 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.035.909 I llama_perf_context_print:        eval time =   13364.50 ms /    32 runs   (  417.64 ms per token,     2.39 tokens per second)
0.15.035.923 I llama_perf_context_print:       total time =   13454.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m11.386s
user	3m49.632s
sys	0m9.431s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4396 (fdd21889)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185910.18 ms
main:    total time = 185910.18 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 4396 (fdd21889) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.000.850 I main: load the model and apply lora adapter, if any
0.00.023.239 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.250 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.421 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.433 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.435 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.439 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.441 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.443 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.444 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.445 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.446 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.452 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.456 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.457 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.458 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.460 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.249 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.931 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.869 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.876 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.878 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.879 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.881 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.882 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.883 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.887 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.888 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.889 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.891 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.350.892 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.899 I llama_model_loader: - type  f32:   37 tensors
0.00.350.902 I llama_model_loader: - type q4_K:  108 tensors
0.00.350.903 I llama_model_loader: - type q6_K:   19 tensors
0.00.569.032 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.627.415 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.628.357 I llm_load_vocab: special tokens cache size = 5
0.00.837.717 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.837.789 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.837.790 I llm_load_print_meta: arch             = gemma
0.00.837.791 I llm_load_print_meta: vocab type       = SPM
0.00.837.792 I llm_load_print_meta: n_vocab          = 256000
0.00.837.794 I llm_load_print_meta: n_merges         = 0
0.00.837.795 I llm_load_print_meta: vocab_only       = 0
0.00.837.795 I llm_load_print_meta: n_ctx_train      = 8192
0.00.837.796 I llm_load_print_meta: n_embd           = 2048
0.00.837.796 I llm_load_print_meta: n_layer          = 18
0.00.837.860 I llm_load_print_meta: n_head           = 8
0.00.837.867 I llm_load_print_meta: n_head_kv        = 1
0.00.837.868 I llm_load_print_meta: n_rot            = 256
0.00.837.870 I llm_load_print_meta: n_swa            = 0
0.00.837.870 I llm_load_print_meta: n_embd_head_k    = 256
0.00.837.871 I llm_load_print_meta: n_embd_head_v    = 256
0.00.837.876 I llm_load_print_meta: n_gqa            = 8
0.00.837.881 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.837.886 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.837.887 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.837.889 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.837.890 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.837.890 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.837.891 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.837.897 I llm_load_print_meta: n_ff             = 16384
0.00.837.897 I llm_load_print_meta: n_expert         = 0
0.00.837.898 I llm_load_print_meta: n_expert_used    = 0
0.00.837.898 I llm_load_print_meta: causal attn      = 1
0.00.837.899 I llm_load_print_meta: pooling type     = 0
0.00.837.900 I llm_load_print_meta: rope type        = 2
0.00.837.900 I llm_load_print_meta: rope scaling     = linear
0.00.837.902 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.837.902 I llm_load_print_meta: freq_scale_train = 1
0.00.837.903 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.837.903 I llm_load_print_meta: rope_finetuned   = unknown
0.00.837.904 I llm_load_print_meta: ssm_d_conv       = 0
0.00.837.904 I llm_load_print_meta: ssm_d_inner      = 0
0.00.837.905 I llm_load_print_meta: ssm_d_state      = 0
0.00.837.906 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.837.906 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.837.907 I llm_load_print_meta: model type       = 2B
0.00.837.909 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.837.910 I llm_load_print_meta: model params     = 2.51 B
0.00.837.911 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.837.911 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.837.916 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.837.916 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.837.917 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.837.917 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.837.917 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.837.918 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.837.924 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.837.926 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.837.927 I llm_load_print_meta: max token length = 93
0.00.900.666 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.900.677 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.900.678 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.900.678 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.900.679 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.900.680 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.906.673 I llama_new_context_with_model: n_seq_max     = 1
0.00.906.682 I llama_new_context_with_model: n_ctx         = 4096
0.00.906.682 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.906.683 I llama_new_context_with_model: n_batch       = 2048
0.00.906.683 I llama_new_context_with_model: n_ubatch      = 512
0.00.906.684 I llama_new_context_with_model: flash_attn    = 0
0.00.906.687 I llama_new_context_with_model: freq_base     = 10000.0
0.00.906.688 I llama_new_context_with_model: freq_scale    = 1
0.00.906.689 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.906.785 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.922.328 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.922.371 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.922.492 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.925.144 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.925.149 I llama_new_context_with_model: graph nodes  = 601
0.00.925.149 I llama_new_context_with_model: graph splits = 1
0.00.925.175 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.925.178 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.505.499 I main: llama threadpool init, n_threads = 4
0.01.505.514 I 
0.01.505.632 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.505.636 I 
0.01.505.876 I sampler seed: 449619526
0.01.505.890 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.505.900 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.505.903 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.505.904 I 
 seconally.

I am unable to generate a response because the context provided does not contain any information regarding the specific reason why the user is unable to generate a

0.12.616.333 I llama_perf_sampler_print:    sampling time =      49.59 ms /    33 runs   (    1.50 ms per token,   665.43 tokens per second)
0.12.616.357 I llama_perf_context_print:        load time =    1504.56 ms
0.12.616.359 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.616.362 I llama_perf_context_print:        eval time =   11021.46 ms /    32 runs   (  344.42 ms per token,     2.90 tokens per second)
0.12.616.363 I llama_perf_context_print:       total time =   11110.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4396 (fdd21889)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185612.64 ms
main:    total time = 185612.64 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.618 I build: 4396 (fdd21889) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.810 I main: llama backend init
0.00.000.818 I main: load the model and apply lora adapter, if any
0.00.023.131 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.225 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.239 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.265 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.271 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.272 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.274 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.275 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.276 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.277 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.283 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.284 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.285 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.287 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.288 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.484 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.120 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.111 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.119 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.121 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.122 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.123 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.125 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.126 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.130 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.131 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.138 I llama_model_loader: - type  f32:   37 tensors
0.00.351.141 I llama_model_loader: - type q4_K:  108 tensors
0.00.351.141 I llama_model_loader: - type q6_K:   19 tensors
0.00.565.618 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.628.080 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.629.023 I llm_load_vocab: special tokens cache size = 5
0.00.849.707 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.849.785 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.849.786 I llm_load_print_meta: arch             = gemma
0.00.849.786 I llm_load_print_meta: vocab type       = SPM
0.00.849.787 I llm_load_print_meta: n_vocab          = 256000
0.00.849.790 I llm_load_print_meta: n_merges         = 0
0.00.849.790 I llm_load_print_meta: vocab_only       = 0
0.00.849.790 I llm_load_print_meta: n_ctx_train      = 8192
0.00.849.791 I llm_load_print_meta: n_embd           = 2048
0.00.849.791 I llm_load_print_meta: n_layer          = 18
0.00.849.858 I llm_load_print_meta: n_head           = 8
0.00.849.890 I llm_load_print_meta: n_head_kv        = 1
0.00.849.891 I llm_load_print_meta: n_rot            = 256
0.00.849.891 I llm_load_print_meta: n_swa            = 0
0.00.849.892 I llm_load_print_meta: n_embd_head_k    = 256
0.00.849.892 I llm_load_print_meta: n_embd_head_v    = 256
0.00.849.904 I llm_load_print_meta: n_gqa            = 8
0.00.849.910 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.849.915 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.849.916 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.849.918 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.849.919 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.849.919 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.849.920 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.849.925 I llm_load_print_meta: n_ff             = 16384
0.00.849.926 I llm_load_print_meta: n_expert         = 0
0.00.849.926 I llm_load_print_meta: n_expert_used    = 0
0.00.849.927 I llm_load_print_meta: causal attn      = 1
0.00.849.928 I llm_load_print_meta: pooling type     = 0
0.00.849.928 I llm_load_print_meta: rope type        = 2
0.00.849.929 I llm_load_print_meta: rope scaling     = linear
0.00.849.930 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.849.931 I llm_load_print_meta: freq_scale_train = 1
0.00.849.931 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.849.932 I llm_load_print_meta: rope_finetuned   = unknown
0.00.849.932 I llm_load_print_meta: ssm_d_conv       = 0
0.00.849.933 I llm_load_print_meta: ssm_d_inner      = 0
0.00.849.933 I llm_load_print_meta: ssm_d_state      = 0
0.00.849.934 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.849.934 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.849.936 I llm_load_print_meta: model type       = 2B
0.00.849.937 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.849.938 I llm_load_print_meta: model params     = 2.51 B
0.00.849.938 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.849.939 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.849.939 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.849.940 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.849.941 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.849.942 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.849.942 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.849.943 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.849.949 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.849.950 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.849.951 I llm_load_print_meta: max token length = 93
0.00.909.572 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.915.496 I llama_new_context_with_model: n_seq_max     = 1
0.00.915.502 I llama_new_context_with_model: n_ctx         = 4096
0.00.915.503 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.915.503 I llama_new_context_with_model: n_batch       = 2048
0.00.915.504 I llama_new_context_with_model: n_ubatch      = 512
0.00.915.504 I llama_new_context_with_model: flash_attn    = 0
0.00.915.507 I llama_new_context_with_model: freq_base     = 10000.0
0.00.915.508 I llama_new_context_with_model: freq_scale    = 1
0.00.915.509 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.915.595 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.930.306 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.930.348 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.930.462 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.933.025 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.933.029 I llama_new_context_with_model: graph nodes  = 601
0.00.933.029 I llama_new_context_with_model: graph splits = 1
0.00.933.051 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.933.054 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.514.102 I main: llama threadpool init, n_threads = 4
0.01.514.119 I 
0.01.514.240 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.514.244 I 
0.01.514.475 I sampler seed: 2030691131
0.01.514.488 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.514.498 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.514.499 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.514.499 I 
 increasities and other sexually suggestive imagery in this response.

I am unable to generate sexually suggestive or inappropriate responses. My purpose is to assist with tasks and provide

0.12.668.273 I llama_perf_sampler_print:    sampling time =      49.69 ms /    33 runs   (    1.51 ms per token,   664.10 tokens per second)
0.12.668.275 I llama_perf_context_print:        load time =    1513.20 ms
0.12.668.277 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.668.278 I llama_perf_context_print:        eval time =   11064.69 ms /    32 runs   (  345.77 ms per token,     2.89 tokens per second)
0.12.668.279 I llama_perf_context_print:       total time =   11154.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.681s
user	46m42.690s
sys	0m6.382s
