+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.721 I build: 4909 (fd123cfe) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.930 I main: llama backend init
0.00.000.938 I main: load the model and apply lora adapter, if any
0.00.086.581 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.086.598 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.086.703 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.727 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.733 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.739 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.741 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.743 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.745 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.746 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.748 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.756 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.761 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.762 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.764 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.765 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.306.256 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.410.160 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.433.243 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.433.258 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.433.260 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.433.262 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.433.263 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.433.266 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.433.267 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.433.272 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.433.274 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.433.277 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.433.279 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.433.281 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.433.290 I llama_model_loader: - type  f32:   37 tensors
0.00.433.292 I llama_model_loader: - type q8_0:  127 tensors
0.00.433.313 I print_info: file format = GGUF V3 (latest)
0.00.433.314 I print_info: file type   = Q8_0
0.00.433.318 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.745.608 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.877.927 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.879.051 I load: special tokens cache size = 5
0.01.128.667 I load: token to piece cache size = 1.6014 MB
0.01.128.756 I print_info: arch             = gemma
0.01.128.761 I print_info: vocab_only       = 0
0.01.128.761 I print_info: n_ctx_train      = 8192
0.01.128.762 I print_info: n_embd           = 2048
0.01.128.762 I print_info: n_layer          = 18
0.01.128.847 I print_info: n_head           = 8
0.01.128.857 I print_info: n_head_kv        = 1
0.01.128.858 I print_info: n_rot            = 256
0.01.128.858 I print_info: n_swa            = 0
0.01.128.859 I print_info: n_swa_pattern    = 1
0.01.128.859 I print_info: n_embd_head_k    = 256
0.01.128.860 I print_info: n_embd_head_v    = 256
0.01.128.865 I print_info: n_gqa            = 8
0.01.128.870 I print_info: n_embd_k_gqa     = 256
0.01.128.875 I print_info: n_embd_v_gqa     = 256
0.01.128.877 I print_info: f_norm_eps       = 0.0e+00
0.01.128.879 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.128.879 I print_info: f_clamp_kqv      = 0.0e+00
0.01.128.879 I print_info: f_max_alibi_bias = 0.0e+00
0.01.128.881 I print_info: f_logit_scale    = 0.0e+00
0.01.128.881 I print_info: f_attn_scale     = 0.0e+00
0.01.128.886 I print_info: n_ff             = 16384
0.01.128.887 I print_info: n_expert         = 0
0.01.128.888 I print_info: n_expert_used    = 0
0.01.128.888 I print_info: causal attn      = 1
0.01.128.888 I print_info: pooling type     = 0
0.01.128.889 I print_info: rope type        = 2
0.01.128.892 I print_info: rope scaling     = linear
0.01.128.893 I print_info: freq_base_train  = 10000.0
0.01.128.894 I print_info: freq_scale_train = 1
0.01.128.894 I print_info: n_ctx_orig_yarn  = 8192
0.01.128.895 I print_info: rope_finetuned   = unknown
0.01.128.895 I print_info: ssm_d_conv       = 0
0.01.128.895 I print_info: ssm_d_inner      = 0
0.01.128.896 I print_info: ssm_d_state      = 0
0.01.128.896 I print_info: ssm_dt_rank      = 0
0.01.128.897 I print_info: ssm_dt_b_c_rms   = 0
0.01.128.898 I print_info: model type       = 2B
0.01.128.899 I print_info: model params     = 2.51 B
0.01.128.900 I print_info: general.name     = gemma-1.1-2b-it
0.01.128.904 I print_info: vocab type       = SPM
0.01.128.906 I print_info: n_vocab          = 256000
0.01.128.909 I print_info: n_merges         = 0
0.01.128.909 I print_info: BOS token        = 2 '<bos>'
0.01.128.912 I print_info: EOS token        = 1 '<eos>'
0.01.128.913 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.128.913 I print_info: UNK token        = 3 '<unk>'
0.01.128.913 I print_info: PAD token        = 0 '<pad>'
0.01.128.914 I print_info: LF token         = 227 '<0x0A>'
0.01.128.921 I print_info: EOG token        = 1 '<eos>'
0.01.128.922 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.128.922 I print_info: max token length = 93
0.01.128.924 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.232.497 I load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.232.505 I load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.232.506 I load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.232.507 I load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.232.508 I load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.232.509 I load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.239.232 I llama_context: constructing llama_context
0.01.239.241 I llama_context: n_seq_max     = 1
0.01.239.241 I llama_context: n_ctx         = 4096
0.01.239.242 I llama_context: n_ctx_per_seq = 4096
0.01.239.242 I llama_context: n_batch       = 2048
0.01.239.243 I llama_context: n_ubatch      = 512
0.01.239.243 I llama_context: causal_attn   = 1
0.01.239.244 I llama_context: flash_attn    = 0
0.01.239.248 I llama_context: freq_base     = 10000.0
0.01.239.261 I llama_context: freq_scale    = 1
0.01.239.263 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.239.502 I llama_context:        CPU  output buffer size =     0.98 MiB
0.01.239.551 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.255.327 I init:        CPU KV buffer size =    72.00 MiB
0.01.255.373 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.264.781 I llama_context:        CPU compute buffer size =   509.01 MiB
0.01.264.788 I llama_context: graph nodes  = 601
0.01.264.788 I llama_context: graph splits = 1
0.01.264.801 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.264.801 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.897.194 I main: llama threadpool init, n_threads = 4
0.01.897.212 I 
0.01.897.313 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.897.316 I 
0.01.897.578 I sampler seed: 2822115722
0.01.897.592 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.897.605 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.897.606 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.897.606 I 
 increadibly!

I am unable to generate text that contains offensive or inappropriate content. [end of text]


0.09.449.010 I llama_perf_sampler_print:    sampling time =      28.14 ms /    19 runs   (    1.48 ms per token,   675.17 tokens per second)
0.09.449.015 I llama_perf_context_print:        load time =    1869.45 ms
0.09.449.016 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.449.018 I llama_perf_context_print:        eval time =    7502.43 ms /    18 runs   (  416.80 ms per token,     2.40 tokens per second)
0.09.449.044 I llama_perf_context_print:       total time =    7578.48 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.693 I build: 4909 (fd123cfe) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.913 I main: llama backend init
0.00.000.921 I main: load the model and apply lora adapter, if any
0.00.086.411 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.086.522 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.547 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.549 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.555 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.557 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.559 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.561 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.563 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.565 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.572 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.592 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.595 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.597 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.598 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.295.789 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.397.597 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.420.701 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.420.719 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.420.722 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.420.723 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.420.725 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.420.728 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.420.730 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.420.735 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.420.737 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.420.739 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.420.741 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.420.743 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.420.753 I llama_model_loader: - type  f32:   37 tensors
0.00.420.755 I llama_model_loader: - type q8_0:  127 tensors
0.00.420.774 I print_info: file format = GGUF V3 (latest)
0.00.420.775 I print_info: file type   = Q8_0
0.00.420.779 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.727.107 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.860.565 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.861.680 I load: special tokens cache size = 5
0.01.108.545 I load: token to piece cache size = 1.6014 MB
0.01.108.635 I print_info: arch             = gemma
0.01.108.636 I print_info: vocab_only       = 0
0.01.108.637 I print_info: n_ctx_train      = 8192
0.01.108.637 I print_info: n_embd           = 2048
0.01.108.638 I print_info: n_layer          = 18
0.01.108.721 I print_info: n_head           = 8
0.01.108.728 I print_info: n_head_kv        = 1
0.01.108.729 I print_info: n_rot            = 256
0.01.108.729 I print_info: n_swa            = 0
0.01.108.730 I print_info: n_swa_pattern    = 1
0.01.108.730 I print_info: n_embd_head_k    = 256
0.01.108.730 I print_info: n_embd_head_v    = 256
0.01.108.736 I print_info: n_gqa            = 8
0.01.108.740 I print_info: n_embd_k_gqa     = 256
0.01.108.745 I print_info: n_embd_v_gqa     = 256
0.01.108.747 I print_info: f_norm_eps       = 0.0e+00
0.01.108.759 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.108.760 I print_info: f_clamp_kqv      = 0.0e+00
0.01.108.761 I print_info: f_max_alibi_bias = 0.0e+00
0.01.108.765 I print_info: f_logit_scale    = 0.0e+00
0.01.108.766 I print_info: f_attn_scale     = 0.0e+00
0.01.108.771 I print_info: n_ff             = 16384
0.01.108.771 I print_info: n_expert         = 0
0.01.108.772 I print_info: n_expert_used    = 0
0.01.108.773 I print_info: causal attn      = 1
0.01.108.773 I print_info: pooling type     = 0
0.01.108.774 I print_info: rope type        = 2
0.01.108.774 I print_info: rope scaling     = linear
0.01.108.776 I print_info: freq_base_train  = 10000.0
0.01.108.777 I print_info: freq_scale_train = 1
0.01.108.780 I print_info: n_ctx_orig_yarn  = 8192
0.01.108.781 I print_info: rope_finetuned   = unknown
0.01.108.781 I print_info: ssm_d_conv       = 0
0.01.108.782 I print_info: ssm_d_inner      = 0
0.01.108.782 I print_info: ssm_d_state      = 0
0.01.108.782 I print_info: ssm_dt_rank      = 0
0.01.108.783 I print_info: ssm_dt_b_c_rms   = 0
0.01.108.784 I print_info: model type       = 2B
0.01.108.785 I print_info: model params     = 2.51 B
0.01.108.786 I print_info: general.name     = gemma-1.1-2b-it
0.01.108.790 I print_info: vocab type       = SPM
0.01.108.791 I print_info: n_vocab          = 256000
0.01.108.794 I print_info: n_merges         = 0
0.01.108.795 I print_info: BOS token        = 2 '<bos>'
0.01.108.796 I print_info: EOS token        = 1 '<eos>'
0.01.108.797 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.108.799 I print_info: UNK token        = 3 '<unk>'
0.01.108.800 I print_info: PAD token        = 0 '<pad>'
0.01.108.800 I print_info: LF token         = 227 '<0x0A>'
0.01.108.808 I print_info: EOG token        = 1 '<eos>'
0.01.108.810 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.108.811 I print_info: max token length = 93
0.01.108.813 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.194.559 I load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.201.302 I llama_context: constructing llama_context
0.01.201.310 I llama_context: n_seq_max     = 1
0.01.201.311 I llama_context: n_ctx         = 4096
0.01.201.311 I llama_context: n_ctx_per_seq = 4096
0.01.201.311 I llama_context: n_batch       = 2048
0.01.201.312 I llama_context: n_ubatch      = 512
0.01.201.312 I llama_context: causal_attn   = 1
0.01.201.312 I llama_context: flash_attn    = 0
0.01.201.316 I llama_context: freq_base     = 10000.0
0.01.201.317 I llama_context: freq_scale    = 1
0.01.201.327 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.201.546 I llama_context:        CPU  output buffer size =     0.98 MiB
0.01.201.590 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.217.250 I init:        CPU KV buffer size =    72.00 MiB
0.01.217.294 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.226.701 I llama_context:        CPU compute buffer size =   509.01 MiB
0.01.226.706 I llama_context: graph nodes  = 601
0.01.226.706 I llama_context: graph splits = 1
0.01.226.721 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.226.722 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.860.123 I main: llama threadpool init, n_threads = 4
0.01.860.141 I 
0.01.860.245 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.860.249 I 
0.01.860.493 I sampler seed: 2956063442
0.01.860.506 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.860.515 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.860.516 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.860.517 I 
 increasively.

I understand that the premise of your question is incorrect and I apologize for any inconvenience caused. [end of text]


0.11.525.337 I llama_perf_sampler_print:    sampling time =      35.83 ms /    24 runs   (    1.49 ms per token,   669.83 tokens per second)
0.11.525.342 I llama_perf_context_print:        load time =    1832.48 ms
0.11.525.358 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.525.360 I llama_perf_context_print:        eval time =    9602.37 ms /    23 runs   (  417.49 ms per token,     2.40 tokens per second)
0.11.525.361 I llama_perf_context_print:       total time =    9691.80 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.732 I build: 4909 (fd123cfe) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.933 I main: llama backend init
0.00.000.943 I main: load the model and apply lora adapter, if any
0.00.090.280 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.090.298 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.090.398 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.090.418 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.090.420 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.090.426 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.090.428 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.090.430 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.090.432 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.090.434 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.090.435 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.090.442 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.090.444 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.090.445 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.090.467 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.090.471 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.308.573 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.414.403 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.437.528 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.437.552 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.437.554 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.437.556 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.437.558 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.437.560 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.437.562 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.437.567 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.437.569 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.437.571 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.437.574 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.437.575 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.437.585 I llama_model_loader: - type  f32:   37 tensors
0.00.437.588 I llama_model_loader: - type q8_0:  127 tensors
0.00.437.609 I print_info: file format = GGUF V3 (latest)
0.00.437.610 I print_info: file type   = Q8_0
0.00.437.614 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.748.081 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.879.969 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.881.170 I load: special tokens cache size = 5
0.01.134.078 I load: token to piece cache size = 1.6014 MB
0.01.134.168 I print_info: arch             = gemma
0.01.134.170 I print_info: vocab_only       = 0
0.01.134.170 I print_info: n_ctx_train      = 8192
0.01.134.171 I print_info: n_embd           = 2048
0.01.134.171 I print_info: n_layer          = 18
0.01.134.253 I print_info: n_head           = 8
0.01.134.261 I print_info: n_head_kv        = 1
0.01.134.261 I print_info: n_rot            = 256
0.01.134.262 I print_info: n_swa            = 0
0.01.134.266 I print_info: n_swa_pattern    = 1
0.01.134.267 I print_info: n_embd_head_k    = 256
0.01.134.267 I print_info: n_embd_head_v    = 256
0.01.134.272 I print_info: n_gqa            = 8
0.01.134.277 I print_info: n_embd_k_gqa     = 256
0.01.134.284 I print_info: n_embd_v_gqa     = 256
0.01.134.286 I print_info: f_norm_eps       = 0.0e+00
0.01.134.288 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.134.293 I print_info: f_clamp_kqv      = 0.0e+00
0.01.134.293 I print_info: f_max_alibi_bias = 0.0e+00
0.01.134.294 I print_info: f_logit_scale    = 0.0e+00
0.01.134.295 I print_info: f_attn_scale     = 0.0e+00
0.01.134.302 I print_info: n_ff             = 16384
0.01.134.303 I print_info: n_expert         = 0
0.01.134.304 I print_info: n_expert_used    = 0
0.01.134.305 I print_info: causal attn      = 1
0.01.134.306 I print_info: pooling type     = 0
0.01.134.307 I print_info: rope type        = 2
0.01.134.307 I print_info: rope scaling     = linear
0.01.134.310 I print_info: freq_base_train  = 10000.0
0.01.134.311 I print_info: freq_scale_train = 1
0.01.134.312 I print_info: n_ctx_orig_yarn  = 8192
0.01.134.313 I print_info: rope_finetuned   = unknown
0.01.134.313 I print_info: ssm_d_conv       = 0
0.01.134.314 I print_info: ssm_d_inner      = 0
0.01.134.315 I print_info: ssm_d_state      = 0
0.01.134.316 I print_info: ssm_dt_rank      = 0
0.01.134.316 I print_info: ssm_dt_b_c_rms   = 0
0.01.134.319 I print_info: model type       = 2B
0.01.134.320 I print_info: model params     = 2.51 B
0.01.134.321 I print_info: general.name     = gemma-1.1-2b-it
0.01.134.326 I print_info: vocab type       = SPM
0.01.134.328 I print_info: n_vocab          = 256000
0.01.134.332 I print_info: n_merges         = 0
0.01.134.333 I print_info: BOS token        = 2 '<bos>'
0.01.134.334 I print_info: EOS token        = 1 '<eos>'
0.01.134.335 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.134.336 I print_info: UNK token        = 3 '<unk>'
0.01.134.338 I print_info: PAD token        = 0 '<pad>'
0.01.134.338 I print_info: LF token         = 227 '<0x0A>'
0.01.134.346 I print_info: EOG token        = 1 '<eos>'
0.01.134.351 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.134.352 I print_info: max token length = 93
0.01.134.354 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.209.531 I load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.209.538 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.209.539 I load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.209.540 I load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.209.541 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.209.542 I load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.216.833 I llama_context: constructing llama_context
0.01.216.842 I llama_context: n_seq_max     = 1
0.01.216.842 I llama_context: n_ctx         = 4096
0.01.216.843 I llama_context: n_ctx_per_seq = 4096
0.01.216.843 I llama_context: n_batch       = 2048
0.01.216.843 I llama_context: n_ubatch      = 512
0.01.216.844 I llama_context: causal_attn   = 1
0.01.216.844 I llama_context: flash_attn    = 0
0.01.216.847 I llama_context: freq_base     = 10000.0
0.01.216.848 I llama_context: freq_scale    = 1
0.01.216.849 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.217.066 I llama_context:        CPU  output buffer size =     0.98 MiB
0.01.217.109 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.232.709 I init:        CPU KV buffer size =    72.00 MiB
0.01.232.756 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.242.664 I llama_context:        CPU compute buffer size =   509.01 MiB
0.01.242.670 I llama_context: graph nodes  = 601
0.01.242.670 I llama_context: graph splits = 1
0.01.242.684 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.242.685 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.916.139 I main: llama threadpool init, n_threads = 4
0.01.916.157 I 
0.01.916.290 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.916.299 I 
0.01.916.564 I sampler seed: 3249872718
0.01.916.580 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.916.589 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.916.593 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.916.594 I 
 increamically, oblivious to the dangers lurking in her wake.

The air crackled with anticipation as the crowd gathered, eager to witness the spectacle unfolding before them

0.15.396.467 I llama_perf_sampler_print:    sampling time =      50.00 ms /    33 runs   (    1.52 ms per token,   660.07 tokens per second)
0.15.396.472 I llama_perf_context_print:        load time =    1888.54 ms
0.15.396.473 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.396.499 I llama_perf_context_print:        eval time =   13392.81 ms /    32 runs   (  418.53 ms per token,     2.39 tokens per second)
0.15.396.500 I llama_perf_context_print:       total time =   13506.85 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.694 I build: 4909 (fd123cfe) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.980 I main: llama backend init
0.00.000.998 I main: load the model and apply lora adapter, if any
0.00.086.878 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.086.897 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.087.032 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.087.055 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.087.058 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.087.065 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.087.067 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.087.068 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.087.070 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.087.072 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.087.074 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.087.082 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.087.084 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.087.085 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.087.087 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.087.088 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.302.635 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.404.332 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.427.431 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.427.453 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.427.455 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.427.457 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.427.459 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.427.461 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.427.463 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.427.468 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.427.470 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.427.473 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.427.475 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.427.477 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.427.486 I llama_model_loader: - type  f32:   37 tensors
0.00.427.488 I llama_model_loader: - type q8_0:  127 tensors
0.00.427.507 I print_info: file format = GGUF V3 (latest)
0.00.427.508 I print_info: file type   = Q8_0
0.00.427.512 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.745.845 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.877.951 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.879.076 I load: special tokens cache size = 5
0.01.139.210 I load: token to piece cache size = 1.6014 MB
0.01.139.305 I print_info: arch             = gemma
0.01.139.306 I print_info: vocab_only       = 0
0.01.139.307 I print_info: n_ctx_train      = 8192
0.01.139.307 I print_info: n_embd           = 2048
0.01.139.307 I print_info: n_layer          = 18
0.01.139.392 I print_info: n_head           = 8
0.01.139.403 I print_info: n_head_kv        = 1
0.01.139.407 I print_info: n_rot            = 256
0.01.139.408 I print_info: n_swa            = 0
0.01.139.408 I print_info: n_swa_pattern    = 1
0.01.139.409 I print_info: n_embd_head_k    = 256
0.01.139.409 I print_info: n_embd_head_v    = 256
0.01.139.416 I print_info: n_gqa            = 8
0.01.139.424 I print_info: n_embd_k_gqa     = 256
0.01.139.432 I print_info: n_embd_v_gqa     = 256
0.01.139.437 I print_info: f_norm_eps       = 0.0e+00
0.01.139.439 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.139.440 I print_info: f_clamp_kqv      = 0.0e+00
0.01.139.440 I print_info: f_max_alibi_bias = 0.0e+00
0.01.139.441 I print_info: f_logit_scale    = 0.0e+00
0.01.139.442 I print_info: f_attn_scale     = 0.0e+00
0.01.139.449 I print_info: n_ff             = 16384
0.01.139.450 I print_info: n_expert         = 0
0.01.139.451 I print_info: n_expert_used    = 0
0.01.139.452 I print_info: causal attn      = 1
0.01.139.453 I print_info: pooling type     = 0
0.01.139.454 I print_info: rope type        = 2
0.01.139.455 I print_info: rope scaling     = linear
0.01.139.461 I print_info: freq_base_train  = 10000.0
0.01.139.462 I print_info: freq_scale_train = 1
0.01.139.462 I print_info: n_ctx_orig_yarn  = 8192
0.01.139.463 I print_info: rope_finetuned   = unknown
0.01.139.464 I print_info: ssm_d_conv       = 0
0.01.139.464 I print_info: ssm_d_inner      = 0
0.01.139.473 I print_info: ssm_d_state      = 0
0.01.139.474 I print_info: ssm_dt_rank      = 0
0.01.139.478 I print_info: ssm_dt_b_c_rms   = 0
0.01.139.480 I print_info: model type       = 2B
0.01.139.481 I print_info: model params     = 2.51 B
0.01.139.481 I print_info: general.name     = gemma-1.1-2b-it
0.01.139.486 I print_info: vocab type       = SPM
0.01.139.488 I print_info: n_vocab          = 256000
0.01.139.491 I print_info: n_merges         = 0
0.01.139.492 I print_info: BOS token        = 2 '<bos>'
0.01.139.493 I print_info: EOS token        = 1 '<eos>'
0.01.139.494 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.139.495 I print_info: UNK token        = 3 '<unk>'
0.01.139.495 I print_info: PAD token        = 0 '<pad>'
0.01.139.499 I print_info: LF token         = 227 '<0x0A>'
0.01.139.508 I print_info: EOG token        = 1 '<eos>'
0.01.139.510 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.139.511 I print_info: max token length = 93
0.01.139.515 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.212.823 I load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.212.836 I load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.220.128 I llama_context: constructing llama_context
0.01.220.139 I llama_context: n_seq_max     = 1
0.01.220.140 I llama_context: n_ctx         = 4096
0.01.220.140 I llama_context: n_ctx_per_seq = 4096
0.01.220.140 I llama_context: n_batch       = 2048
0.01.220.141 I llama_context: n_ubatch      = 512
0.01.220.141 I llama_context: causal_attn   = 1
0.01.220.142 I llama_context: flash_attn    = 0
0.01.220.146 I llama_context: freq_base     = 10000.0
0.01.220.146 I llama_context: freq_scale    = 1
0.01.220.147 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.220.387 I llama_context:        CPU  output buffer size =     0.98 MiB
0.01.220.438 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.236.709 I init:        CPU KV buffer size =    72.00 MiB
0.01.236.759 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.245.995 I llama_context:        CPU compute buffer size =   509.01 MiB
0.01.246.001 I llama_context: graph nodes  = 601
0.01.246.001 I llama_context: graph splits = 1
0.01.246.013 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.246.014 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.881.599 I main: llama threadpool init, n_threads = 4
0.01.881.620 I 
0.01.881.732 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.881.736 I 
0.01.881.998 I sampler seed: 901301905
0.01.882.012 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.882.024 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.882.029 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.882.029 I 
 increasities, but they are not the only ones who experience this phenomenon.

**What is the phenomenon of increasities?**

The phenomenon of increasities

0.15.422.789 I llama_perf_sampler_print:    sampling time =      49.74 ms /    33 runs   (    1.51 ms per token,   663.45 tokens per second)
0.15.422.794 I llama_perf_context_print:        load time =    1853.65 ms
0.15.422.795 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.422.796 I llama_perf_context_print:        eval time =   13454.17 ms /    32 runs   (  420.44 ms per token,     2.38 tokens per second)
0.15.422.797 I llama_perf_context_print:       total time =   13567.99 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m3.223s
user	3m13.486s
sys	0m9.648s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4909 (fd123cfe)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186823.27 ms
main:    total time = 186823.27 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.703 I build: 4909 (fd123cfe) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.919 I main: llama backend init
0.00.000.928 I main: load the model and apply lora adapter, if any
0.00.086.356 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.086.369 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.086.471 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.492 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.494 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.500 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.502 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.504 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.507 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.509 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.510 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.517 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.519 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.521 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.522 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.294.896 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.417.984 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.441.069 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.441.089 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.441.091 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.441.093 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.441.095 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.441.097 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.441.099 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.441.104 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.441.106 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.441.108 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.441.110 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.441.112 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.441.114 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.441.122 I llama_model_loader: - type  f32:   37 tensors
0.00.441.125 I llama_model_loader: - type q4_K:  108 tensors
0.00.441.125 I llama_model_loader: - type q6_K:   19 tensors
0.00.441.143 I print_info: file format = GGUF V3 (latest)
0.00.441.144 I print_info: file type   = Q4_K - Medium
0.00.441.148 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.759.886 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.891.489 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.892.588 I load: special tokens cache size = 5
0.01.151.138 I load: token to piece cache size = 1.6014 MB
0.01.151.229 I print_info: arch             = gemma
0.01.151.233 I print_info: vocab_only       = 0
0.01.151.234 I print_info: n_ctx_train      = 8192
0.01.151.234 I print_info: n_embd           = 2048
0.01.151.235 I print_info: n_layer          = 18
0.01.151.316 I print_info: n_head           = 8
0.01.151.326 I print_info: n_head_kv        = 1
0.01.151.326 I print_info: n_rot            = 256
0.01.151.327 I print_info: n_swa            = 0
0.01.151.327 I print_info: n_swa_pattern    = 1
0.01.151.327 I print_info: n_embd_head_k    = 256
0.01.151.328 I print_info: n_embd_head_v    = 256
0.01.151.333 I print_info: n_gqa            = 8
0.01.151.338 I print_info: n_embd_k_gqa     = 256
0.01.151.343 I print_info: n_embd_v_gqa     = 256
0.01.151.344 I print_info: f_norm_eps       = 0.0e+00
0.01.151.345 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.151.346 I print_info: f_clamp_kqv      = 0.0e+00
0.01.151.346 I print_info: f_max_alibi_bias = 0.0e+00
0.01.151.347 I print_info: f_logit_scale    = 0.0e+00
0.01.151.347 I print_info: f_attn_scale     = 0.0e+00
0.01.151.352 I print_info: n_ff             = 16384
0.01.151.352 I print_info: n_expert         = 0
0.01.151.353 I print_info: n_expert_used    = 0
0.01.151.353 I print_info: causal attn      = 1
0.01.151.353 I print_info: pooling type     = 0
0.01.151.354 I print_info: rope type        = 2
0.01.151.354 I print_info: rope scaling     = linear
0.01.151.355 I print_info: freq_base_train  = 10000.0
0.01.151.356 I print_info: freq_scale_train = 1
0.01.151.357 I print_info: n_ctx_orig_yarn  = 8192
0.01.151.357 I print_info: rope_finetuned   = unknown
0.01.151.357 I print_info: ssm_d_conv       = 0
0.01.151.358 I print_info: ssm_d_inner      = 0
0.01.151.358 I print_info: ssm_d_state      = 0
0.01.151.358 I print_info: ssm_dt_rank      = 0
0.01.151.359 I print_info: ssm_dt_b_c_rms   = 0
0.01.151.360 I print_info: model type       = 2B
0.01.151.361 I print_info: model params     = 2.51 B
0.01.151.361 I print_info: general.name     = gemma-1.1-2b-it
0.01.151.366 I print_info: vocab type       = SPM
0.01.151.367 I print_info: n_vocab          = 256000
0.01.151.370 I print_info: n_merges         = 0
0.01.151.371 I print_info: BOS token        = 2 '<bos>'
0.01.151.371 I print_info: EOS token        = 1 '<eos>'
0.01.151.372 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.151.373 I print_info: UNK token        = 3 '<unk>'
0.01.151.373 I print_info: PAD token        = 0 '<pad>'
0.01.151.374 I print_info: LF token         = 227 '<0x0A>'
0.01.151.380 I print_info: EOG token        = 1 '<eos>'
0.01.151.382 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.151.382 I print_info: max token length = 93
0.01.151.384 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.209.445 I load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.209.457 I load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.209.458 I load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.209.459 I load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.209.460 I load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.209.460 I load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.216.125 I llama_context: constructing llama_context
0.01.216.135 I llama_context: n_seq_max     = 1
0.01.216.135 I llama_context: n_ctx         = 4096
0.01.216.136 I llama_context: n_ctx_per_seq = 4096
0.01.216.136 I llama_context: n_batch       = 2048
0.01.216.137 I llama_context: n_ubatch      = 512
0.01.216.137 I llama_context: causal_attn   = 1
0.01.216.138 I llama_context: flash_attn    = 0
0.01.216.142 I llama_context: freq_base     = 10000.0
0.01.216.143 I llama_context: freq_scale    = 1
0.01.216.144 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.216.367 I llama_context:        CPU  output buffer size =     0.98 MiB
0.01.216.415 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.232.590 I init:        CPU KV buffer size =    72.00 MiB
0.01.232.633 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.242.405 I llama_context:        CPU compute buffer size =   509.01 MiB
0.01.242.410 I llama_context: graph nodes  = 601
0.01.242.411 I llama_context: graph splits = 1
0.01.242.425 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.242.425 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.849.610 I main: llama threadpool init, n_threads = 4
0.01.849.627 I 
0.01.849.724 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.849.727 I 
0.01.849.975 I sampler seed: 451398723
0.01.849.989 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.850.000 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.850.001 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.850.001 I 
 increasities, a rare and powerful force that can cause immense destruction and regeneration.

**Powers:**

* Can manipulate the fabric of space, creating distortions and

0.12.802.540 I llama_perf_sampler_print:    sampling time =      49.95 ms /    33 runs   (    1.51 ms per token,   660.66 tokens per second)
0.12.802.558 I llama_perf_context_print:        load time =    1821.98 ms
0.12.802.560 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.802.562 I llama_perf_context_print:        eval time =   10866.17 ms /    32 runs   (  339.57 ms per token,     2.94 tokens per second)
0.12.802.563 I llama_perf_context_print:       total time =   10979.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4909 (fd123cfe)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186654.84 ms
main:    total time = 186654.84 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.712 I build: 4909 (fd123cfe) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.913 I main: llama backend init
0.00.000.921 I main: load the model and apply lora adapter, if any
0.00.086.745 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.086.874 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.902 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.907 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.913 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.915 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.917 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.919 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.920 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.923 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.930 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.932 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.934 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.935 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.303.615 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.404.980 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.428.169 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.428.186 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.428.188 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.428.190 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.428.192 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.428.194 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.428.196 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.428.200 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.428.202 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.428.204 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.428.213 I llama_model_loader: - type  f32:   37 tensors
0.00.428.215 I llama_model_loader: - type q4_K:  108 tensors
0.00.428.216 I llama_model_loader: - type q6_K:   19 tensors
0.00.428.233 I print_info: file format = GGUF V3 (latest)
0.00.428.234 I print_info: file type   = Q4_K - Medium
0.00.428.237 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.726.174 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.858.501 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.859.587 I load: special tokens cache size = 5
0.01.103.253 I load: token to piece cache size = 1.6014 MB
0.01.103.343 I print_info: arch             = gemma
0.01.103.344 I print_info: vocab_only       = 0
0.01.103.345 I print_info: n_ctx_train      = 8192
0.01.103.346 I print_info: n_embd           = 2048
0.01.103.346 I print_info: n_layer          = 18
0.01.103.427 I print_info: n_head           = 8
0.01.103.438 I print_info: n_head_kv        = 1
0.01.103.439 I print_info: n_rot            = 256
0.01.103.440 I print_info: n_swa            = 0
0.01.103.440 I print_info: n_swa_pattern    = 1
0.01.103.440 I print_info: n_embd_head_k    = 256
0.01.103.440 I print_info: n_embd_head_v    = 256
0.01.103.445 I print_info: n_gqa            = 8
0.01.103.451 I print_info: n_embd_k_gqa     = 256
0.01.103.456 I print_info: n_embd_v_gqa     = 256
0.01.103.457 I print_info: f_norm_eps       = 0.0e+00
0.01.103.459 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.103.460 I print_info: f_clamp_kqv      = 0.0e+00
0.01.103.461 I print_info: f_max_alibi_bias = 0.0e+00
0.01.103.461 I print_info: f_logit_scale    = 0.0e+00
0.01.103.462 I print_info: f_attn_scale     = 0.0e+00
0.01.103.466 I print_info: n_ff             = 16384
0.01.103.467 I print_info: n_expert         = 0
0.01.103.467 I print_info: n_expert_used    = 0
0.01.103.467 I print_info: causal attn      = 1
0.01.103.468 I print_info: pooling type     = 0
0.01.103.469 I print_info: rope type        = 2
0.01.103.469 I print_info: rope scaling     = linear
0.01.103.470 I print_info: freq_base_train  = 10000.0
0.01.103.472 I print_info: freq_scale_train = 1
0.01.103.472 I print_info: n_ctx_orig_yarn  = 8192
0.01.103.473 I print_info: rope_finetuned   = unknown
0.01.103.473 I print_info: ssm_d_conv       = 0
0.01.103.473 I print_info: ssm_d_inner      = 0
0.01.103.474 I print_info: ssm_d_state      = 0
0.01.103.474 I print_info: ssm_dt_rank      = 0
0.01.103.475 I print_info: ssm_dt_b_c_rms   = 0
0.01.103.477 I print_info: model type       = 2B
0.01.103.478 I print_info: model params     = 2.51 B
0.01.103.479 I print_info: general.name     = gemma-1.1-2b-it
0.01.103.483 I print_info: vocab type       = SPM
0.01.103.485 I print_info: n_vocab          = 256000
0.01.103.487 I print_info: n_merges         = 0
0.01.103.488 I print_info: BOS token        = 2 '<bos>'
0.01.103.488 I print_info: EOS token        = 1 '<eos>'
0.01.103.489 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.103.490 I print_info: UNK token        = 3 '<unk>'
0.01.103.491 I print_info: PAD token        = 0 '<pad>'
0.01.103.491 I print_info: LF token         = 227 '<0x0A>'
0.01.103.499 I print_info: EOG token        = 1 '<eos>'
0.01.103.501 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.103.501 I print_info: max token length = 93
0.01.103.504 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.152.642 I load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.159.307 I llama_context: constructing llama_context
0.01.159.317 I llama_context: n_seq_max     = 1
0.01.159.318 I llama_context: n_ctx         = 4096
0.01.159.318 I llama_context: n_ctx_per_seq = 4096
0.01.159.319 I llama_context: n_batch       = 2048
0.01.159.319 I llama_context: n_ubatch      = 512
0.01.159.319 I llama_context: causal_attn   = 1
0.01.159.320 I llama_context: flash_attn    = 0
0.01.159.323 I llama_context: freq_base     = 10000.0
0.01.159.324 I llama_context: freq_scale    = 1
0.01.159.325 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.159.548 I llama_context:        CPU  output buffer size =     0.98 MiB
0.01.159.592 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.175.910 I init:        CPU KV buffer size =    72.00 MiB
0.01.175.954 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.185.598 I llama_context:        CPU compute buffer size =   509.01 MiB
0.01.185.603 I llama_context: graph nodes  = 601
0.01.185.604 I llama_context: graph splits = 1
0.01.185.617 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.185.617 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.793.256 I main: llama threadpool init, n_threads = 4
0.01.793.275 I 
0.01.793.376 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.793.380 I 
0.01.793.630 I sampler seed: 1222200797
0.01.793.644 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.793.655 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.793.656 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.793.656 I 
 squared with the following information:

**Case:**
* A consumer complaint alleging negligence in the sale of a defective product.

**Facts:**
*

0.12.755.725 I llama_perf_sampler_print:    sampling time =      49.74 ms /    33 runs   (    1.51 ms per token,   663.42 tokens per second)
0.12.755.730 I llama_perf_context_print:        load time =    1765.52 ms
0.12.755.732 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.755.734 I llama_perf_context_print:        eval time =   10876.23 ms /    32 runs   (  339.88 ms per token,     2.94 tokens per second)
0.12.755.735 I llama_perf_context_print:       total time =   10989.15 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m42.507s
user	46m46.779s
sys	0m6.560s
