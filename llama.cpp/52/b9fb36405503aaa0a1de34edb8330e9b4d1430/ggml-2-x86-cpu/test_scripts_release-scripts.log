+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.617 I build: 4056 (52b9fb36) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.828 I main: llama backend init
0.00.000.957 I main: load the model and apply lora adapter, if any
0.00.021.497 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.509 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.518 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.528 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.529 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.536 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.542 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.543 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.544 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.545 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.545 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.550 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.550 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.551 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.551 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.552 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.516 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.279 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.207 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.213 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.214 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.215 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.215 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.216 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.216 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.219 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.220 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.220 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.221 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.222 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.226 I llama_model_loader: - type  f32:   37 tensors
0.00.133.227 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.667 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.606 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.194 I llm_load_vocab: special tokens cache size = 5
0.00.279.409 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.429 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.429 I llm_load_print_meta: arch             = gemma
0.00.279.430 I llm_load_print_meta: vocab type       = SPM
0.00.279.431 I llm_load_print_meta: n_vocab          = 256000
0.00.279.431 I llm_load_print_meta: n_merges         = 0
0.00.279.432 I llm_load_print_meta: vocab_only       = 0
0.00.279.432 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.432 I llm_load_print_meta: n_embd           = 2048
0.00.279.433 I llm_load_print_meta: n_layer          = 18
0.00.279.446 I llm_load_print_meta: n_head           = 8
0.00.279.447 I llm_load_print_meta: n_head_kv        = 1
0.00.279.447 I llm_load_print_meta: n_rot            = 256
0.00.279.447 I llm_load_print_meta: n_swa            = 0
0.00.279.448 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.448 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.449 I llm_load_print_meta: n_gqa            = 8
0.00.279.450 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.451 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.452 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.453 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.454 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.454 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.454 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.455 I llm_load_print_meta: n_ff             = 16384
0.00.279.455 I llm_load_print_meta: n_expert         = 0
0.00.279.456 I llm_load_print_meta: n_expert_used    = 0
0.00.279.456 I llm_load_print_meta: causal attn      = 1
0.00.279.456 I llm_load_print_meta: pooling type     = 0
0.00.279.457 I llm_load_print_meta: rope type        = 2
0.00.279.457 I llm_load_print_meta: rope scaling     = linear
0.00.279.458 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.459 I llm_load_print_meta: freq_scale_train = 1
0.00.279.459 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.460 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.460 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.460 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.460 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.461 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.461 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.461 I llm_load_print_meta: model type       = 2B
0.00.279.462 I llm_load_print_meta: model ftype      = Q8_0
0.00.279.463 I llm_load_print_meta: model params     = 2.51 B
0.00.279.464 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.279.464 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.465 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.465 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.466 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.466 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.467 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.467 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.467 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.468 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.468 I llm_load_print_meta: max token length = 93
0.00.377.998 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.378.006 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.378.007 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.378.008 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.378.008 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.378.009 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.383.289 I llama_new_context_with_model: n_seq_max     = 1
0.00.383.297 I llama_new_context_with_model: n_ctx         = 4096
0.00.383.297 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.383.298 I llama_new_context_with_model: n_batch       = 2048
0.00.383.298 I llama_new_context_with_model: n_ubatch      = 512
0.00.383.299 I llama_new_context_with_model: flash_attn    = 0
0.00.383.302 I llama_new_context_with_model: freq_base     = 10000.0
0.00.383.303 I llama_new_context_with_model: freq_scale    = 1
0.00.383.304 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.398.596 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.398.612 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.398.702 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.399.928 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.399.935 I llama_new_context_with_model: graph nodes  = 601
0.00.399.935 I llama_new_context_with_model: graph splits = 1
0.00.399.937 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.487.169 I main: llama threadpool init, n_threads = 4
0.00.487.183 I 
0.00.487.264 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.487.267 I 
0.00.487.315 I sampler seed: 3422320841
0.00.487.325 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.487.333 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.487.336 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.487.337 I 
 seconde
I am unable to access my Google Account. I am receiving the error message "We're unable to sign you in because there are issues with

0.02.774.087 I llama_perf_sampler_print:    sampling time =       4.82 ms /    33 runs   (    0.15 ms per token,  6842.21 tokens per second)
0.02.774.090 I llama_perf_context_print:        load time =     486.19 ms
0.02.774.091 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.774.093 I llama_perf_context_print:        eval time =    2267.73 ms /    32 runs   (   70.87 ms per token,    14.11 tokens per second)
0.02.774.094 I llama_perf_context_print:       total time =    2286.93 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.549 I build: 4056 (52b9fb36) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.748 I main: llama backend init
0.00.000.879 I main: load the model and apply lora adapter, if any
0.00.021.316 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.331 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.339 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.343 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.347 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.348 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.348 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.349 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.350 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.350 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.355 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.356 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.356 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.357 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.357 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.991 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.613 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.488 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.497 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.497 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.498 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.499 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.500 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.500 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.503 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.503 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.505 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.505 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.506 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.510 I llama_model_loader: - type  f32:   37 tensors
0.00.132.511 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.143 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.080 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.674 I llm_load_vocab: special tokens cache size = 5
0.00.279.059 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.076 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.076 I llm_load_print_meta: arch             = gemma
0.00.279.077 I llm_load_print_meta: vocab type       = SPM
0.00.279.077 I llm_load_print_meta: n_vocab          = 256000
0.00.279.078 I llm_load_print_meta: n_merges         = 0
0.00.279.078 I llm_load_print_meta: vocab_only       = 0
0.00.279.078 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.079 I llm_load_print_meta: n_embd           = 2048
0.00.279.079 I llm_load_print_meta: n_layer          = 18
0.00.279.090 I llm_load_print_meta: n_head           = 8
0.00.279.091 I llm_load_print_meta: n_head_kv        = 1
0.00.279.092 I llm_load_print_meta: n_rot            = 256
0.00.279.092 I llm_load_print_meta: n_swa            = 0
0.00.279.092 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.093 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.094 I llm_load_print_meta: n_gqa            = 8
0.00.279.095 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.096 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.097 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.098 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.098 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.099 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.099 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.100 I llm_load_print_meta: n_ff             = 16384
0.00.279.100 I llm_load_print_meta: n_expert         = 0
0.00.279.100 I llm_load_print_meta: n_expert_used    = 0
0.00.279.101 I llm_load_print_meta: causal attn      = 1
0.00.279.101 I llm_load_print_meta: pooling type     = 0
0.00.279.101 I llm_load_print_meta: rope type        = 2
0.00.279.102 I llm_load_print_meta: rope scaling     = linear
0.00.279.103 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.104 I llm_load_print_meta: freq_scale_train = 1
0.00.279.104 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.105 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.105 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.105 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.105 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.105 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.106 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.106 I llm_load_print_meta: model type       = 2B
0.00.279.107 I llm_load_print_meta: model ftype      = Q8_0
0.00.279.108 I llm_load_print_meta: model params     = 2.51 B
0.00.279.109 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.279.109 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.110 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.110 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.110 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.111 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.111 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.112 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.112 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.113 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.113 I llm_load_print_meta: max token length = 93
0.00.373.957 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.379.323 I llama_new_context_with_model: n_seq_max     = 1
0.00.379.330 I llama_new_context_with_model: n_ctx         = 4096
0.00.379.331 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.379.331 I llama_new_context_with_model: n_batch       = 2048
0.00.379.331 I llama_new_context_with_model: n_ubatch      = 512
0.00.379.332 I llama_new_context_with_model: flash_attn    = 0
0.00.379.336 I llama_new_context_with_model: freq_base     = 10000.0
0.00.379.337 I llama_new_context_with_model: freq_scale    = 1
0.00.379.338 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.395.141 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.395.159 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.395.253 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.396.467 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.396.473 I llama_new_context_with_model: graph nodes  = 601
0.00.396.474 I llama_new_context_with_model: graph splits = 1
0.00.396.475 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.479.510 I main: llama threadpool init, n_threads = 4
0.00.479.524 I 
0.00.479.594 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.479.598 I 
0.00.479.643 I sampler seed: 2243187314
0.00.479.654 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.479.657 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.479.657 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.479.657 I 
 increably.

I'm trying to write a story about a young girl who discovers a magical mirror and its extraordinary power.

**Summary:**

In

0.02.720.793 I llama_perf_sampler_print:    sampling time =       4.68 ms /    33 runs   (    0.14 ms per token,  7057.31 tokens per second)
0.02.720.795 I llama_perf_context_print:        load time =     478.61 ms
0.02.720.797 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.720.798 I llama_perf_context_print:        eval time =    2221.68 ms /    32 runs   (   69.43 ms per token,    14.40 tokens per second)
0.02.720.799 I llama_perf_context_print:       total time =    2241.29 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.521 I build: 4056 (52b9fb36) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.718 I main: llama backend init
0.00.000.849 I main: load the model and apply lora adapter, if any
0.00.021.353 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.364 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.372 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.382 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.383 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.387 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.388 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.389 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.389 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.390 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.391 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.396 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.396 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.397 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.397 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.398 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.615 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.554 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.423 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.431 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.431 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.432 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.432 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.433 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.434 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.437 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.438 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.440 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.440 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.441 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.445 I llama_model_loader: - type  f32:   37 tensors
0.00.132.446 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.795 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.442 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.244 I llm_load_vocab: special tokens cache size = 5
0.00.280.872 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.890 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.890 I llm_load_print_meta: arch             = gemma
0.00.280.891 I llm_load_print_meta: vocab type       = SPM
0.00.280.892 I llm_load_print_meta: n_vocab          = 256000
0.00.280.892 I llm_load_print_meta: n_merges         = 0
0.00.280.893 I llm_load_print_meta: vocab_only       = 0
0.00.280.893 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.893 I llm_load_print_meta: n_embd           = 2048
0.00.280.893 I llm_load_print_meta: n_layer          = 18
0.00.280.906 I llm_load_print_meta: n_head           = 8
0.00.280.907 I llm_load_print_meta: n_head_kv        = 1
0.00.280.907 I llm_load_print_meta: n_rot            = 256
0.00.280.908 I llm_load_print_meta: n_swa            = 0
0.00.280.908 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.909 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.910 I llm_load_print_meta: n_gqa            = 8
0.00.280.911 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.912 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.913 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.914 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.914 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.915 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.915 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.916 I llm_load_print_meta: n_ff             = 16384
0.00.280.916 I llm_load_print_meta: n_expert         = 0
0.00.280.916 I llm_load_print_meta: n_expert_used    = 0
0.00.280.917 I llm_load_print_meta: causal attn      = 1
0.00.280.917 I llm_load_print_meta: pooling type     = 0
0.00.280.918 I llm_load_print_meta: rope type        = 2
0.00.280.918 I llm_load_print_meta: rope scaling     = linear
0.00.280.919 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.920 I llm_load_print_meta: freq_scale_train = 1
0.00.280.920 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.921 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.921 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.921 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.921 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.922 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.922 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.922 I llm_load_print_meta: model type       = 2B
0.00.280.923 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.924 I llm_load_print_meta: model params     = 2.51 B
0.00.280.925 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.925 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.926 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.926 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.926 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.927 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.927 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.928 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.928 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.928 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.929 I llm_load_print_meta: max token length = 93
0.00.367.458 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.367.464 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.367.465 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.367.465 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.367.466 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.367.467 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.372.711 I llama_new_context_with_model: n_seq_max     = 1
0.00.372.717 I llama_new_context_with_model: n_ctx         = 4096
0.00.372.718 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.372.718 I llama_new_context_with_model: n_batch       = 2048
0.00.372.719 I llama_new_context_with_model: n_ubatch      = 512
0.00.372.720 I llama_new_context_with_model: flash_attn    = 0
0.00.372.722 I llama_new_context_with_model: freq_base     = 10000.0
0.00.372.723 I llama_new_context_with_model: freq_scale    = 1
0.00.372.724 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.388.935 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.388.951 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.389.043 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.269 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.390.277 I llama_new_context_with_model: graph nodes  = 601
0.00.390.278 I llama_new_context_with_model: graph splits = 1
0.00.390.279 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.325 I main: llama threadpool init, n_threads = 4
0.00.475.336 I 
0.00.475.412 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.475.415 I 
0.00.475.456 I sampler seed: 3045809995
0.00.475.466 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.470 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.471 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.481 I 
 increasities and challenges with the intention of pushing the boundaries of knowledge and understanding.

**Questions:**

1. What are some examples of scientific discoveries that have

0.02.674.116 I llama_perf_sampler_print:    sampling time =       4.94 ms /    33 runs   (    0.15 ms per token,  6674.76 tokens per second)
0.02.674.119 I llama_perf_context_print:        load time =     474.45 ms
0.02.674.120 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.674.122 I llama_perf_context_print:        eval time =    2179.53 ms /    32 runs   (   68.11 ms per token,    14.68 tokens per second)
0.02.674.123 I llama_perf_context_print:       total time =    2198.80 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.580 I build: 4056 (52b9fb36) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.787 I main: llama backend init
0.00.000.921 I main: load the model and apply lora adapter, if any
0.00.021.367 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.378 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.386 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.395 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.396 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.400 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.404 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.405 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.406 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.406 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.407 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.412 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.413 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.414 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.414 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.415 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.797 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.564 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.470 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.476 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.477 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.477 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.478 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.479 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.479 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.482 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.482 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.483 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.484 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.485 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.489 I llama_model_loader: - type  f32:   37 tensors
0.00.132.490 I llama_model_loader: - type q8_0:  127 tensors
0.00.217.760 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.270.168 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.270.836 I llm_load_vocab: special tokens cache size = 5
0.00.292.467 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.292.484 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.292.485 I llm_load_print_meta: arch             = gemma
0.00.292.486 I llm_load_print_meta: vocab type       = SPM
0.00.292.486 I llm_load_print_meta: n_vocab          = 256000
0.00.292.487 I llm_load_print_meta: n_merges         = 0
0.00.292.487 I llm_load_print_meta: vocab_only       = 0
0.00.292.487 I llm_load_print_meta: n_ctx_train      = 8192
0.00.292.488 I llm_load_print_meta: n_embd           = 2048
0.00.292.488 I llm_load_print_meta: n_layer          = 18
0.00.292.500 I llm_load_print_meta: n_head           = 8
0.00.292.501 I llm_load_print_meta: n_head_kv        = 1
0.00.292.502 I llm_load_print_meta: n_rot            = 256
0.00.292.502 I llm_load_print_meta: n_swa            = 0
0.00.292.503 I llm_load_print_meta: n_embd_head_k    = 256
0.00.292.503 I llm_load_print_meta: n_embd_head_v    = 256
0.00.292.504 I llm_load_print_meta: n_gqa            = 8
0.00.292.505 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.292.506 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.292.507 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.292.508 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.292.508 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.292.509 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.292.509 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.292.510 I llm_load_print_meta: n_ff             = 16384
0.00.292.510 I llm_load_print_meta: n_expert         = 0
0.00.292.511 I llm_load_print_meta: n_expert_used    = 0
0.00.292.511 I llm_load_print_meta: causal attn      = 1
0.00.292.511 I llm_load_print_meta: pooling type     = 0
0.00.292.512 I llm_load_print_meta: rope type        = 2
0.00.292.512 I llm_load_print_meta: rope scaling     = linear
0.00.292.513 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.292.514 I llm_load_print_meta: freq_scale_train = 1
0.00.292.514 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.292.515 I llm_load_print_meta: rope_finetuned   = unknown
0.00.292.515 I llm_load_print_meta: ssm_d_conv       = 0
0.00.292.515 I llm_load_print_meta: ssm_d_inner      = 0
0.00.292.515 I llm_load_print_meta: ssm_d_state      = 0
0.00.292.516 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.292.516 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.292.517 I llm_load_print_meta: model type       = 2B
0.00.292.517 I llm_load_print_meta: model ftype      = Q8_0
0.00.292.518 I llm_load_print_meta: model params     = 2.51 B
0.00.292.519 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.292.520 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.292.520 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.292.520 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.292.521 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.292.521 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.292.522 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.292.522 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.292.523 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.292.523 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.292.523 I llm_load_print_meta: max token length = 93
0.00.363.887 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.363.896 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.369.209 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.216 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.217 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.217 I llama_new_context_with_model: n_batch       = 2048
0.00.369.217 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.218 I llama_new_context_with_model: flash_attn    = 0
0.00.369.221 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.222 I llama_new_context_with_model: freq_scale    = 1
0.00.369.223 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.385.248 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.263 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.355 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.662 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.386.669 I llama_new_context_with_model: graph nodes  = 601
0.00.386.669 I llama_new_context_with_model: graph splits = 1
0.00.386.671 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.477.165 I main: llama threadpool init, n_threads = 4
0.00.477.179 I 
0.00.477.256 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.477.260 I 
0.00.477.299 I sampler seed: 1922593604
0.00.477.310 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.477.314 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.477.314 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.477.315 I 
 increadibly. [end of text]


0.00.786.942 I llama_perf_sampler_print:    sampling time =       0.60 ms /     5 runs   (    0.12 ms per token,  8361.20 tokens per second)
0.00.786.945 I llama_perf_context_print:        load time =     476.22 ms
0.00.786.946 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.786.947 I llama_perf_context_print:        eval time =     306.57 ms /     4 runs   (   76.64 ms per token,    13.05 tokens per second)
0.00.786.949 I llama_perf_context_print:       total time =     309.78 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.467s
user	0m31.043s
sys	0m9.642s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4056 (52b9fb36)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32262.49 ms
main:    total time = 32262.49 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.599 I build: 4056 (52b9fb36) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.814 I main: llama backend init
0.00.000.953 I main: load the model and apply lora adapter, if any
0.00.021.477 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.486 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.494 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.503 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.504 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.508 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.509 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.510 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.511 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.511 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.512 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.516 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.516 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.517 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.517 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.518 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.751 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.401 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.267 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.273 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.274 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.274 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.275 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.276 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.276 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.279 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.279 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.280 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.280 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.281 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.285 I llama_model_loader: - type  f32:   37 tensors
0.00.132.287 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.287 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.859 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.165 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.837 I llm_load_vocab: special tokens cache size = 5
0.00.280.303 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.319 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.320 I llm_load_print_meta: arch             = gemma
0.00.280.321 I llm_load_print_meta: vocab type       = SPM
0.00.280.321 I llm_load_print_meta: n_vocab          = 256000
0.00.280.322 I llm_load_print_meta: n_merges         = 0
0.00.280.322 I llm_load_print_meta: vocab_only       = 0
0.00.280.322 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.323 I llm_load_print_meta: n_embd           = 2048
0.00.280.324 I llm_load_print_meta: n_layer          = 18
0.00.280.334 I llm_load_print_meta: n_head           = 8
0.00.280.335 I llm_load_print_meta: n_head_kv        = 1
0.00.280.335 I llm_load_print_meta: n_rot            = 256
0.00.280.336 I llm_load_print_meta: n_swa            = 0
0.00.280.337 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.337 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.338 I llm_load_print_meta: n_gqa            = 8
0.00.280.339 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.340 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.343 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.344 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.345 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.345 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.345 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.346 I llm_load_print_meta: n_ff             = 16384
0.00.280.347 I llm_load_print_meta: n_expert         = 0
0.00.280.347 I llm_load_print_meta: n_expert_used    = 0
0.00.280.347 I llm_load_print_meta: causal attn      = 1
0.00.280.348 I llm_load_print_meta: pooling type     = 0
0.00.280.348 I llm_load_print_meta: rope type        = 2
0.00.280.349 I llm_load_print_meta: rope scaling     = linear
0.00.280.351 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.352 I llm_load_print_meta: freq_scale_train = 1
0.00.280.352 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.353 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.353 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.353 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.353 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.354 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.354 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.355 I llm_load_print_meta: model type       = 2B
0.00.280.356 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.280.357 I llm_load_print_meta: model params     = 2.51 B
0.00.280.358 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.280.358 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.359 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.359 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.360 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.360 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.360 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.361 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.361 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.362 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.362 I llm_load_print_meta: max token length = 93
0.00.340.921 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.340.930 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.340.931 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.340.932 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.340.932 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.340.933 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.346.160 I llama_new_context_with_model: n_seq_max     = 1
0.00.346.167 I llama_new_context_with_model: n_ctx         = 4096
0.00.346.167 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.346.168 I llama_new_context_with_model: n_batch       = 2048
0.00.346.168 I llama_new_context_with_model: n_ubatch      = 512
0.00.346.169 I llama_new_context_with_model: flash_attn    = 0
0.00.346.172 I llama_new_context_with_model: freq_base     = 10000.0
0.00.346.173 I llama_new_context_with_model: freq_scale    = 1
0.00.346.175 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.579 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.594 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.690 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.946 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.953 I llama_new_context_with_model: graph nodes  = 601
0.00.363.953 I llama_new_context_with_model: graph splits = 1
0.00.363.955 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.442.444 I main: llama threadpool init, n_threads = 4
0.00.442.457 I 
0.00.442.534 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.442.537 I 
0.00.442.585 I sampler seed: 1179906404
0.00.442.597 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.442.600 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.442.602 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.442.602 I 
 seconally with this review.

**Review:**

The food at [Restaurant Name] was delicious! The menu offers a wide variety of options, and the

0.02.110.388 I llama_perf_sampler_print:    sampling time =       5.09 ms /    33 runs   (    0.15 ms per token,  6476.94 tokens per second)
0.02.110.391 I llama_perf_context_print:        load time =     441.47 ms
0.02.110.392 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.110.394 I llama_perf_context_print:        eval time =    1648.40 ms /    32 runs   (   51.51 ms per token,    19.41 tokens per second)
0.02.110.395 I llama_perf_context_print:       total time =    1667.95 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4056 (52b9fb36)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32056.39 ms
main:    total time = 32056.39 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.533 I build: 4056 (52b9fb36) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.743 I main: llama backend init
0.00.000.875 I main: load the model and apply lora adapter, if any
0.00.020.920 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.936 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.945 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.946 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.950 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.951 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.952 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.952 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.953 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.953 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.957 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.957 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.958 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.958 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.959 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.129 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.734 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.681 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.688 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.689 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.689 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.690 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.691 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.692 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.695 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.695 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.699 I llama_model_loader: - type  f32:   37 tensors
0.00.132.700 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.701 I llama_model_loader: - type q6_K:   19 tensors
0.00.220.675 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.275.394 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.276.071 I llm_load_vocab: special tokens cache size = 5
0.00.297.550 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.297.569 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.297.569 I llm_load_print_meta: arch             = gemma
0.00.297.570 I llm_load_print_meta: vocab type       = SPM
0.00.297.571 I llm_load_print_meta: n_vocab          = 256000
0.00.297.572 I llm_load_print_meta: n_merges         = 0
0.00.297.572 I llm_load_print_meta: vocab_only       = 0
0.00.297.573 I llm_load_print_meta: n_ctx_train      = 8192
0.00.297.573 I llm_load_print_meta: n_embd           = 2048
0.00.297.573 I llm_load_print_meta: n_layer          = 18
0.00.297.585 I llm_load_print_meta: n_head           = 8
0.00.297.587 I llm_load_print_meta: n_head_kv        = 1
0.00.297.587 I llm_load_print_meta: n_rot            = 256
0.00.297.587 I llm_load_print_meta: n_swa            = 0
0.00.297.588 I llm_load_print_meta: n_embd_head_k    = 256
0.00.297.588 I llm_load_print_meta: n_embd_head_v    = 256
0.00.297.589 I llm_load_print_meta: n_gqa            = 8
0.00.297.590 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.297.591 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.297.592 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.297.594 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.297.595 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.297.595 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.297.595 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.297.596 I llm_load_print_meta: n_ff             = 16384
0.00.297.598 I llm_load_print_meta: n_expert         = 0
0.00.297.598 I llm_load_print_meta: n_expert_used    = 0
0.00.297.598 I llm_load_print_meta: causal attn      = 1
0.00.297.599 I llm_load_print_meta: pooling type     = 0
0.00.297.600 I llm_load_print_meta: rope type        = 2
0.00.297.601 I llm_load_print_meta: rope scaling     = linear
0.00.297.602 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.297.603 I llm_load_print_meta: freq_scale_train = 1
0.00.297.606 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.297.607 I llm_load_print_meta: rope_finetuned   = unknown
0.00.297.607 I llm_load_print_meta: ssm_d_conv       = 0
0.00.297.607 I llm_load_print_meta: ssm_d_inner      = 0
0.00.297.608 I llm_load_print_meta: ssm_d_state      = 0
0.00.297.608 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.297.608 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.297.609 I llm_load_print_meta: model type       = 2B
0.00.297.609 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.297.611 I llm_load_print_meta: model params     = 2.51 B
0.00.297.611 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.297.612 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.297.613 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.297.613 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.297.614 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.297.614 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.297.615 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.297.616 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.297.616 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.297.617 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.297.617 I llm_load_print_meta: max token length = 93
0.00.355.403 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.360.581 I llama_new_context_with_model: n_seq_max     = 1
0.00.360.598 I llama_new_context_with_model: n_ctx         = 4096
0.00.360.599 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.360.599 I llama_new_context_with_model: n_batch       = 2048
0.00.360.600 I llama_new_context_with_model: n_ubatch      = 512
0.00.360.600 I llama_new_context_with_model: flash_attn    = 0
0.00.360.603 I llama_new_context_with_model: freq_base     = 10000.0
0.00.360.605 I llama_new_context_with_model: freq_scale    = 1
0.00.360.606 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.376.754 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.376.768 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.376.864 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.378.140 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.378.146 I llama_new_context_with_model: graph nodes  = 601
0.00.378.146 I llama_new_context_with_model: graph splits = 1
0.00.378.148 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.493 I main: llama threadpool init, n_threads = 4
0.00.453.509 I 
0.00.453.586 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.453.590 I 
0.00.453.632 I sampler seed: 1979771089
0.00.453.645 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.651 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.453.652 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.453.652 I 
 seconded.

I am unable to access the internet or any websites. I have checked my router settings and they are correct.

**Possible causes:**



0.02.091.749 I llama_perf_sampler_print:    sampling time =       5.19 ms /    33 runs   (    0.16 ms per token,  6360.83 tokens per second)
0.02.091.751 I llama_perf_context_print:        load time =     452.60 ms
0.02.091.753 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.091.754 I llama_perf_context_print:        eval time =    1618.24 ms /    32 runs   (   50.57 ms per token,    19.77 tokens per second)
0.02.091.755 I llama_perf_context_print:       total time =    1638.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.475s
user	8m15.412s
sys	0m6.955s
