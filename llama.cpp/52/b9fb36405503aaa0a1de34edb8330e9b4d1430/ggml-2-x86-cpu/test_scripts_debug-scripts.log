+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.653 I build: 4056 (52b9fb36) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.885 I main: llama backend init
0.00.001.148 I main: load the model and apply lora adapter, if any
0.00.023.749 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.762 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.856 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.869 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.871 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.876 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.878 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.879 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.880 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.882 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.883 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.890 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.891 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.893 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.894 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.895 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.136 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.254.514 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.630 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.642 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.643 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.645 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.646 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.647 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.648 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.653 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.668 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.672 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.674 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.272.675 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.686 I llama_model_loader: - type  f32:   37 tensors
0.00.272.688 I llama_model_loader: - type q8_0:  127 tensors
0.00.475.617 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.546.598 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.547.669 I llm_load_vocab: special tokens cache size = 5
0.00.644.199 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.644.268 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.644.272 I llm_load_print_meta: arch             = gemma
0.00.644.273 I llm_load_print_meta: vocab type       = SPM
0.00.644.274 I llm_load_print_meta: n_vocab          = 256000
0.00.644.276 I llm_load_print_meta: n_merges         = 0
0.00.644.276 I llm_load_print_meta: vocab_only       = 0
0.00.644.277 I llm_load_print_meta: n_ctx_train      = 8192
0.00.644.277 I llm_load_print_meta: n_embd           = 2048
0.00.644.277 I llm_load_print_meta: n_layer          = 18
0.00.644.344 I llm_load_print_meta: n_head           = 8
0.00.644.354 I llm_load_print_meta: n_head_kv        = 1
0.00.644.355 I llm_load_print_meta: n_rot            = 256
0.00.644.356 I llm_load_print_meta: n_swa            = 0
0.00.644.356 I llm_load_print_meta: n_embd_head_k    = 256
0.00.644.356 I llm_load_print_meta: n_embd_head_v    = 256
0.00.644.361 I llm_load_print_meta: n_gqa            = 8
0.00.644.365 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.644.371 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.644.373 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.644.374 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.644.375 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.644.375 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.644.375 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.644.380 I llm_load_print_meta: n_ff             = 16384
0.00.644.381 I llm_load_print_meta: n_expert         = 0
0.00.644.381 I llm_load_print_meta: n_expert_used    = 0
0.00.644.382 I llm_load_print_meta: causal attn      = 1
0.00.644.384 I llm_load_print_meta: pooling type     = 0
0.00.644.385 I llm_load_print_meta: rope type        = 2
0.00.644.385 I llm_load_print_meta: rope scaling     = linear
0.00.644.387 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.644.388 I llm_load_print_meta: freq_scale_train = 1
0.00.644.388 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.644.388 I llm_load_print_meta: rope_finetuned   = unknown
0.00.644.389 I llm_load_print_meta: ssm_d_conv       = 0
0.00.644.389 I llm_load_print_meta: ssm_d_inner      = 0
0.00.644.389 I llm_load_print_meta: ssm_d_state      = 0
0.00.644.389 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.644.390 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.644.390 I llm_load_print_meta: model type       = 2B
0.00.644.392 I llm_load_print_meta: model ftype      = Q8_0
0.00.644.393 I llm_load_print_meta: model params     = 2.51 B
0.00.644.402 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.644.403 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.644.404 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.644.404 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.644.405 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.644.406 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.644.406 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.644.407 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.644.412 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.644.414 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.644.415 I llm_load_print_meta: max token length = 93
0.00.746.485 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.746.495 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.746.497 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.746.498 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.746.498 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.746.499 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.752.477 I llama_new_context_with_model: n_seq_max     = 1
0.00.752.486 I llama_new_context_with_model: n_ctx         = 4096
0.00.752.487 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.752.487 I llama_new_context_with_model: n_batch       = 2048
0.00.752.488 I llama_new_context_with_model: n_ubatch      = 512
0.00.752.488 I llama_new_context_with_model: flash_attn    = 0
0.00.752.492 I llama_new_context_with_model: freq_base     = 10000.0
0.00.752.492 I llama_new_context_with_model: freq_scale    = 1
0.00.752.493 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.769.042 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.769.084 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.769.210 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.771.748 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.771.752 I llama_new_context_with_model: graph nodes  = 601
0.00.771.753 I llama_new_context_with_model: graph splits = 1
0.00.771.777 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.377.543 I main: llama threadpool init, n_threads = 4
0.01.377.555 I 
0.01.377.671 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.377.676 I 
0.01.377.923 I sampler seed: 1276855524
0.01.377.937 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.377.943 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.377.947 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.377.947 I 
 increadibly well in his role. His dedication, professionalism, and adaptability made him an invaluable asset to the company.

This passage is about _____?

a

0.14.781.858 I llama_perf_sampler_print:    sampling time =      47.88 ms /    33 runs   (    1.45 ms per token,   689.21 tokens per second)
0.14.781.862 I llama_perf_context_print:        load time =    1376.29 ms
0.14.781.874 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.781.876 I llama_perf_context_print:        eval time =   13314.00 ms /    32 runs   (  416.06 ms per token,     2.40 tokens per second)
0.14.781.878 I llama_perf_context_print:       total time =   13404.33 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.712 I build: 4056 (52b9fb36) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.906 I main: llama backend init
0.00.001.167 I main: load the model and apply lora adapter, if any
0.00.023.861 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.967 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.984 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.988 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.994 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.996 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.998 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.999 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.000 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.002 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.009 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.013 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.014 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.015 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.016 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.002 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.385 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.498 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.510 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.511 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.512 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.513 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.514 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.516 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.520 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.521 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.522 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.523 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.266.524 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.535 I llama_model_loader: - type  f32:   37 tensors
0.00.266.538 I llama_model_loader: - type q8_0:  127 tensors
0.00.478.121 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.550.979 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.552.007 I llm_load_vocab: special tokens cache size = 5
0.00.648.877 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.648.949 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.648.950 I llm_load_print_meta: arch             = gemma
0.00.648.951 I llm_load_print_meta: vocab type       = SPM
0.00.648.952 I llm_load_print_meta: n_vocab          = 256000
0.00.648.954 I llm_load_print_meta: n_merges         = 0
0.00.648.954 I llm_load_print_meta: vocab_only       = 0
0.00.648.954 I llm_load_print_meta: n_ctx_train      = 8192
0.00.648.955 I llm_load_print_meta: n_embd           = 2048
0.00.648.955 I llm_load_print_meta: n_layer          = 18
0.00.649.022 I llm_load_print_meta: n_head           = 8
0.00.649.029 I llm_load_print_meta: n_head_kv        = 1
0.00.649.030 I llm_load_print_meta: n_rot            = 256
0.00.649.030 I llm_load_print_meta: n_swa            = 0
0.00.649.031 I llm_load_print_meta: n_embd_head_k    = 256
0.00.649.031 I llm_load_print_meta: n_embd_head_v    = 256
0.00.649.037 I llm_load_print_meta: n_gqa            = 8
0.00.649.042 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.649.047 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.649.048 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.649.049 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.649.050 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.649.050 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.649.050 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.649.055 I llm_load_print_meta: n_ff             = 16384
0.00.649.056 I llm_load_print_meta: n_expert         = 0
0.00.649.056 I llm_load_print_meta: n_expert_used    = 0
0.00.649.056 I llm_load_print_meta: causal attn      = 1
0.00.649.057 I llm_load_print_meta: pooling type     = 0
0.00.649.057 I llm_load_print_meta: rope type        = 2
0.00.649.057 I llm_load_print_meta: rope scaling     = linear
0.00.649.059 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.649.060 I llm_load_print_meta: freq_scale_train = 1
0.00.649.060 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.649.060 I llm_load_print_meta: rope_finetuned   = unknown
0.00.649.061 I llm_load_print_meta: ssm_d_conv       = 0
0.00.649.075 I llm_load_print_meta: ssm_d_inner      = 0
0.00.649.076 I llm_load_print_meta: ssm_d_state      = 0
0.00.649.076 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.649.089 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.649.090 I llm_load_print_meta: model type       = 2B
0.00.649.091 I llm_load_print_meta: model ftype      = Q8_0
0.00.649.092 I llm_load_print_meta: model params     = 2.51 B
0.00.649.101 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.649.102 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.649.103 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.649.103 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.649.104 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.649.105 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.649.105 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.649.106 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.649.112 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.649.113 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.649.114 I llm_load_print_meta: max token length = 93
0.00.746.247 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.752.155 I llama_new_context_with_model: n_seq_max     = 1
0.00.752.163 I llama_new_context_with_model: n_ctx         = 4096
0.00.752.163 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.752.164 I llama_new_context_with_model: n_batch       = 2048
0.00.752.164 I llama_new_context_with_model: n_ubatch      = 512
0.00.752.165 I llama_new_context_with_model: flash_attn    = 0
0.00.752.168 I llama_new_context_with_model: freq_base     = 10000.0
0.00.752.168 I llama_new_context_with_model: freq_scale    = 1
0.00.752.169 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.769.670 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.769.713 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.769.839 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.772.303 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.772.307 I llama_new_context_with_model: graph nodes  = 601
0.00.772.307 I llama_new_context_with_model: graph splits = 1
0.00.772.330 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.382.026 I main: llama threadpool init, n_threads = 4
0.01.382.040 I 
0.01.382.151 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.382.155 I 
0.01.382.396 I sampler seed: 4132743759
0.01.382.408 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.382.418 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.382.419 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.382.419 I 
 increasities can occur due to a variety of factors, including metabolic imbalances, electrolyte imbalances, sepsis, and drug interactions.

**How do you manage a patient

0.14.899.148 I llama_perf_sampler_print:    sampling time =      48.38 ms /    33 runs   (    1.47 ms per token,   682.03 tokens per second)
0.14.899.162 I llama_perf_context_print:        load time =    1380.76 ms
0.14.899.165 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.899.167 I llama_perf_context_print:        eval time =   13427.14 ms /    32 runs   (  419.60 ms per token,     2.38 tokens per second)
0.14.899.168 I llama_perf_context_print:       total time =   13517.13 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 4056 (52b9fb36) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.854 I main: llama backend init
0.00.001.117 I main: load the model and apply lora adapter, if any
0.00.023.771 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.784 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.882 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.895 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.896 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.901 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.905 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.906 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.907 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.908 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.910 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.918 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.928 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.932 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.933 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.934 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.440 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.830 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.075 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.087 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.089 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.090 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.091 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.092 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.093 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.097 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.098 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.099 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.100 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.266.101 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.111 I llama_model_loader: - type  f32:   37 tensors
0.00.266.113 I llama_model_loader: - type q8_0:  127 tensors
0.00.465.077 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.536.304 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.537.308 I llm_load_vocab: special tokens cache size = 5
0.00.631.991 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.632.061 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.632.063 I llm_load_print_meta: arch             = gemma
0.00.632.064 I llm_load_print_meta: vocab type       = SPM
0.00.632.065 I llm_load_print_meta: n_vocab          = 256000
0.00.632.067 I llm_load_print_meta: n_merges         = 0
0.00.632.067 I llm_load_print_meta: vocab_only       = 0
0.00.632.068 I llm_load_print_meta: n_ctx_train      = 8192
0.00.632.068 I llm_load_print_meta: n_embd           = 2048
0.00.632.069 I llm_load_print_meta: n_layer          = 18
0.00.632.130 I llm_load_print_meta: n_head           = 8
0.00.632.137 I llm_load_print_meta: n_head_kv        = 1
0.00.632.137 I llm_load_print_meta: n_rot            = 256
0.00.632.138 I llm_load_print_meta: n_swa            = 0
0.00.632.138 I llm_load_print_meta: n_embd_head_k    = 256
0.00.632.138 I llm_load_print_meta: n_embd_head_v    = 256
0.00.632.143 I llm_load_print_meta: n_gqa            = 8
0.00.632.148 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.632.153 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.632.154 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.632.155 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.632.156 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.632.156 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.632.156 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.632.161 I llm_load_print_meta: n_ff             = 16384
0.00.632.162 I llm_load_print_meta: n_expert         = 0
0.00.632.162 I llm_load_print_meta: n_expert_used    = 0
0.00.632.163 I llm_load_print_meta: causal attn      = 1
0.00.632.163 I llm_load_print_meta: pooling type     = 0
0.00.632.163 I llm_load_print_meta: rope type        = 2
0.00.632.164 I llm_load_print_meta: rope scaling     = linear
0.00.632.166 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.632.166 I llm_load_print_meta: freq_scale_train = 1
0.00.632.167 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.632.167 I llm_load_print_meta: rope_finetuned   = unknown
0.00.632.167 I llm_load_print_meta: ssm_d_conv       = 0
0.00.632.168 I llm_load_print_meta: ssm_d_inner      = 0
0.00.632.168 I llm_load_print_meta: ssm_d_state      = 0
0.00.632.168 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.632.168 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.632.169 I llm_load_print_meta: model type       = 2B
0.00.632.194 I llm_load_print_meta: model ftype      = Q8_0
0.00.632.196 I llm_load_print_meta: model params     = 2.51 B
0.00.632.210 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.632.211 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.632.216 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.632.216 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.632.217 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.632.218 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.632.218 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.632.219 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.632.226 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.632.228 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.632.229 I llm_load_print_meta: max token length = 93
0.00.719.821 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.719.829 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.719.830 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.719.831 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.719.831 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.719.832 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.725.695 I llama_new_context_with_model: n_seq_max     = 1
0.00.725.703 I llama_new_context_with_model: n_ctx         = 4096
0.00.725.703 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.725.704 I llama_new_context_with_model: n_batch       = 2048
0.00.725.704 I llama_new_context_with_model: n_ubatch      = 512
0.00.725.704 I llama_new_context_with_model: flash_attn    = 0
0.00.725.707 I llama_new_context_with_model: freq_base     = 10000.0
0.00.725.708 I llama_new_context_with_model: freq_scale    = 1
0.00.725.709 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.742.705 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.742.745 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.742.881 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.745.396 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.745.400 I llama_new_context_with_model: graph nodes  = 601
0.00.745.400 I llama_new_context_with_model: graph splits = 1
0.00.745.423 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.350.528 I main: llama threadpool init, n_threads = 4
0.01.350.541 I 
0.01.350.654 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.350.658 I 
0.01.350.910 I sampler seed: 1174759245
0.01.350.923 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.350.929 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.350.933 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.350.933 I 
 increasities of the human body to facilitate movement and interaction with the environment. [end of text]


0.08.050.652 I llama_perf_sampler_print:    sampling time =      24.22 ms /    17 runs   (    1.42 ms per token,   701.99 tokens per second)
0.08.050.655 I llama_perf_context_print:        load time =    1349.32 ms
0.08.050.656 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.050.657 I llama_perf_context_print:        eval time =    6654.40 ms /    16 runs   (  415.90 ms per token,     2.40 tokens per second)
0.08.050.681 I llama_perf_context_print:       total time =    6700.13 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.703 I build: 4056 (52b9fb36) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.920 I main: llama backend init
0.00.001.186 I main: load the model and apply lora adapter, if any
0.00.023.855 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.869 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.978 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.991 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.994 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.001 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.010 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.011 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.013 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.015 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.017 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.031 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.032 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.033 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.034 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.035 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.786 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.186 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.478 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.491 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.492 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.493 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.494 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.496 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.497 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.501 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.502 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.503 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.504 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.266.505 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.514 I llama_model_loader: - type  f32:   37 tensors
0.00.266.517 I llama_model_loader: - type q8_0:  127 tensors
0.00.481.445 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.554.569 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.555.597 I llm_load_vocab: special tokens cache size = 5
0.00.650.617 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.650.694 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.650.695 I llm_load_print_meta: arch             = gemma
0.00.650.696 I llm_load_print_meta: vocab type       = SPM
0.00.650.697 I llm_load_print_meta: n_vocab          = 256000
0.00.650.699 I llm_load_print_meta: n_merges         = 0
0.00.650.700 I llm_load_print_meta: vocab_only       = 0
0.00.650.700 I llm_load_print_meta: n_ctx_train      = 8192
0.00.650.701 I llm_load_print_meta: n_embd           = 2048
0.00.650.701 I llm_load_print_meta: n_layer          = 18
0.00.650.766 I llm_load_print_meta: n_head           = 8
0.00.650.773 I llm_load_print_meta: n_head_kv        = 1
0.00.650.774 I llm_load_print_meta: n_rot            = 256
0.00.650.774 I llm_load_print_meta: n_swa            = 0
0.00.650.775 I llm_load_print_meta: n_embd_head_k    = 256
0.00.650.775 I llm_load_print_meta: n_embd_head_v    = 256
0.00.650.780 I llm_load_print_meta: n_gqa            = 8
0.00.650.798 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.650.805 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.650.807 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.650.808 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.650.809 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.650.809 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.650.810 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.650.818 I llm_load_print_meta: n_ff             = 16384
0.00.650.822 I llm_load_print_meta: n_expert         = 0
0.00.650.823 I llm_load_print_meta: n_expert_used    = 0
0.00.650.823 I llm_load_print_meta: causal attn      = 1
0.00.650.824 I llm_load_print_meta: pooling type     = 0
0.00.650.824 I llm_load_print_meta: rope type        = 2
0.00.650.826 I llm_load_print_meta: rope scaling     = linear
0.00.650.827 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.650.832 I llm_load_print_meta: freq_scale_train = 1
0.00.650.833 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.650.833 I llm_load_print_meta: rope_finetuned   = unknown
0.00.650.834 I llm_load_print_meta: ssm_d_conv       = 0
0.00.650.834 I llm_load_print_meta: ssm_d_inner      = 0
0.00.650.835 I llm_load_print_meta: ssm_d_state      = 0
0.00.650.835 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.650.836 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.650.837 I llm_load_print_meta: model type       = 2B
0.00.650.838 I llm_load_print_meta: model ftype      = Q8_0
0.00.650.839 I llm_load_print_meta: model params     = 2.51 B
0.00.650.852 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.650.854 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.650.855 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.650.856 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.650.857 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.650.857 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.650.858 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.650.859 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.650.866 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.650.880 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.650.882 I llm_load_print_meta: max token length = 93
0.00.723.205 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.723.216 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.729.265 I llama_new_context_with_model: n_seq_max     = 1
0.00.729.272 I llama_new_context_with_model: n_ctx         = 4096
0.00.729.273 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.729.273 I llama_new_context_with_model: n_batch       = 2048
0.00.729.274 I llama_new_context_with_model: n_ubatch      = 512
0.00.729.274 I llama_new_context_with_model: flash_attn    = 0
0.00.729.277 I llama_new_context_with_model: freq_base     = 10000.0
0.00.729.277 I llama_new_context_with_model: freq_scale    = 1
0.00.729.278 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.745.824 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.745.864 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.745.986 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.748.555 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.748.560 I llama_new_context_with_model: graph nodes  = 601
0.00.748.560 I llama_new_context_with_model: graph splits = 1
0.00.748.588 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.359.266 I main: llama threadpool init, n_threads = 4
0.01.359.280 I 
0.01.359.405 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.359.409 I 
0.01.359.674 I sampler seed: 582919767
0.01.359.687 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.359.696 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.359.700 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.359.700 I 
 increamically.

I was never good with numbers. My father always told me that I was a slow learner. But I always dreamed of achieving something big.

0.14.852.537 I llama_perf_sampler_print:    sampling time =      48.20 ms /    33 runs   (    1.46 ms per token,   684.65 tokens per second)
0.14.852.540 I llama_perf_context_print:        load time =    1357.97 ms
0.14.852.542 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.852.566 I llama_perf_context_print:        eval time =   13404.20 ms /    32 runs   (  418.88 ms per token,     2.39 tokens per second)
0.14.852.568 I llama_perf_context_print:       total time =   13493.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m2.531s
user	3m21.303s
sys	0m9.643s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4056 (52b9fb36)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198641.97 ms
main:    total time = 198641.97 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.700 I build: 4056 (52b9fb36) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.945 I main: llama backend init
0.00.001.205 I main: load the model and apply lora adapter, if any
0.00.023.832 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.845 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.945 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.957 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.959 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.964 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.968 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.969 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.970 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.971 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.972 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.979 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.980 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.982 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.983 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.985 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.861 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.483 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.050 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.065 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.066 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.067 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.068 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.069 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.070 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.074 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.075 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.076 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.077 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.079 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.087 I llama_model_loader: - type  f32:   37 tensors
0.00.267.090 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.091 I llama_model_loader: - type q6_K:   19 tensors
0.00.464.696 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.536.605 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.537.604 I llm_load_vocab: special tokens cache size = 5
0.00.632.023 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.632.093 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.632.097 I llm_load_print_meta: arch             = gemma
0.00.632.098 I llm_load_print_meta: vocab type       = SPM
0.00.632.099 I llm_load_print_meta: n_vocab          = 256000
0.00.632.101 I llm_load_print_meta: n_merges         = 0
0.00.632.102 I llm_load_print_meta: vocab_only       = 0
0.00.632.102 I llm_load_print_meta: n_ctx_train      = 8192
0.00.632.102 I llm_load_print_meta: n_embd           = 2048
0.00.632.103 I llm_load_print_meta: n_layer          = 18
0.00.632.167 I llm_load_print_meta: n_head           = 8
0.00.632.177 I llm_load_print_meta: n_head_kv        = 1
0.00.632.177 I llm_load_print_meta: n_rot            = 256
0.00.632.177 I llm_load_print_meta: n_swa            = 0
0.00.632.178 I llm_load_print_meta: n_embd_head_k    = 256
0.00.632.179 I llm_load_print_meta: n_embd_head_v    = 256
0.00.632.184 I llm_load_print_meta: n_gqa            = 8
0.00.632.190 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.632.197 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.632.198 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.632.200 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.632.201 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.632.201 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.632.202 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.632.207 I llm_load_print_meta: n_ff             = 16384
0.00.632.207 I llm_load_print_meta: n_expert         = 0
0.00.632.208 I llm_load_print_meta: n_expert_used    = 0
0.00.632.209 I llm_load_print_meta: causal attn      = 1
0.00.632.209 I llm_load_print_meta: pooling type     = 0
0.00.632.210 I llm_load_print_meta: rope type        = 2
0.00.632.211 I llm_load_print_meta: rope scaling     = linear
0.00.632.212 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.632.215 I llm_load_print_meta: freq_scale_train = 1
0.00.632.215 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.632.215 I llm_load_print_meta: rope_finetuned   = unknown
0.00.632.216 I llm_load_print_meta: ssm_d_conv       = 0
0.00.632.216 I llm_load_print_meta: ssm_d_inner      = 0
0.00.632.216 I llm_load_print_meta: ssm_d_state      = 0
0.00.632.216 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.632.217 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.632.218 I llm_load_print_meta: model type       = 2B
0.00.632.218 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.632.219 I llm_load_print_meta: model params     = 2.51 B
0.00.632.229 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.632.229 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.632.232 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.632.233 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.632.234 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.632.234 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.632.234 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.632.235 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.632.240 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.632.241 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.632.242 I llm_load_print_meta: max token length = 93
0.00.694.774 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.694.783 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.694.784 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.694.785 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.694.786 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.694.786 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.700.716 I llama_new_context_with_model: n_seq_max     = 1
0.00.700.724 I llama_new_context_with_model: n_ctx         = 4096
0.00.700.725 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.700.725 I llama_new_context_with_model: n_batch       = 2048
0.00.700.726 I llama_new_context_with_model: n_ubatch      = 512
0.00.700.726 I llama_new_context_with_model: flash_attn    = 0
0.00.700.729 I llama_new_context_with_model: freq_base     = 10000.0
0.00.700.730 I llama_new_context_with_model: freq_scale    = 1
0.00.700.731 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.717.802 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.717.843 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.717.968 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.720.521 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.720.526 I llama_new_context_with_model: graph nodes  = 601
0.00.720.526 I llama_new_context_with_model: graph splits = 1
0.00.720.551 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.290.802 I main: llama threadpool init, n_threads = 4
0.01.290.816 I 
0.01.290.930 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.290.933 I 
0.01.291.175 I sampler seed: 3173096100
0.01.291.189 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.291.195 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.291.199 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.291.200 I 
 seconally and without interruption, and thereupon deliver the message.

**Message:**

"Greetings, esteemed colleagues, esteemed guests, and all those who have graced

0.12.135.618 I llama_perf_sampler_print:    sampling time =      48.15 ms /    33 runs   (    1.46 ms per token,   685.42 tokens per second)
0.12.135.621 I llama_perf_context_print:        load time =    1289.50 ms
0.12.135.623 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.135.624 I llama_perf_context_print:        eval time =   10755.19 ms /    32 runs   (  336.10 ms per token,     2.98 tokens per second)
0.12.135.625 I llama_perf_context_print:       total time =   10844.83 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4056 (52b9fb36)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198858.83 ms
main:    total time = 198858.83 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.664 I build: 4056 (52b9fb36) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.001.119 I main: load the model and apply lora adapter, if any
0.00.024.915 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.027 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.043 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.045 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.050 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.053 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.054 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.055 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.056 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.057 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.064 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.065 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.066 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.067 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.068 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.443 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.936 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.067 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.078 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.079 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.080 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.081 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.082 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.084 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.088 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.089 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.097 I llama_model_loader: - type  f32:   37 tensors
0.00.267.099 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.100 I llama_model_loader: - type q6_K:   19 tensors
0.00.460.883 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.530.872 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.531.877 I llm_load_vocab: special tokens cache size = 5
0.00.626.732 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.626.801 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.626.802 I llm_load_print_meta: arch             = gemma
0.00.626.803 I llm_load_print_meta: vocab type       = SPM
0.00.626.803 I llm_load_print_meta: n_vocab          = 256000
0.00.626.805 I llm_load_print_meta: n_merges         = 0
0.00.626.806 I llm_load_print_meta: vocab_only       = 0
0.00.626.806 I llm_load_print_meta: n_ctx_train      = 8192
0.00.626.806 I llm_load_print_meta: n_embd           = 2048
0.00.626.807 I llm_load_print_meta: n_layer          = 18
0.00.626.871 I llm_load_print_meta: n_head           = 8
0.00.626.878 I llm_load_print_meta: n_head_kv        = 1
0.00.626.879 I llm_load_print_meta: n_rot            = 256
0.00.626.879 I llm_load_print_meta: n_swa            = 0
0.00.626.879 I llm_load_print_meta: n_embd_head_k    = 256
0.00.626.880 I llm_load_print_meta: n_embd_head_v    = 256
0.00.626.885 I llm_load_print_meta: n_gqa            = 8
0.00.626.890 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.626.895 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.626.896 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.626.898 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.626.898 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.626.898 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.626.899 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.626.903 I llm_load_print_meta: n_ff             = 16384
0.00.626.904 I llm_load_print_meta: n_expert         = 0
0.00.626.904 I llm_load_print_meta: n_expert_used    = 0
0.00.626.905 I llm_load_print_meta: causal attn      = 1
0.00.626.905 I llm_load_print_meta: pooling type     = 0
0.00.626.906 I llm_load_print_meta: rope type        = 2
0.00.626.906 I llm_load_print_meta: rope scaling     = linear
0.00.626.908 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.626.908 I llm_load_print_meta: freq_scale_train = 1
0.00.626.909 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.626.909 I llm_load_print_meta: rope_finetuned   = unknown
0.00.626.909 I llm_load_print_meta: ssm_d_conv       = 0
0.00.626.910 I llm_load_print_meta: ssm_d_inner      = 0
0.00.626.910 I llm_load_print_meta: ssm_d_state      = 0
0.00.626.910 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.626.911 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.626.911 I llm_load_print_meta: model type       = 2B
0.00.626.912 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.626.913 I llm_load_print_meta: model params     = 2.51 B
0.00.626.924 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.626.924 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.626.925 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.626.926 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.626.927 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.626.927 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.626.928 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.626.928 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.626.934 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.626.935 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.626.935 I llm_load_print_meta: max token length = 93
0.00.685.462 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.691.373 I llama_new_context_with_model: n_seq_max     = 1
0.00.691.381 I llama_new_context_with_model: n_ctx         = 4096
0.00.691.382 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.691.382 I llama_new_context_with_model: n_batch       = 2048
0.00.691.383 I llama_new_context_with_model: n_ubatch      = 512
0.00.691.383 I llama_new_context_with_model: flash_attn    = 0
0.00.691.387 I llama_new_context_with_model: freq_base     = 10000.0
0.00.691.388 I llama_new_context_with_model: freq_scale    = 1
0.00.691.389 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.708.828 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.708.873 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.709.003 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.711.603 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.711.607 I llama_new_context_with_model: graph nodes  = 601
0.00.711.608 I llama_new_context_with_model: graph splits = 1
0.00.711.633 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.283.205 I main: llama threadpool init, n_threads = 4
0.01.283.216 I 
0.01.283.327 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.283.331 I 
0.01.283.562 I sampler seed: 3094145242
0.01.283.575 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.283.582 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.283.583 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.283.583 I 
 seconded, 
the air was thick with anticipation, and the tension was palpable.

The judges stood poised, their eyes fixed on the unfolding drama.

0.12.156.013 I llama_perf_sampler_print:    sampling time =      47.97 ms /    33 runs   (    1.45 ms per token,   687.99 tokens per second)
0.12.156.016 I llama_perf_context_print:        load time =    1281.99 ms
0.12.156.017 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.156.019 I llama_perf_context_print:        eval time =   10782.31 ms /    32 runs   (  336.95 ms per token,     2.97 tokens per second)
0.12.156.020 I llama_perf_context_print:       total time =   10872.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.755s
user	50m11.575s
sys	0m6.568s
