+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.703 I build: 3985 (524afeec) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.908 I main: llama backend init
0.00.002.861 I main: load the model and apply lora adapter, if any
0.00.024.504 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.710 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.795 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.805 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.807 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.811 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.812 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.813 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.814 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.815 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.816 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.823 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.827 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.828 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.830 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.831 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.616 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.568 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.149 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.156 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.158 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.158 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.159 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.161 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.162 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.166 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.167 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.168 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.169 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.170 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.179 I llama_model_loader: - type  f32:   37 tensors
0.00.267.182 I llama_model_loader: - type q8_0:  127 tensors
0.00.448.686 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.859 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.924 I llm_load_vocab: special tokens cache size = 5
0.00.604.297 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.604.367 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.604.368 I llm_load_print_meta: arch             = gemma
0.00.604.369 I llm_load_print_meta: vocab type       = SPM
0.00.604.370 I llm_load_print_meta: n_vocab          = 256000
0.00.604.372 I llm_load_print_meta: n_merges         = 0
0.00.604.373 I llm_load_print_meta: vocab_only       = 0
0.00.604.373 I llm_load_print_meta: n_ctx_train      = 8192
0.00.604.373 I llm_load_print_meta: n_embd           = 2048
0.00.604.374 I llm_load_print_meta: n_layer          = 18
0.00.604.436 I llm_load_print_meta: n_head           = 8
0.00.604.443 I llm_load_print_meta: n_head_kv        = 1
0.00.604.444 I llm_load_print_meta: n_rot            = 256
0.00.604.444 I llm_load_print_meta: n_swa            = 0
0.00.604.445 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.445 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.449 I llm_load_print_meta: n_gqa            = 8
0.00.604.454 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.460 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.461 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.463 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.464 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.468 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.469 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.473 I llm_load_print_meta: n_ff             = 16384
0.00.604.474 I llm_load_print_meta: n_expert         = 0
0.00.604.474 I llm_load_print_meta: n_expert_used    = 0
0.00.604.474 I llm_load_print_meta: causal attn      = 1
0.00.604.475 I llm_load_print_meta: pooling type     = 0
0.00.604.475 I llm_load_print_meta: rope type        = 2
0.00.604.475 I llm_load_print_meta: rope scaling     = linear
0.00.604.477 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.477 I llm_load_print_meta: freq_scale_train = 1
0.00.604.478 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.481 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.481 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.482 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.482 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.482 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.483 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.483 I llm_load_print_meta: model type       = 2B
0.00.604.485 I llm_load_print_meta: model ftype      = Q8_0
0.00.604.485 I llm_load_print_meta: model params     = 2.51 B
0.00.604.486 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.604.486 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.487 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.487 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.488 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.489 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.490 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.490 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.496 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.497 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.498 I llm_load_print_meta: max token length = 93
0.00.604.664 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.715.814 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.715.825 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.715.826 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.715.827 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.715.828 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.715.828 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.721.480 I llama_new_context_with_model: n_ctx      = 8192
0.00.721.487 I llama_new_context_with_model: n_batch    = 2048
0.00.721.487 I llama_new_context_with_model: n_ubatch   = 512
0.00.721.488 I llama_new_context_with_model: flash_attn = 0
0.00.721.490 I llama_new_context_with_model: freq_base  = 10000.0
0.00.721.491 I llama_new_context_with_model: freq_scale = 1
0.00.750.940 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.750.984 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.751.096 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.752.457 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.752.462 I llama_new_context_with_model: graph nodes  = 601
0.00.752.463 I llama_new_context_with_model: graph splits = 1
0.00.752.478 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.365.045 I main: llama threadpool init, n_threads = 4
0.01.365.058 I 
0.01.365.165 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.365.169 I 
0.01.365.400 I sampler seed: 2738968988
0.01.365.412 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.365.420 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.365.420 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.365.421 I 
 increasities! 🤪 [end of text]


0.03.889.913 I llama_perf_sampler_print:    sampling time =       9.06 ms /     7 runs   (    1.29 ms per token,   772.63 tokens per second)
0.03.889.917 I llama_perf_context_print:        load time =    1362.10 ms
0.03.889.918 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.889.944 I llama_perf_context_print:        eval time =    2506.09 ms /     6 runs   (  417.68 ms per token,     2.39 tokens per second)
0.03.889.945 I llama_perf_context_print:       total time =    2524.88 ms /     7 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.631 I build: 3985 (524afeec) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.841 I main: llama backend init
0.00.002.830 I main: load the model and apply lora adapter, if any
0.00.024.916 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.009 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.024 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.025 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.030 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.032 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.033 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.034 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.035 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.036 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.043 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.044 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.045 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.047 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.049 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.734 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.355 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.988 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.998 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.999 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.000 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.001 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.002 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.004 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.026 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.028 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.036 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.040 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.266.041 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.049 I llama_model_loader: - type  f32:   37 tensors
0.00.266.054 I llama_model_loader: - type q8_0:  127 tensors
0.00.448.555 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.162 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.003 I llm_load_vocab: special tokens cache size = 5
0.00.612.824 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.893 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.893 I llm_load_print_meta: arch             = gemma
0.00.612.894 I llm_load_print_meta: vocab type       = SPM
0.00.612.895 I llm_load_print_meta: n_vocab          = 256000
0.00.612.898 I llm_load_print_meta: n_merges         = 0
0.00.612.898 I llm_load_print_meta: vocab_only       = 0
0.00.612.899 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.899 I llm_load_print_meta: n_embd           = 2048
0.00.612.899 I llm_load_print_meta: n_layer          = 18
0.00.612.963 I llm_load_print_meta: n_head           = 8
0.00.612.970 I llm_load_print_meta: n_head_kv        = 1
0.00.612.971 I llm_load_print_meta: n_rot            = 256
0.00.612.971 I llm_load_print_meta: n_swa            = 0
0.00.612.971 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.972 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.976 I llm_load_print_meta: n_gqa            = 8
0.00.612.980 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.985 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.986 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.988 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.988 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.989 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.989 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.612.994 I llm_load_print_meta: n_ff             = 16384
0.00.612.994 I llm_load_print_meta: n_expert         = 0
0.00.612.995 I llm_load_print_meta: n_expert_used    = 0
0.00.612.995 I llm_load_print_meta: causal attn      = 1
0.00.612.995 I llm_load_print_meta: pooling type     = 0
0.00.612.995 I llm_load_print_meta: rope type        = 2
0.00.612.996 I llm_load_print_meta: rope scaling     = linear
0.00.612.997 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.998 I llm_load_print_meta: freq_scale_train = 1
0.00.612.998 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.999 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.999 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.999 I llm_load_print_meta: ssm_d_inner      = 0
0.00.613.000 I llm_load_print_meta: ssm_d_state      = 0
0.00.613.000 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.613.000 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.613.001 I llm_load_print_meta: model type       = 2B
0.00.613.002 I llm_load_print_meta: model ftype      = Q8_0
0.00.613.002 I llm_load_print_meta: model params     = 2.51 B
0.00.613.003 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.613.003 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.613.004 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.613.004 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.613.005 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.613.005 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.613.006 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.613.006 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.613.011 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.613.013 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.613.013 I llm_load_print_meta: max token length = 93
0.00.613.187 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.712.790 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.718.557 I llama_new_context_with_model: n_ctx      = 8192
0.00.718.564 I llama_new_context_with_model: n_batch    = 2048
0.00.718.565 I llama_new_context_with_model: n_ubatch   = 512
0.00.718.565 I llama_new_context_with_model: flash_attn = 0
0.00.718.568 I llama_new_context_with_model: freq_base  = 10000.0
0.00.718.569 I llama_new_context_with_model: freq_scale = 1
0.00.748.491 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.748.537 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.748.651 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.750.076 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.750.081 I llama_new_context_with_model: graph nodes  = 601
0.00.750.082 I llama_new_context_with_model: graph splits = 1
0.00.750.097 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.363.112 I main: llama threadpool init, n_threads = 4
0.01.363.125 I 
0.01.363.232 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.363.236 I 
0.01.363.466 I sampler seed: 3810721264
0.01.363.478 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.363.486 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.363.486 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.363.487 I 
 increasities from the 1960s and 1970s, along with contemporary examples of feminist discourse that resonates with these themes.



0.14.782.488 I llama_perf_sampler_print:    sampling time =      48.25 ms /    33 runs   (    1.46 ms per token,   683.97 tokens per second)
0.14.782.491 I llama_perf_context_print:        load time =    1360.20 ms
0.14.782.492 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.782.515 I llama_perf_context_print:        eval time =   13326.33 ms /    32 runs   (  416.45 ms per token,     2.40 tokens per second)
0.14.782.517 I llama_perf_context_print:       total time =   13419.39 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 3985 (524afeec) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.871 I main: llama backend init
0.00.002.819 I main: load the model and apply lora adapter, if any
0.00.025.056 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.279 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.369 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.380 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.382 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.386 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.391 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.393 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.395 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.397 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.398 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.407 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.412 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.413 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.415 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.417 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.327 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.279 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.881 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.890 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.891 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.892 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.893 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.894 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.895 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.900 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.901 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.903 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.908 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.268.910 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.921 I llama_model_loader: - type  f32:   37 tensors
0.00.268.926 I llama_model_loader: - type q8_0:  127 tensors
0.00.451.595 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.838 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.779 I llm_load_vocab: special tokens cache size = 5
0.00.612.168 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.244 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.249 I llm_load_print_meta: arch             = gemma
0.00.612.250 I llm_load_print_meta: vocab type       = SPM
0.00.612.250 I llm_load_print_meta: n_vocab          = 256000
0.00.612.253 I llm_load_print_meta: n_merges         = 0
0.00.612.254 I llm_load_print_meta: vocab_only       = 0
0.00.612.254 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.255 I llm_load_print_meta: n_embd           = 2048
0.00.612.256 I llm_load_print_meta: n_layer          = 18
0.00.612.324 I llm_load_print_meta: n_head           = 8
0.00.612.334 I llm_load_print_meta: n_head_kv        = 1
0.00.612.335 I llm_load_print_meta: n_rot            = 256
0.00.612.335 I llm_load_print_meta: n_swa            = 0
0.00.612.335 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.336 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.342 I llm_load_print_meta: n_gqa            = 8
0.00.612.361 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.370 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.375 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.377 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.377 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.378 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.378 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.612.386 I llm_load_print_meta: n_ff             = 16384
0.00.612.387 I llm_load_print_meta: n_expert         = 0
0.00.612.391 I llm_load_print_meta: n_expert_used    = 0
0.00.612.391 I llm_load_print_meta: causal attn      = 1
0.00.612.392 I llm_load_print_meta: pooling type     = 0
0.00.612.392 I llm_load_print_meta: rope type        = 2
0.00.612.393 I llm_load_print_meta: rope scaling     = linear
0.00.612.396 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.396 I llm_load_print_meta: freq_scale_train = 1
0.00.612.397 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.398 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.398 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.418 I llm_load_print_meta: ssm_d_inner      = 0
0.00.612.422 I llm_load_print_meta: ssm_d_state      = 0
0.00.612.423 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.612.423 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.612.424 I llm_load_print_meta: model type       = 2B
0.00.612.425 I llm_load_print_meta: model ftype      = Q8_0
0.00.612.427 I llm_load_print_meta: model params     = 2.51 B
0.00.612.428 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.612.429 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.612.430 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.612.430 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.612.431 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.612.432 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.612.433 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.612.435 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.612.442 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.612.444 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.612.447 I llm_load_print_meta: max token length = 93
0.00.612.628 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.710.812 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.710.824 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.710.825 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.710.825 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.710.826 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.710.826 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.716.670 I llama_new_context_with_model: n_ctx      = 8192
0.00.716.676 I llama_new_context_with_model: n_batch    = 2048
0.00.716.677 I llama_new_context_with_model: n_ubatch   = 512
0.00.716.677 I llama_new_context_with_model: flash_attn = 0
0.00.716.679 I llama_new_context_with_model: freq_base  = 10000.0
0.00.716.680 I llama_new_context_with_model: freq_scale = 1
0.00.745.801 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.745.849 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.745.974 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.747.386 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.747.391 I llama_new_context_with_model: graph nodes  = 601
0.00.747.391 I llama_new_context_with_model: graph splits = 1
0.00.747.408 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.360.804 I main: llama threadpool init, n_threads = 4
0.01.360.817 I 
0.01.360.933 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.360.937 I 
0.01.361.200 I sampler seed: 3312069500
0.01.361.212 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.361.220 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.361.224 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.361.225 I 
 increasities with the ability to detect and prioritize potential threats.

**Capabilities:**

* **Threat Detection:** Identifies anomalous behavior, suspicious activities, and emerging

0.14.889.669 I llama_perf_sampler_print:    sampling time =      48.67 ms /    33 runs   (    1.47 ms per token,   678.04 tokens per second)
0.14.889.672 I llama_perf_context_print:        load time =    1357.88 ms
0.14.889.673 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.889.675 I llama_perf_context_print:        eval time =   13434.81 ms /    32 runs   (  419.84 ms per token,     2.38 tokens per second)
0.14.889.676 I llama_perf_context_print:       total time =   13528.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.646 I build: 3985 (524afeec) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.002.772 I main: load the model and apply lora adapter, if any
0.00.024.778 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.987 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.075 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.085 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.088 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.092 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.094 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.095 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.096 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.097 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.098 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.105 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.106 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.107 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.108 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.109 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.812 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.676 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.278 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.285 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.287 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.288 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.289 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.290 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.291 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.294 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.295 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.297 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.298 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.266.299 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.306 I llama_model_loader: - type  f32:   37 tensors
0.00.266.310 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.740 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.155 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.101 I llm_load_vocab: special tokens cache size = 5
0.00.593.039 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.593.104 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.593.105 I llm_load_print_meta: arch             = gemma
0.00.593.106 I llm_load_print_meta: vocab type       = SPM
0.00.593.106 I llm_load_print_meta: n_vocab          = 256000
0.00.593.108 I llm_load_print_meta: n_merges         = 0
0.00.593.109 I llm_load_print_meta: vocab_only       = 0
0.00.593.109 I llm_load_print_meta: n_ctx_train      = 8192
0.00.593.109 I llm_load_print_meta: n_embd           = 2048
0.00.593.110 I llm_load_print_meta: n_layer          = 18
0.00.593.173 I llm_load_print_meta: n_head           = 8
0.00.593.179 I llm_load_print_meta: n_head_kv        = 1
0.00.593.180 I llm_load_print_meta: n_rot            = 256
0.00.593.181 I llm_load_print_meta: n_swa            = 0
0.00.593.181 I llm_load_print_meta: n_embd_head_k    = 256
0.00.593.181 I llm_load_print_meta: n_embd_head_v    = 256
0.00.593.186 I llm_load_print_meta: n_gqa            = 8
0.00.593.191 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.593.200 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.593.201 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.593.205 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.593.206 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.593.206 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.593.207 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.593.212 I llm_load_print_meta: n_ff             = 16384
0.00.593.213 I llm_load_print_meta: n_expert         = 0
0.00.593.214 I llm_load_print_meta: n_expert_used    = 0
0.00.593.214 I llm_load_print_meta: causal attn      = 1
0.00.593.214 I llm_load_print_meta: pooling type     = 0
0.00.593.217 I llm_load_print_meta: rope type        = 2
0.00.593.217 I llm_load_print_meta: rope scaling     = linear
0.00.593.218 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.593.219 I llm_load_print_meta: freq_scale_train = 1
0.00.593.219 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.593.220 I llm_load_print_meta: rope_finetuned   = unknown
0.00.593.220 I llm_load_print_meta: ssm_d_conv       = 0
0.00.593.221 I llm_load_print_meta: ssm_d_inner      = 0
0.00.593.221 I llm_load_print_meta: ssm_d_state      = 0
0.00.593.221 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.593.222 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.593.222 I llm_load_print_meta: model type       = 2B
0.00.593.224 I llm_load_print_meta: model ftype      = Q8_0
0.00.593.224 I llm_load_print_meta: model params     = 2.51 B
0.00.593.225 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.593.227 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.593.228 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.593.228 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.593.228 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.593.229 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.593.229 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.593.230 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.593.235 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.593.237 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.593.238 I llm_load_print_meta: max token length = 93
0.00.593.399 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.685.763 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.685.771 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.691.513 I llama_new_context_with_model: n_ctx      = 8192
0.00.691.521 I llama_new_context_with_model: n_batch    = 2048
0.00.691.521 I llama_new_context_with_model: n_ubatch   = 512
0.00.691.522 I llama_new_context_with_model: flash_attn = 0
0.00.691.525 I llama_new_context_with_model: freq_base  = 10000.0
0.00.691.526 I llama_new_context_with_model: freq_scale = 1
0.00.721.169 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.721.211 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.721.324 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.722.713 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.722.718 I llama_new_context_with_model: graph nodes  = 601
0.00.722.718 I llama_new_context_with_model: graph splits = 1
0.00.722.734 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.335.495 I main: llama threadpool init, n_threads = 4
0.01.335.507 I 
0.01.335.614 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.335.618 I 
0.01.335.864 I sampler seed: 3123157292
0.01.335.877 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.335.884 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.335.885 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.335.886 I 
 seconary.

**Assistant**

I apologize, but I am unable to provide information that may facilitate harmful or illegal activities. [end of text]


0.12.672.600 I llama_perf_sampler_print:    sampling time =      40.98 ms /    28 runs   (    1.46 ms per token,   683.26 tokens per second)
0.12.672.603 I llama_perf_context_print:        load time =    1332.63 ms
0.12.672.605 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.672.607 I llama_perf_context_print:        eval time =   11257.36 ms /    27 runs   (  416.94 ms per token,     2.40 tokens per second)
0.12.672.608 I llama_perf_context_print:       total time =   11337.11 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m56.918s
user	2m55.805s
sys	0m9.863s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3985 (524afeec)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198750.51 ms
main:    total time = 198750.51 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 3985 (524afeec) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.002.814 I main: load the model and apply lora adapter, if any
0.00.024.813 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.029 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.119 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.130 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.132 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.136 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.137 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.138 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.140 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.142 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.143 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.149 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.151 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.152 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.153 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.154 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.298 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.967 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.470 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.478 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.479 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.480 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.482 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.483 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.484 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.488 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.489 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.490 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.491 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.492 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.500 I llama_model_loader: - type  f32:   37 tensors
0.00.267.504 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.505 I llama_model_loader: - type q6_K:   19 tensors
0.00.445.778 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.502.906 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.503.776 I llm_load_vocab: special tokens cache size = 5
0.00.600.681 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.600.755 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.600.759 I llm_load_print_meta: arch             = gemma
0.00.600.760 I llm_load_print_meta: vocab type       = SPM
0.00.600.761 I llm_load_print_meta: n_vocab          = 256000
0.00.600.763 I llm_load_print_meta: n_merges         = 0
0.00.600.763 I llm_load_print_meta: vocab_only       = 0
0.00.600.764 I llm_load_print_meta: n_ctx_train      = 8192
0.00.600.764 I llm_load_print_meta: n_embd           = 2048
0.00.600.765 I llm_load_print_meta: n_layer          = 18
0.00.600.828 I llm_load_print_meta: n_head           = 8
0.00.600.838 I llm_load_print_meta: n_head_kv        = 1
0.00.600.839 I llm_load_print_meta: n_rot            = 256
0.00.600.839 I llm_load_print_meta: n_swa            = 0
0.00.600.839 I llm_load_print_meta: n_embd_head_k    = 256
0.00.600.841 I llm_load_print_meta: n_embd_head_v    = 256
0.00.600.846 I llm_load_print_meta: n_gqa            = 8
0.00.600.851 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.600.856 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.600.860 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.600.861 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.600.862 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.600.862 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.600.862 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.600.868 I llm_load_print_meta: n_ff             = 16384
0.00.600.869 I llm_load_print_meta: n_expert         = 0
0.00.600.870 I llm_load_print_meta: n_expert_used    = 0
0.00.600.870 I llm_load_print_meta: causal attn      = 1
0.00.600.870 I llm_load_print_meta: pooling type     = 0
0.00.600.871 I llm_load_print_meta: rope type        = 2
0.00.600.871 I llm_load_print_meta: rope scaling     = linear
0.00.600.874 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.600.875 I llm_load_print_meta: freq_scale_train = 1
0.00.600.879 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.600.879 I llm_load_print_meta: rope_finetuned   = unknown
0.00.600.879 I llm_load_print_meta: ssm_d_conv       = 0
0.00.600.880 I llm_load_print_meta: ssm_d_inner      = 0
0.00.600.880 I llm_load_print_meta: ssm_d_state      = 0
0.00.600.880 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.600.881 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.600.899 I llm_load_print_meta: model type       = 2B
0.00.600.901 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.600.902 I llm_load_print_meta: model params     = 2.51 B
0.00.600.903 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.600.903 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.600.904 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.600.905 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.600.905 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.600.906 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.600.906 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.600.907 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.600.913 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.600.914 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.600.915 I llm_load_print_meta: max token length = 93
0.00.601.082 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.665.452 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.665.463 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.665.464 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.665.464 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.665.465 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.665.465 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.671.195 I llama_new_context_with_model: n_ctx      = 8192
0.00.671.201 I llama_new_context_with_model: n_batch    = 2048
0.00.671.202 I llama_new_context_with_model: n_ubatch   = 512
0.00.671.202 I llama_new_context_with_model: flash_attn = 0
0.00.671.205 I llama_new_context_with_model: freq_base  = 10000.0
0.00.671.206 I llama_new_context_with_model: freq_scale = 1
0.00.700.231 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.700.276 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.700.392 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.701.800 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.701.805 I llama_new_context_with_model: graph nodes  = 601
0.00.701.805 I llama_new_context_with_model: graph splits = 1
0.00.701.821 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.279.894 I main: llama threadpool init, n_threads = 4
0.01.279.907 I 
0.01.280.015 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.280.019 I 
0.01.280.249 I sampler seed: 1622929729
0.01.280.260 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.280.269 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.280.269 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.280.270 I 
 increasities, which involve the mixing of dissimilar substances to create something novel.

**a) What is the meaning of the term "laurels"?**

0.12.301.553 I llama_perf_sampler_print:    sampling time =      48.29 ms /    33 runs   (    1.46 ms per token,   683.33 tokens per second)
0.12.301.568 I llama_perf_context_print:        load time =    1276.99 ms
0.12.301.570 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.301.572 I llama_perf_context_print:        eval time =   10928.46 ms /    32 runs   (  341.51 ms per token,     2.93 tokens per second)
0.12.301.572 I llama_perf_context_print:       total time =   11021.67 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3985 (524afeec)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199031.45 ms
main:    total time = 199031.45 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 3985 (524afeec) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.883 I main: llama backend init
0.00.002.838 I main: load the model and apply lora adapter, if any
0.00.024.786 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.884 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.899 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.901 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.905 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.909 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.910 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.911 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.913 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.915 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.922 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.924 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.929 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.931 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.932 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.020 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.836 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.462 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.470 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.471 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.472 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.473 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.475 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.476 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.480 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.481 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.489 I llama_model_loader: - type  f32:   37 tensors
0.00.266.493 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.495 I llama_model_loader: - type q6_K:   19 tensors
0.00.442.457 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.508.712 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.509.582 I llm_load_vocab: special tokens cache size = 5
0.00.602.985 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.603.055 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.603.056 I llm_load_print_meta: arch             = gemma
0.00.603.056 I llm_load_print_meta: vocab type       = SPM
0.00.603.057 I llm_load_print_meta: n_vocab          = 256000
0.00.603.059 I llm_load_print_meta: n_merges         = 0
0.00.603.060 I llm_load_print_meta: vocab_only       = 0
0.00.603.060 I llm_load_print_meta: n_ctx_train      = 8192
0.00.603.060 I llm_load_print_meta: n_embd           = 2048
0.00.603.061 I llm_load_print_meta: n_layer          = 18
0.00.603.127 I llm_load_print_meta: n_head           = 8
0.00.603.134 I llm_load_print_meta: n_head_kv        = 1
0.00.603.135 I llm_load_print_meta: n_rot            = 256
0.00.603.136 I llm_load_print_meta: n_swa            = 0
0.00.603.136 I llm_load_print_meta: n_embd_head_k    = 256
0.00.603.136 I llm_load_print_meta: n_embd_head_v    = 256
0.00.603.141 I llm_load_print_meta: n_gqa            = 8
0.00.603.146 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.603.150 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.603.152 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.603.154 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.603.155 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.603.164 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.603.165 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.603.170 I llm_load_print_meta: n_ff             = 16384
0.00.603.171 I llm_load_print_meta: n_expert         = 0
0.00.603.171 I llm_load_print_meta: n_expert_used    = 0
0.00.603.183 I llm_load_print_meta: causal attn      = 1
0.00.603.185 I llm_load_print_meta: pooling type     = 0
0.00.603.185 I llm_load_print_meta: rope type        = 2
0.00.603.186 I llm_load_print_meta: rope scaling     = linear
0.00.603.187 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.603.188 I llm_load_print_meta: freq_scale_train = 1
0.00.603.188 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.603.188 I llm_load_print_meta: rope_finetuned   = unknown
0.00.603.189 I llm_load_print_meta: ssm_d_conv       = 0
0.00.603.189 I llm_load_print_meta: ssm_d_inner      = 0
0.00.603.189 I llm_load_print_meta: ssm_d_state      = 0
0.00.603.191 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.603.191 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.603.192 I llm_load_print_meta: model type       = 2B
0.00.603.193 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.603.194 I llm_load_print_meta: model params     = 2.51 B
0.00.603.195 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.603.195 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.603.195 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.603.205 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.603.205 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.603.206 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.603.206 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.603.207 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.603.212 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.603.214 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.603.215 I llm_load_print_meta: max token length = 93
0.00.603.398 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.664.565 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.670.321 I llama_new_context_with_model: n_ctx      = 8192
0.00.670.327 I llama_new_context_with_model: n_batch    = 2048
0.00.670.328 I llama_new_context_with_model: n_ubatch   = 512
0.00.670.328 I llama_new_context_with_model: flash_attn = 0
0.00.670.331 I llama_new_context_with_model: freq_base  = 10000.0
0.00.670.332 I llama_new_context_with_model: freq_scale = 1
0.00.699.994 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.700.042 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.700.174 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.701.604 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.701.609 I llama_new_context_with_model: graph nodes  = 601
0.00.701.610 I llama_new_context_with_model: graph splits = 1
0.00.701.625 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.281.376 I main: llama threadpool init, n_threads = 4
0.01.281.389 I 
0.01.281.515 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.281.519 I 
0.01.281.760 I sampler seed: 3190044222
0.01.281.773 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.281.780 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.281.784 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.281.785 I 
 seconally.

The question is asking for a synonym for "seconde."

The context does not provide any additional information about the meaning of "seconde

0.12.272.389 I llama_perf_sampler_print:    sampling time =      48.70 ms /    33 runs   (    1.48 ms per token,   677.63 tokens per second)
0.12.272.394 I llama_perf_context_print:        load time =    1278.45 ms
0.12.272.396 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.272.398 I llama_perf_context_print:        eval time =   10897.06 ms /    32 runs   (  340.53 ms per token,     2.94 tokens per second)
0.12.272.399 I llama_perf_context_print:       total time =   10991.02 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.278s
user	50m12.831s
sys	0m6.394s
