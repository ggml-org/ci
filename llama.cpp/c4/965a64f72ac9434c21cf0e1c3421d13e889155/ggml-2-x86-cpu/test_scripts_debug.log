+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.630 I build: 3763 (c4965a64) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.002.774 I main: load the model and apply lora adapter, if any
0.00.024.833 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.019 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.110 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.122 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.123 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.128 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.129 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.129 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.131 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.131 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.133 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.140 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.140 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.149 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.150 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.151 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.382 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.584 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.688 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.695 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.696 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.697 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.697 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.698 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.699 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.702 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.703 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.704 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.705 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.195.706 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.714 I llama_model_loader: - type  f32:   37 tensors
0.00.195.718 I llama_model_loader: - type q8_0:  127 tensors
0.00.491.770 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.492.774 I llm_load_vocab: special tokens cache size = 5
0.00.551.624 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.551.679 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.551.679 I llm_load_print_meta: arch             = gemma
0.00.551.680 I llm_load_print_meta: vocab type       = SPM
0.00.551.681 I llm_load_print_meta: n_vocab          = 256000
0.00.551.684 I llm_load_print_meta: n_merges         = 0
0.00.551.685 I llm_load_print_meta: vocab_only       = 0
0.00.551.685 I llm_load_print_meta: n_ctx_train      = 8192
0.00.551.686 I llm_load_print_meta: n_embd           = 2048
0.00.551.686 I llm_load_print_meta: n_layer          = 18
0.00.551.717 I llm_load_print_meta: n_head           = 8
0.00.551.724 I llm_load_print_meta: n_head_kv        = 1
0.00.551.725 I llm_load_print_meta: n_rot            = 256
0.00.551.725 I llm_load_print_meta: n_swa            = 0
0.00.551.725 I llm_load_print_meta: n_embd_head_k    = 256
0.00.551.726 I llm_load_print_meta: n_embd_head_v    = 256
0.00.551.730 I llm_load_print_meta: n_gqa            = 8
0.00.551.755 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.551.761 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.551.762 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.551.764 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.551.772 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.551.773 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.551.774 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.551.779 I llm_load_print_meta: n_ff             = 16384
0.00.551.780 I llm_load_print_meta: n_expert         = 0
0.00.551.781 I llm_load_print_meta: n_expert_used    = 0
0.00.551.782 I llm_load_print_meta: causal attn      = 1
0.00.551.782 I llm_load_print_meta: pooling type     = 0
0.00.551.782 I llm_load_print_meta: rope type        = 2
0.00.551.783 I llm_load_print_meta: rope scaling     = linear
0.00.551.785 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.551.786 I llm_load_print_meta: freq_scale_train = 1
0.00.551.786 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.551.786 I llm_load_print_meta: rope_finetuned   = unknown
0.00.551.787 I llm_load_print_meta: ssm_d_conv       = 0
0.00.551.787 I llm_load_print_meta: ssm_d_inner      = 0
0.00.551.796 I llm_load_print_meta: ssm_d_state      = 0
0.00.551.796 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.551.797 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.551.797 I llm_load_print_meta: model type       = 2B
0.00.551.798 I llm_load_print_meta: model ftype      = Q8_0
0.00.551.799 I llm_load_print_meta: model params     = 2.51 B
0.00.551.800 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.551.800 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.551.801 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.551.802 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.551.802 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.551.803 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.551.803 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.551.804 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.551.805 I llm_load_print_meta: max token length = 93
0.00.551.980 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.650.807 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.650.818 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.650.819 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.650.820 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.650.820 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.650.821 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.656.602 I llama_new_context_with_model: n_ctx      = 8192
0.00.656.609 I llama_new_context_with_model: n_batch    = 2048
0.00.656.610 I llama_new_context_with_model: n_ubatch   = 512
0.00.656.610 I llama_new_context_with_model: flash_attn = 0
0.00.656.613 I llama_new_context_with_model: freq_base  = 10000.0
0.00.656.614 I llama_new_context_with_model: freq_scale = 1
0.00.686.308 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.686.351 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.686.461 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.687.821 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.687.827 I llama_new_context_with_model: graph nodes  = 601
0.00.687.828 I llama_new_context_with_model: graph splits = 1
0.00.687.845 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.299.443 I main: llama threadpool init, n_threads = 4
0.01.299.454 I 
0.01.299.545 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.299.549 I 
0.01.299.697 I sampler seed: 1628436591
0.01.299.708 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.299.713 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.299.714 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasels.

**Answer:** The answer is pirates.

Pirates are known for their love of adventure, plunder, and riches. They often sail the high

0.14.824.187 I llama_perf_sampler_print:    sampling time =      49.20 ms /    33 runs   (    1.49 ms per token,   670.75 tokens per second)
0.14.824.191 I llama_perf_context_print:        load time =    1296.59 ms
0.14.824.193 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.824.207 I llama_perf_context_print:        eval time =   13443.10 ms /    32 runs   (  420.10 ms per token,     2.38 tokens per second)
0.14.824.209 I llama_perf_context_print:       total time =   13524.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.641 I build: 3763 (c4965a64) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.840 I main: llama backend init
0.00.002.776 I main: load the model and apply lora adapter, if any
0.00.028.417 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.028.504 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.028.519 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.028.523 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.028.527 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.028.527 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.028.529 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.028.530 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.028.530 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.028.531 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.028.540 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.028.541 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.028.542 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.028.543 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.028.544 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.099.591 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.188.251 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.200.323 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.200.330 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.200.332 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.200.332 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.200.333 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.200.334 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.200.335 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.200.337 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.200.338 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.200.339 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.200.340 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.200.341 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.200.348 I llama_model_loader: - type  f32:   37 tensors
0.00.200.352 I llama_model_loader: - type q8_0:  127 tensors
0.00.478.494 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.479.570 I llm_load_vocab: special tokens cache size = 5
0.00.538.330 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.538.387 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.538.388 I llm_load_print_meta: arch             = gemma
0.00.538.389 I llm_load_print_meta: vocab type       = SPM
0.00.538.390 I llm_load_print_meta: n_vocab          = 256000
0.00.538.393 I llm_load_print_meta: n_merges         = 0
0.00.538.393 I llm_load_print_meta: vocab_only       = 0
0.00.538.393 I llm_load_print_meta: n_ctx_train      = 8192
0.00.538.394 I llm_load_print_meta: n_embd           = 2048
0.00.538.394 I llm_load_print_meta: n_layer          = 18
0.00.538.428 I llm_load_print_meta: n_head           = 8
0.00.538.435 I llm_load_print_meta: n_head_kv        = 1
0.00.538.436 I llm_load_print_meta: n_rot            = 256
0.00.538.436 I llm_load_print_meta: n_swa            = 0
0.00.538.437 I llm_load_print_meta: n_embd_head_k    = 256
0.00.538.437 I llm_load_print_meta: n_embd_head_v    = 256
0.00.538.442 I llm_load_print_meta: n_gqa            = 8
0.00.538.446 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.538.451 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.538.452 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.538.454 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.538.454 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.538.455 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.538.455 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.538.459 I llm_load_print_meta: n_ff             = 16384
0.00.538.460 I llm_load_print_meta: n_expert         = 0
0.00.538.460 I llm_load_print_meta: n_expert_used    = 0
0.00.538.460 I llm_load_print_meta: causal attn      = 1
0.00.538.461 I llm_load_print_meta: pooling type     = 0
0.00.538.461 I llm_load_print_meta: rope type        = 2
0.00.538.462 I llm_load_print_meta: rope scaling     = linear
0.00.538.463 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.538.463 I llm_load_print_meta: freq_scale_train = 1
0.00.538.464 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.538.464 I llm_load_print_meta: rope_finetuned   = unknown
0.00.538.464 I llm_load_print_meta: ssm_d_conv       = 0
0.00.538.465 I llm_load_print_meta: ssm_d_inner      = 0
0.00.538.465 I llm_load_print_meta: ssm_d_state      = 0
0.00.538.465 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.538.466 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.538.466 I llm_load_print_meta: model type       = 2B
0.00.538.467 I llm_load_print_meta: model ftype      = Q8_0
0.00.538.468 I llm_load_print_meta: model params     = 2.51 B
0.00.538.468 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.538.469 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.538.470 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.538.470 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.538.470 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.538.471 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.538.471 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.538.472 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.538.472 I llm_load_print_meta: max token length = 93
0.00.538.646 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.632.375 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.638.024 I llama_new_context_with_model: n_ctx      = 8192
0.00.638.033 I llama_new_context_with_model: n_batch    = 2048
0.00.638.033 I llama_new_context_with_model: n_ubatch   = 512
0.00.638.034 I llama_new_context_with_model: flash_attn = 0
0.00.638.037 I llama_new_context_with_model: freq_base  = 10000.0
0.00.638.037 I llama_new_context_with_model: freq_scale = 1
0.00.667.900 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.667.945 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.668.055 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.669.428 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.669.433 I llama_new_context_with_model: graph nodes  = 601
0.00.669.434 I llama_new_context_with_model: graph splits = 1
0.00.669.449 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.281.230 I main: llama threadpool init, n_threads = 4
0.01.281.242 I 
0.01.281.335 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.281.339 I 
0.01.281.489 I sampler seed: 3754779761
0.01.281.499 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.281.504 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.281.505 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities
I cannot answer this question as it contains sexually suggestive content that is inappropriate for me to provide. [end of text]


0.11.068.116 I llama_perf_sampler_print:    sampling time =      35.61 ms /    24 runs   (    1.48 ms per token,   673.99 tokens per second)
0.11.068.119 I llama_perf_context_print:        load time =    1278.38 ms
0.11.068.120 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.068.143 I llama_perf_context_print:        eval time =    9726.96 ms /    23 runs   (  422.91 ms per token,     2.36 tokens per second)
0.11.068.145 I llama_perf_context_print:       total time =    9786.90 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.642 I build: 3763 (c4965a64) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.866 I main: llama backend init
0.00.002.814 I main: load the model and apply lora adapter, if any
0.00.024.796 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.976 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.060 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.070 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.072 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.076 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.078 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.079 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.080 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.081 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.082 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.088 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.091 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.092 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.093 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.094 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.633 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.768 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.854 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.861 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.861 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.862 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.863 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.864 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.865 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.868 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.869 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.870 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.870 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.195.871 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.879 I llama_model_loader: - type  f32:   37 tensors
0.00.195.882 I llama_model_loader: - type q8_0:  127 tensors
0.00.495.235 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.496.269 I llm_load_vocab: special tokens cache size = 5
0.00.554.666 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.554.722 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.554.725 I llm_load_print_meta: arch             = gemma
0.00.554.726 I llm_load_print_meta: vocab type       = SPM
0.00.554.727 I llm_load_print_meta: n_vocab          = 256000
0.00.554.730 I llm_load_print_meta: n_merges         = 0
0.00.554.730 I llm_load_print_meta: vocab_only       = 0
0.00.554.731 I llm_load_print_meta: n_ctx_train      = 8192
0.00.554.731 I llm_load_print_meta: n_embd           = 2048
0.00.554.732 I llm_load_print_meta: n_layer          = 18
0.00.554.765 I llm_load_print_meta: n_head           = 8
0.00.554.774 I llm_load_print_meta: n_head_kv        = 1
0.00.554.775 I llm_load_print_meta: n_rot            = 256
0.00.554.775 I llm_load_print_meta: n_swa            = 0
0.00.554.777 I llm_load_print_meta: n_embd_head_k    = 256
0.00.554.777 I llm_load_print_meta: n_embd_head_v    = 256
0.00.554.782 I llm_load_print_meta: n_gqa            = 8
0.00.554.786 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.554.791 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.554.795 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.554.796 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.554.796 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.554.797 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.554.797 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.554.802 I llm_load_print_meta: n_ff             = 16384
0.00.554.802 I llm_load_print_meta: n_expert         = 0
0.00.554.803 I llm_load_print_meta: n_expert_used    = 0
0.00.554.804 I llm_load_print_meta: causal attn      = 1
0.00.554.804 I llm_load_print_meta: pooling type     = 0
0.00.554.804 I llm_load_print_meta: rope type        = 2
0.00.554.805 I llm_load_print_meta: rope scaling     = linear
0.00.554.807 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.554.808 I llm_load_print_meta: freq_scale_train = 1
0.00.554.808 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.554.809 I llm_load_print_meta: rope_finetuned   = unknown
0.00.554.809 I llm_load_print_meta: ssm_d_conv       = 0
0.00.554.810 I llm_load_print_meta: ssm_d_inner      = 0
0.00.554.810 I llm_load_print_meta: ssm_d_state      = 0
0.00.554.811 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.554.811 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.554.812 I llm_load_print_meta: model type       = 2B
0.00.554.813 I llm_load_print_meta: model ftype      = Q8_0
0.00.554.814 I llm_load_print_meta: model params     = 2.51 B
0.00.554.815 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.554.815 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.554.816 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.554.825 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.554.826 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.554.826 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.554.827 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.554.828 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.554.828 I llm_load_print_meta: max token length = 93
0.00.555.000 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.630.686 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.630.695 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.630.696 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.630.697 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.630.697 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.630.698 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.636.291 I llama_new_context_with_model: n_ctx      = 8192
0.00.636.297 I llama_new_context_with_model: n_batch    = 2048
0.00.636.298 I llama_new_context_with_model: n_ubatch   = 512
0.00.636.298 I llama_new_context_with_model: flash_attn = 0
0.00.636.301 I llama_new_context_with_model: freq_base  = 10000.0
0.00.636.301 I llama_new_context_with_model: freq_scale = 1
0.00.666.164 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.666.206 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.666.321 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.667.691 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.667.697 I llama_new_context_with_model: graph nodes  = 601
0.00.667.698 I llama_new_context_with_model: graph splits = 1
0.00.667.714 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.302.956 I main: llama threadpool init, n_threads = 4
0.01.302.968 I 
0.01.303.059 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.303.063 I 
0.01.303.216 I sampler seed: 3067535935
0.01.303.226 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.303.231 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.303.231 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably!

I cannot answer this question as it contains inappropriate language. [end of text]


0.08.038.427 I llama_perf_sampler_print:    sampling time =      24.73 ms /    17 runs   (    1.45 ms per token,   687.31 tokens per second)
0.08.038.430 I llama_perf_context_print:        load time =    1300.06 ms
0.08.038.432 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.038.433 I llama_perf_context_print:        eval time =    6693.78 ms /    16 runs   (  418.36 ms per token,     2.39 tokens per second)
0.08.038.434 I llama_perf_context_print:       total time =    6735.48 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.619 I build: 3763 (c4965a64) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.849 I main: llama backend init
0.00.002.825 I main: load the model and apply lora adapter, if any
0.00.024.812 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.002 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.088 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.099 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.100 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.105 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.109 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.111 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.112 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.114 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.115 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.122 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.125 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.126 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.127 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.132 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.429 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.655 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.700 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.708 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.709 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.710 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.711 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.712 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.713 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.716 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.717 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.718 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.718 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.195.719 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.728 I llama_model_loader: - type  f32:   37 tensors
0.00.195.731 I llama_model_loader: - type q8_0:  127 tensors
0.00.482.571 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.483.609 I llm_load_vocab: special tokens cache size = 5
0.00.541.990 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.542.053 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.542.054 I llm_load_print_meta: arch             = gemma
0.00.542.055 I llm_load_print_meta: vocab type       = SPM
0.00.542.056 I llm_load_print_meta: n_vocab          = 256000
0.00.542.059 I llm_load_print_meta: n_merges         = 0
0.00.542.059 I llm_load_print_meta: vocab_only       = 0
0.00.542.059 I llm_load_print_meta: n_ctx_train      = 8192
0.00.542.060 I llm_load_print_meta: n_embd           = 2048
0.00.542.060 I llm_load_print_meta: n_layer          = 18
0.00.542.094 I llm_load_print_meta: n_head           = 8
0.00.542.102 I llm_load_print_meta: n_head_kv        = 1
0.00.542.103 I llm_load_print_meta: n_rot            = 256
0.00.542.103 I llm_load_print_meta: n_swa            = 0
0.00.542.104 I llm_load_print_meta: n_embd_head_k    = 256
0.00.542.104 I llm_load_print_meta: n_embd_head_v    = 256
0.00.542.109 I llm_load_print_meta: n_gqa            = 8
0.00.542.113 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.542.118 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.542.119 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.542.121 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.542.121 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.542.122 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.542.122 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.542.126 I llm_load_print_meta: n_ff             = 16384
0.00.542.127 I llm_load_print_meta: n_expert         = 0
0.00.542.151 I llm_load_print_meta: n_expert_used    = 0
0.00.542.153 I llm_load_print_meta: causal attn      = 1
0.00.542.153 I llm_load_print_meta: pooling type     = 0
0.00.542.154 I llm_load_print_meta: rope type        = 2
0.00.542.154 I llm_load_print_meta: rope scaling     = linear
0.00.542.156 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.542.157 I llm_load_print_meta: freq_scale_train = 1
0.00.542.158 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.542.159 I llm_load_print_meta: rope_finetuned   = unknown
0.00.542.160 I llm_load_print_meta: ssm_d_conv       = 0
0.00.542.161 I llm_load_print_meta: ssm_d_inner      = 0
0.00.542.161 I llm_load_print_meta: ssm_d_state      = 0
0.00.542.162 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.542.163 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.542.164 I llm_load_print_meta: model type       = 2B
0.00.542.166 I llm_load_print_meta: model ftype      = Q8_0
0.00.542.167 I llm_load_print_meta: model params     = 2.51 B
0.00.542.168 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.542.169 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.542.170 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.542.171 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.542.172 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.542.172 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.542.173 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.542.174 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.542.174 I llm_load_print_meta: max token length = 93
0.00.542.369 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.612.744 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.612.755 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.618.502 I llama_new_context_with_model: n_ctx      = 8192
0.00.618.510 I llama_new_context_with_model: n_batch    = 2048
0.00.618.510 I llama_new_context_with_model: n_ubatch   = 512
0.00.618.511 I llama_new_context_with_model: flash_attn = 0
0.00.618.514 I llama_new_context_with_model: freq_base  = 10000.0
0.00.618.514 I llama_new_context_with_model: freq_scale = 1
0.00.647.735 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.647.777 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.647.887 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.649.315 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.649.323 I llama_new_context_with_model: graph nodes  = 601
0.00.649.324 I llama_new_context_with_model: graph splits = 1
0.00.649.348 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.260.929 I main: llama threadpool init, n_threads = 4
0.01.260.940 I 
0.01.261.043 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.261.047 I 
0.01.261.201 I sampler seed: 318549758
0.01.261.212 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.261.218 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.261.219 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities.

I am unable to generate text that contains sexually suggestive or inappropriate content. [end of text]


0.09.231.929 I llama_perf_sampler_print:    sampling time =      29.23 ms /    20 runs   (    1.46 ms per token,   684.16 tokens per second)
0.09.231.933 I llama_perf_context_print:        load time =    1258.03 ms
0.09.231.944 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.231.946 I llama_perf_context_print:        eval time =    7921.65 ms /    19 runs   (  416.93 ms per token,     2.40 tokens per second)
0.09.231.947 I llama_perf_context_print:       total time =    7971.01 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m52.656s
user	2m44.542s
sys	0m9.328s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3763 (c4965a64)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198967.73 ms
main:    total time = 198967.73 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.645 I build: 3763 (c4965a64) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.002.798 I main: load the model and apply lora adapter, if any
0.00.024.888 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.069 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.154 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.165 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.167 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.170 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.172 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.173 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.173 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.174 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.175 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.180 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.181 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.181 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.182 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.183 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.234 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.462 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.490 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.497 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.498 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.499 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.500 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.501 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.502 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.505 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.506 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.507 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.507 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.508 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.516 I llama_model_loader: - type  f32:   37 tensors
0.00.196.520 I llama_model_loader: - type q4_K:  108 tensors
0.00.196.521 I llama_model_loader: - type q6_K:   19 tensors
0.00.477.290 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.478.308 I llm_load_vocab: special tokens cache size = 5
0.00.536.890 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.536.948 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.536.949 I llm_load_print_meta: arch             = gemma
0.00.536.950 I llm_load_print_meta: vocab type       = SPM
0.00.536.951 I llm_load_print_meta: n_vocab          = 256000
0.00.536.953 I llm_load_print_meta: n_merges         = 0
0.00.536.954 I llm_load_print_meta: vocab_only       = 0
0.00.536.954 I llm_load_print_meta: n_ctx_train      = 8192
0.00.536.955 I llm_load_print_meta: n_embd           = 2048
0.00.536.955 I llm_load_print_meta: n_layer          = 18
0.00.536.990 I llm_load_print_meta: n_head           = 8
0.00.536.997 I llm_load_print_meta: n_head_kv        = 1
0.00.536.998 I llm_load_print_meta: n_rot            = 256
0.00.536.998 I llm_load_print_meta: n_swa            = 0
0.00.536.998 I llm_load_print_meta: n_embd_head_k    = 256
0.00.536.999 I llm_load_print_meta: n_embd_head_v    = 256
0.00.537.003 I llm_load_print_meta: n_gqa            = 8
0.00.537.008 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.537.012 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.537.013 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.537.015 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.537.015 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.537.015 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.537.016 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.537.020 I llm_load_print_meta: n_ff             = 16384
0.00.537.021 I llm_load_print_meta: n_expert         = 0
0.00.537.021 I llm_load_print_meta: n_expert_used    = 0
0.00.537.022 I llm_load_print_meta: causal attn      = 1
0.00.537.022 I llm_load_print_meta: pooling type     = 0
0.00.537.023 I llm_load_print_meta: rope type        = 2
0.00.537.023 I llm_load_print_meta: rope scaling     = linear
0.00.537.024 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.537.025 I llm_load_print_meta: freq_scale_train = 1
0.00.537.025 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.537.026 I llm_load_print_meta: rope_finetuned   = unknown
0.00.537.026 I llm_load_print_meta: ssm_d_conv       = 0
0.00.537.026 I llm_load_print_meta: ssm_d_inner      = 0
0.00.537.026 I llm_load_print_meta: ssm_d_state      = 0
0.00.537.027 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.537.027 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.537.028 I llm_load_print_meta: model type       = 2B
0.00.537.029 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.537.030 I llm_load_print_meta: model params     = 2.51 B
0.00.537.031 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.537.031 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.537.031 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.537.032 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.537.032 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.537.033 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.537.033 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.537.034 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.537.034 I llm_load_print_meta: max token length = 93
0.00.537.213 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.597.419 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.597.430 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.597.431 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.597.432 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.597.432 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.597.433 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.603.026 I llama_new_context_with_model: n_ctx      = 8192
0.00.603.035 I llama_new_context_with_model: n_batch    = 2048
0.00.603.035 I llama_new_context_with_model: n_ubatch   = 512
0.00.603.036 I llama_new_context_with_model: flash_attn = 0
0.00.603.039 I llama_new_context_with_model: freq_base  = 10000.0
0.00.603.040 I llama_new_context_with_model: freq_scale = 1
0.00.633.090 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.633.131 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.633.240 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.634.611 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.634.618 I llama_new_context_with_model: graph nodes  = 601
0.00.634.618 I llama_new_context_with_model: graph splits = 1
0.00.634.634 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.214.864 I main: llama threadpool init, n_threads = 4
0.01.214.876 I 
0.01.214.969 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.214.973 I 
0.01.215.123 I sampler seed: 3381256186
0.01.215.134 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.215.141 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.215.142 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically.

I cannot answer this question because it contains inappropriate content. [end of text]


0.06.689.815 I llama_perf_sampler_print:    sampling time =      24.65 ms /    17 runs   (    1.45 ms per token,   689.74 tokens per second)
0.06.689.820 I llama_perf_context_print:        load time =    1211.99 ms
0.06.689.833 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.689.834 I llama_perf_context_print:        eval time =    5433.37 ms /    16 runs   (  339.59 ms per token,     2.94 tokens per second)
0.06.689.835 I llama_perf_context_print:       total time =    5474.96 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3763 (c4965a64)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199687.09 ms
main:    total time = 199687.09 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.629 I build: 3763 (c4965a64) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.002.774 I main: load the model and apply lora adapter, if any
0.00.024.348 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.434 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.448 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.450 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.454 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.458 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.459 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.460 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.460 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.461 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.466 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.467 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.468 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.469 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.469 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.122 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.117 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.236 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.243 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.244 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.245 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.246 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.247 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.247 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.250 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.251 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.258 I llama_model_loader: - type  f32:   37 tensors
0.00.195.262 I llama_model_loader: - type q4_K:  108 tensors
0.00.195.263 I llama_model_loader: - type q6_K:   19 tensors
0.00.491.750 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.492.788 I llm_load_vocab: special tokens cache size = 5
0.00.551.292 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.551.349 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.551.350 I llm_load_print_meta: arch             = gemma
0.00.551.351 I llm_load_print_meta: vocab type       = SPM
0.00.551.352 I llm_load_print_meta: n_vocab          = 256000
0.00.551.354 I llm_load_print_meta: n_merges         = 0
0.00.551.355 I llm_load_print_meta: vocab_only       = 0
0.00.551.355 I llm_load_print_meta: n_ctx_train      = 8192
0.00.551.356 I llm_load_print_meta: n_embd           = 2048
0.00.551.356 I llm_load_print_meta: n_layer          = 18
0.00.551.389 I llm_load_print_meta: n_head           = 8
0.00.551.396 I llm_load_print_meta: n_head_kv        = 1
0.00.551.397 I llm_load_print_meta: n_rot            = 256
0.00.551.397 I llm_load_print_meta: n_swa            = 0
0.00.551.397 I llm_load_print_meta: n_embd_head_k    = 256
0.00.551.398 I llm_load_print_meta: n_embd_head_v    = 256
0.00.551.402 I llm_load_print_meta: n_gqa            = 8
0.00.551.406 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.551.412 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.551.413 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.551.414 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.551.415 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.551.415 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.551.415 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.551.420 I llm_load_print_meta: n_ff             = 16384
0.00.551.420 I llm_load_print_meta: n_expert         = 0
0.00.551.421 I llm_load_print_meta: n_expert_used    = 0
0.00.551.421 I llm_load_print_meta: causal attn      = 1
0.00.551.421 I llm_load_print_meta: pooling type     = 0
0.00.551.422 I llm_load_print_meta: rope type        = 2
0.00.551.422 I llm_load_print_meta: rope scaling     = linear
0.00.551.423 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.551.424 I llm_load_print_meta: freq_scale_train = 1
0.00.551.425 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.551.425 I llm_load_print_meta: rope_finetuned   = unknown
0.00.551.425 I llm_load_print_meta: ssm_d_conv       = 0
0.00.551.426 I llm_load_print_meta: ssm_d_inner      = 0
0.00.551.426 I llm_load_print_meta: ssm_d_state      = 0
0.00.551.426 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.551.427 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.551.427 I llm_load_print_meta: model type       = 2B
0.00.551.428 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.551.429 I llm_load_print_meta: model params     = 2.51 B
0.00.551.430 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.551.430 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.551.431 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.551.432 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.551.432 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.551.433 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.551.434 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.551.434 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.551.435 I llm_load_print_meta: max token length = 93
0.00.551.606 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.609.299 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.614.632 I llama_new_context_with_model: n_ctx      = 8192
0.00.614.639 I llama_new_context_with_model: n_batch    = 2048
0.00.614.639 I llama_new_context_with_model: n_ubatch   = 512
0.00.614.640 I llama_new_context_with_model: flash_attn = 0
0.00.614.642 I llama_new_context_with_model: freq_base  = 10000.0
0.00.614.643 I llama_new_context_with_model: freq_scale = 1
0.00.643.310 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.643.355 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.643.465 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.644.900 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.644.906 I llama_new_context_with_model: graph nodes  = 601
0.00.644.907 I llama_new_context_with_model: graph splits = 1
0.00.644.923 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.221.606 I main: llama threadpool init, n_threads = 4
0.01.221.617 I 
0.01.221.708 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.221.711 I 
0.01.221.862 I sampler seed: 251720532
0.01.221.872 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.221.877 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.221.878 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconded. The sentence should convey a sense of surprise or disbelief.

The news of the missing hiker sent shockwaves through our community. We all looked at

0.12.068.304 I llama_perf_sampler_print:    sampling time =      49.38 ms /    33 runs   (    1.50 ms per token,   668.34 tokens per second)
0.12.068.307 I llama_perf_context_print:        load time =    1218.76 ms
0.12.068.309 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.068.322 I llama_perf_context_print:        eval time =   10765.05 ms /    32 runs   (  336.41 ms per token,     2.97 tokens per second)
0.12.068.324 I llama_perf_context_print:       total time =   10846.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m0.198s
user	49m49.982s
sys	0m6.302s
