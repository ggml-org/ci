+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.690 I build: 3979 (66875035) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.908 I main: llama backend init
0.00.002.846 I main: load the model and apply lora adapter, if any
0.00.025.235 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.460 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.558 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.571 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.573 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.579 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.583 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.584 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.585 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.586 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.587 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.595 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.596 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.597 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.598 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.599 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.814 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.264.039 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.282.710 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.282.717 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.282.719 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.282.719 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.282.720 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.282.722 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.282.723 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.282.726 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.282.727 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.282.728 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.282.729 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.282.730 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.282.738 I llama_model_loader: - type  f32:   37 tensors
0.00.282.743 I llama_model_loader: - type q8_0:  127 tensors
0.00.474.821 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.542.720 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.543.690 I llm_load_vocab: special tokens cache size = 5
0.00.654.497 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.654.568 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.654.570 I llm_load_print_meta: arch             = gemma
0.00.654.571 I llm_load_print_meta: vocab type       = SPM
0.00.654.571 I llm_load_print_meta: n_vocab          = 256000
0.00.654.574 I llm_load_print_meta: n_merges         = 0
0.00.654.574 I llm_load_print_meta: vocab_only       = 0
0.00.654.574 I llm_load_print_meta: n_ctx_train      = 8192
0.00.654.575 I llm_load_print_meta: n_embd           = 2048
0.00.654.575 I llm_load_print_meta: n_layer          = 18
0.00.654.639 I llm_load_print_meta: n_head           = 8
0.00.654.646 I llm_load_print_meta: n_head_kv        = 1
0.00.654.647 I llm_load_print_meta: n_rot            = 256
0.00.654.647 I llm_load_print_meta: n_swa            = 0
0.00.654.647 I llm_load_print_meta: n_embd_head_k    = 256
0.00.654.648 I llm_load_print_meta: n_embd_head_v    = 256
0.00.654.653 I llm_load_print_meta: n_gqa            = 8
0.00.654.657 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.654.662 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.654.663 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.654.664 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.654.665 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.654.665 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.654.666 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.654.670 I llm_load_print_meta: n_ff             = 16384
0.00.654.671 I llm_load_print_meta: n_expert         = 0
0.00.654.671 I llm_load_print_meta: n_expert_used    = 0
0.00.654.671 I llm_load_print_meta: causal attn      = 1
0.00.654.671 I llm_load_print_meta: pooling type     = 0
0.00.654.672 I llm_load_print_meta: rope type        = 2
0.00.654.672 I llm_load_print_meta: rope scaling     = linear
0.00.654.673 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.654.674 I llm_load_print_meta: freq_scale_train = 1
0.00.654.674 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.654.674 I llm_load_print_meta: rope_finetuned   = unknown
0.00.654.675 I llm_load_print_meta: ssm_d_conv       = 0
0.00.654.676 I llm_load_print_meta: ssm_d_inner      = 0
0.00.654.677 I llm_load_print_meta: ssm_d_state      = 0
0.00.654.677 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.654.678 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.654.679 I llm_load_print_meta: model type       = 2B
0.00.654.680 I llm_load_print_meta: model ftype      = Q8_0
0.00.654.681 I llm_load_print_meta: model params     = 2.51 B
0.00.654.682 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.654.683 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.654.684 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.654.684 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.654.685 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.654.685 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.654.686 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.654.687 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.654.693 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.654.695 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.654.695 I llm_load_print_meta: max token length = 93
0.00.654.864 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.756.182 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.756.193 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.756.194 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.756.194 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.756.195 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.756.196 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.761.980 I llama_new_context_with_model: n_ctx      = 8192
0.00.761.989 I llama_new_context_with_model: n_batch    = 2048
0.00.761.989 I llama_new_context_with_model: n_ubatch   = 512
0.00.761.990 I llama_new_context_with_model: flash_attn = 0
0.00.761.994 I llama_new_context_with_model: freq_base  = 10000.0
0.00.761.995 I llama_new_context_with_model: freq_scale = 1
0.00.791.512 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.791.556 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.791.672 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.793.066 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.793.071 I llama_new_context_with_model: graph nodes  = 601
0.00.793.071 I llama_new_context_with_model: graph splits = 1
0.00.793.087 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.405.473 I main: llama threadpool init, n_threads = 4
0.01.405.487 I 
0.01.405.595 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.405.599 I 
0.01.405.830 I sampler seed: 4160113550
0.01.405.843 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.405.852 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.405.853 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.405.855 I 
 increasities!

I am unable to generate responses that are sexually suggestive in nature. My purpose is to assist with tasks and provide information within the boundaries of ethical

0.14.839.227 I llama_perf_sampler_print:    sampling time =      49.17 ms /    33 runs   (    1.49 ms per token,   671.11 tokens per second)
0.14.839.231 I llama_perf_context_print:        load time =    1402.53 ms
0.14.839.233 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.839.236 I llama_perf_context_print:        eval time =   13336.69 ms /    32 runs   (  416.77 ms per token,     2.40 tokens per second)
0.14.839.241 I llama_perf_context_print:       total time =   13433.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.752 I build: 3979 (66875035) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.985 I main: llama backend init
0.00.002.931 I main: load the model and apply lora adapter, if any
0.00.025.463 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.566 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.583 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.587 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.592 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.595 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.597 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.612 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.616 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.617 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.625 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.626 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.627 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.628 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.629 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.796 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.295 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.974 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.985 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.986 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.987 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.988 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.990 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.991 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.995 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.996 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.997 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.998 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.269.000 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.009 I llama_model_loader: - type  f32:   37 tensors
0.00.269.013 I llama_model_loader: - type q8_0:  127 tensors
0.00.471.925 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.544.293 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.545.307 I llm_load_vocab: special tokens cache size = 5
0.00.638.724 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.638.797 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.638.798 I llm_load_print_meta: arch             = gemma
0.00.638.798 I llm_load_print_meta: vocab type       = SPM
0.00.638.799 I llm_load_print_meta: n_vocab          = 256000
0.00.638.801 I llm_load_print_meta: n_merges         = 0
0.00.638.802 I llm_load_print_meta: vocab_only       = 0
0.00.638.802 I llm_load_print_meta: n_ctx_train      = 8192
0.00.638.803 I llm_load_print_meta: n_embd           = 2048
0.00.638.803 I llm_load_print_meta: n_layer          = 18
0.00.638.870 I llm_load_print_meta: n_head           = 8
0.00.638.877 I llm_load_print_meta: n_head_kv        = 1
0.00.638.878 I llm_load_print_meta: n_rot            = 256
0.00.638.878 I llm_load_print_meta: n_swa            = 0
0.00.638.879 I llm_load_print_meta: n_embd_head_k    = 256
0.00.638.879 I llm_load_print_meta: n_embd_head_v    = 256
0.00.638.883 I llm_load_print_meta: n_gqa            = 8
0.00.638.888 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.638.893 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.638.895 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.638.896 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.638.896 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.638.897 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.638.897 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.638.902 I llm_load_print_meta: n_ff             = 16384
0.00.638.903 I llm_load_print_meta: n_expert         = 0
0.00.638.903 I llm_load_print_meta: n_expert_used    = 0
0.00.638.903 I llm_load_print_meta: causal attn      = 1
0.00.638.903 I llm_load_print_meta: pooling type     = 0
0.00.638.904 I llm_load_print_meta: rope type        = 2
0.00.638.904 I llm_load_print_meta: rope scaling     = linear
0.00.638.906 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.638.907 I llm_load_print_meta: freq_scale_train = 1
0.00.638.907 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.638.907 I llm_load_print_meta: rope_finetuned   = unknown
0.00.638.908 I llm_load_print_meta: ssm_d_conv       = 0
0.00.638.908 I llm_load_print_meta: ssm_d_inner      = 0
0.00.638.908 I llm_load_print_meta: ssm_d_state      = 0
0.00.638.909 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.638.909 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.638.910 I llm_load_print_meta: model type       = 2B
0.00.638.910 I llm_load_print_meta: model ftype      = Q8_0
0.00.638.911 I llm_load_print_meta: model params     = 2.51 B
0.00.638.912 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.638.912 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.638.913 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.638.913 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.638.914 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.638.914 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.638.915 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.638.915 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.638.936 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.638.938 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.638.939 I llm_load_print_meta: max token length = 93
0.00.639.110 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.733.441 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.739.279 I llama_new_context_with_model: n_ctx      = 8192
0.00.739.287 I llama_new_context_with_model: n_batch    = 2048
0.00.739.288 I llama_new_context_with_model: n_ubatch   = 512
0.00.739.289 I llama_new_context_with_model: flash_attn = 0
0.00.739.293 I llama_new_context_with_model: freq_base  = 10000.0
0.00.739.294 I llama_new_context_with_model: freq_scale = 1
0.00.771.471 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.771.514 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.771.626 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.773.060 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.773.065 I llama_new_context_with_model: graph nodes  = 601
0.00.773.065 I llama_new_context_with_model: graph splits = 1
0.00.773.081 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.414.152 I main: llama threadpool init, n_threads = 4
0.01.414.164 I 
0.01.414.277 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.414.282 I 
0.01.414.514 I sampler seed: 3356156592
0.01.414.528 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.414.534 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.414.538 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.414.538 I 
 increasities.

I understand that the word "incest" is widely considered a taboo topic and should not be discussed or used in any context. However,

0.15.001.523 I llama_perf_sampler_print:    sampling time =      49.50 ms /    33 runs   (    1.50 ms per token,   666.63 tokens per second)
0.15.001.525 I llama_perf_context_print:        load time =    1411.11 ms
0.15.001.527 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.001.542 I llama_perf_context_print:        eval time =   13490.48 ms /    32 runs   (  421.58 ms per token,     2.37 tokens per second)
0.15.001.543 I llama_perf_context_print:       total time =   13587.38 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.697 I build: 3979 (66875035) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.900 I main: llama backend init
0.00.002.883 I main: load the model and apply lora adapter, if any
0.00.025.164 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.386 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.486 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.499 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.502 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.508 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.510 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.512 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.513 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.514 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.515 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.524 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.528 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.529 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.530 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.531 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.189 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.449 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.029 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.038 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.039 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.040 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.041 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.042 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.043 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.047 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.048 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.049 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.050 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.267.052 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.060 I llama_model_loader: - type  f32:   37 tensors
0.00.267.065 I llama_model_loader: - type q8_0:  127 tensors
0.00.449.205 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.937 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.878 I llm_load_vocab: special tokens cache size = 5
0.00.622.111 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.622.185 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.622.186 I llm_load_print_meta: arch             = gemma
0.00.622.187 I llm_load_print_meta: vocab type       = SPM
0.00.622.188 I llm_load_print_meta: n_vocab          = 256000
0.00.622.190 I llm_load_print_meta: n_merges         = 0
0.00.622.191 I llm_load_print_meta: vocab_only       = 0
0.00.622.191 I llm_load_print_meta: n_ctx_train      = 8192
0.00.622.192 I llm_load_print_meta: n_embd           = 2048
0.00.622.192 I llm_load_print_meta: n_layer          = 18
0.00.622.257 I llm_load_print_meta: n_head           = 8
0.00.622.264 I llm_load_print_meta: n_head_kv        = 1
0.00.622.265 I llm_load_print_meta: n_rot            = 256
0.00.622.266 I llm_load_print_meta: n_swa            = 0
0.00.622.266 I llm_load_print_meta: n_embd_head_k    = 256
0.00.622.266 I llm_load_print_meta: n_embd_head_v    = 256
0.00.622.271 I llm_load_print_meta: n_gqa            = 8
0.00.622.275 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.622.280 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.622.282 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.622.283 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.622.284 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.622.284 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.622.284 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.622.289 I llm_load_print_meta: n_ff             = 16384
0.00.622.290 I llm_load_print_meta: n_expert         = 0
0.00.622.290 I llm_load_print_meta: n_expert_used    = 0
0.00.622.290 I llm_load_print_meta: causal attn      = 1
0.00.622.290 I llm_load_print_meta: pooling type     = 0
0.00.622.291 I llm_load_print_meta: rope type        = 2
0.00.622.291 I llm_load_print_meta: rope scaling     = linear
0.00.622.292 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.622.293 I llm_load_print_meta: freq_scale_train = 1
0.00.622.293 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.622.294 I llm_load_print_meta: rope_finetuned   = unknown
0.00.622.294 I llm_load_print_meta: ssm_d_conv       = 0
0.00.622.295 I llm_load_print_meta: ssm_d_inner      = 0
0.00.622.295 I llm_load_print_meta: ssm_d_state      = 0
0.00.622.295 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.622.295 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.622.296 I llm_load_print_meta: model type       = 2B
0.00.622.297 I llm_load_print_meta: model ftype      = Q8_0
0.00.622.297 I llm_load_print_meta: model params     = 2.51 B
0.00.622.298 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.622.299 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.622.299 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.622.299 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.622.300 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.622.300 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.622.301 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.622.301 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.622.307 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.622.309 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.622.309 I llm_load_print_meta: max token length = 93
0.00.622.476 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.700.242 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.700.250 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.700.251 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.700.252 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.700.253 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.700.253 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.706.006 I llama_new_context_with_model: n_ctx      = 8192
0.00.706.015 I llama_new_context_with_model: n_batch    = 2048
0.00.706.016 I llama_new_context_with_model: n_ubatch   = 512
0.00.706.016 I llama_new_context_with_model: flash_attn = 0
0.00.706.020 I llama_new_context_with_model: freq_base  = 10000.0
0.00.706.021 I llama_new_context_with_model: freq_scale = 1
0.00.736.997 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.737.040 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.737.155 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.738.561 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.738.566 I llama_new_context_with_model: graph nodes  = 601
0.00.738.566 I llama_new_context_with_model: graph splits = 1
0.00.738.581 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.352.762 I main: llama threadpool init, n_threads = 4
0.01.352.777 I 
0.01.352.886 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.352.890 I 
0.01.353.120 I sampler seed: 4256857355
0.01.353.132 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.353.142 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.353.144 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.353.144 I 
 increasities of the soul,
A soul that is seeking liberation and a new path.

This is the essence of the human experience, the search for meaning

0.14.906.440 I llama_perf_sampler_print:    sampling time =      49.24 ms /    33 runs   (    1.49 ms per token,   670.16 tokens per second)
0.14.906.443 I llama_perf_context_print:        load time =    1349.78 ms
0.14.906.445 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.906.460 I llama_perf_context_print:        eval time =   13458.63 ms /    32 runs   (  420.58 ms per token,     2.38 tokens per second)
0.14.906.462 I llama_perf_context_print:       total time =   13553.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.666 I build: 3979 (66875035) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.863 I main: llama backend init
0.00.002.814 I main: load the model and apply lora adapter, if any
0.00.024.650 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.862 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.947 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.958 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.959 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.964 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.965 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.967 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.968 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.969 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.970 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.977 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.978 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.980 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.981 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.982 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.982 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.048 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.653 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.660 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.661 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.662 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.663 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.664 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.665 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.669 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.670 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.671 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.672 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.266.673 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.681 I llama_model_loader: - type  f32:   37 tensors
0.00.266.686 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.626 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.520.507 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.521.443 I llm_load_vocab: special tokens cache size = 5
0.00.614.562 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.614.638 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.614.639 I llm_load_print_meta: arch             = gemma
0.00.614.640 I llm_load_print_meta: vocab type       = SPM
0.00.614.641 I llm_load_print_meta: n_vocab          = 256000
0.00.614.643 I llm_load_print_meta: n_merges         = 0
0.00.614.643 I llm_load_print_meta: vocab_only       = 0
0.00.614.644 I llm_load_print_meta: n_ctx_train      = 8192
0.00.614.644 I llm_load_print_meta: n_embd           = 2048
0.00.614.645 I llm_load_print_meta: n_layer          = 18
0.00.614.709 I llm_load_print_meta: n_head           = 8
0.00.614.716 I llm_load_print_meta: n_head_kv        = 1
0.00.614.717 I llm_load_print_meta: n_rot            = 256
0.00.614.717 I llm_load_print_meta: n_swa            = 0
0.00.614.718 I llm_load_print_meta: n_embd_head_k    = 256
0.00.614.718 I llm_load_print_meta: n_embd_head_v    = 256
0.00.614.723 I llm_load_print_meta: n_gqa            = 8
0.00.614.728 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.614.733 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.614.734 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.614.735 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.614.735 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.614.736 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.614.736 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.614.741 I llm_load_print_meta: n_ff             = 16384
0.00.614.742 I llm_load_print_meta: n_expert         = 0
0.00.614.742 I llm_load_print_meta: n_expert_used    = 0
0.00.614.742 I llm_load_print_meta: causal attn      = 1
0.00.614.742 I llm_load_print_meta: pooling type     = 0
0.00.614.743 I llm_load_print_meta: rope type        = 2
0.00.614.743 I llm_load_print_meta: rope scaling     = linear
0.00.614.744 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.614.745 I llm_load_print_meta: freq_scale_train = 1
0.00.614.747 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.614.747 I llm_load_print_meta: rope_finetuned   = unknown
0.00.614.748 I llm_load_print_meta: ssm_d_conv       = 0
0.00.614.748 I llm_load_print_meta: ssm_d_inner      = 0
0.00.614.749 I llm_load_print_meta: ssm_d_state      = 0
0.00.614.753 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.614.754 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.614.755 I llm_load_print_meta: model type       = 2B
0.00.614.764 I llm_load_print_meta: model ftype      = Q8_0
0.00.614.765 I llm_load_print_meta: model params     = 2.51 B
0.00.614.766 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.614.766 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.614.767 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.614.767 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.614.768 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.614.768 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.614.780 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.614.790 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.614.798 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.614.799 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.614.799 I llm_load_print_meta: max token length = 93
0.00.614.969 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.686.236 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.686.246 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.692.065 I llama_new_context_with_model: n_ctx      = 8192
0.00.692.073 I llama_new_context_with_model: n_batch    = 2048
0.00.692.074 I llama_new_context_with_model: n_ubatch   = 512
0.00.692.074 I llama_new_context_with_model: flash_attn = 0
0.00.692.078 I llama_new_context_with_model: freq_base  = 10000.0
0.00.692.079 I llama_new_context_with_model: freq_scale = 1
0.00.723.248 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.723.291 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.723.404 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.724.784 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.724.789 I llama_new_context_with_model: graph nodes  = 601
0.00.724.789 I llama_new_context_with_model: graph splits = 1
0.00.724.805 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.339.241 I main: llama threadpool init, n_threads = 4
0.01.339.254 I 
0.01.339.365 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.339.368 I 
0.01.339.603 I sampler seed: 650758738
0.01.339.615 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.339.626 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.339.627 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.339.627 I 
 increasities!

I am unable to access the content of the post due to a privacy restriction.

I apologize for any inconvenience. [end of text]


0.13.117.099 I llama_perf_sampler_print:    sampling time =      42.91 ms /    29 runs   (    1.48 ms per token,   675.83 tokens per second)
0.13.117.102 I llama_perf_context_print:        load time =    1336.34 ms
0.13.117.124 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.117.127 I llama_perf_context_print:        eval time =   11694.53 ms /    28 runs   (  417.66 ms per token,     2.39 tokens per second)
0.13.117.128 I llama_perf_context_print:       total time =   11777.87 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.191s
user	3m42.281s
sys	0m9.648s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3979 (66875035)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198802.55 ms
main:    total time = 198802.55 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.670 I build: 3979 (66875035) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.002.810 I main: load the model and apply lora adapter, if any
0.00.024.724 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.942 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.035 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.048 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.049 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.054 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.059 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.060 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.061 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.062 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.063 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.071 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.072 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.073 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.074 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.075 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.171 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.114 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.760 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.769 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.770 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.771 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.772 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.773 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.775 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.778 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.779 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.780 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.781 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.783 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.791 I llama_model_loader: - type  f32:   37 tensors
0.00.266.795 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.796 I llama_model_loader: - type q6_K:   19 tensors
0.00.463.795 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.536.454 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.537.586 I llm_load_vocab: special tokens cache size = 5
0.00.631.041 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.631.110 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.631.111 I llm_load_print_meta: arch             = gemma
0.00.631.111 I llm_load_print_meta: vocab type       = SPM
0.00.631.113 I llm_load_print_meta: n_vocab          = 256000
0.00.631.115 I llm_load_print_meta: n_merges         = 0
0.00.631.115 I llm_load_print_meta: vocab_only       = 0
0.00.631.115 I llm_load_print_meta: n_ctx_train      = 8192
0.00.631.116 I llm_load_print_meta: n_embd           = 2048
0.00.631.116 I llm_load_print_meta: n_layer          = 18
0.00.631.181 I llm_load_print_meta: n_head           = 8
0.00.631.187 I llm_load_print_meta: n_head_kv        = 1
0.00.631.188 I llm_load_print_meta: n_rot            = 256
0.00.631.188 I llm_load_print_meta: n_swa            = 0
0.00.631.189 I llm_load_print_meta: n_embd_head_k    = 256
0.00.631.189 I llm_load_print_meta: n_embd_head_v    = 256
0.00.631.194 I llm_load_print_meta: n_gqa            = 8
0.00.631.199 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.631.204 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.631.205 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.631.207 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.631.208 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.631.208 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.631.214 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.631.218 I llm_load_print_meta: n_ff             = 16384
0.00.631.219 I llm_load_print_meta: n_expert         = 0
0.00.631.219 I llm_load_print_meta: n_expert_used    = 0
0.00.631.220 I llm_load_print_meta: causal attn      = 1
0.00.631.221 I llm_load_print_meta: pooling type     = 0
0.00.631.221 I llm_load_print_meta: rope type        = 2
0.00.631.221 I llm_load_print_meta: rope scaling     = linear
0.00.631.224 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.631.225 I llm_load_print_meta: freq_scale_train = 1
0.00.631.226 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.631.226 I llm_load_print_meta: rope_finetuned   = unknown
0.00.631.226 I llm_load_print_meta: ssm_d_conv       = 0
0.00.631.238 I llm_load_print_meta: ssm_d_inner      = 0
0.00.631.239 I llm_load_print_meta: ssm_d_state      = 0
0.00.631.239 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.631.240 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.631.241 I llm_load_print_meta: model type       = 2B
0.00.631.242 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.631.243 I llm_load_print_meta: model params     = 2.51 B
0.00.631.244 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.631.244 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.631.245 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.631.246 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.631.246 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.631.247 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.631.248 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.631.248 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.631.255 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.631.257 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.631.257 I llm_load_print_meta: max token length = 93
0.00.631.428 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.691.034 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.691.047 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.691.048 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.691.048 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.691.049 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.691.049 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.696.717 I llama_new_context_with_model: n_ctx      = 8192
0.00.696.725 I llama_new_context_with_model: n_batch    = 2048
0.00.696.725 I llama_new_context_with_model: n_ubatch   = 512
0.00.696.726 I llama_new_context_with_model: flash_attn = 0
0.00.696.729 I llama_new_context_with_model: freq_base  = 10000.0
0.00.696.730 I llama_new_context_with_model: freq_scale = 1
0.00.728.617 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.728.666 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.728.802 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.730.242 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.730.247 I llama_new_context_with_model: graph nodes  = 601
0.00.730.247 I llama_new_context_with_model: graph splits = 1
0.00.730.264 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.309.065 I main: llama threadpool init, n_threads = 4
0.01.309.078 I 
0.01.309.190 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.309.194 I 
0.01.309.429 I sampler seed: 187575725
0.01.309.442 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.309.449 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.309.453 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.309.453 I 
 increamically.

I am unable to generate a response because the context provided does not contain any information regarding the generation of responses. [end of text]


0.10.634.199 I llama_perf_sampler_print:    sampling time =      41.36 ms /    28 runs   (    1.48 ms per token,   677.03 tokens per second)
0.10.634.202 I llama_perf_context_print:        load time =    1306.17 ms
0.10.634.215 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.634.217 I llama_perf_context_print:        eval time =    9243.26 ms /    27 runs   (  342.34 ms per token,     2.92 tokens per second)
0.10.634.218 I llama_perf_context_print:       total time =    9325.14 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3979 (66875035)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198691.18 ms
main:    total time = 198691.18 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.624 I build: 3979 (66875035) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.814 I main: llama backend init
0.00.002.756 I main: load the model and apply lora adapter, if any
0.00.024.944 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.037 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.050 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.052 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.056 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.062 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.063 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.064 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.065 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.066 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.072 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.074 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.075 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.075 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.076 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.855 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.255.845 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.550 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.560 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.561 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.563 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.564 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.565 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.566 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.570 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.571 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.581 I llama_model_loader: - type  f32:   37 tensors
0.00.274.585 I llama_model_loader: - type q4_K:  108 tensors
0.00.274.585 I llama_model_loader: - type q6_K:   19 tensors
0.00.471.943 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.541.822 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.542.887 I llm_load_vocab: special tokens cache size = 5
0.00.636.332 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.636.410 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.636.411 I llm_load_print_meta: arch             = gemma
0.00.636.411 I llm_load_print_meta: vocab type       = SPM
0.00.636.412 I llm_load_print_meta: n_vocab          = 256000
0.00.636.414 I llm_load_print_meta: n_merges         = 0
0.00.636.415 I llm_load_print_meta: vocab_only       = 0
0.00.636.415 I llm_load_print_meta: n_ctx_train      = 8192
0.00.636.415 I llm_load_print_meta: n_embd           = 2048
0.00.636.416 I llm_load_print_meta: n_layer          = 18
0.00.636.484 I llm_load_print_meta: n_head           = 8
0.00.636.491 I llm_load_print_meta: n_head_kv        = 1
0.00.636.491 I llm_load_print_meta: n_rot            = 256
0.00.636.492 I llm_load_print_meta: n_swa            = 0
0.00.636.492 I llm_load_print_meta: n_embd_head_k    = 256
0.00.636.492 I llm_load_print_meta: n_embd_head_v    = 256
0.00.636.497 I llm_load_print_meta: n_gqa            = 8
0.00.636.502 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.636.507 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.636.508 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.636.509 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.636.510 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.636.510 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.636.510 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.636.516 I llm_load_print_meta: n_ff             = 16384
0.00.636.516 I llm_load_print_meta: n_expert         = 0
0.00.636.516 I llm_load_print_meta: n_expert_used    = 0
0.00.636.517 I llm_load_print_meta: causal attn      = 1
0.00.636.517 I llm_load_print_meta: pooling type     = 0
0.00.636.517 I llm_load_print_meta: rope type        = 2
0.00.636.518 I llm_load_print_meta: rope scaling     = linear
0.00.636.519 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.636.520 I llm_load_print_meta: freq_scale_train = 1
0.00.636.520 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.636.520 I llm_load_print_meta: rope_finetuned   = unknown
0.00.636.521 I llm_load_print_meta: ssm_d_conv       = 0
0.00.636.521 I llm_load_print_meta: ssm_d_inner      = 0
0.00.636.521 I llm_load_print_meta: ssm_d_state      = 0
0.00.636.522 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.636.522 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.636.523 I llm_load_print_meta: model type       = 2B
0.00.636.524 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.636.524 I llm_load_print_meta: model params     = 2.51 B
0.00.636.525 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.636.525 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.636.526 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.636.526 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.636.527 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.636.527 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.636.527 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.636.528 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.636.534 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.636.535 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.636.536 I llm_load_print_meta: max token length = 93
0.00.636.705 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.696.114 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.701.758 I llama_new_context_with_model: n_ctx      = 8192
0.00.701.766 I llama_new_context_with_model: n_batch    = 2048
0.00.701.767 I llama_new_context_with_model: n_ubatch   = 512
0.00.701.767 I llama_new_context_with_model: flash_attn = 0
0.00.701.772 I llama_new_context_with_model: freq_base  = 10000.0
0.00.701.773 I llama_new_context_with_model: freq_scale = 1
0.00.734.254 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.734.300 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.734.425 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.735.922 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.735.927 I llama_new_context_with_model: graph nodes  = 601
0.00.735.928 I llama_new_context_with_model: graph splits = 1
0.00.735.944 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.319.862 I main: llama threadpool init, n_threads = 4
0.01.319.875 I 
0.01.319.992 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.319.996 I 
0.01.320.231 I sampler seed: 1130285671
0.01.320.244 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.320.251 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.320.252 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.320.252 I 
 maneupher.

The answer is: a magician.

A magician is a person who performs tricks or illusions that amaze and entertain their audience. They use their

0.12.383.498 I llama_perf_sampler_print:    sampling time =      48.97 ms /    33 runs   (    1.48 ms per token,   673.90 tokens per second)
0.12.383.501 I llama_perf_context_print:        load time =    1317.02 ms
0.12.383.502 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.383.503 I llama_perf_context_print:        eval time =   10968.97 ms /    32 runs   (  342.78 ms per token,     2.92 tokens per second)
0.12.383.504 I llama_perf_context_print:       total time =   11063.64 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m3.450s
user	50m6.541s
sys	0m6.483s
