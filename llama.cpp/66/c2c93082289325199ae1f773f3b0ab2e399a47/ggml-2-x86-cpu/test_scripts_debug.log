+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.709 I build: 3928 (66c2c930) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.910 I main: llama backend init
0.00.002.844 I main: load the model and apply lora adapter, if any
0.00.024.944 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.152 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.238 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.249 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.250 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.255 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.256 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.258 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.259 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.260 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.261 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.267 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.271 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.272 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.272 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.273 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.854 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.325 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.416 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.424 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.425 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.426 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.427 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.428 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.429 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.433 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.434 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.435 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.436 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.437 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.446 I llama_model_loader: - type  f32:   37 tensors
0.00.268.452 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.084 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.492.179 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.494.047 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.499.542 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.510.895 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.511.823 I llm_load_vocab: special tokens cache size = 5
0.00.622.729 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.622.800 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.622.801 I llm_load_print_meta: arch             = gemma
0.00.622.802 I llm_load_print_meta: vocab type       = SPM
0.00.622.802 I llm_load_print_meta: n_vocab          = 256000
0.00.622.805 I llm_load_print_meta: n_merges         = 0
0.00.622.805 I llm_load_print_meta: vocab_only       = 0
0.00.622.805 I llm_load_print_meta: n_ctx_train      = 8192
0.00.622.806 I llm_load_print_meta: n_embd           = 2048
0.00.622.806 I llm_load_print_meta: n_layer          = 18
0.00.622.872 I llm_load_print_meta: n_head           = 8
0.00.622.879 I llm_load_print_meta: n_head_kv        = 1
0.00.622.880 I llm_load_print_meta: n_rot            = 256
0.00.622.880 I llm_load_print_meta: n_swa            = 0
0.00.622.880 I llm_load_print_meta: n_embd_head_k    = 256
0.00.622.881 I llm_load_print_meta: n_embd_head_v    = 256
0.00.622.887 I llm_load_print_meta: n_gqa            = 8
0.00.622.892 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.622.897 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.622.898 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.622.900 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.622.907 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.622.907 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.622.908 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.622.914 I llm_load_print_meta: n_ff             = 16384
0.00.622.915 I llm_load_print_meta: n_expert         = 0
0.00.622.915 I llm_load_print_meta: n_expert_used    = 0
0.00.622.915 I llm_load_print_meta: causal attn      = 1
0.00.622.916 I llm_load_print_meta: pooling type     = 0
0.00.622.916 I llm_load_print_meta: rope type        = 2
0.00.622.917 I llm_load_print_meta: rope scaling     = linear
0.00.622.919 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.622.922 I llm_load_print_meta: freq_scale_train = 1
0.00.622.922 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.622.922 I llm_load_print_meta: rope_finetuned   = unknown
0.00.622.922 I llm_load_print_meta: ssm_d_conv       = 0
0.00.622.923 I llm_load_print_meta: ssm_d_inner      = 0
0.00.622.923 I llm_load_print_meta: ssm_d_state      = 0
0.00.622.924 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.622.924 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.622.924 I llm_load_print_meta: model type       = 2B
0.00.622.925 I llm_load_print_meta: model ftype      = Q8_0
0.00.622.926 I llm_load_print_meta: model params     = 2.51 B
0.00.622.927 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.622.927 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.622.928 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.622.928 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.622.929 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.622.929 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.622.929 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.622.930 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.622.936 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.622.938 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.622.938 I llm_load_print_meta: max token length = 93
0.00.623.106 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.725.789 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.725.802 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.725.802 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.725.803 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.725.804 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.725.804 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.731.585 I llama_new_context_with_model: n_ctx      = 8192
0.00.731.592 I llama_new_context_with_model: n_batch    = 2048
0.00.731.593 I llama_new_context_with_model: n_ubatch   = 512
0.00.731.593 I llama_new_context_with_model: flash_attn = 0
0.00.731.597 I llama_new_context_with_model: freq_base  = 10000.0
0.00.731.598 I llama_new_context_with_model: freq_scale = 1
0.00.760.419 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.760.463 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.760.578 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.761.946 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.761.951 I llama_new_context_with_model: graph nodes  = 601
0.00.761.951 I llama_new_context_with_model: graph splits = 1
0.00.761.967 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.374.698 I main: llama threadpool init, n_threads = 4
0.01.374.710 I 
0.01.374.814 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.374.815 I 
0.01.374.993 I sampler seed: 820647116
0.01.375.006 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.375.013 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.375.014 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.375.025 I 
 increabling
The correct answer is: Escalating.

Escalating means to become more intense or severe. It is often used in the context of a conflict

0.14.834.032 I llama_perf_sampler_print:    sampling time =      49.15 ms /    33 runs   (    1.49 ms per token,   671.44 tokens per second)
0.14.834.035 I llama_perf_context_print:        load time =    1371.76 ms
0.14.834.036 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.834.038 I llama_perf_context_print:        eval time =   13377.04 ms /    32 runs   (  418.03 ms per token,     2.39 tokens per second)
0.14.834.039 I llama_perf_context_print:       total time =   13459.34 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 3928 (66c2c930) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.845 I main: llama backend init
0.00.002.777 I main: load the model and apply lora adapter, if any
0.00.026.587 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.026.686 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.703 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.704 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.709 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.711 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.712 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.713 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.714 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.715 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.724 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.733 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.734 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.735 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.736 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.158.900 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.258.237 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.276.027 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.276.035 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.276.036 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.276.037 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.276.038 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.276.040 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.276.041 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.276.045 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.276.046 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.276.047 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.276.047 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.276.048 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.276.056 I llama_model_loader: - type  f32:   37 tensors
0.00.276.061 I llama_model_loader: - type q8_0:  127 tensors
0.00.453.433 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.495.028 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.496.728 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.501.905 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.512.767 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.513.670 I llm_load_vocab: special tokens cache size = 5
0.00.625.125 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.625.196 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.625.197 I llm_load_print_meta: arch             = gemma
0.00.625.197 I llm_load_print_meta: vocab type       = SPM
0.00.625.198 I llm_load_print_meta: n_vocab          = 256000
0.00.625.201 I llm_load_print_meta: n_merges         = 0
0.00.625.201 I llm_load_print_meta: vocab_only       = 0
0.00.625.201 I llm_load_print_meta: n_ctx_train      = 8192
0.00.625.202 I llm_load_print_meta: n_embd           = 2048
0.00.625.202 I llm_load_print_meta: n_layer          = 18
0.00.625.268 I llm_load_print_meta: n_head           = 8
0.00.625.274 I llm_load_print_meta: n_head_kv        = 1
0.00.625.275 I llm_load_print_meta: n_rot            = 256
0.00.625.275 I llm_load_print_meta: n_swa            = 0
0.00.625.276 I llm_load_print_meta: n_embd_head_k    = 256
0.00.625.276 I llm_load_print_meta: n_embd_head_v    = 256
0.00.625.280 I llm_load_print_meta: n_gqa            = 8
0.00.625.285 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.625.291 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.625.292 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.625.293 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.625.294 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.625.295 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.625.295 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.625.299 I llm_load_print_meta: n_ff             = 16384
0.00.625.300 I llm_load_print_meta: n_expert         = 0
0.00.625.301 I llm_load_print_meta: n_expert_used    = 0
0.00.625.301 I llm_load_print_meta: causal attn      = 1
0.00.625.302 I llm_load_print_meta: pooling type     = 0
0.00.625.302 I llm_load_print_meta: rope type        = 2
0.00.625.302 I llm_load_print_meta: rope scaling     = linear
0.00.625.304 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.625.304 I llm_load_print_meta: freq_scale_train = 1
0.00.625.306 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.625.306 I llm_load_print_meta: rope_finetuned   = unknown
0.00.625.306 I llm_load_print_meta: ssm_d_conv       = 0
0.00.625.307 I llm_load_print_meta: ssm_d_inner      = 0
0.00.625.307 I llm_load_print_meta: ssm_d_state      = 0
0.00.625.307 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.625.308 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.625.309 I llm_load_print_meta: model type       = 2B
0.00.625.311 I llm_load_print_meta: model ftype      = Q8_0
0.00.625.311 I llm_load_print_meta: model params     = 2.51 B
0.00.625.312 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.625.313 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.625.314 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.625.315 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.625.315 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.625.316 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.625.316 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.625.316 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.625.322 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.625.323 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.625.323 I llm_load_print_meta: max token length = 93
0.00.625.487 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.719.038 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.724.886 I llama_new_context_with_model: n_ctx      = 8192
0.00.724.893 I llama_new_context_with_model: n_batch    = 2048
0.00.724.894 I llama_new_context_with_model: n_ubatch   = 512
0.00.724.895 I llama_new_context_with_model: flash_attn = 0
0.00.724.898 I llama_new_context_with_model: freq_base  = 10000.0
0.00.724.899 I llama_new_context_with_model: freq_scale = 1
0.00.755.357 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.755.402 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.755.513 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.756.901 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.756.903 I llama_new_context_with_model: graph nodes  = 601
0.00.756.904 I llama_new_context_with_model: graph splits = 1
0.00.756.919 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.372.131 I main: llama threadpool init, n_threads = 4
0.01.372.145 I 
0.01.372.256 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.372.261 I 
0.01.372.443 I sampler seed: 3289248268
0.01.372.458 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.372.468 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.372.472 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.372.473 I 
 increamically.

A small business owner is struggling to manage his finances. He has a good understanding of accounting principles, but he is struggling to reconcile his financial

0.14.960.074 I llama_perf_sampler_print:    sampling time =      49.11 ms /    33 runs   (    1.49 ms per token,   672.02 tokens per second)
0.14.960.077 I llama_perf_context_print:        load time =    1369.27 ms
0.14.960.079 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.960.094 I llama_perf_context_print:        eval time =   13505.48 ms /    32 runs   (  422.05 ms per token,     2.37 tokens per second)
0.14.960.095 I llama_perf_context_print:       total time =   13587.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.642 I build: 3928 (66c2c930) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.866 I main: llama backend init
0.00.002.827 I main: load the model and apply lora adapter, if any
0.00.025.045 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.265 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.368 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.379 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.381 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.386 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.389 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.390 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.392 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.393 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.395 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.404 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.409 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.411 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.413 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.414 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.885 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.632 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.666 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.676 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.677 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.678 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.679 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.680 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.681 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.685 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.686 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.687 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.688 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.268.689 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.698 I llama_model_loader: - type  f32:   37 tensors
0.00.268.703 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.653 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.491.538 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.493.440 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.499.063 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.510.748 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.511.698 I llm_load_vocab: special tokens cache size = 5
0.00.617.231 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.617.304 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.617.305 I llm_load_print_meta: arch             = gemma
0.00.617.306 I llm_load_print_meta: vocab type       = SPM
0.00.617.307 I llm_load_print_meta: n_vocab          = 256000
0.00.617.309 I llm_load_print_meta: n_merges         = 0
0.00.617.309 I llm_load_print_meta: vocab_only       = 0
0.00.617.310 I llm_load_print_meta: n_ctx_train      = 8192
0.00.617.310 I llm_load_print_meta: n_embd           = 2048
0.00.617.311 I llm_load_print_meta: n_layer          = 18
0.00.617.374 I llm_load_print_meta: n_head           = 8
0.00.617.380 I llm_load_print_meta: n_head_kv        = 1
0.00.617.381 I llm_load_print_meta: n_rot            = 256
0.00.617.381 I llm_load_print_meta: n_swa            = 0
0.00.617.382 I llm_load_print_meta: n_embd_head_k    = 256
0.00.617.382 I llm_load_print_meta: n_embd_head_v    = 256
0.00.617.387 I llm_load_print_meta: n_gqa            = 8
0.00.617.391 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.617.396 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.617.399 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.617.401 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.617.401 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.617.402 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.617.402 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.617.407 I llm_load_print_meta: n_ff             = 16384
0.00.617.408 I llm_load_print_meta: n_expert         = 0
0.00.617.408 I llm_load_print_meta: n_expert_used    = 0
0.00.617.409 I llm_load_print_meta: causal attn      = 1
0.00.617.409 I llm_load_print_meta: pooling type     = 0
0.00.617.410 I llm_load_print_meta: rope type        = 2
0.00.617.410 I llm_load_print_meta: rope scaling     = linear
0.00.617.412 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.617.412 I llm_load_print_meta: freq_scale_train = 1
0.00.617.435 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.617.436 I llm_load_print_meta: rope_finetuned   = unknown
0.00.617.443 I llm_load_print_meta: ssm_d_conv       = 0
0.00.617.444 I llm_load_print_meta: ssm_d_inner      = 0
0.00.617.444 I llm_load_print_meta: ssm_d_state      = 0
0.00.617.445 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.617.452 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.617.453 I llm_load_print_meta: model type       = 2B
0.00.617.454 I llm_load_print_meta: model ftype      = Q8_0
0.00.617.455 I llm_load_print_meta: model params     = 2.51 B
0.00.617.456 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.617.457 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.617.457 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.617.458 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.617.459 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.617.459 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.617.459 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.617.460 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.617.465 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.617.466 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.617.467 I llm_load_print_meta: max token length = 93
0.00.617.653 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.695.411 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.695.420 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.695.421 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.695.421 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.695.422 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.695.423 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.701.330 I llama_new_context_with_model: n_ctx      = 8192
0.00.701.338 I llama_new_context_with_model: n_batch    = 2048
0.00.701.339 I llama_new_context_with_model: n_ubatch   = 512
0.00.701.339 I llama_new_context_with_model: flash_attn = 0
0.00.701.342 I llama_new_context_with_model: freq_base  = 10000.0
0.00.701.343 I llama_new_context_with_model: freq_scale = 1
0.00.731.305 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.731.346 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.731.467 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.732.900 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.732.905 I llama_new_context_with_model: graph nodes  = 601
0.00.732.905 I llama_new_context_with_model: graph splits = 1
0.00.732.921 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.343.398 I main: llama threadpool init, n_threads = 4
0.01.343.411 I 
0.01.343.515 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.343.516 I 
0.01.343.691 I sampler seed: 3063663250
0.01.343.703 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.343.709 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.343.711 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.343.711 I 
 increasements can cause a variety of problems, including:

- **Respiratory problems:** Increased mucus secretion and airway inflammation can lead to coughing, shortness of breath,

0.14.743.041 I llama_perf_sampler_print:    sampling time =      49.10 ms /    33 runs   (    1.49 ms per token,   672.11 tokens per second)
0.14.743.044 I llama_perf_context_print:        load time =    1340.48 ms
0.14.743.045 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.743.047 I llama_perf_context_print:        eval time =   13316.64 ms /    32 runs   (  416.14 ms per token,     2.40 tokens per second)
0.14.743.048 I llama_perf_context_print:       total time =   13399.65 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.635 I build: 3928 (66c2c930) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.831 I main: llama backend init
0.00.002.805 I main: load the model and apply lora adapter, if any
0.00.024.612 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.824 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.914 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.925 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.927 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.930 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.932 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.933 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.934 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.936 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.937 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.944 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.948 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.949 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.950 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.951 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.707 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.823 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.733 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.742 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.743 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.744 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.745 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.746 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.747 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.751 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.752 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.753 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.754 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.267.755 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.763 I llama_model_loader: - type  f32:   37 tensors
0.00.267.767 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.260 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.485.156 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.487.008 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.492.413 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.504.556 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.595 I llm_load_vocab: special tokens cache size = 5
0.00.608.530 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.604 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.608 I llm_load_print_meta: arch             = gemma
0.00.608.609 I llm_load_print_meta: vocab type       = SPM
0.00.608.609 I llm_load_print_meta: n_vocab          = 256000
0.00.608.612 I llm_load_print_meta: n_merges         = 0
0.00.608.612 I llm_load_print_meta: vocab_only       = 0
0.00.608.613 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.613 I llm_load_print_meta: n_embd           = 2048
0.00.608.614 I llm_load_print_meta: n_layer          = 18
0.00.608.674 I llm_load_print_meta: n_head           = 8
0.00.608.683 I llm_load_print_meta: n_head_kv        = 1
0.00.608.684 I llm_load_print_meta: n_rot            = 256
0.00.608.684 I llm_load_print_meta: n_swa            = 0
0.00.608.685 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.686 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.690 I llm_load_print_meta: n_gqa            = 8
0.00.608.695 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.700 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.703 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.704 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.704 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.705 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.705 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.713 I llm_load_print_meta: n_ff             = 16384
0.00.608.713 I llm_load_print_meta: n_expert         = 0
0.00.608.714 I llm_load_print_meta: n_expert_used    = 0
0.00.608.714 I llm_load_print_meta: causal attn      = 1
0.00.608.714 I llm_load_print_meta: pooling type     = 0
0.00.608.715 I llm_load_print_meta: rope type        = 2
0.00.608.715 I llm_load_print_meta: rope scaling     = linear
0.00.608.717 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.718 I llm_load_print_meta: freq_scale_train = 1
0.00.608.727 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.739 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.740 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.740 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.741 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.741 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.742 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.743 I llm_load_print_meta: model type       = 2B
0.00.608.743 I llm_load_print_meta: model ftype      = Q8_0
0.00.608.753 I llm_load_print_meta: model params     = 2.51 B
0.00.608.754 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.608.754 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.763 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.764 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.764 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.765 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.773 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.773 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.779 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.781 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.781 I llm_load_print_meta: max token length = 93
0.00.608.947 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.679.954 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.679.967 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.685.583 I llama_new_context_with_model: n_ctx      = 8192
0.00.685.589 I llama_new_context_with_model: n_batch    = 2048
0.00.685.590 I llama_new_context_with_model: n_ubatch   = 512
0.00.685.590 I llama_new_context_with_model: flash_attn = 0
0.00.685.596 I llama_new_context_with_model: freq_base  = 10000.0
0.00.685.597 I llama_new_context_with_model: freq_scale = 1
0.00.714.747 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.714.790 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.714.906 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.716.311 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.716.316 I llama_new_context_with_model: graph nodes  = 601
0.00.716.316 I llama_new_context_with_model: graph splits = 1
0.00.716.332 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.327.053 I main: llama threadpool init, n_threads = 4
0.01.327.064 I 
0.01.327.171 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.327.176 I 
0.01.327.349 I sampler seed: 2292610264
0.01.327.360 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.327.367 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.327.368 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.327.369 I 
 increasels!

I am unable to answer the question as it contains inappropriate and potentially harmful content. [end of text]


0.10.188.443 I llama_perf_sampler_print:    sampling time =      32.37 ms /    22 runs   (    1.47 ms per token,   679.64 tokens per second)
0.10.188.445 I llama_perf_context_print:        load time =    1324.16 ms
0.10.188.446 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.188.448 I llama_perf_context_print:        eval time =    8806.57 ms /    21 runs   (  419.36 ms per token,     2.38 tokens per second)
0.10.188.461 I llama_perf_context_print:       total time =    8861.40 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m4.440s
user	3m29.970s
sys	0m9.447s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3928 (66c2c930)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198458.72 ms
main:    total time = 198458.72 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 3928 (66c2c930) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.826 I main: llama backend init
0.00.002.790 I main: load the model and apply lora adapter, if any
0.00.024.494 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.696 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.785 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.795 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.797 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.801 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.802 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.804 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.805 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.806 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.815 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.821 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.825 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.826 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.827 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.828 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.006 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.054 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.093 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.101 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.102 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.103 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.104 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.105 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.106 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.109 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.110 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.111 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.112 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.113 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.121 I llama_model_loader: - type  f32:   37 tensors
0.00.267.125 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.126 I llama_model_loader: - type q6_K:   19 tensors
0.00.448.968 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.491.434 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.493.265 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.498.848 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.510.428 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.511.341 I llm_load_vocab: special tokens cache size = 5
0.00.604.822 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.604.895 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.604.896 I llm_load_print_meta: arch             = gemma
0.00.604.897 I llm_load_print_meta: vocab type       = SPM
0.00.604.898 I llm_load_print_meta: n_vocab          = 256000
0.00.604.900 I llm_load_print_meta: n_merges         = 0
0.00.604.900 I llm_load_print_meta: vocab_only       = 0
0.00.604.901 I llm_load_print_meta: n_ctx_train      = 8192
0.00.604.901 I llm_load_print_meta: n_embd           = 2048
0.00.604.901 I llm_load_print_meta: n_layer          = 18
0.00.604.966 I llm_load_print_meta: n_head           = 8
0.00.604.972 I llm_load_print_meta: n_head_kv        = 1
0.00.604.973 I llm_load_print_meta: n_rot            = 256
0.00.604.973 I llm_load_print_meta: n_swa            = 0
0.00.604.974 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.974 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.978 I llm_load_print_meta: n_gqa            = 8
0.00.604.983 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.988 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.990 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.992 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.992 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.993 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.993 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.998 I llm_load_print_meta: n_ff             = 16384
0.00.604.999 I llm_load_print_meta: n_expert         = 0
0.00.604.999 I llm_load_print_meta: n_expert_used    = 0
0.00.605.000 I llm_load_print_meta: causal attn      = 1
0.00.605.000 I llm_load_print_meta: pooling type     = 0
0.00.605.000 I llm_load_print_meta: rope type        = 2
0.00.605.002 I llm_load_print_meta: rope scaling     = linear
0.00.605.003 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.605.004 I llm_load_print_meta: freq_scale_train = 1
0.00.605.004 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.605.005 I llm_load_print_meta: rope_finetuned   = unknown
0.00.605.005 I llm_load_print_meta: ssm_d_conv       = 0
0.00.605.005 I llm_load_print_meta: ssm_d_inner      = 0
0.00.605.006 I llm_load_print_meta: ssm_d_state      = 0
0.00.605.007 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.605.007 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.605.021 I llm_load_print_meta: model type       = 2B
0.00.605.023 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.605.024 I llm_load_print_meta: model params     = 2.51 B
0.00.605.025 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.605.025 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.605.026 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.605.026 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.605.027 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.605.028 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.605.028 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.605.028 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.605.035 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.605.036 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.605.036 I llm_load_print_meta: max token length = 93
0.00.605.200 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.665.146 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.665.155 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.665.156 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.665.157 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.665.158 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.665.158 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.670.827 I llama_new_context_with_model: n_ctx      = 8192
0.00.670.834 I llama_new_context_with_model: n_batch    = 2048
0.00.670.834 I llama_new_context_with_model: n_ubatch   = 512
0.00.670.835 I llama_new_context_with_model: flash_attn = 0
0.00.670.838 I llama_new_context_with_model: freq_base  = 10000.0
0.00.670.839 I llama_new_context_with_model: freq_scale = 1
0.00.701.042 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.701.084 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.701.194 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.702.592 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.702.597 I llama_new_context_with_model: graph nodes  = 601
0.00.702.598 I llama_new_context_with_model: graph splits = 1
0.00.702.614 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.279.757 I main: llama threadpool init, n_threads = 4
0.01.279.768 I 
0.01.279.873 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.279.877 I 
0.01.280.055 I sampler seed: 3917941539
0.01.280.066 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.280.075 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.280.075 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.280.078 I 
 fufilling as a baby.

The sentence is nonsensical and should not be spoken. [end of text]


0.07.751.103 I llama_perf_sampler_print:    sampling time =      29.30 ms /    20 runs   (    1.47 ms per token,   682.52 tokens per second)
0.07.751.116 I llama_perf_context_print:        load time =    1276.88 ms
0.07.751.118 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.751.120 I llama_perf_context_print:        eval time =    6421.78 ms /    19 runs   (  337.99 ms per token,     2.96 tokens per second)
0.07.751.122 I llama_perf_context_print:       total time =    6471.36 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3928 (66c2c930)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198809.99 ms
main:    total time = 198809.99 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.628 I build: 3928 (66c2c930) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.822 I main: llama backend init
0.00.002.785 I main: load the model and apply lora adapter, if any
0.00.024.889 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.981 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.994 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.996 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.000 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.003 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.004 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.005 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.007 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.009 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.014 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.015 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.016 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.017 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.018 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.617 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.876 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.801 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.809 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.810 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.811 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.812 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.814 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.815 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.818 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.819 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.828 I llama_model_loader: - type  f32:   37 tensors
0.00.266.831 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.832 I llama_model_loader: - type q6_K:   19 tensors
0.00.438.960 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.485.046 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.486.907 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.492.392 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.503.976 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.900 I llm_load_vocab: special tokens cache size = 5
0.00.615.248 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.615.319 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.615.323 I llm_load_print_meta: arch             = gemma
0.00.615.324 I llm_load_print_meta: vocab type       = SPM
0.00.615.324 I llm_load_print_meta: n_vocab          = 256000
0.00.615.326 I llm_load_print_meta: n_merges         = 0
0.00.615.327 I llm_load_print_meta: vocab_only       = 0
0.00.615.327 I llm_load_print_meta: n_ctx_train      = 8192
0.00.615.327 I llm_load_print_meta: n_embd           = 2048
0.00.615.328 I llm_load_print_meta: n_layer          = 18
0.00.615.393 I llm_load_print_meta: n_head           = 8
0.00.615.403 I llm_load_print_meta: n_head_kv        = 1
0.00.615.404 I llm_load_print_meta: n_rot            = 256
0.00.615.405 I llm_load_print_meta: n_swa            = 0
0.00.615.405 I llm_load_print_meta: n_embd_head_k    = 256
0.00.615.406 I llm_load_print_meta: n_embd_head_v    = 256
0.00.615.410 I llm_load_print_meta: n_gqa            = 8
0.00.615.415 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.615.420 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.615.422 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.615.423 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.615.424 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.615.424 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.615.424 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.615.430 I llm_load_print_meta: n_ff             = 16384
0.00.615.430 I llm_load_print_meta: n_expert         = 0
0.00.615.431 I llm_load_print_meta: n_expert_used    = 0
0.00.615.431 I llm_load_print_meta: causal attn      = 1
0.00.615.432 I llm_load_print_meta: pooling type     = 0
0.00.615.432 I llm_load_print_meta: rope type        = 2
0.00.615.433 I llm_load_print_meta: rope scaling     = linear
0.00.615.435 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.615.436 I llm_load_print_meta: freq_scale_train = 1
0.00.615.436 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.615.436 I llm_load_print_meta: rope_finetuned   = unknown
0.00.615.437 I llm_load_print_meta: ssm_d_conv       = 0
0.00.615.438 I llm_load_print_meta: ssm_d_inner      = 0
0.00.615.438 I llm_load_print_meta: ssm_d_state      = 0
0.00.615.438 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.615.438 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.615.439 I llm_load_print_meta: model type       = 2B
0.00.615.440 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.615.441 I llm_load_print_meta: model params     = 2.51 B
0.00.615.441 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.615.442 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.615.443 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.615.444 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.615.444 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.615.445 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.615.445 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.615.446 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.615.451 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.615.453 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.615.453 I llm_load_print_meta: max token length = 93
0.00.615.613 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.673.685 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.679.438 I llama_new_context_with_model: n_ctx      = 8192
0.00.679.447 I llama_new_context_with_model: n_batch    = 2048
0.00.679.447 I llama_new_context_with_model: n_ubatch   = 512
0.00.679.448 I llama_new_context_with_model: flash_attn = 0
0.00.679.452 I llama_new_context_with_model: freq_base  = 10000.0
0.00.679.453 I llama_new_context_with_model: freq_scale = 1
0.00.709.768 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.709.815 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.709.922 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.711.285 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.711.290 I llama_new_context_with_model: graph nodes  = 601
0.00.711.291 I llama_new_context_with_model: graph splits = 1
0.00.711.309 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.292.369 I main: llama threadpool init, n_threads = 4
0.01.292.381 I 
0.01.292.487 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.292.492 I 
0.01.292.671 I sampler seed: 2175459472
0.01.292.682 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.292.690 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.292.691 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.292.691 I 
 squaRED, the most popular AI language model on the market.

## SQUARED: The Most Popular AI Language Model in the World

**Squared

0.12.244.191 I llama_perf_sampler_print:    sampling time =      49.23 ms /    33 runs   (    1.49 ms per token,   670.25 tokens per second)
0.12.244.195 I llama_perf_context_print:        load time =    1289.50 ms
0.12.244.196 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.244.197 I llama_perf_context_print:        eval time =   10867.99 ms /    32 runs   (  339.62 ms per token,     2.94 tokens per second)
0.12.244.198 I llama_perf_context_print:       total time =   10951.83 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m0.217s
user	49m50.153s
sys	0m6.406s
