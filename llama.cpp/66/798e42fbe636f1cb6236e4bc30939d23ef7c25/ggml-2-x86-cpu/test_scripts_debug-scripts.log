+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.675 I build: 4076 (66798e42) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.870 I main: llama backend init
0.00.001.131 I main: load the model and apply lora adapter, if any
0.00.024.081 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.093 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.181 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.191 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.193 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.197 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.200 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.201 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.203 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.204 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.205 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.211 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.212 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.213 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.214 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.215 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.677 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.716 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.037 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.045 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.046 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.047 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.048 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.050 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.051 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.054 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.055 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.057 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.057 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.059 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.066 I llama_model_loader: - type  f32:   37 tensors
0.00.266.069 I llama_model_loader: - type q8_0:  127 tensors
0.00.435.227 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.497.011 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.498.013 I llm_load_vocab: special tokens cache size = 5
0.00.596.123 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.596.206 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.596.207 I llm_load_print_meta: arch             = gemma
0.00.596.207 I llm_load_print_meta: vocab type       = SPM
0.00.596.209 I llm_load_print_meta: n_vocab          = 256000
0.00.596.211 I llm_load_print_meta: n_merges         = 0
0.00.596.212 I llm_load_print_meta: vocab_only       = 0
0.00.596.213 I llm_load_print_meta: n_ctx_train      = 8192
0.00.596.213 I llm_load_print_meta: n_embd           = 2048
0.00.596.213 I llm_load_print_meta: n_layer          = 18
0.00.596.279 I llm_load_print_meta: n_head           = 8
0.00.596.286 I llm_load_print_meta: n_head_kv        = 1
0.00.596.287 I llm_load_print_meta: n_rot            = 256
0.00.596.287 I llm_load_print_meta: n_swa            = 0
0.00.596.288 I llm_load_print_meta: n_embd_head_k    = 256
0.00.596.295 I llm_load_print_meta: n_embd_head_v    = 256
0.00.596.311 I llm_load_print_meta: n_gqa            = 8
0.00.596.317 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.596.322 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.596.323 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.596.325 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.596.325 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.596.326 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.596.327 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.596.331 I llm_load_print_meta: n_ff             = 16384
0.00.596.332 I llm_load_print_meta: n_expert         = 0
0.00.596.333 I llm_load_print_meta: n_expert_used    = 0
0.00.596.333 I llm_load_print_meta: causal attn      = 1
0.00.596.334 I llm_load_print_meta: pooling type     = 0
0.00.596.334 I llm_load_print_meta: rope type        = 2
0.00.596.335 I llm_load_print_meta: rope scaling     = linear
0.00.596.336 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.596.337 I llm_load_print_meta: freq_scale_train = 1
0.00.596.338 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.596.338 I llm_load_print_meta: rope_finetuned   = unknown
0.00.596.338 I llm_load_print_meta: ssm_d_conv       = 0
0.00.596.339 I llm_load_print_meta: ssm_d_inner      = 0
0.00.596.340 I llm_load_print_meta: ssm_d_state      = 0
0.00.596.340 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.596.340 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.596.341 I llm_load_print_meta: model type       = 2B
0.00.596.342 I llm_load_print_meta: model ftype      = Q8_0
0.00.596.343 I llm_load_print_meta: model params     = 2.51 B
0.00.596.344 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.596.344 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.596.347 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.596.348 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.596.348 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.596.348 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.596.349 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.596.349 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.596.355 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.596.356 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.596.357 I llm_load_print_meta: max token length = 93
0.00.698.260 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.698.269 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.698.270 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.698.271 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.698.272 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.698.273 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.704.130 I llama_new_context_with_model: n_seq_max     = 1
0.00.704.138 I llama_new_context_with_model: n_ctx         = 4096
0.00.704.139 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.704.139 I llama_new_context_with_model: n_batch       = 2048
0.00.704.139 I llama_new_context_with_model: n_ubatch      = 512
0.00.704.140 I llama_new_context_with_model: flash_attn    = 0
0.00.704.143 I llama_new_context_with_model: freq_base     = 10000.0
0.00.704.144 I llama_new_context_with_model: freq_scale    = 1
0.00.704.144 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.720.867 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.720.910 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.721.026 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.723.568 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.723.572 I llama_new_context_with_model: graph nodes  = 601
0.00.723.572 I llama_new_context_with_model: graph splits = 1
0.00.723.598 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.329.755 I main: llama threadpool init, n_threads = 4
0.01.329.767 I 
0.01.329.873 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.329.877 I 
0.01.330.103 I sampler seed: 1298244688
0.01.330.117 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.330.122 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.330.126 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.330.127 I 
 increasities to the present day.

**Answer:**

The provided text does not contain any information regarding the present day, so I am unable to provide an

0.14.771.615 I llama_perf_sampler_print:    sampling time =      48.26 ms /    33 runs   (    1.46 ms per token,   683.74 tokens per second)
0.14.771.617 I llama_perf_context_print:        load time =    1328.53 ms
0.14.771.631 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.771.633 I llama_perf_context_print:        eval time =   13352.70 ms /    32 runs   (  417.27 ms per token,     2.40 tokens per second)
0.14.771.634 I llama_perf_context_print:       total time =   13441.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 4076 (66798e42) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.841 I main: llama backend init
0.00.001.102 I main: load the model and apply lora adapter, if any
0.00.023.358 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.453 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.466 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.468 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.473 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.474 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.475 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.476 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.477 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.478 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.485 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.486 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.487 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.488 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.489 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.904 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.736 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.955 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.967 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.968 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.969 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.970 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.971 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.972 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.976 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.977 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.978 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.979 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.264.980 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.989 I llama_model_loader: - type  f32:   37 tensors
0.00.264.992 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.663 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.918 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.852 I llm_load_vocab: special tokens cache size = 5
0.00.628.319 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.628.397 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.628.398 I llm_load_print_meta: arch             = gemma
0.00.628.398 I llm_load_print_meta: vocab type       = SPM
0.00.628.399 I llm_load_print_meta: n_vocab          = 256000
0.00.628.402 I llm_load_print_meta: n_merges         = 0
0.00.628.402 I llm_load_print_meta: vocab_only       = 0
0.00.628.403 I llm_load_print_meta: n_ctx_train      = 8192
0.00.628.403 I llm_load_print_meta: n_embd           = 2048
0.00.628.403 I llm_load_print_meta: n_layer          = 18
0.00.628.465 I llm_load_print_meta: n_head           = 8
0.00.628.472 I llm_load_print_meta: n_head_kv        = 1
0.00.628.473 I llm_load_print_meta: n_rot            = 256
0.00.628.473 I llm_load_print_meta: n_swa            = 0
0.00.628.474 I llm_load_print_meta: n_embd_head_k    = 256
0.00.628.474 I llm_load_print_meta: n_embd_head_v    = 256
0.00.628.479 I llm_load_print_meta: n_gqa            = 8
0.00.628.483 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.628.488 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.628.489 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.628.491 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.628.492 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.628.492 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.628.492 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.628.498 I llm_load_print_meta: n_ff             = 16384
0.00.628.498 I llm_load_print_meta: n_expert         = 0
0.00.628.499 I llm_load_print_meta: n_expert_used    = 0
0.00.628.500 I llm_load_print_meta: causal attn      = 1
0.00.628.500 I llm_load_print_meta: pooling type     = 0
0.00.628.510 I llm_load_print_meta: rope type        = 2
0.00.628.511 I llm_load_print_meta: rope scaling     = linear
0.00.628.513 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.628.514 I llm_load_print_meta: freq_scale_train = 1
0.00.628.515 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.628.515 I llm_load_print_meta: rope_finetuned   = unknown
0.00.628.516 I llm_load_print_meta: ssm_d_conv       = 0
0.00.628.528 I llm_load_print_meta: ssm_d_inner      = 0
0.00.628.529 I llm_load_print_meta: ssm_d_state      = 0
0.00.628.535 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.628.536 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.628.537 I llm_load_print_meta: model type       = 2B
0.00.628.538 I llm_load_print_meta: model ftype      = Q8_0
0.00.628.539 I llm_load_print_meta: model params     = 2.51 B
0.00.628.540 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.628.540 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.628.541 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.628.541 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.628.542 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.628.543 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.628.543 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.628.544 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.628.550 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.628.552 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.628.553 I llm_load_print_meta: max token length = 93
0.00.727.954 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.733.898 I llama_new_context_with_model: n_seq_max     = 1
0.00.733.906 I llama_new_context_with_model: n_ctx         = 4096
0.00.733.906 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.733.907 I llama_new_context_with_model: n_batch       = 2048
0.00.733.907 I llama_new_context_with_model: n_ubatch      = 512
0.00.733.908 I llama_new_context_with_model: flash_attn    = 0
0.00.733.911 I llama_new_context_with_model: freq_base     = 10000.0
0.00.733.912 I llama_new_context_with_model: freq_scale    = 1
0.00.733.913 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.750.711 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.750.754 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.750.874 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.753.403 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.753.407 I llama_new_context_with_model: graph nodes  = 601
0.00.753.408 I llama_new_context_with_model: graph splits = 1
0.00.753.433 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.361.254 I main: llama threadpool init, n_threads = 4
0.01.361.268 I 
0.01.361.382 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.361.386 I 
0.01.361.619 I sampler seed: 2154163473
0.01.361.632 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.361.639 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.361.640 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.361.640 I 
 increasities in her love life?

It is inappropriate to discuss sexually explicit or private matters of individuals. [end of text]


0.10.690.294 I llama_perf_sampler_print:    sampling time =      33.82 ms /    23 runs   (    1.47 ms per token,   680.03 tokens per second)
0.10.690.297 I llama_perf_context_print:        load time =    1360.06 ms
0.10.690.299 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.690.302 I llama_perf_context_print:        eval time =    9265.63 ms /    22 runs   (  421.16 ms per token,     2.37 tokens per second)
0.10.690.304 I llama_perf_context_print:       total time =    9329.05 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.667 I build: 4076 (66798e42) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.891 I main: llama backend init
0.00.001.156 I main: load the model and apply lora adapter, if any
0.00.023.528 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.538 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.624 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.636 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.638 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.642 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.644 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.646 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.647 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.648 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.656 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.666 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.668 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.669 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.670 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.671 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.254 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.234 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.533 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.541 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.542 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.543 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.544 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.546 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.548 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.551 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.552 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.553 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.554 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.265.556 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.564 I llama_model_loader: - type  f32:   37 tensors
0.00.265.566 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.855 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.045 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.503.995 I llm_load_vocab: special tokens cache size = 5
0.00.612.851 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.930 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.931 I llm_load_print_meta: arch             = gemma
0.00.612.932 I llm_load_print_meta: vocab type       = SPM
0.00.612.933 I llm_load_print_meta: n_vocab          = 256000
0.00.612.935 I llm_load_print_meta: n_merges         = 0
0.00.612.936 I llm_load_print_meta: vocab_only       = 0
0.00.612.937 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.937 I llm_load_print_meta: n_embd           = 2048
0.00.612.937 I llm_load_print_meta: n_layer          = 18
0.00.613.001 I llm_load_print_meta: n_head           = 8
0.00.613.008 I llm_load_print_meta: n_head_kv        = 1
0.00.613.009 I llm_load_print_meta: n_rot            = 256
0.00.613.009 I llm_load_print_meta: n_swa            = 0
0.00.613.009 I llm_load_print_meta: n_embd_head_k    = 256
0.00.613.010 I llm_load_print_meta: n_embd_head_v    = 256
0.00.613.014 I llm_load_print_meta: n_gqa            = 8
0.00.613.019 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.613.024 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.613.025 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.613.027 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.613.027 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.613.028 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.613.029 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.613.034 I llm_load_print_meta: n_ff             = 16384
0.00.613.034 I llm_load_print_meta: n_expert         = 0
0.00.613.034 I llm_load_print_meta: n_expert_used    = 0
0.00.613.035 I llm_load_print_meta: causal attn      = 1
0.00.613.035 I llm_load_print_meta: pooling type     = 0
0.00.613.036 I llm_load_print_meta: rope type        = 2
0.00.613.041 I llm_load_print_meta: rope scaling     = linear
0.00.613.044 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.613.045 I llm_load_print_meta: freq_scale_train = 1
0.00.613.058 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.613.062 I llm_load_print_meta: rope_finetuned   = unknown
0.00.613.062 I llm_load_print_meta: ssm_d_conv       = 0
0.00.613.062 I llm_load_print_meta: ssm_d_inner      = 0
0.00.613.063 I llm_load_print_meta: ssm_d_state      = 0
0.00.613.063 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.613.063 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.613.064 I llm_load_print_meta: model type       = 2B
0.00.613.065 I llm_load_print_meta: model ftype      = Q8_0
0.00.613.066 I llm_load_print_meta: model params     = 2.51 B
0.00.613.067 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.613.067 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.613.068 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.613.068 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.613.069 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.613.069 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.613.070 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.613.071 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.613.079 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.613.080 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.613.080 I llm_load_print_meta: max token length = 93
0.00.694.715 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.694.726 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.694.727 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.694.728 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.694.728 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.694.729 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.700.624 I llama_new_context_with_model: n_seq_max     = 1
0.00.700.631 I llama_new_context_with_model: n_ctx         = 4096
0.00.700.631 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.700.631 I llama_new_context_with_model: n_batch       = 2048
0.00.700.632 I llama_new_context_with_model: n_ubatch      = 512
0.00.700.632 I llama_new_context_with_model: flash_attn    = 0
0.00.700.635 I llama_new_context_with_model: freq_base     = 10000.0
0.00.700.635 I llama_new_context_with_model: freq_scale    = 1
0.00.700.636 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.717.369 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.717.408 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.717.524 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.720.088 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.720.092 I llama_new_context_with_model: graph nodes  = 601
0.00.720.092 I llama_new_context_with_model: graph splits = 1
0.00.720.117 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.323.742 I main: llama threadpool init, n_threads = 4
0.01.323.755 I 
0.01.323.861 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.323.865 I 
0.01.324.096 I sampler seed: 2170765792
0.01.324.108 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.324.117 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.324.118 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.324.118 I 
 increasities in the comments section of a YouTube video.

I am unable to access the comments section of the video. [end of text]


0.11.832.417 I llama_perf_sampler_print:    sampling time =      37.97 ms /    26 runs   (    1.46 ms per token,   684.73 tokens per second)
0.11.832.420 I llama_perf_context_print:        load time =    1322.49 ms
0.11.832.421 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.832.423 I llama_perf_context_print:        eval time =   10438.26 ms /    25 runs   (  417.53 ms per token,     2.40 tokens per second)
0.11.832.447 I llama_perf_context_print:       total time =   10508.68 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 4076 (66798e42) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.879 I main: llama backend init
0.00.001.153 I main: load the model and apply lora adapter, if any
0.00.023.610 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.622 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.711 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.722 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.724 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.729 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.731 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.732 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.733 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.734 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.736 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.743 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.746 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.747 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.748 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.750 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.334 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.074 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.417 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.428 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.429 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.430 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.431 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.432 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.433 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.437 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.438 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.439 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.439 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.265.441 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.449 I llama_model_loader: - type  f32:   37 tensors
0.00.265.451 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.116 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.146 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.106 I llm_load_vocab: special tokens cache size = 5
0.00.610.116 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.610.197 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.610.201 I llm_load_print_meta: arch             = gemma
0.00.610.202 I llm_load_print_meta: vocab type       = SPM
0.00.610.203 I llm_load_print_meta: n_vocab          = 256000
0.00.610.205 I llm_load_print_meta: n_merges         = 0
0.00.610.206 I llm_load_print_meta: vocab_only       = 0
0.00.610.206 I llm_load_print_meta: n_ctx_train      = 8192
0.00.610.206 I llm_load_print_meta: n_embd           = 2048
0.00.610.207 I llm_load_print_meta: n_layer          = 18
0.00.610.271 I llm_load_print_meta: n_head           = 8
0.00.610.280 I llm_load_print_meta: n_head_kv        = 1
0.00.610.281 I llm_load_print_meta: n_rot            = 256
0.00.610.282 I llm_load_print_meta: n_swa            = 0
0.00.610.283 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.283 I llm_load_print_meta: n_embd_head_v    = 256
0.00.610.288 I llm_load_print_meta: n_gqa            = 8
0.00.610.292 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.297 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.298 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.300 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.301 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.610.302 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.610.302 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.610.307 I llm_load_print_meta: n_ff             = 16384
0.00.610.308 I llm_load_print_meta: n_expert         = 0
0.00.610.309 I llm_load_print_meta: n_expert_used    = 0
0.00.610.309 I llm_load_print_meta: causal attn      = 1
0.00.610.309 I llm_load_print_meta: pooling type     = 0
0.00.610.310 I llm_load_print_meta: rope type        = 2
0.00.610.311 I llm_load_print_meta: rope scaling     = linear
0.00.610.312 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.610.313 I llm_load_print_meta: freq_scale_train = 1
0.00.610.313 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.610.314 I llm_load_print_meta: rope_finetuned   = unknown
0.00.610.314 I llm_load_print_meta: ssm_d_conv       = 0
0.00.610.314 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.315 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.315 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.316 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.316 I llm_load_print_meta: model type       = 2B
0.00.610.317 I llm_load_print_meta: model ftype      = Q8_0
0.00.610.318 I llm_load_print_meta: model params     = 2.51 B
0.00.610.319 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.610.319 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.320 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.320 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.321 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.321 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.322 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.322 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.328 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.329 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.329 I llm_load_print_meta: max token length = 93
0.00.682.331 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.682.342 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.688.087 I llama_new_context_with_model: n_seq_max     = 1
0.00.688.094 I llama_new_context_with_model: n_ctx         = 4096
0.00.688.094 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.688.095 I llama_new_context_with_model: n_batch       = 2048
0.00.688.095 I llama_new_context_with_model: n_ubatch      = 512
0.00.688.096 I llama_new_context_with_model: flash_attn    = 0
0.00.688.098 I llama_new_context_with_model: freq_base     = 10000.0
0.00.688.099 I llama_new_context_with_model: freq_scale    = 1
0.00.688.099 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.704.394 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.704.432 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.704.544 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.707.094 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.707.098 I llama_new_context_with_model: graph nodes  = 601
0.00.707.099 I llama_new_context_with_model: graph splits = 1
0.00.707.123 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.313.150 I main: llama threadpool init, n_threads = 4
0.01.313.165 I 
0.01.313.279 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.313.283 I 
0.01.313.535 I sampler seed: 1840337612
0.01.313.547 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.313.553 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.313.557 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.313.557 I 
 increasities, and the rise of a new species.

This is a fascinating concept, but I'm having trouble visualizing it in my mind. Could you

0.14.713.870 I llama_perf_sampler_print:    sampling time =      48.62 ms /    33 runs   (    1.47 ms per token,   678.66 tokens per second)
0.14.713.874 I llama_perf_context_print:        load time =    1311.90 ms
0.14.713.875 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.713.897 I llama_perf_context_print:        eval time =   13311.77 ms /    32 runs   (  415.99 ms per token,     2.40 tokens per second)
0.14.713.898 I llama_perf_context_print:       total time =   13400.73 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m3.245s
user	3m19.417s
sys	0m9.475s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4076 (66798e42)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199863.16 ms
main:    total time = 199863.16 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.656 I build: 4076 (66798e42) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.860 I main: llama backend init
0.00.001.122 I main: load the model and apply lora adapter, if any
0.00.023.552 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.562 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.650 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.660 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.661 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.666 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.669 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.670 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.671 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.673 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.674 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.680 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.681 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.682 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.684 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.685 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.043 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.190 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.607 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.616 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.617 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.618 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.619 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.620 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.621 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.625 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.626 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.627 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.628 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.629 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.637 I llama_model_loader: - type  f32:   37 tensors
0.00.265.639 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.639 I llama_model_loader: - type q6_K:   19 tensors
0.00.442.982 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.342 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.257 I llm_load_vocab: special tokens cache size = 5
0.00.615.590 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.615.663 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.615.664 I llm_load_print_meta: arch             = gemma
0.00.615.665 I llm_load_print_meta: vocab type       = SPM
0.00.615.666 I llm_load_print_meta: n_vocab          = 256000
0.00.615.669 I llm_load_print_meta: n_merges         = 0
0.00.615.670 I llm_load_print_meta: vocab_only       = 0
0.00.615.670 I llm_load_print_meta: n_ctx_train      = 8192
0.00.615.670 I llm_load_print_meta: n_embd           = 2048
0.00.615.671 I llm_load_print_meta: n_layer          = 18
0.00.615.753 I llm_load_print_meta: n_head           = 8
0.00.615.760 I llm_load_print_meta: n_head_kv        = 1
0.00.615.761 I llm_load_print_meta: n_rot            = 256
0.00.615.761 I llm_load_print_meta: n_swa            = 0
0.00.615.762 I llm_load_print_meta: n_embd_head_k    = 256
0.00.615.762 I llm_load_print_meta: n_embd_head_v    = 256
0.00.615.766 I llm_load_print_meta: n_gqa            = 8
0.00.615.771 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.615.776 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.615.781 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.615.783 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.615.783 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.615.784 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.615.785 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.615.789 I llm_load_print_meta: n_ff             = 16384
0.00.615.790 I llm_load_print_meta: n_expert         = 0
0.00.615.803 I llm_load_print_meta: n_expert_used    = 0
0.00.615.804 I llm_load_print_meta: causal attn      = 1
0.00.615.812 I llm_load_print_meta: pooling type     = 0
0.00.615.821 I llm_load_print_meta: rope type        = 2
0.00.615.822 I llm_load_print_meta: rope scaling     = linear
0.00.615.823 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.615.824 I llm_load_print_meta: freq_scale_train = 1
0.00.615.825 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.615.825 I llm_load_print_meta: rope_finetuned   = unknown
0.00.615.825 I llm_load_print_meta: ssm_d_conv       = 0
0.00.615.833 I llm_load_print_meta: ssm_d_inner      = 0
0.00.615.840 I llm_load_print_meta: ssm_d_state      = 0
0.00.615.841 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.615.848 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.615.853 I llm_load_print_meta: model type       = 2B
0.00.615.854 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.615.855 I llm_load_print_meta: model params     = 2.51 B
0.00.615.855 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.615.856 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.615.857 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.615.858 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.615.858 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.615.866 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.615.874 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.615.881 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.615.888 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.615.890 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.615.891 I llm_load_print_meta: max token length = 93
0.00.678.971 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.678.981 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.678.982 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.678.983 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.678.984 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.678.984 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.684.763 I llama_new_context_with_model: n_seq_max     = 1
0.00.684.770 I llama_new_context_with_model: n_ctx         = 4096
0.00.684.770 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.684.771 I llama_new_context_with_model: n_batch       = 2048
0.00.684.771 I llama_new_context_with_model: n_ubatch      = 512
0.00.684.772 I llama_new_context_with_model: flash_attn    = 0
0.00.684.774 I llama_new_context_with_model: freq_base     = 10000.0
0.00.684.774 I llama_new_context_with_model: freq_scale    = 1
0.00.684.775 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.700.981 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.701.019 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.701.128 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.703.633 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.703.637 I llama_new_context_with_model: graph nodes  = 601
0.00.703.638 I llama_new_context_with_model: graph splits = 1
0.00.703.663 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.275.843 I main: llama threadpool init, n_threads = 4
0.01.275.856 I 
0.01.275.963 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.275.967 I 
0.01.276.202 I sampler seed: 3728149684
0.01.276.214 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.276.224 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.276.225 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.276.225 I 
 seconded me and asked me to answer a question. I am unable to access my previous conversations with that user. Is there a way for me to recover those

0.12.129.823 I llama_perf_sampler_print:    sampling time =      47.98 ms /    33 runs   (    1.45 ms per token,   687.86 tokens per second)
0.12.129.837 I llama_perf_context_print:        load time =    1274.62 ms
0.12.129.839 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.129.840 I llama_perf_context_print:        eval time =   10765.86 ms /    32 runs   (  336.43 ms per token,     2.97 tokens per second)
0.12.129.841 I llama_perf_context_print:       total time =   10853.99 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4076 (66798e42)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199386.07 ms
main:    total time = 199386.07 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 4076 (66798e42) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.829 I main: llama backend init
0.00.001.090 I main: load the model and apply lora adapter, if any
0.00.023.222 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.323 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.337 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.341 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.345 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.346 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.348 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.349 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.350 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.351 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.358 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.360 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.361 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.363 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.364 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.169 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.499 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.263.766 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.263.774 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.263.775 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.263.776 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.263.777 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.263.778 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.263.779 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.263.783 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.263.784 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.263.791 I llama_model_loader: - type  f32:   37 tensors
0.00.263.793 I llama_model_loader: - type q4_K:  108 tensors
0.00.263.794 I llama_model_loader: - type q6_K:   19 tensors
0.00.428.277 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.491.510 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.492.435 I llm_load_vocab: special tokens cache size = 5
0.00.585.289 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.585.368 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.585.372 I llm_load_print_meta: arch             = gemma
0.00.585.373 I llm_load_print_meta: vocab type       = SPM
0.00.585.375 I llm_load_print_meta: n_vocab          = 256000
0.00.585.377 I llm_load_print_meta: n_merges         = 0
0.00.585.378 I llm_load_print_meta: vocab_only       = 0
0.00.585.378 I llm_load_print_meta: n_ctx_train      = 8192
0.00.585.378 I llm_load_print_meta: n_embd           = 2048
0.00.585.379 I llm_load_print_meta: n_layer          = 18
0.00.585.443 I llm_load_print_meta: n_head           = 8
0.00.585.453 I llm_load_print_meta: n_head_kv        = 1
0.00.585.454 I llm_load_print_meta: n_rot            = 256
0.00.585.454 I llm_load_print_meta: n_swa            = 0
0.00.585.454 I llm_load_print_meta: n_embd_head_k    = 256
0.00.585.455 I llm_load_print_meta: n_embd_head_v    = 256
0.00.585.459 I llm_load_print_meta: n_gqa            = 8
0.00.585.465 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.585.470 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.585.474 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.585.475 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.585.476 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.585.476 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.585.476 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.585.481 I llm_load_print_meta: n_ff             = 16384
0.00.585.482 I llm_load_print_meta: n_expert         = 0
0.00.585.482 I llm_load_print_meta: n_expert_used    = 0
0.00.585.483 I llm_load_print_meta: causal attn      = 1
0.00.585.485 I llm_load_print_meta: pooling type     = 0
0.00.585.486 I llm_load_print_meta: rope type        = 2
0.00.585.486 I llm_load_print_meta: rope scaling     = linear
0.00.585.487 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.585.488 I llm_load_print_meta: freq_scale_train = 1
0.00.585.488 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.585.489 I llm_load_print_meta: rope_finetuned   = unknown
0.00.585.489 I llm_load_print_meta: ssm_d_conv       = 0
0.00.585.489 I llm_load_print_meta: ssm_d_inner      = 0
0.00.585.490 I llm_load_print_meta: ssm_d_state      = 0
0.00.585.490 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.585.490 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.585.491 I llm_load_print_meta: model type       = 2B
0.00.585.492 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.585.492 I llm_load_print_meta: model params     = 2.51 B
0.00.585.493 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.585.494 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.585.495 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.585.497 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.585.497 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.585.498 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.585.498 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.585.499 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.585.506 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.585.508 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.585.508 I llm_load_print_meta: max token length = 93
0.00.646.001 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.651.837 I llama_new_context_with_model: n_seq_max     = 1
0.00.651.846 I llama_new_context_with_model: n_ctx         = 4096
0.00.651.846 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.651.846 I llama_new_context_with_model: n_batch       = 2048
0.00.651.847 I llama_new_context_with_model: n_ubatch      = 512
0.00.651.848 I llama_new_context_with_model: flash_attn    = 0
0.00.651.851 I llama_new_context_with_model: freq_base     = 10000.0
0.00.651.852 I llama_new_context_with_model: freq_scale    = 1
0.00.651.853 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.668.913 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.668.954 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.669.067 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.671.627 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.671.632 I llama_new_context_with_model: graph nodes  = 601
0.00.671.633 I llama_new_context_with_model: graph splits = 1
0.00.671.656 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.241.687 I main: llama threadpool init, n_threads = 4
0.01.241.700 I 
0.01.241.806 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.241.810 I 
0.01.242.035 I sampler seed: 4038192783
0.01.242.048 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.242.054 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.242.058 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.242.058 I 
 seconded with an impressive collection of vintage and modern furniture, lighting, and decorative objects. The atmosphere was warm and inviting, with friendly and knowledgeable staff ready to

0.12.074.976 I llama_perf_sampler_print:    sampling time =      48.11 ms /    33 runs   (    1.46 ms per token,   685.89 tokens per second)
0.12.074.990 I llama_perf_context_print:        load time =    1240.50 ms
0.12.074.992 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.074.994 I llama_perf_context_print:        eval time =   10744.90 ms /    32 runs   (  335.78 ms per token,     2.98 tokens per second)
0.12.074.995 I llama_perf_context_print:       total time =   10833.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.427s
user	50m13.378s
sys	0m6.230s
