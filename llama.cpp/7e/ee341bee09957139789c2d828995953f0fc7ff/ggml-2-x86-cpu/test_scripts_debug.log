+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.677 I build: 3906 (7eee341b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.878 I main: llama backend init
0.00.002.817 I main: load the model and apply lora adapter, if any
0.00.025.205 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.413 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.507 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.518 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.520 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.524 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.525 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.526 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.528 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.529 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.530 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.539 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.542 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.543 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.544 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.545 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.006 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.255.747 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.116 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.123 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.124 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.125 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.126 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.127 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.129 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.133 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.133 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.135 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.136 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.274.137 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.144 I llama_model_loader: - type  f32:   37 tensors
0.00.274.148 I llama_model_loader: - type q8_0:  127 tensors
0.00.431.781 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.456.782 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.457.781 I llm_load_vocab: special tokens cache size = 5
0.00.553.900 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.553.957 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.553.959 I llm_load_print_meta: arch             = gemma
0.00.553.959 I llm_load_print_meta: vocab type       = SPM
0.00.553.960 I llm_load_print_meta: n_vocab          = 256000
0.00.553.963 I llm_load_print_meta: n_merges         = 0
0.00.553.963 I llm_load_print_meta: vocab_only       = 0
0.00.553.964 I llm_load_print_meta: n_ctx_train      = 8192
0.00.553.964 I llm_load_print_meta: n_embd           = 2048
0.00.553.964 I llm_load_print_meta: n_layer          = 18
0.00.554.028 I llm_load_print_meta: n_head           = 8
0.00.554.035 I llm_load_print_meta: n_head_kv        = 1
0.00.554.036 I llm_load_print_meta: n_rot            = 256
0.00.554.036 I llm_load_print_meta: n_swa            = 0
0.00.554.037 I llm_load_print_meta: n_embd_head_k    = 256
0.00.554.037 I llm_load_print_meta: n_embd_head_v    = 256
0.00.554.041 I llm_load_print_meta: n_gqa            = 8
0.00.554.046 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.554.072 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.554.074 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.554.075 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.554.076 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.554.076 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.554.076 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.554.082 I llm_load_print_meta: n_ff             = 16384
0.00.554.083 I llm_load_print_meta: n_expert         = 0
0.00.554.087 I llm_load_print_meta: n_expert_used    = 0
0.00.554.088 I llm_load_print_meta: causal attn      = 1
0.00.554.088 I llm_load_print_meta: pooling type     = 0
0.00.554.088 I llm_load_print_meta: rope type        = 2
0.00.554.089 I llm_load_print_meta: rope scaling     = linear
0.00.554.093 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.554.094 I llm_load_print_meta: freq_scale_train = 1
0.00.554.094 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.554.095 I llm_load_print_meta: rope_finetuned   = unknown
0.00.554.095 I llm_load_print_meta: ssm_d_conv       = 0
0.00.554.096 I llm_load_print_meta: ssm_d_inner      = 0
0.00.554.096 I llm_load_print_meta: ssm_d_state      = 0
0.00.554.096 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.554.096 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.554.097 I llm_load_print_meta: model type       = 2B
0.00.554.098 I llm_load_print_meta: model ftype      = Q8_0
0.00.554.098 I llm_load_print_meta: model params     = 2.51 B
0.00.554.099 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.554.099 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.554.100 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.554.100 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.554.101 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.554.102 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.554.103 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.554.104 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.554.109 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.554.110 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.554.111 I llm_load_print_meta: max token length = 93
0.00.554.283 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.653.833 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.653.845 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.653.846 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.653.846 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.653.847 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.653.848 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.659.661 I llama_new_context_with_model: n_ctx      = 8192
0.00.659.668 I llama_new_context_with_model: n_batch    = 2048
0.00.659.669 I llama_new_context_with_model: n_ubatch   = 512
0.00.659.669 I llama_new_context_with_model: flash_attn = 0
0.00.659.672 I llama_new_context_with_model: freq_base  = 10000.0
0.00.659.673 I llama_new_context_with_model: freq_scale = 1
0.00.689.502 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.689.545 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.689.659 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.691.077 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.691.084 I llama_new_context_with_model: graph nodes  = 601
0.00.691.084 I llama_new_context_with_model: graph splits = 1
0.00.691.100 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.305.128 I main: llama threadpool init, n_threads = 4
0.01.305.141 I 
0.01.305.249 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.305.253 I 
0.01.305.423 I sampler seed: 1849800642
0.01.305.434 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.305.442 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.305.442 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.305.443 I 
 increasities for the benefit of the community. [end of text]


0.05.589.799 I llama_perf_sampler_print:    sampling time =      15.45 ms /    11 runs   (    1.40 ms per token,   712.20 tokens per second)
0.05.589.814 I llama_perf_context_print:        load time =    1302.22 ms
0.05.589.816 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.589.818 I llama_perf_context_print:        eval time =    4257.88 ms /    10 runs   (  425.79 ms per token,     2.35 tokens per second)
0.05.589.819 I llama_perf_context_print:       total time =    4284.68 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 3906 (7eee341b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.002.828 I main: load the model and apply lora adapter, if any
0.00.025.602 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.702 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.718 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.722 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.727 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.729 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.731 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.739 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.741 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.742 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.750 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.753 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.754 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.755 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.756 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.924 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.144 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.639 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.650 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.652 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.653 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.654 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.655 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.656 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.660 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.661 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.663 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.664 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.274.665 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.674 I llama_model_loader: - type  f32:   37 tensors
0.00.274.679 I llama_model_loader: - type q8_0:  127 tensors
0.00.438.641 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.468.170 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.469.170 I llm_load_vocab: special tokens cache size = 5
0.00.564.813 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.564.879 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.564.880 I llm_load_print_meta: arch             = gemma
0.00.564.881 I llm_load_print_meta: vocab type       = SPM
0.00.564.882 I llm_load_print_meta: n_vocab          = 256000
0.00.564.884 I llm_load_print_meta: n_merges         = 0
0.00.564.884 I llm_load_print_meta: vocab_only       = 0
0.00.564.885 I llm_load_print_meta: n_ctx_train      = 8192
0.00.564.885 I llm_load_print_meta: n_embd           = 2048
0.00.564.886 I llm_load_print_meta: n_layer          = 18
0.00.564.956 I llm_load_print_meta: n_head           = 8
0.00.564.962 I llm_load_print_meta: n_head_kv        = 1
0.00.564.963 I llm_load_print_meta: n_rot            = 256
0.00.564.963 I llm_load_print_meta: n_swa            = 0
0.00.564.964 I llm_load_print_meta: n_embd_head_k    = 256
0.00.564.964 I llm_load_print_meta: n_embd_head_v    = 256
0.00.564.969 I llm_load_print_meta: n_gqa            = 8
0.00.564.974 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.564.979 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.564.980 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.564.982 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.564.982 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.564.983 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.564.983 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.564.988 I llm_load_print_meta: n_ff             = 16384
0.00.564.989 I llm_load_print_meta: n_expert         = 0
0.00.564.989 I llm_load_print_meta: n_expert_used    = 0
0.00.564.990 I llm_load_print_meta: causal attn      = 1
0.00.564.990 I llm_load_print_meta: pooling type     = 0
0.00.564.990 I llm_load_print_meta: rope type        = 2
0.00.564.990 I llm_load_print_meta: rope scaling     = linear
0.00.564.992 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.564.992 I llm_load_print_meta: freq_scale_train = 1
0.00.564.993 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.564.993 I llm_load_print_meta: rope_finetuned   = unknown
0.00.564.993 I llm_load_print_meta: ssm_d_conv       = 0
0.00.564.994 I llm_load_print_meta: ssm_d_inner      = 0
0.00.564.994 I llm_load_print_meta: ssm_d_state      = 0
0.00.564.994 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.564.995 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.564.996 I llm_load_print_meta: model type       = 2B
0.00.564.997 I llm_load_print_meta: model ftype      = Q8_0
0.00.564.997 I llm_load_print_meta: model params     = 2.51 B
0.00.564.998 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.564.998 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.564.999 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.564.999 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.565.000 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.565.000 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.565.001 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.565.001 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.565.007 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.565.008 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.565.008 I llm_load_print_meta: max token length = 93
0.00.565.180 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.660.912 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.666.684 I llama_new_context_with_model: n_ctx      = 8192
0.00.666.691 I llama_new_context_with_model: n_batch    = 2048
0.00.666.692 I llama_new_context_with_model: n_ubatch   = 512
0.00.666.692 I llama_new_context_with_model: flash_attn = 0
0.00.666.695 I llama_new_context_with_model: freq_base  = 10000.0
0.00.666.696 I llama_new_context_with_model: freq_scale = 1
0.00.696.720 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.696.765 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.696.879 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.698.257 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.698.264 I llama_new_context_with_model: graph nodes  = 601
0.00.698.264 I llama_new_context_with_model: graph splits = 1
0.00.698.280 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.307.150 I main: llama threadpool init, n_threads = 4
0.01.307.162 I 
0.01.307.271 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.307.274 I 
0.01.307.444 I sampler seed: 1612673792
0.01.307.455 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.307.462 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.307.463 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.307.463 I 
 increably!

I'm just messing around, but I couldn't resist writing something funny. I hope you have a great day! [end of text]


0.13.889.054 I llama_perf_sampler_print:    sampling time =      46.10 ms /    31 runs   (    1.49 ms per token,   672.44 tokens per second)
0.13.889.058 I llama_perf_context_print:        load time =    1304.23 ms
0.13.889.060 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.889.062 I llama_perf_context_print:        eval time =   12505.07 ms /    30 runs   (  416.84 ms per token,     2.40 tokens per second)
0.13.889.063 I llama_perf_context_print:       total time =   12581.91 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.738 I build: 3906 (7eee341b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.978 I main: llama backend init
0.00.002.988 I main: load the model and apply lora adapter, if any
0.00.025.365 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.596 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.699 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.712 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.714 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.719 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.725 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.726 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.728 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.730 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.732 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.742 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.744 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.746 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.748 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.750 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.831 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.221 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.277.537 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.277.549 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.277.550 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.277.551 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.277.552 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.277.554 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.277.555 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.277.559 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.277.560 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.277.561 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.277.580 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.277.584 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.277.595 I llama_model_loader: - type  f32:   37 tensors
0.00.277.601 I llama_model_loader: - type q8_0:  127 tensors
0.00.460.159 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.488.741 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.489.944 I llm_load_vocab: special tokens cache size = 5
0.00.585.641 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.585.706 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.585.707 I llm_load_print_meta: arch             = gemma
0.00.585.708 I llm_load_print_meta: vocab type       = SPM
0.00.585.709 I llm_load_print_meta: n_vocab          = 256000
0.00.585.711 I llm_load_print_meta: n_merges         = 0
0.00.585.712 I llm_load_print_meta: vocab_only       = 0
0.00.585.712 I llm_load_print_meta: n_ctx_train      = 8192
0.00.585.713 I llm_load_print_meta: n_embd           = 2048
0.00.585.713 I llm_load_print_meta: n_layer          = 18
0.00.585.781 I llm_load_print_meta: n_head           = 8
0.00.585.790 I llm_load_print_meta: n_head_kv        = 1
0.00.585.791 I llm_load_print_meta: n_rot            = 256
0.00.585.793 I llm_load_print_meta: n_swa            = 0
0.00.585.793 I llm_load_print_meta: n_embd_head_k    = 256
0.00.585.794 I llm_load_print_meta: n_embd_head_v    = 256
0.00.585.801 I llm_load_print_meta: n_gqa            = 8
0.00.585.807 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.585.815 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.585.816 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.585.828 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.585.830 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.585.831 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.585.843 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.585.851 I llm_load_print_meta: n_ff             = 16384
0.00.585.853 I llm_load_print_meta: n_expert         = 0
0.00.585.853 I llm_load_print_meta: n_expert_used    = 0
0.00.585.854 I llm_load_print_meta: causal attn      = 1
0.00.585.855 I llm_load_print_meta: pooling type     = 0
0.00.585.856 I llm_load_print_meta: rope type        = 2
0.00.585.857 I llm_load_print_meta: rope scaling     = linear
0.00.585.859 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.585.860 I llm_load_print_meta: freq_scale_train = 1
0.00.585.860 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.585.876 I llm_load_print_meta: rope_finetuned   = unknown
0.00.585.877 I llm_load_print_meta: ssm_d_conv       = 0
0.00.585.887 I llm_load_print_meta: ssm_d_inner      = 0
0.00.585.888 I llm_load_print_meta: ssm_d_state      = 0
0.00.585.900 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.585.911 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.585.912 I llm_load_print_meta: model type       = 2B
0.00.585.914 I llm_load_print_meta: model ftype      = Q8_0
0.00.585.915 I llm_load_print_meta: model params     = 2.51 B
0.00.585.919 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.585.920 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.585.921 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.585.921 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.585.922 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.585.922 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.585.923 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.585.924 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.585.930 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.585.932 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.585.932 I llm_load_print_meta: max token length = 93
0.00.586.114 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.663.222 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.663.233 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.663.233 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.663.234 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.663.235 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.663.235 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.669.173 I llama_new_context_with_model: n_ctx      = 8192
0.00.669.182 I llama_new_context_with_model: n_batch    = 2048
0.00.669.182 I llama_new_context_with_model: n_ubatch   = 512
0.00.669.183 I llama_new_context_with_model: flash_attn = 0
0.00.669.185 I llama_new_context_with_model: freq_base  = 10000.0
0.00.669.186 I llama_new_context_with_model: freq_scale = 1
0.00.699.737 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.699.784 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.699.905 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.701.304 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.701.311 I llama_new_context_with_model: graph nodes  = 601
0.00.701.312 I llama_new_context_with_model: graph splits = 1
0.00.701.330 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.313.954 I main: llama threadpool init, n_threads = 4
0.01.313.968 I 
0.01.314.090 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.314.094 I 
0.01.314.270 I sampler seed: 2577100072
0.01.314.281 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.314.287 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.314.288 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.314.288 I 
 increamental sequence.

$$3,6,10,15,21,28,36,45,55,6

0.14.964.909 I llama_perf_sampler_print:    sampling time =      48.95 ms /    33 runs   (    1.48 ms per token,   674.12 tokens per second)
0.14.964.934 I llama_perf_context_print:        load time =    1310.86 ms
0.14.964.935 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.964.937 I llama_perf_context_print:        eval time =   13569.25 ms /    32 runs   (  424.04 ms per token,     2.36 tokens per second)
0.14.964.938 I llama_perf_context_print:       total time =   13650.97 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.654 I build: 3906 (7eee341b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.856 I main: llama backend init
0.00.002.872 I main: load the model and apply lora adapter, if any
0.00.024.414 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.627 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.718 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.730 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.731 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.736 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.738 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.739 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.740 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.741 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.742 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.750 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.752 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.753 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.754 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.755 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.154.722 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.254.986 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.488 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.497 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.498 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.499 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.500 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.502 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.503 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.507 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.508 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.509 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.273.510 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.273.511 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.273.519 I llama_model_loader: - type  f32:   37 tensors
0.00.273.523 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.520 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.469.040 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.470.063 I llm_load_vocab: special tokens cache size = 5
0.00.582.344 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.582.405 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.582.406 I llm_load_print_meta: arch             = gemma
0.00.582.407 I llm_load_print_meta: vocab type       = SPM
0.00.582.407 I llm_load_print_meta: n_vocab          = 256000
0.00.582.409 I llm_load_print_meta: n_merges         = 0
0.00.582.410 I llm_load_print_meta: vocab_only       = 0
0.00.582.410 I llm_load_print_meta: n_ctx_train      = 8192
0.00.582.411 I llm_load_print_meta: n_embd           = 2048
0.00.582.411 I llm_load_print_meta: n_layer          = 18
0.00.582.473 I llm_load_print_meta: n_head           = 8
0.00.582.480 I llm_load_print_meta: n_head_kv        = 1
0.00.582.480 I llm_load_print_meta: n_rot            = 256
0.00.582.480 I llm_load_print_meta: n_swa            = 0
0.00.582.481 I llm_load_print_meta: n_embd_head_k    = 256
0.00.582.481 I llm_load_print_meta: n_embd_head_v    = 256
0.00.582.486 I llm_load_print_meta: n_gqa            = 8
0.00.582.490 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.582.495 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.582.496 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.582.497 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.582.498 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.582.498 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.582.499 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.582.504 I llm_load_print_meta: n_ff             = 16384
0.00.582.504 I llm_load_print_meta: n_expert         = 0
0.00.582.504 I llm_load_print_meta: n_expert_used    = 0
0.00.582.505 I llm_load_print_meta: causal attn      = 1
0.00.582.505 I llm_load_print_meta: pooling type     = 0
0.00.582.505 I llm_load_print_meta: rope type        = 2
0.00.582.506 I llm_load_print_meta: rope scaling     = linear
0.00.582.525 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.582.526 I llm_load_print_meta: freq_scale_train = 1
0.00.582.526 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.582.527 I llm_load_print_meta: rope_finetuned   = unknown
0.00.582.527 I llm_load_print_meta: ssm_d_conv       = 0
0.00.582.527 I llm_load_print_meta: ssm_d_inner      = 0
0.00.582.528 I llm_load_print_meta: ssm_d_state      = 0
0.00.582.528 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.582.528 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.582.529 I llm_load_print_meta: model type       = 2B
0.00.582.530 I llm_load_print_meta: model ftype      = Q8_0
0.00.582.531 I llm_load_print_meta: model params     = 2.51 B
0.00.582.531 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.582.532 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.582.532 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.582.533 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.582.533 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.582.533 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.582.534 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.582.534 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.582.540 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.582.542 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.582.556 I llm_load_print_meta: max token length = 93
0.00.582.723 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.653.758 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.653.764 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.659.368 I llama_new_context_with_model: n_ctx      = 8192
0.00.659.378 I llama_new_context_with_model: n_batch    = 2048
0.00.659.379 I llama_new_context_with_model: n_ubatch   = 512
0.00.659.380 I llama_new_context_with_model: flash_attn = 0
0.00.659.384 I llama_new_context_with_model: freq_base  = 10000.0
0.00.659.385 I llama_new_context_with_model: freq_scale = 1
0.00.690.226 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.690.268 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.690.382 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.691.768 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.691.774 I llama_new_context_with_model: graph nodes  = 601
0.00.691.775 I llama_new_context_with_model: graph splits = 1
0.00.691.790 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.303.912 I main: llama threadpool init, n_threads = 4
0.01.303.923 I 
0.01.304.032 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.304.033 I 
0.01.304.202 I sampler seed: 307352323
0.01.304.213 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.304.220 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.304.220 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.304.224 I 
 increasively in the quality of the goods and services offered by firms. This process is known as:

A) Technological advancement
B) Market expansion
C

0.14.915.150 I llama_perf_sampler_print:    sampling time =      49.03 ms /    33 runs   (    1.49 ms per token,   673.07 tokens per second)
0.14.915.154 I llama_perf_context_print:        load time =    1300.94 ms
0.14.915.156 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.915.158 I llama_perf_context_print:        eval time =   13527.62 ms /    32 runs   (  422.74 ms per token,     2.37 tokens per second)
0.14.915.162 I llama_perf_context_print:       total time =   13611.25 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m59.177s
user	3m9.066s
sys	0m9.507s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3906 (7eee341b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199794.17 ms
main:    total time = 199794.17 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 3906 (7eee341b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.850 I main: llama backend init
0.00.002.786 I main: load the model and apply lora adapter, if any
0.00.024.564 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.771 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.874 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.886 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.887 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.892 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.896 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.897 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.898 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.900 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.901 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.909 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.910 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.911 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.912 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.913 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.524 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.255.638 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.181 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.190 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.191 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.193 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.194 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.195 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.196 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.200 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.201 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.202 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.203 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.274.204 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.212 I llama_model_loader: - type  f32:   37 tensors
0.00.274.216 I llama_model_loader: - type q4_K:  108 tensors
0.00.274.217 I llama_model_loader: - type q6_K:   19 tensors
0.00.436.326 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.463.267 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.464.342 I llm_load_vocab: special tokens cache size = 5
0.00.561.013 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.561.070 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.561.071 I llm_load_print_meta: arch             = gemma
0.00.561.072 I llm_load_print_meta: vocab type       = SPM
0.00.561.073 I llm_load_print_meta: n_vocab          = 256000
0.00.561.075 I llm_load_print_meta: n_merges         = 0
0.00.561.076 I llm_load_print_meta: vocab_only       = 0
0.00.561.076 I llm_load_print_meta: n_ctx_train      = 8192
0.00.561.077 I llm_load_print_meta: n_embd           = 2048
0.00.561.077 I llm_load_print_meta: n_layer          = 18
0.00.561.139 I llm_load_print_meta: n_head           = 8
0.00.561.146 I llm_load_print_meta: n_head_kv        = 1
0.00.561.147 I llm_load_print_meta: n_rot            = 256
0.00.561.147 I llm_load_print_meta: n_swa            = 0
0.00.561.148 I llm_load_print_meta: n_embd_head_k    = 256
0.00.561.148 I llm_load_print_meta: n_embd_head_v    = 256
0.00.561.153 I llm_load_print_meta: n_gqa            = 8
0.00.561.157 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.561.162 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.561.163 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.561.164 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.561.165 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.561.165 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.561.166 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.561.170 I llm_load_print_meta: n_ff             = 16384
0.00.561.171 I llm_load_print_meta: n_expert         = 0
0.00.561.171 I llm_load_print_meta: n_expert_used    = 0
0.00.561.171 I llm_load_print_meta: causal attn      = 1
0.00.561.171 I llm_load_print_meta: pooling type     = 0
0.00.561.172 I llm_load_print_meta: rope type        = 2
0.00.561.172 I llm_load_print_meta: rope scaling     = linear
0.00.561.174 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.561.198 I llm_load_print_meta: freq_scale_train = 1
0.00.561.199 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.561.199 I llm_load_print_meta: rope_finetuned   = unknown
0.00.561.200 I llm_load_print_meta: ssm_d_conv       = 0
0.00.561.200 I llm_load_print_meta: ssm_d_inner      = 0
0.00.561.201 I llm_load_print_meta: ssm_d_state      = 0
0.00.561.201 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.561.202 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.561.202 I llm_load_print_meta: model type       = 2B
0.00.561.204 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.561.205 I llm_load_print_meta: model params     = 2.51 B
0.00.561.205 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.561.206 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.561.206 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.561.207 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.561.207 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.561.216 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.561.217 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.561.217 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.561.223 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.561.225 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.561.226 I llm_load_print_meta: max token length = 93
0.00.561.396 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.619.404 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.619.414 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.619.415 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.619.416 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.619.416 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.619.417 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.625.024 I llama_new_context_with_model: n_ctx      = 8192
0.00.625.033 I llama_new_context_with_model: n_batch    = 2048
0.00.625.033 I llama_new_context_with_model: n_ubatch   = 512
0.00.625.034 I llama_new_context_with_model: flash_attn = 0
0.00.625.038 I llama_new_context_with_model: freq_base  = 10000.0
0.00.625.039 I llama_new_context_with_model: freq_scale = 1
0.00.654.968 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.655.010 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.655.123 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.656.552 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.656.559 I llama_new_context_with_model: graph nodes  = 601
0.00.656.559 I llama_new_context_with_model: graph splits = 1
0.00.656.575 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.237.376 I main: llama threadpool init, n_threads = 4
0.01.237.388 I 
0.01.237.501 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.237.506 I 
0.01.237.675 I sampler seed: 2887395735
0.01.237.686 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.237.693 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.237.693 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.237.702 I 
 seconded for the task of installing a new operating system on a virtual machine. However, the installation process got interrupted due to an unexpected error message.

The

0.12.227.155 I llama_perf_sampler_print:    sampling time =      49.02 ms /    33 runs   (    1.49 ms per token,   673.21 tokens per second)
0.12.227.158 I llama_perf_context_print:        load time =    1234.50 ms
0.12.227.173 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.227.175 I llama_perf_context_print:        eval time =   10907.96 ms /    32 runs   (  340.87 ms per token,     2.93 tokens per second)
0.12.227.176 I llama_perf_context_print:       total time =   10989.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3906 (7eee341b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199743.01 ms
main:    total time = 199743.01 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.624 I build: 3906 (7eee341b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.818 I main: llama backend init
0.00.002.771 I main: load the model and apply lora adapter, if any
0.00.024.729 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.825 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.839 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.841 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.845 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.846 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.847 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.849 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.850 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.860 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.869 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.871 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.882 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.884 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.885 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.154.688 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.254.751 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.246 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.255 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.256 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.257 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.259 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.260 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.261 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.267 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.268 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.276 I llama_model_loader: - type  f32:   37 tensors
0.00.273.281 I llama_model_loader: - type q4_K:  108 tensors
0.00.273.281 I llama_model_loader: - type q6_K:   19 tensors
0.00.446.410 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.471.116 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.472.097 I llm_load_vocab: special tokens cache size = 5
0.00.567.346 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.567.408 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.567.409 I llm_load_print_meta: arch             = gemma
0.00.567.410 I llm_load_print_meta: vocab type       = SPM
0.00.567.411 I llm_load_print_meta: n_vocab          = 256000
0.00.567.413 I llm_load_print_meta: n_merges         = 0
0.00.567.414 I llm_load_print_meta: vocab_only       = 0
0.00.567.414 I llm_load_print_meta: n_ctx_train      = 8192
0.00.567.414 I llm_load_print_meta: n_embd           = 2048
0.00.567.415 I llm_load_print_meta: n_layer          = 18
0.00.567.478 I llm_load_print_meta: n_head           = 8
0.00.567.506 I llm_load_print_meta: n_head_kv        = 1
0.00.567.507 I llm_load_print_meta: n_rot            = 256
0.00.567.507 I llm_load_print_meta: n_swa            = 0
0.00.567.508 I llm_load_print_meta: n_embd_head_k    = 256
0.00.567.508 I llm_load_print_meta: n_embd_head_v    = 256
0.00.567.513 I llm_load_print_meta: n_gqa            = 8
0.00.567.517 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.567.522 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.567.524 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.567.525 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.567.525 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.567.526 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.567.531 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.567.536 I llm_load_print_meta: n_ff             = 16384
0.00.567.537 I llm_load_print_meta: n_expert         = 0
0.00.567.537 I llm_load_print_meta: n_expert_used    = 0
0.00.567.538 I llm_load_print_meta: causal attn      = 1
0.00.567.538 I llm_load_print_meta: pooling type     = 0
0.00.567.538 I llm_load_print_meta: rope type        = 2
0.00.567.539 I llm_load_print_meta: rope scaling     = linear
0.00.567.540 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.567.541 I llm_load_print_meta: freq_scale_train = 1
0.00.567.541 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.567.541 I llm_load_print_meta: rope_finetuned   = unknown
0.00.567.542 I llm_load_print_meta: ssm_d_conv       = 0
0.00.567.550 I llm_load_print_meta: ssm_d_inner      = 0
0.00.567.551 I llm_load_print_meta: ssm_d_state      = 0
0.00.567.551 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.567.552 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.567.552 I llm_load_print_meta: model type       = 2B
0.00.567.554 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.567.554 I llm_load_print_meta: model params     = 2.51 B
0.00.567.555 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.567.556 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.567.556 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.567.556 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.567.557 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.567.557 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.567.558 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.567.559 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.567.564 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.567.565 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.567.565 I llm_load_print_meta: max token length = 93
0.00.567.734 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.626.346 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.631.963 I llama_new_context_with_model: n_ctx      = 8192
0.00.631.971 I llama_new_context_with_model: n_batch    = 2048
0.00.631.971 I llama_new_context_with_model: n_ubatch   = 512
0.00.631.972 I llama_new_context_with_model: flash_attn = 0
0.00.631.976 I llama_new_context_with_model: freq_base  = 10000.0
0.00.631.976 I llama_new_context_with_model: freq_scale = 1
0.00.661.512 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.661.561 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.661.678 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.663.039 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.663.045 I llama_new_context_with_model: graph nodes  = 601
0.00.663.045 I llama_new_context_with_model: graph splits = 1
0.00.663.060 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.239.034 I main: llama threadpool init, n_threads = 4
0.01.239.048 I 
0.01.239.154 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.239.158 I 
0.01.239.326 I sampler seed: 787250131
0.01.239.336 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.239.342 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.239.343 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.239.343 I 
 increamically.

I am so hungry, I could eat a horse.

I am starving, I need food desperately.

I am ravenous, I

0.12.232.509 I llama_perf_sampler_print:    sampling time =      49.19 ms /    33 runs   (    1.49 ms per token,   670.81 tokens per second)
0.12.232.512 I llama_perf_context_print:        load time =    1236.18 ms
0.12.232.513 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.232.515 I llama_perf_context_print:        eval time =   10911.50 ms /    32 runs   (  340.98 ms per token,     2.93 tokens per second)
0.12.232.515 I llama_perf_context_print:       total time =   10993.48 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.936s
user	50m18.898s
sys	0m6.353s
