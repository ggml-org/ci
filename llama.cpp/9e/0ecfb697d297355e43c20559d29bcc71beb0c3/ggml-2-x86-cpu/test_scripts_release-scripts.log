+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.585 I build: 4029 (9e0ecfb6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.790 I main: llama backend init
0.00.000.919 I main: load the model and apply lora adapter, if any
0.00.021.550 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.560 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.567 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.577 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.581 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.585 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.586 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.587 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.587 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.588 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.589 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.593 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.593 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.594 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.595 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.595 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.447 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.877 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.747 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.754 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.754 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.755 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.755 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.756 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.756 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.759 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.760 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.760 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.762 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.763 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.779 I llama_model_loader: - type  f32:   37 tensors
0.00.132.780 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.284 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.327 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.907 I llm_load_vocab: special tokens cache size = 5
0.00.266.607 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.624 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.624 I llm_load_print_meta: arch             = gemma
0.00.266.625 I llm_load_print_meta: vocab type       = SPM
0.00.266.626 I llm_load_print_meta: n_vocab          = 256000
0.00.266.627 I llm_load_print_meta: n_merges         = 0
0.00.266.644 I llm_load_print_meta: vocab_only       = 0
0.00.266.645 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.645 I llm_load_print_meta: n_embd           = 2048
0.00.266.646 I llm_load_print_meta: n_layer          = 18
0.00.266.657 I llm_load_print_meta: n_head           = 8
0.00.266.659 I llm_load_print_meta: n_head_kv        = 1
0.00.266.659 I llm_load_print_meta: n_rot            = 256
0.00.266.660 I llm_load_print_meta: n_swa            = 0
0.00.266.660 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.660 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.662 I llm_load_print_meta: n_gqa            = 8
0.00.266.663 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.664 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.665 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.666 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.666 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.667 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.667 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.668 I llm_load_print_meta: n_ff             = 16384
0.00.266.669 I llm_load_print_meta: n_expert         = 0
0.00.266.669 I llm_load_print_meta: n_expert_used    = 0
0.00.266.670 I llm_load_print_meta: causal attn      = 1
0.00.266.670 I llm_load_print_meta: pooling type     = 0
0.00.266.670 I llm_load_print_meta: rope type        = 2
0.00.266.672 I llm_load_print_meta: rope scaling     = linear
0.00.266.673 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.674 I llm_load_print_meta: freq_scale_train = 1
0.00.266.674 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.675 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.675 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.676 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.676 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.676 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.676 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.677 I llm_load_print_meta: model type       = 2B
0.00.266.677 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.678 I llm_load_print_meta: model params     = 2.51 B
0.00.266.679 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.679 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.680 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.680 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.684 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.684 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.684 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.685 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.685 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.686 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.686 I llm_load_print_meta: max token length = 93
0.00.366.894 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.366.901 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.366.902 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.366.902 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.366.903 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.366.904 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.372.169 I llama_new_context_with_model: n_seq_max     = 1
0.00.372.175 I llama_new_context_with_model: n_ctx         = 4096
0.00.372.176 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.372.176 I llama_new_context_with_model: n_batch       = 2048
0.00.372.176 I llama_new_context_with_model: n_ubatch      = 512
0.00.372.177 I llama_new_context_with_model: flash_attn    = 0
0.00.372.179 I llama_new_context_with_model: freq_base     = 10000.0
0.00.372.180 I llama_new_context_with_model: freq_scale    = 1
0.00.372.181 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.387.774 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.786 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.877 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.152 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.157 I llama_new_context_with_model: graph nodes  = 601
0.00.389.158 I llama_new_context_with_model: graph splits = 1
0.00.389.159 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.958 I main: llama threadpool init, n_threads = 4
0.00.474.971 I 
0.00.475.045 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.475.048 I 
0.00.475.094 I sampler seed: 2910903002
0.00.475.105 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.108 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.108 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.108 I 
 increasities, and other forms of inappropriate behavior. [end of text]


0.01.250.246 I llama_perf_sampler_print:    sampling time =       1.72 ms /    12 runs   (    0.14 ms per token,  6993.01 tokens per second)
0.01.250.248 I llama_perf_context_print:        load time =     474.02 ms
0.01.250.250 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.250.251 I llama_perf_context_print:        eval time =     768.22 ms /    11 runs   (   69.84 ms per token,    14.32 tokens per second)
0.01.250.252 I llama_perf_context_print:       total time =     775.30 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.507 I build: 4029 (9e0ecfb6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.704 I main: llama backend init
0.00.000.835 I main: load the model and apply lora adapter, if any
0.00.021.413 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.428 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.439 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.442 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.446 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.447 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.448 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.449 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.450 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.451 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.455 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.456 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.457 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.457 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.458 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.518 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.907 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.834 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.844 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.845 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.846 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.846 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.848 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.849 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.852 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.854 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.855 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.856 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.857 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.861 I llama_model_loader: - type  f32:   37 tensors
0.00.132.862 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.285 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.151 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.763 I llm_load_vocab: special tokens cache size = 5
0.00.279.633 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.649 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.650 I llm_load_print_meta: arch             = gemma
0.00.279.650 I llm_load_print_meta: vocab type       = SPM
0.00.279.651 I llm_load_print_meta: n_vocab          = 256000
0.00.279.651 I llm_load_print_meta: n_merges         = 0
0.00.279.652 I llm_load_print_meta: vocab_only       = 0
0.00.279.653 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.653 I llm_load_print_meta: n_embd           = 2048
0.00.279.654 I llm_load_print_meta: n_layer          = 18
0.00.279.664 I llm_load_print_meta: n_head           = 8
0.00.279.665 I llm_load_print_meta: n_head_kv        = 1
0.00.279.666 I llm_load_print_meta: n_rot            = 256
0.00.279.666 I llm_load_print_meta: n_swa            = 0
0.00.279.666 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.666 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.667 I llm_load_print_meta: n_gqa            = 8
0.00.279.668 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.669 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.670 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.671 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.672 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.672 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.672 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.673 I llm_load_print_meta: n_ff             = 16384
0.00.279.673 I llm_load_print_meta: n_expert         = 0
0.00.279.674 I llm_load_print_meta: n_expert_used    = 0
0.00.279.674 I llm_load_print_meta: causal attn      = 1
0.00.279.674 I llm_load_print_meta: pooling type     = 0
0.00.279.675 I llm_load_print_meta: rope type        = 2
0.00.279.676 I llm_load_print_meta: rope scaling     = linear
0.00.279.677 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.678 I llm_load_print_meta: freq_scale_train = 1
0.00.279.678 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.678 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.679 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.679 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.679 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.679 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.679 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.680 I llm_load_print_meta: model type       = 2B
0.00.279.680 I llm_load_print_meta: model ftype      = Q8_0
0.00.279.681 I llm_load_print_meta: model params     = 2.51 B
0.00.279.682 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.279.682 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.683 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.683 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.684 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.684 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.684 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.685 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.685 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.685 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.686 I llm_load_print_meta: max token length = 93
0.00.376.038 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.381.263 I llama_new_context_with_model: n_seq_max     = 1
0.00.381.269 I llama_new_context_with_model: n_ctx         = 4096
0.00.381.269 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.381.270 I llama_new_context_with_model: n_batch       = 2048
0.00.381.270 I llama_new_context_with_model: n_ubatch      = 512
0.00.381.271 I llama_new_context_with_model: flash_attn    = 0
0.00.381.273 I llama_new_context_with_model: freq_base     = 10000.0
0.00.381.274 I llama_new_context_with_model: freq_scale    = 1
0.00.381.275 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.397.465 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.397.481 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.397.576 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.398.829 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.398.835 I llama_new_context_with_model: graph nodes  = 601
0.00.398.836 I llama_new_context_with_model: graph splits = 1
0.00.398.837 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.481.269 I main: llama threadpool init, n_threads = 4
0.00.481.282 I 
0.00.481.356 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.481.359 I 
0.00.481.402 I sampler seed: 1752446102
0.00.481.413 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.481.420 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.481.423 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.481.423 I 
 seconded the sun with the crescent moon, casting a silver glow upon the land. It was a sight both wondrous and terrifying, a testament to the cyclical nature

0.02.715.326 I llama_perf_sampler_print:    sampling time =       4.78 ms /    33 runs   (    0.14 ms per token,  6903.77 tokens per second)
0.02.715.330 I llama_perf_context_print:        load time =     480.41 ms
0.02.715.331 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.715.333 I llama_perf_context_print:        eval time =    2214.41 ms /    32 runs   (   69.20 ms per token,    14.45 tokens per second)
0.02.715.335 I llama_perf_context_print:       total time =    2234.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.539 I build: 4029 (9e0ecfb6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.739 I main: llama backend init
0.00.000.862 I main: load the model and apply lora adapter, if any
0.00.021.362 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.372 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.380 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.385 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.385 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.389 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.390 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.391 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.392 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.392 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.392 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.397 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.397 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.398 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.398 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.399 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.862 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.108 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.954 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.960 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.961 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.961 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.962 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.963 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.963 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.965 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.966 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.967 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.967 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.968 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.972 I llama_model_loader: - type  f32:   37 tensors
0.00.131.973 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.316 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.138 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.789 I llm_load_vocab: special tokens cache size = 5
0.00.275.922 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.939 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.940 I llm_load_print_meta: arch             = gemma
0.00.275.941 I llm_load_print_meta: vocab type       = SPM
0.00.275.941 I llm_load_print_meta: n_vocab          = 256000
0.00.275.942 I llm_load_print_meta: n_merges         = 0
0.00.275.942 I llm_load_print_meta: vocab_only       = 0
0.00.275.943 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.943 I llm_load_print_meta: n_embd           = 2048
0.00.275.943 I llm_load_print_meta: n_layer          = 18
0.00.275.955 I llm_load_print_meta: n_head           = 8
0.00.275.956 I llm_load_print_meta: n_head_kv        = 1
0.00.275.957 I llm_load_print_meta: n_rot            = 256
0.00.275.957 I llm_load_print_meta: n_swa            = 0
0.00.275.957 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.958 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.959 I llm_load_print_meta: n_gqa            = 8
0.00.275.960 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.960 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.961 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.962 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.963 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.963 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.964 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.965 I llm_load_print_meta: n_ff             = 16384
0.00.275.965 I llm_load_print_meta: n_expert         = 0
0.00.275.965 I llm_load_print_meta: n_expert_used    = 0
0.00.275.966 I llm_load_print_meta: causal attn      = 1
0.00.275.966 I llm_load_print_meta: pooling type     = 0
0.00.275.966 I llm_load_print_meta: rope type        = 2
0.00.275.967 I llm_load_print_meta: rope scaling     = linear
0.00.275.968 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.969 I llm_load_print_meta: freq_scale_train = 1
0.00.275.969 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.969 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.969 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.970 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.970 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.970 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.970 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.971 I llm_load_print_meta: model type       = 2B
0.00.275.971 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.972 I llm_load_print_meta: model params     = 2.51 B
0.00.275.973 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.973 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.974 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.974 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.975 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.975 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.976 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.976 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.976 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.977 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.977 I llm_load_print_meta: max token length = 93
0.00.368.991 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.368.998 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.368.999 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.368.999 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.369.000 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.369.001 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.374.218 I llama_new_context_with_model: n_seq_max     = 1
0.00.374.224 I llama_new_context_with_model: n_ctx         = 4096
0.00.374.224 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.374.225 I llama_new_context_with_model: n_batch       = 2048
0.00.374.225 I llama_new_context_with_model: n_ubatch      = 512
0.00.374.225 I llama_new_context_with_model: flash_attn    = 0
0.00.374.228 I llama_new_context_with_model: freq_base     = 10000.0
0.00.374.229 I llama_new_context_with_model: freq_scale    = 1
0.00.374.229 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.389.414 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.389.428 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.389.535 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.811 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.390.818 I llama_new_context_with_model: graph nodes  = 601
0.00.390.818 I llama_new_context_with_model: graph splits = 1
0.00.390.820 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.476.329 I main: llama threadpool init, n_threads = 4
0.00.476.341 I 
0.00.476.417 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.476.420 I 
0.00.476.466 I sampler seed: 748388889
0.00.476.478 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.476.481 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.476.482 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.476.484 I 
 increasities.

I'm so confused by this. Could you please provide some clarification?

I apologize, but I am unable to provide clarification on sexually

0.02.658.014 I llama_perf_sampler_print:    sampling time =       5.50 ms /    33 runs   (    0.17 ms per token,  6003.27 tokens per second)
0.02.658.016 I llama_perf_context_print:        load time =     475.44 ms
0.02.658.018 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.658.020 I llama_perf_context_print:        eval time =    2161.43 ms /    32 runs   (   67.54 ms per token,    14.81 tokens per second)
0.02.658.020 I llama_perf_context_print:       total time =    2181.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.551 I build: 4029 (9e0ecfb6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.787 I main: llama backend init
0.00.000.945 I main: load the model and apply lora adapter, if any
0.00.021.302 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.310 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.318 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.323 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.324 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.329 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.330 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.330 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.331 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.331 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.332 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.337 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.338 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.339 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.340 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.340 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.729 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.752 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.670 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.678 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.678 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.679 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.680 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.680 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.681 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.684 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.684 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.686 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.687 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.688 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.691 I llama_model_loader: - type  f32:   37 tensors
0.00.131.692 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.523 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.136 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.713 I llm_load_vocab: special tokens cache size = 5
0.00.269.479 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.493 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.494 I llm_load_print_meta: arch             = gemma
0.00.269.494 I llm_load_print_meta: vocab type       = SPM
0.00.269.495 I llm_load_print_meta: n_vocab          = 256000
0.00.269.495 I llm_load_print_meta: n_merges         = 0
0.00.269.496 I llm_load_print_meta: vocab_only       = 0
0.00.269.496 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.496 I llm_load_print_meta: n_embd           = 2048
0.00.269.496 I llm_load_print_meta: n_layer          = 18
0.00.269.508 I llm_load_print_meta: n_head           = 8
0.00.269.509 I llm_load_print_meta: n_head_kv        = 1
0.00.269.509 I llm_load_print_meta: n_rot            = 256
0.00.269.509 I llm_load_print_meta: n_swa            = 0
0.00.269.510 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.510 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.511 I llm_load_print_meta: n_gqa            = 8
0.00.269.512 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.513 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.513 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.515 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.515 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.516 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.516 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.517 I llm_load_print_meta: n_ff             = 16384
0.00.269.518 I llm_load_print_meta: n_expert         = 0
0.00.269.519 I llm_load_print_meta: n_expert_used    = 0
0.00.269.519 I llm_load_print_meta: causal attn      = 1
0.00.269.520 I llm_load_print_meta: pooling type     = 0
0.00.269.520 I llm_load_print_meta: rope type        = 2
0.00.269.523 I llm_load_print_meta: rope scaling     = linear
0.00.269.526 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.527 I llm_load_print_meta: freq_scale_train = 1
0.00.269.527 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.528 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.529 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.529 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.529 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.529 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.530 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.530 I llm_load_print_meta: model type       = 2B
0.00.269.531 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.532 I llm_load_print_meta: model params     = 2.51 B
0.00.269.533 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.533 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.534 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.534 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.535 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.535 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.535 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.536 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.536 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.536 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.537 I llm_load_print_meta: max token length = 93
0.00.341.674 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.341.681 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.346.841 I llama_new_context_with_model: n_seq_max     = 1
0.00.346.848 I llama_new_context_with_model: n_ctx         = 4096
0.00.346.848 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.346.849 I llama_new_context_with_model: n_batch       = 2048
0.00.346.849 I llama_new_context_with_model: n_ubatch      = 512
0.00.346.850 I llama_new_context_with_model: flash_attn    = 0
0.00.346.853 I llama_new_context_with_model: freq_base     = 10000.0
0.00.346.854 I llama_new_context_with_model: freq_scale    = 1
0.00.346.855 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.363.055 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.363.072 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.363.170 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.426 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.364.434 I llama_new_context_with_model: graph nodes  = 601
0.00.364.434 I llama_new_context_with_model: graph splits = 1
0.00.364.436 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.855 I main: llama threadpool init, n_threads = 4
0.00.453.869 I 
0.00.453.953 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.453.957 I 
0.00.454.005 I sampler seed: 3347361953
0.00.454.017 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.454.021 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.454.022 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.454.022 I 
 maneupher.

I have a question about the relationship between the coefficients of a linear regression model and the parameters of the model.

**Question:**

What

0.02.840.724 I llama_perf_sampler_print:    sampling time =       5.73 ms /    33 runs   (    0.17 ms per token,  5757.15 tokens per second)
0.02.840.728 I llama_perf_context_print:        load time =     452.89 ms
0.02.840.731 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.840.733 I llama_perf_context_print:        eval time =    2366.35 ms /    32 runs   (   73.95 ms per token,    13.52 tokens per second)
0.02.840.734 I llama_perf_context_print:       total time =    2386.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.216s
user	0m33.147s
sys	0m9.609s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4029 (9e0ecfb6)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32073.10 ms
main:    total time = 32073.10 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.543 I build: 4029 (9e0ecfb6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.760 I main: llama backend init
0.00.000.892 I main: load the model and apply lora adapter, if any
0.00.021.570 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.579 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.588 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.593 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.594 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.597 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.599 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.600 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.600 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.601 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.601 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.605 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.605 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.606 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.606 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.607 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.050 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.126 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.989 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.996 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.996 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.997 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.997 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.998 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.999 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.002 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.002 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.003 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.003 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.005 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.009 I llama_model_loader: - type  f32:   37 tensors
0.00.132.010 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.010 I llama_model_loader: - type q6_K:   19 tensors
0.00.213.659 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.263.468 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.101 I llm_load_vocab: special tokens cache size = 5
0.00.284.878 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.284.895 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.284.895 I llm_load_print_meta: arch             = gemma
0.00.284.896 I llm_load_print_meta: vocab type       = SPM
0.00.284.896 I llm_load_print_meta: n_vocab          = 256000
0.00.284.897 I llm_load_print_meta: n_merges         = 0
0.00.284.897 I llm_load_print_meta: vocab_only       = 0
0.00.284.898 I llm_load_print_meta: n_ctx_train      = 8192
0.00.284.898 I llm_load_print_meta: n_embd           = 2048
0.00.284.898 I llm_load_print_meta: n_layer          = 18
0.00.284.911 I llm_load_print_meta: n_head           = 8
0.00.284.912 I llm_load_print_meta: n_head_kv        = 1
0.00.284.913 I llm_load_print_meta: n_rot            = 256
0.00.284.913 I llm_load_print_meta: n_swa            = 0
0.00.284.913 I llm_load_print_meta: n_embd_head_k    = 256
0.00.284.913 I llm_load_print_meta: n_embd_head_v    = 256
0.00.284.914 I llm_load_print_meta: n_gqa            = 8
0.00.284.915 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.284.917 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.284.918 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.284.919 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.284.919 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.284.920 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.284.920 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.284.921 I llm_load_print_meta: n_ff             = 16384
0.00.284.922 I llm_load_print_meta: n_expert         = 0
0.00.284.922 I llm_load_print_meta: n_expert_used    = 0
0.00.284.923 I llm_load_print_meta: causal attn      = 1
0.00.284.923 I llm_load_print_meta: pooling type     = 0
0.00.284.924 I llm_load_print_meta: rope type        = 2
0.00.284.924 I llm_load_print_meta: rope scaling     = linear
0.00.284.926 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.284.927 I llm_load_print_meta: freq_scale_train = 1
0.00.284.927 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.284.928 I llm_load_print_meta: rope_finetuned   = unknown
0.00.284.928 I llm_load_print_meta: ssm_d_conv       = 0
0.00.284.928 I llm_load_print_meta: ssm_d_inner      = 0
0.00.284.929 I llm_load_print_meta: ssm_d_state      = 0
0.00.284.930 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.284.930 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.284.930 I llm_load_print_meta: model type       = 2B
0.00.284.931 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.284.932 I llm_load_print_meta: model params     = 2.51 B
0.00.284.933 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.284.933 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.284.934 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.284.934 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.284.935 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.284.935 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.284.935 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.284.936 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.284.936 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.284.937 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.284.937 I llm_load_print_meta: max token length = 93
0.00.347.478 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.347.485 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.347.486 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.347.486 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.347.487 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.347.488 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.352.809 I llama_new_context_with_model: n_seq_max     = 1
0.00.352.817 I llama_new_context_with_model: n_ctx         = 4096
0.00.352.817 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.352.818 I llama_new_context_with_model: n_batch       = 2048
0.00.352.818 I llama_new_context_with_model: n_ubatch      = 512
0.00.352.819 I llama_new_context_with_model: flash_attn    = 0
0.00.352.821 I llama_new_context_with_model: freq_base     = 10000.0
0.00.352.823 I llama_new_context_with_model: freq_scale    = 1
0.00.352.824 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.370.041 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.370.057 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.370.156 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.371.447 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.371.454 I llama_new_context_with_model: graph nodes  = 601
0.00.371.454 I llama_new_context_with_model: graph splits = 1
0.00.371.455 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.449.934 I main: llama threadpool init, n_threads = 4
0.00.449.950 I 
0.00.450.031 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.450.035 I 
0.00.450.081 I sampler seed: 221214961
0.00.450.092 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.450.096 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.450.097 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.450.098 I 
 increasities:

**a) Explain the concept of a crescendo and diminuendo in music.**

**b) Describe the difference between a crescendo and a diminu

0.02.169.984 I llama_perf_sampler_print:    sampling time =       4.96 ms /    33 runs   (    0.15 ms per token,  6659.94 tokens per second)
0.02.169.987 I llama_perf_context_print:        load time =     449.02 ms
0.02.169.989 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.169.990 I llama_perf_context_print:        eval time =    1700.39 ms /    32 runs   (   53.14 ms per token,    18.82 tokens per second)
0.02.169.991 I llama_perf_context_print:       total time =    1720.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4029 (9e0ecfb6)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32211.91 ms
main:    total time = 32211.91 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.544 I build: 4029 (9e0ecfb6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.000.882 I main: load the model and apply lora adapter, if any
0.00.022.756 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.772 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.778 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.779 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.785 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.786 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.787 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.787 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.788 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.788 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.792 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.793 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.794 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.794 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.794 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.609 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.637 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.529 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.537 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.539 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.540 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.540 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.542 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.543 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.546 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.547 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.552 I llama_model_loader: - type  f32:   37 tensors
0.00.133.553 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.553 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.729 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.473 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.051 I llm_load_vocab: special tokens cache size = 5
0.00.270.798 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.815 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.816 I llm_load_print_meta: arch             = gemma
0.00.270.816 I llm_load_print_meta: vocab type       = SPM
0.00.270.817 I llm_load_print_meta: n_vocab          = 256000
0.00.270.818 I llm_load_print_meta: n_merges         = 0
0.00.270.818 I llm_load_print_meta: vocab_only       = 0
0.00.270.819 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.819 I llm_load_print_meta: n_embd           = 2048
0.00.270.819 I llm_load_print_meta: n_layer          = 18
0.00.270.830 I llm_load_print_meta: n_head           = 8
0.00.270.831 I llm_load_print_meta: n_head_kv        = 1
0.00.270.832 I llm_load_print_meta: n_rot            = 256
0.00.270.832 I llm_load_print_meta: n_swa            = 0
0.00.270.832 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.833 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.833 I llm_load_print_meta: n_gqa            = 8
0.00.270.834 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.835 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.836 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.837 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.838 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.838 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.839 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.839 I llm_load_print_meta: n_ff             = 16384
0.00.270.840 I llm_load_print_meta: n_expert         = 0
0.00.270.840 I llm_load_print_meta: n_expert_used    = 0
0.00.270.840 I llm_load_print_meta: causal attn      = 1
0.00.270.840 I llm_load_print_meta: pooling type     = 0
0.00.270.841 I llm_load_print_meta: rope type        = 2
0.00.270.841 I llm_load_print_meta: rope scaling     = linear
0.00.270.843 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.843 I llm_load_print_meta: freq_scale_train = 1
0.00.270.844 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.844 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.844 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.845 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.845 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.845 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.845 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.846 I llm_load_print_meta: model type       = 2B
0.00.270.846 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.270.847 I llm_load_print_meta: model params     = 2.51 B
0.00.270.848 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.270.848 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.848 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.849 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.849 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.849 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.850 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.850 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.851 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.851 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.851 I llm_load_print_meta: max token length = 93
0.00.329.094 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.334.270 I llama_new_context_with_model: n_seq_max     = 1
0.00.334.278 I llama_new_context_with_model: n_ctx         = 4096
0.00.334.278 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.334.279 I llama_new_context_with_model: n_batch       = 2048
0.00.334.279 I llama_new_context_with_model: n_ubatch      = 512
0.00.334.279 I llama_new_context_with_model: flash_attn    = 0
0.00.334.282 I llama_new_context_with_model: freq_base     = 10000.0
0.00.334.283 I llama_new_context_with_model: freq_scale    = 1
0.00.334.284 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.465 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.350.481 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.350.574 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.351.860 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.351.865 I llama_new_context_with_model: graph nodes  = 601
0.00.351.866 I llama_new_context_with_model: graph splits = 1
0.00.351.867 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.429.690 I main: llama threadpool init, n_threads = 4
0.00.429.704 I 
0.00.429.784 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.429.787 I 
0.00.429.833 I sampler seed: 204991530
0.00.429.844 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.429.848 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.429.849 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.429.850 I 
 increasities have been documented in various human populations, but there is a lack of understanding regarding the evolutionary and ecological factors that contribute to these variations.

**Hypothesis

0.02.101.599 I llama_perf_sampler_print:    sampling time =       5.30 ms /    33 runs   (    0.16 ms per token,  6229.94 tokens per second)
0.02.101.602 I llama_perf_context_print:        load time =     428.79 ms
0.02.101.604 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.101.605 I llama_perf_context_print:        eval time =    1651.68 ms /    32 runs   (   51.62 ms per token,    19.37 tokens per second)
0.02.101.606 I llama_perf_context_print:       total time =    1671.92 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.501s
user	8m15.612s
sys	0m7.065s
