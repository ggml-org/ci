+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.668 I build: 4003 (9e545319) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.892 I main: llama backend init
0.00.002.824 I main: load the model and apply lora adapter, if any
0.00.025.672 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.683 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.781 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.794 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.795 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.801 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.805 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.806 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.807 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.809 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.810 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.818 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.819 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.820 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.822 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.823 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.886 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.420 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.316 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.327 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.328 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.329 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.330 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.332 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.333 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.336 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.337 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.338 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.339 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.340 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.349 I llama_model_loader: - type  f32:   37 tensors
0.00.266.351 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.276 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.508.569 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.509.564 I llm_load_vocab: special tokens cache size = 5
0.00.609.828 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.609.898 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.609.899 I llm_load_print_meta: arch             = gemma
0.00.609.900 I llm_load_print_meta: vocab type       = SPM
0.00.609.901 I llm_load_print_meta: n_vocab          = 256000
0.00.609.904 I llm_load_print_meta: n_merges         = 0
0.00.609.904 I llm_load_print_meta: vocab_only       = 0
0.00.609.905 I llm_load_print_meta: n_ctx_train      = 8192
0.00.609.906 I llm_load_print_meta: n_embd           = 2048
0.00.609.906 I llm_load_print_meta: n_layer          = 18
0.00.609.972 I llm_load_print_meta: n_head           = 8
0.00.609.980 I llm_load_print_meta: n_head_kv        = 1
0.00.609.981 I llm_load_print_meta: n_rot            = 256
0.00.609.982 I llm_load_print_meta: n_swa            = 0
0.00.609.982 I llm_load_print_meta: n_embd_head_k    = 256
0.00.609.987 I llm_load_print_meta: n_embd_head_v    = 256
0.00.609.992 I llm_load_print_meta: n_gqa            = 8
0.00.609.996 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.001 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.003 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.005 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.005 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.610.006 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.610.007 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.610.012 I llm_load_print_meta: n_ff             = 16384
0.00.610.015 I llm_load_print_meta: n_expert         = 0
0.00.610.016 I llm_load_print_meta: n_expert_used    = 0
0.00.610.016 I llm_load_print_meta: causal attn      = 1
0.00.610.017 I llm_load_print_meta: pooling type     = 0
0.00.610.017 I llm_load_print_meta: rope type        = 2
0.00.610.017 I llm_load_print_meta: rope scaling     = linear
0.00.610.019 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.610.019 I llm_load_print_meta: freq_scale_train = 1
0.00.610.020 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.610.020 I llm_load_print_meta: rope_finetuned   = unknown
0.00.610.020 I llm_load_print_meta: ssm_d_conv       = 0
0.00.610.021 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.021 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.021 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.021 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.023 I llm_load_print_meta: model type       = 2B
0.00.610.024 I llm_load_print_meta: model ftype      = Q8_0
0.00.610.025 I llm_load_print_meta: model params     = 2.51 B
0.00.610.026 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.610.026 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.027 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.027 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.028 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.028 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.039 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.040 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.047 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.059 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.060 I llm_load_print_meta: max token length = 93
0.00.716.420 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.716.432 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.716.433 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.716.434 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.716.435 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.716.436 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.722.500 I llama_new_context_with_model: n_ctx      = 8192
0.00.722.507 I llama_new_context_with_model: n_batch    = 2048
0.00.722.507 I llama_new_context_with_model: n_ubatch   = 512
0.00.722.508 I llama_new_context_with_model: flash_attn = 0
0.00.722.510 I llama_new_context_with_model: freq_base  = 10000.0
0.00.722.511 I llama_new_context_with_model: freq_scale = 1
0.00.751.378 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.751.418 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.751.540 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.754.142 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.754.146 I llama_new_context_with_model: graph nodes  = 601
0.00.754.147 I llama_new_context_with_model: graph splits = 1
0.00.754.172 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.364.334 I main: llama threadpool init, n_threads = 4
0.01.364.349 I 
0.01.364.457 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.364.461 I 
0.01.364.705 I sampler seed: 4006474039
0.01.364.735 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.364.743 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.364.747 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.364.748 I 
 increasities into a humorous and relatable situation.

My roommate, who lives above me, is obsessed with cleaning. She spends hours a day organizing and cleaning,

0.14.857.650 I llama_perf_sampler_print:    sampling time =      49.37 ms /    33 runs   (    1.50 ms per token,   668.41 tokens per second)
0.14.857.673 I llama_perf_context_print:        load time =    1361.40 ms
0.14.857.675 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.857.677 I llama_perf_context_print:        eval time =   13397.42 ms /    32 runs   (  418.67 ms per token,     2.39 tokens per second)
0.14.857.678 I llama_perf_context_print:       total time =   13493.33 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 4003 (9e545319) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.879 I main: llama backend init
0.00.002.832 I main: load the model and apply lora adapter, if any
0.00.025.320 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.417 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.431 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.434 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.439 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.444 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.445 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.446 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.448 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.449 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.456 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.458 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.459 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.460 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.462 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.012 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.846 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.957 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.968 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.969 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.970 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.971 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.972 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.973 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.977 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.978 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.979 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.980 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.266.981 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.990 I llama_model_loader: - type  f32:   37 tensors
0.00.266.993 I llama_model_loader: - type q8_0:  127 tensors
0.00.438.771 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.982 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.953 I llm_load_vocab: special tokens cache size = 5
0.00.595.534 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.595.606 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.595.607 I llm_load_print_meta: arch             = gemma
0.00.595.607 I llm_load_print_meta: vocab type       = SPM
0.00.595.609 I llm_load_print_meta: n_vocab          = 256000
0.00.595.611 I llm_load_print_meta: n_merges         = 0
0.00.595.611 I llm_load_print_meta: vocab_only       = 0
0.00.595.612 I llm_load_print_meta: n_ctx_train      = 8192
0.00.595.612 I llm_load_print_meta: n_embd           = 2048
0.00.595.612 I llm_load_print_meta: n_layer          = 18
0.00.595.677 I llm_load_print_meta: n_head           = 8
0.00.595.685 I llm_load_print_meta: n_head_kv        = 1
0.00.595.686 I llm_load_print_meta: n_rot            = 256
0.00.595.687 I llm_load_print_meta: n_swa            = 0
0.00.595.687 I llm_load_print_meta: n_embd_head_k    = 256
0.00.595.688 I llm_load_print_meta: n_embd_head_v    = 256
0.00.595.693 I llm_load_print_meta: n_gqa            = 8
0.00.595.697 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.595.702 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.595.704 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.595.705 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.595.706 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.595.707 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.595.707 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.595.712 I llm_load_print_meta: n_ff             = 16384
0.00.595.713 I llm_load_print_meta: n_expert         = 0
0.00.595.713 I llm_load_print_meta: n_expert_used    = 0
0.00.595.713 I llm_load_print_meta: causal attn      = 1
0.00.595.714 I llm_load_print_meta: pooling type     = 0
0.00.595.726 I llm_load_print_meta: rope type        = 2
0.00.595.740 I llm_load_print_meta: rope scaling     = linear
0.00.595.742 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.595.743 I llm_load_print_meta: freq_scale_train = 1
0.00.595.743 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.595.744 I llm_load_print_meta: rope_finetuned   = unknown
0.00.595.753 I llm_load_print_meta: ssm_d_conv       = 0
0.00.595.754 I llm_load_print_meta: ssm_d_inner      = 0
0.00.595.754 I llm_load_print_meta: ssm_d_state      = 0
0.00.595.755 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.595.755 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.595.757 I llm_load_print_meta: model type       = 2B
0.00.595.758 I llm_load_print_meta: model ftype      = Q8_0
0.00.595.759 I llm_load_print_meta: model params     = 2.51 B
0.00.595.761 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.595.761 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.595.761 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.595.762 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.595.762 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.595.762 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.595.769 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.595.769 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.595.775 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.595.777 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.595.785 I llm_load_print_meta: max token length = 93
0.00.695.932 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.701.864 I llama_new_context_with_model: n_ctx      = 8192
0.00.701.870 I llama_new_context_with_model: n_batch    = 2048
0.00.701.871 I llama_new_context_with_model: n_ubatch   = 512
0.00.701.871 I llama_new_context_with_model: flash_attn = 0
0.00.701.874 I llama_new_context_with_model: freq_base  = 10000.0
0.00.701.874 I llama_new_context_with_model: freq_scale = 1
0.00.730.645 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.730.688 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.730.807 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.733.351 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.733.355 I llama_new_context_with_model: graph nodes  = 601
0.00.733.355 I llama_new_context_with_model: graph splits = 1
0.00.733.380 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.345.094 I main: llama threadpool init, n_threads = 4
0.01.345.107 I 
0.01.345.218 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.345.222 I 
0.01.345.467 I sampler seed: 630882718
0.01.345.479 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.345.486 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.345.488 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.345.488 I 
 increamically. The correct answer is C

Explanation:
The given statement "The given statement 'C' is a correct answer." is incorrect because option C

0.14.854.781 I llama_perf_sampler_print:    sampling time =      49.24 ms /    33 runs   (    1.49 ms per token,   670.13 tokens per second)
0.14.854.785 I llama_perf_context_print:        load time =    1342.17 ms
0.14.854.786 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.854.788 I llama_perf_context_print:        eval time =   13415.11 ms /    32 runs   (  419.22 ms per token,     2.39 tokens per second)
0.14.854.789 I llama_perf_context_print:       total time =   13509.70 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 4003 (9e545319) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.881 I main: llama backend init
0.00.002.854 I main: load the model and apply lora adapter, if any
0.00.025.345 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.355 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.451 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.463 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.466 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.472 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.477 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.479 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.482 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.483 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.495 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.507 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.512 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.514 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.516 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.517 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.351 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.867 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.043 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.056 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.058 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.059 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.060 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.061 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.063 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.066 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.067 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.069 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.070 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.266.071 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.080 I llama_model_loader: - type  f32:   37 tensors
0.00.266.083 I llama_model_loader: - type q8_0:  127 tensors
0.00.436.466 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.497.969 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.498.926 I llm_load_vocab: special tokens cache size = 5
0.00.601.349 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.601.417 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.601.418 I llm_load_print_meta: arch             = gemma
0.00.601.419 I llm_load_print_meta: vocab type       = SPM
0.00.601.420 I llm_load_print_meta: n_vocab          = 256000
0.00.601.422 I llm_load_print_meta: n_merges         = 0
0.00.601.423 I llm_load_print_meta: vocab_only       = 0
0.00.601.423 I llm_load_print_meta: n_ctx_train      = 8192
0.00.601.424 I llm_load_print_meta: n_embd           = 2048
0.00.601.424 I llm_load_print_meta: n_layer          = 18
0.00.601.491 I llm_load_print_meta: n_head           = 8
0.00.601.506 I llm_load_print_meta: n_head_kv        = 1
0.00.601.508 I llm_load_print_meta: n_rot            = 256
0.00.601.508 I llm_load_print_meta: n_swa            = 0
0.00.601.509 I llm_load_print_meta: n_embd_head_k    = 256
0.00.601.510 I llm_load_print_meta: n_embd_head_v    = 256
0.00.601.517 I llm_load_print_meta: n_gqa            = 8
0.00.601.525 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.601.534 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.601.536 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.601.538 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.601.538 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.601.540 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.601.541 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.601.548 I llm_load_print_meta: n_ff             = 16384
0.00.601.550 I llm_load_print_meta: n_expert         = 0
0.00.601.550 I llm_load_print_meta: n_expert_used    = 0
0.00.601.551 I llm_load_print_meta: causal attn      = 1
0.00.601.552 I llm_load_print_meta: pooling type     = 0
0.00.601.552 I llm_load_print_meta: rope type        = 2
0.00.601.554 I llm_load_print_meta: rope scaling     = linear
0.00.601.556 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.601.557 I llm_load_print_meta: freq_scale_train = 1
0.00.601.559 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.601.559 I llm_load_print_meta: rope_finetuned   = unknown
0.00.601.560 I llm_load_print_meta: ssm_d_conv       = 0
0.00.601.561 I llm_load_print_meta: ssm_d_inner      = 0
0.00.601.562 I llm_load_print_meta: ssm_d_state      = 0
0.00.601.562 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.601.563 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.601.565 I llm_load_print_meta: model type       = 2B
0.00.601.567 I llm_load_print_meta: model ftype      = Q8_0
0.00.601.568 I llm_load_print_meta: model params     = 2.51 B
0.00.601.569 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.601.573 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.601.574 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.601.574 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.601.575 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.601.576 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.601.577 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.601.577 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.601.586 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.601.590 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.601.591 I llm_load_print_meta: max token length = 93
0.00.701.219 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.701.229 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.701.230 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.701.230 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.701.231 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.701.232 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.707.269 I llama_new_context_with_model: n_ctx      = 8192
0.00.707.276 I llama_new_context_with_model: n_batch    = 2048
0.00.707.276 I llama_new_context_with_model: n_ubatch   = 512
0.00.707.277 I llama_new_context_with_model: flash_attn = 0
0.00.707.279 I llama_new_context_with_model: freq_base  = 10000.0
0.00.707.280 I llama_new_context_with_model: freq_scale = 1
0.00.735.927 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.735.974 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.736.094 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.738.722 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.738.726 I llama_new_context_with_model: graph nodes  = 601
0.00.738.727 I llama_new_context_with_model: graph splits = 1
0.00.738.751 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.349.810 I main: llama threadpool init, n_threads = 4
0.01.349.821 I 
0.01.349.944 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.349.948 I 
0.01.350.195 I sampler seed: 4016824363
0.01.350.208 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.350.215 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.350.215 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.350.216 I 
 increasities and other forms of inappropriate behavior by its members. [end of text]


0.06.821.361 I llama_perf_sampler_print:    sampling time =      20.14 ms /    14 runs   (    1.44 ms per token,   695.17 tokens per second)
0.06.821.375 I llama_perf_context_print:        load time =    1346.85 ms
0.06.821.377 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.821.380 I llama_perf_context_print:        eval time =    5431.83 ms /    13 runs   (  417.83 ms per token,     2.39 tokens per second)
0.06.821.381 I llama_perf_context_print:       total time =    5471.56 ms /    14 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.623 I build: 4003 (9e545319) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.002.782 I main: load the model and apply lora adapter, if any
0.00.025.048 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.059 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.153 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.166 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.169 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.173 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.178 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.180 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.181 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.184 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.186 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.194 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.196 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.206 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.208 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.209 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.167 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.210 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.304 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.312 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.314 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.315 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.316 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.318 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.319 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.323 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.324 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.326 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.327 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.268.329 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.337 I llama_model_loader: - type  f32:   37 tensors
0.00.268.340 I llama_model_loader: - type q8_0:  127 tensors
0.00.462.077 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.527.151 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.528.129 I llm_load_vocab: special tokens cache size = 5
0.00.622.817 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.622.890 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.622.891 I llm_load_print_meta: arch             = gemma
0.00.622.893 I llm_load_print_meta: vocab type       = SPM
0.00.622.893 I llm_load_print_meta: n_vocab          = 256000
0.00.622.896 I llm_load_print_meta: n_merges         = 0
0.00.622.896 I llm_load_print_meta: vocab_only       = 0
0.00.622.897 I llm_load_print_meta: n_ctx_train      = 8192
0.00.622.897 I llm_load_print_meta: n_embd           = 2048
0.00.622.897 I llm_load_print_meta: n_layer          = 18
0.00.622.961 I llm_load_print_meta: n_head           = 8
0.00.622.968 I llm_load_print_meta: n_head_kv        = 1
0.00.622.969 I llm_load_print_meta: n_rot            = 256
0.00.622.969 I llm_load_print_meta: n_swa            = 0
0.00.622.969 I llm_load_print_meta: n_embd_head_k    = 256
0.00.622.970 I llm_load_print_meta: n_embd_head_v    = 256
0.00.622.974 I llm_load_print_meta: n_gqa            = 8
0.00.622.979 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.622.985 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.622.987 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.622.988 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.622.989 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.622.989 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.622.990 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.623.003 I llm_load_print_meta: n_ff             = 16384
0.00.623.008 I llm_load_print_meta: n_expert         = 0
0.00.623.008 I llm_load_print_meta: n_expert_used    = 0
0.00.623.009 I llm_load_print_meta: causal attn      = 1
0.00.623.020 I llm_load_print_meta: pooling type     = 0
0.00.623.021 I llm_load_print_meta: rope type        = 2
0.00.623.021 I llm_load_print_meta: rope scaling     = linear
0.00.623.023 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.623.024 I llm_load_print_meta: freq_scale_train = 1
0.00.623.024 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.623.024 I llm_load_print_meta: rope_finetuned   = unknown
0.00.623.025 I llm_load_print_meta: ssm_d_conv       = 0
0.00.623.034 I llm_load_print_meta: ssm_d_inner      = 0
0.00.623.035 I llm_load_print_meta: ssm_d_state      = 0
0.00.623.035 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.623.035 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.623.039 I llm_load_print_meta: model type       = 2B
0.00.623.040 I llm_load_print_meta: model ftype      = Q8_0
0.00.623.041 I llm_load_print_meta: model params     = 2.51 B
0.00.623.041 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.623.043 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.623.043 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.623.044 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.623.044 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.623.044 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.623.045 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.623.045 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.623.079 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.623.081 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.623.081 I llm_load_print_meta: max token length = 93
0.00.708.362 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.708.371 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.714.366 I llama_new_context_with_model: n_ctx      = 8192
0.00.714.372 I llama_new_context_with_model: n_batch    = 2048
0.00.714.372 I llama_new_context_with_model: n_ubatch   = 512
0.00.714.373 I llama_new_context_with_model: flash_attn = 0
0.00.714.375 I llama_new_context_with_model: freq_base  = 10000.0
0.00.714.376 I llama_new_context_with_model: freq_scale = 1
0.00.742.863 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.742.906 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.743.031 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.745.509 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.745.513 I llama_new_context_with_model: graph nodes  = 601
0.00.745.514 I llama_new_context_with_model: graph splits = 1
0.00.745.538 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.362.183 I main: llama threadpool init, n_threads = 4
0.01.362.195 I 
0.01.362.317 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.362.332 I 
0.01.362.582 I sampler seed: 2428393756
0.01.362.594 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.362.601 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.362.602 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.362.609 I 
 increably!

I am unable to access the requested data, therefore I am unable to provide you with an answer. Please provide me with the necessary information and

0.14.969.549 I llama_perf_sampler_print:    sampling time =      49.21 ms /    33 runs   (    1.49 ms per token,   670.58 tokens per second)
0.14.969.554 I llama_perf_context_print:        load time =    1359.30 ms
0.14.969.556 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.969.558 I llama_perf_context_print:        eval time =   13512.47 ms /    32 runs   (  422.26 ms per token,     2.37 tokens per second)
0.14.969.559 I llama_perf_context_print:       total time =   13607.38 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m1.143s
user	3m17.022s
sys	0m9.478s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4003 (9e545319)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198601.30 ms
main:    total time = 198601.30 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 4003 (9e545319) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.785 I main: load the model and apply lora adapter, if any
0.00.025.403 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.415 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.509 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.521 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.525 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.530 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.532 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.547 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.551 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.552 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.553 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.559 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.561 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.562 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.563 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.564 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.170 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.429 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.488 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.497 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.498 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.499 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.500 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.515 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.520 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.525 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.527 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.528 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.530 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.531 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.539 I llama_model_loader: - type  f32:   37 tensors
0.00.265.542 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.543 I llama_model_loader: - type q6_K:   19 tensors
0.00.438.497 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.369 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.386 I llm_load_vocab: special tokens cache size = 5
0.00.598.736 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.598.806 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.598.807 I llm_load_print_meta: arch             = gemma
0.00.598.808 I llm_load_print_meta: vocab type       = SPM
0.00.598.808 I llm_load_print_meta: n_vocab          = 256000
0.00.598.811 I llm_load_print_meta: n_merges         = 0
0.00.598.811 I llm_load_print_meta: vocab_only       = 0
0.00.598.812 I llm_load_print_meta: n_ctx_train      = 8192
0.00.598.812 I llm_load_print_meta: n_embd           = 2048
0.00.598.812 I llm_load_print_meta: n_layer          = 18
0.00.598.887 I llm_load_print_meta: n_head           = 8
0.00.598.895 I llm_load_print_meta: n_head_kv        = 1
0.00.598.895 I llm_load_print_meta: n_rot            = 256
0.00.598.896 I llm_load_print_meta: n_swa            = 0
0.00.598.896 I llm_load_print_meta: n_embd_head_k    = 256
0.00.598.897 I llm_load_print_meta: n_embd_head_v    = 256
0.00.598.901 I llm_load_print_meta: n_gqa            = 8
0.00.598.923 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.598.929 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.598.930 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.598.931 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.598.941 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.598.945 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.598.946 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.598.951 I llm_load_print_meta: n_ff             = 16384
0.00.598.955 I llm_load_print_meta: n_expert         = 0
0.00.598.955 I llm_load_print_meta: n_expert_used    = 0
0.00.598.955 I llm_load_print_meta: causal attn      = 1
0.00.598.956 I llm_load_print_meta: pooling type     = 0
0.00.598.956 I llm_load_print_meta: rope type        = 2
0.00.598.957 I llm_load_print_meta: rope scaling     = linear
0.00.598.958 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.598.959 I llm_load_print_meta: freq_scale_train = 1
0.00.598.960 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.598.960 I llm_load_print_meta: rope_finetuned   = unknown
0.00.598.960 I llm_load_print_meta: ssm_d_conv       = 0
0.00.598.960 I llm_load_print_meta: ssm_d_inner      = 0
0.00.598.961 I llm_load_print_meta: ssm_d_state      = 0
0.00.598.961 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.598.961 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.598.962 I llm_load_print_meta: model type       = 2B
0.00.598.964 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.598.965 I llm_load_print_meta: model params     = 2.51 B
0.00.598.966 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.598.967 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.598.969 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.598.970 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.598.970 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.598.970 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.598.971 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.598.971 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.598.977 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.598.979 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.598.987 I llm_load_print_meta: max token length = 93
0.00.662.890 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.662.898 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.662.899 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.662.900 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.662.900 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.662.901 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.668.803 I llama_new_context_with_model: n_ctx      = 8192
0.00.668.810 I llama_new_context_with_model: n_batch    = 2048
0.00.668.810 I llama_new_context_with_model: n_ubatch   = 512
0.00.668.810 I llama_new_context_with_model: flash_attn = 0
0.00.668.813 I llama_new_context_with_model: freq_base  = 10000.0
0.00.668.813 I llama_new_context_with_model: freq_scale = 1
0.00.698.393 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.698.434 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.698.554 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.701.119 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.701.124 I llama_new_context_with_model: graph nodes  = 601
0.00.701.124 I llama_new_context_with_model: graph splits = 1
0.00.701.148 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.278.458 I main: llama threadpool init, n_threads = 4
0.01.278.471 I 
0.01.278.578 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.278.582 I 
0.01.278.817 I sampler seed: 3697389130
0.01.278.830 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.278.839 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.278.839 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.278.839 I 
 strick notes with the following details:

**Note:** The Importance of Effective Communication

**Date:** 2023-10-26



0.12.104.246 I llama_perf_sampler_print:    sampling time =      49.11 ms /    33 runs   (    1.49 ms per token,   672.02 tokens per second)
0.12.104.250 I llama_perf_context_print:        load time =    1275.56 ms
0.12.104.251 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.104.253 I llama_perf_context_print:        eval time =   10731.00 ms /    32 runs   (  335.34 ms per token,     2.98 tokens per second)
0.12.104.254 I llama_perf_context_print:       total time =   10825.80 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4003 (9e545319)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198887.73 ms
main:    total time = 198887.73 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.644 I build: 4003 (9e545319) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.775 I main: load the model and apply lora adapter, if any
0.00.025.228 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.338 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.354 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.358 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.364 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.365 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.366 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.367 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.369 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.370 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.377 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.379 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.380 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.381 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.382 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.266 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.897 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.093 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.117 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.118 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.119 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.121 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.122 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.123 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.128 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.129 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.137 I llama_model_loader: - type  f32:   37 tensors
0.00.267.140 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.140 I llama_model_loader: - type q6_K:   19 tensors
0.00.449.096 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.201 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.232 I llm_load_vocab: special tokens cache size = 5
0.00.609.747 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.609.819 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.609.820 I llm_load_print_meta: arch             = gemma
0.00.609.821 I llm_load_print_meta: vocab type       = SPM
0.00.609.822 I llm_load_print_meta: n_vocab          = 256000
0.00.609.824 I llm_load_print_meta: n_merges         = 0
0.00.609.825 I llm_load_print_meta: vocab_only       = 0
0.00.609.825 I llm_load_print_meta: n_ctx_train      = 8192
0.00.609.826 I llm_load_print_meta: n_embd           = 2048
0.00.609.826 I llm_load_print_meta: n_layer          = 18
0.00.609.893 I llm_load_print_meta: n_head           = 8
0.00.609.900 I llm_load_print_meta: n_head_kv        = 1
0.00.609.900 I llm_load_print_meta: n_rot            = 256
0.00.609.901 I llm_load_print_meta: n_swa            = 0
0.00.609.901 I llm_load_print_meta: n_embd_head_k    = 256
0.00.609.902 I llm_load_print_meta: n_embd_head_v    = 256
0.00.609.907 I llm_load_print_meta: n_gqa            = 8
0.00.609.912 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.609.917 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.609.918 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.609.920 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.609.925 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.609.926 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.609.926 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.609.931 I llm_load_print_meta: n_ff             = 16384
0.00.609.931 I llm_load_print_meta: n_expert         = 0
0.00.609.932 I llm_load_print_meta: n_expert_used    = 0
0.00.609.935 I llm_load_print_meta: causal attn      = 1
0.00.609.935 I llm_load_print_meta: pooling type     = 0
0.00.609.935 I llm_load_print_meta: rope type        = 2
0.00.609.936 I llm_load_print_meta: rope scaling     = linear
0.00.609.937 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.609.938 I llm_load_print_meta: freq_scale_train = 1
0.00.609.938 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.609.939 I llm_load_print_meta: rope_finetuned   = unknown
0.00.609.940 I llm_load_print_meta: ssm_d_conv       = 0
0.00.609.940 I llm_load_print_meta: ssm_d_inner      = 0
0.00.609.941 I llm_load_print_meta: ssm_d_state      = 0
0.00.609.942 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.609.942 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.609.943 I llm_load_print_meta: model type       = 2B
0.00.609.944 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.609.945 I llm_load_print_meta: model params     = 2.51 B
0.00.609.946 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.609.946 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.609.947 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.609.947 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.609.948 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.609.949 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.609.949 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.609.949 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.609.955 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.609.958 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.609.959 I llm_load_print_meta: max token length = 93
0.00.671.999 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.677.809 I llama_new_context_with_model: n_ctx      = 8192
0.00.677.816 I llama_new_context_with_model: n_batch    = 2048
0.00.677.817 I llama_new_context_with_model: n_ubatch   = 512
0.00.677.818 I llama_new_context_with_model: flash_attn = 0
0.00.677.820 I llama_new_context_with_model: freq_base  = 10000.0
0.00.677.821 I llama_new_context_with_model: freq_scale = 1
0.00.707.711 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.707.752 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.707.874 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.710.427 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.710.431 I llama_new_context_with_model: graph nodes  = 601
0.00.710.432 I llama_new_context_with_model: graph splits = 1
0.00.710.455 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.288.286 I main: llama threadpool init, n_threads = 4
0.01.288.300 I 
0.01.288.409 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.288.413 I 
0.01.288.650 I sampler seed: 1013514710
0.01.288.663 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.288.670 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.288.673 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.288.673 I 
 increasities by the hour and calculate the total number of hours the musician played.

The provided information is as follows:

- The musician played for 4

0.12.154.315 I llama_perf_sampler_print:    sampling time =      49.45 ms /    33 runs   (    1.50 ms per token,   667.35 tokens per second)
0.12.154.319 I llama_perf_context_print:        load time =    1285.42 ms
0.12.154.321 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.154.322 I llama_perf_context_print:        eval time =   10768.86 ms /    32 runs   (  336.53 ms per token,     2.97 tokens per second)
0.12.154.337 I llama_perf_context_print:       total time =   10866.04 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.678s
user	50m9.863s
sys	0m6.375s
