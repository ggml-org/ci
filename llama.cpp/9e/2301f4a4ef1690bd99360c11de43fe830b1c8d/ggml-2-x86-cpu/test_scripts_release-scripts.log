+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.173 I build: 4199 (9e2301f4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.368 I main: llama backend init
0.00.000.374 I main: load the model and apply lora adapter, if any
0.00.020.598 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.607 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.614 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.623 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.626 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.630 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.631 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.631 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.632 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.632 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.633 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.636 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.637 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.637 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.637 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.638 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.325 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.710 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.121 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.129 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.130 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.130 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.131 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.131 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.132 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.134 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.136 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.138 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.138 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.134.139 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.143 I llama_model_loader: - type  f32:   37 tensors
0.00.134.144 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.303 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.393 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.024 I llm_load_vocab: special tokens cache size = 5
0.00.280.084 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.098 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.099 I llm_load_print_meta: arch             = gemma
0.00.280.100 I llm_load_print_meta: vocab type       = SPM
0.00.280.100 I llm_load_print_meta: n_vocab          = 256000
0.00.280.101 I llm_load_print_meta: n_merges         = 0
0.00.280.101 I llm_load_print_meta: vocab_only       = 0
0.00.280.101 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.102 I llm_load_print_meta: n_embd           = 2048
0.00.280.102 I llm_load_print_meta: n_layer          = 18
0.00.280.112 I llm_load_print_meta: n_head           = 8
0.00.280.113 I llm_load_print_meta: n_head_kv        = 1
0.00.280.113 I llm_load_print_meta: n_rot            = 256
0.00.280.114 I llm_load_print_meta: n_swa            = 0
0.00.280.114 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.114 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.115 I llm_load_print_meta: n_gqa            = 8
0.00.280.116 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.117 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.118 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.120 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.120 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.121 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.121 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.122 I llm_load_print_meta: n_ff             = 16384
0.00.280.122 I llm_load_print_meta: n_expert         = 0
0.00.280.122 I llm_load_print_meta: n_expert_used    = 0
0.00.280.123 I llm_load_print_meta: causal attn      = 1
0.00.280.123 I llm_load_print_meta: pooling type     = 0
0.00.280.123 I llm_load_print_meta: rope type        = 2
0.00.280.124 I llm_load_print_meta: rope scaling     = linear
0.00.280.125 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.126 I llm_load_print_meta: freq_scale_train = 1
0.00.280.126 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.127 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.127 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.128 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.128 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.128 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.128 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.129 I llm_load_print_meta: model type       = 2B
0.00.280.129 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.130 I llm_load_print_meta: model params     = 2.51 B
0.00.280.131 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.131 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.132 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.132 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.132 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.133 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.133 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.133 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.134 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.134 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.135 I llm_load_print_meta: max token length = 93
0.00.379.760 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.379.768 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.379.769 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.379.769 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.379.770 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.379.770 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.384.820 I llama_new_context_with_model: n_seq_max     = 1
0.00.384.826 I llama_new_context_with_model: n_ctx         = 4096
0.00.384.826 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.384.826 I llama_new_context_with_model: n_batch       = 2048
0.00.384.827 I llama_new_context_with_model: n_ubatch      = 512
0.00.384.827 I llama_new_context_with_model: flash_attn    = 0
0.00.384.829 I llama_new_context_with_model: freq_base     = 10000.0
0.00.384.830 I llama_new_context_with_model: freq_scale    = 1
0.00.384.831 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.398.917 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.398.930 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.399.016 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.400.288 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.400.293 I llama_new_context_with_model: graph nodes  = 601
0.00.400.293 I llama_new_context_with_model: graph splits = 1
0.00.400.295 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.495.611 I main: llama threadpool init, n_threads = 4
0.00.495.628 I 
0.00.495.697 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.495.697 I 
0.00.495.737 I sampler seed: 639195502
0.00.495.746 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.495.749 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.495.749 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.495.749 I 
 increasements, and other forms of flattery.

Flattery can be seen as a manipulative strategy to gain advantage or to influence others. However, it can also

0.02.732.257 I llama_perf_sampler_print:    sampling time =       4.75 ms /    33 runs   (    0.14 ms per token,  6941.52 tokens per second)
0.02.732.259 I llama_perf_context_print:        load time =     495.22 ms
0.02.732.260 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.732.261 I llama_perf_context_print:        eval time =    2218.40 ms /    32 runs   (   69.32 ms per token,    14.42 tokens per second)
0.02.732.262 I llama_perf_context_print:       total time =    2236.65 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.471 I build: 4199 (9e2301f4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.676 I main: llama backend init
0.00.000.683 I main: load the model and apply lora adapter, if any
0.00.021.184 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.197 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.203 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.204 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.209 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.212 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.213 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.213 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.214 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.214 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.219 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.219 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.220 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.220 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.221 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.673 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.189 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.110 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.118 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.118 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.119 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.120 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.120 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.121 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.125 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.125 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.126 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.126 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.127 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.131 I llama_model_loader: - type  f32:   37 tensors
0.00.132.132 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.166 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.957 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.623 I llm_load_vocab: special tokens cache size = 5
0.00.266.841 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.858 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.858 I llm_load_print_meta: arch             = gemma
0.00.266.859 I llm_load_print_meta: vocab type       = SPM
0.00.266.859 I llm_load_print_meta: n_vocab          = 256000
0.00.266.860 I llm_load_print_meta: n_merges         = 0
0.00.266.860 I llm_load_print_meta: vocab_only       = 0
0.00.266.860 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.861 I llm_load_print_meta: n_embd           = 2048
0.00.266.861 I llm_load_print_meta: n_layer          = 18
0.00.266.872 I llm_load_print_meta: n_head           = 8
0.00.266.873 I llm_load_print_meta: n_head_kv        = 1
0.00.266.873 I llm_load_print_meta: n_rot            = 256
0.00.266.873 I llm_load_print_meta: n_swa            = 0
0.00.266.874 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.874 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.875 I llm_load_print_meta: n_gqa            = 8
0.00.266.876 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.877 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.878 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.879 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.879 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.880 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.880 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.881 I llm_load_print_meta: n_ff             = 16384
0.00.266.881 I llm_load_print_meta: n_expert         = 0
0.00.266.881 I llm_load_print_meta: n_expert_used    = 0
0.00.266.882 I llm_load_print_meta: causal attn      = 1
0.00.266.882 I llm_load_print_meta: pooling type     = 0
0.00.266.882 I llm_load_print_meta: rope type        = 2
0.00.266.883 I llm_load_print_meta: rope scaling     = linear
0.00.266.884 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.885 I llm_load_print_meta: freq_scale_train = 1
0.00.266.885 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.885 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.886 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.886 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.886 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.886 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.887 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.887 I llm_load_print_meta: model type       = 2B
0.00.266.888 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.888 I llm_load_print_meta: model params     = 2.51 B
0.00.266.889 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.889 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.890 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.890 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.891 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.891 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.891 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.892 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.892 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.893 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.893 I llm_load_print_meta: max token length = 93
0.00.362.799 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.368.130 I llama_new_context_with_model: n_seq_max     = 1
0.00.368.137 I llama_new_context_with_model: n_ctx         = 4096
0.00.368.137 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.368.137 I llama_new_context_with_model: n_batch       = 2048
0.00.368.138 I llama_new_context_with_model: n_ubatch      = 512
0.00.368.138 I llama_new_context_with_model: flash_attn    = 0
0.00.368.141 I llama_new_context_with_model: freq_base     = 10000.0
0.00.368.142 I llama_new_context_with_model: freq_scale    = 1
0.00.368.143 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.383.293 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.306 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.400 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.747 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.763 I llama_new_context_with_model: graph nodes  = 601
0.00.384.763 I llama_new_context_with_model: graph splits = 1
0.00.384.765 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.483.673 I main: llama threadpool init, n_threads = 4
0.00.483.690 I 
0.00.483.763 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.483.767 I 
0.00.483.809 I sampler seed: 2695584774
0.00.483.820 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.483.831 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.483.835 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.483.835 I 
 maneupher.

A long, flexible neck is a characteristic feature of which animal?
A) Dog
B) Snake
C) Elephant
D)

0.02.647.133 I llama_perf_sampler_print:    sampling time =       5.01 ms /    33 runs   (    0.15 ms per token,  6580.26 tokens per second)
0.02.647.135 I llama_perf_context_print:        load time =     482.97 ms
0.02.647.137 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.647.138 I llama_perf_context_print:        eval time =    2144.27 ms /    32 runs   (   67.01 ms per token,    14.92 tokens per second)
0.02.647.139 I llama_perf_context_print:       total time =    2163.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.542 I build: 4199 (9e2301f4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.736 I main: llama backend init
0.00.000.743 I main: load the model and apply lora adapter, if any
0.00.021.176 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.186 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.193 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.202 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.203 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.206 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.207 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.208 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.209 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.210 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.211 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.214 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.215 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.215 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.216 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.216 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.053.713 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.129.865 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.136.728 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.136.735 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.136.736 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.136.737 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.136.738 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.136.739 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.136.740 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.136.743 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.136.744 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.136.745 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.136.746 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.136.747 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.136.751 I llama_model_loader: - type  f32:   37 tensors
0.00.136.752 I llama_model_loader: - type q8_0:  127 tensors
0.00.216.182 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.066 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.670 I llm_load_vocab: special tokens cache size = 5
0.00.281.696 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.712 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.712 I llm_load_print_meta: arch             = gemma
0.00.281.713 I llm_load_print_meta: vocab type       = SPM
0.00.281.713 I llm_load_print_meta: n_vocab          = 256000
0.00.281.714 I llm_load_print_meta: n_merges         = 0
0.00.281.714 I llm_load_print_meta: vocab_only       = 0
0.00.281.714 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.714 I llm_load_print_meta: n_embd           = 2048
0.00.281.715 I llm_load_print_meta: n_layer          = 18
0.00.281.725 I llm_load_print_meta: n_head           = 8
0.00.281.726 I llm_load_print_meta: n_head_kv        = 1
0.00.281.726 I llm_load_print_meta: n_rot            = 256
0.00.281.726 I llm_load_print_meta: n_swa            = 0
0.00.281.727 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.727 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.728 I llm_load_print_meta: n_gqa            = 8
0.00.281.729 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.730 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.731 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.731 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.732 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.732 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.733 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.733 I llm_load_print_meta: n_ff             = 16384
0.00.281.734 I llm_load_print_meta: n_expert         = 0
0.00.281.734 I llm_load_print_meta: n_expert_used    = 0
0.00.281.734 I llm_load_print_meta: causal attn      = 1
0.00.281.734 I llm_load_print_meta: pooling type     = 0
0.00.281.735 I llm_load_print_meta: rope type        = 2
0.00.281.735 I llm_load_print_meta: rope scaling     = linear
0.00.281.736 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.737 I llm_load_print_meta: freq_scale_train = 1
0.00.281.737 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.738 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.738 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.738 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.738 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.739 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.739 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.739 I llm_load_print_meta: model type       = 2B
0.00.281.740 I llm_load_print_meta: model ftype      = Q8_0
0.00.281.741 I llm_load_print_meta: model params     = 2.51 B
0.00.281.742 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.281.742 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.742 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.743 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.743 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.743 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.744 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.744 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.744 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.745 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.745 I llm_load_print_meta: max token length = 93
0.00.360.094 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.360.101 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.360.101 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.360.102 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.360.102 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.360.103 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.365.226 I llama_new_context_with_model: n_seq_max     = 1
0.00.365.232 I llama_new_context_with_model: n_ctx         = 4096
0.00.365.232 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.365.233 I llama_new_context_with_model: n_batch       = 2048
0.00.365.233 I llama_new_context_with_model: n_ubatch      = 512
0.00.365.234 I llama_new_context_with_model: flash_attn    = 0
0.00.365.236 I llama_new_context_with_model: freq_base     = 10000.0
0.00.365.237 I llama_new_context_with_model: freq_scale    = 1
0.00.365.238 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.379.649 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.379.663 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.379.749 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.953 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.960 I llama_new_context_with_model: graph nodes  = 601
0.00.380.961 I llama_new_context_with_model: graph splits = 1
0.00.380.963 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.575 I main: llama threadpool init, n_threads = 4
0.00.468.592 I 
0.00.468.664 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.468.668 I 
0.00.468.718 I sampler seed: 1566439303
0.00.468.729 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.468.733 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.468.733 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.468.735 I 
 increably.

I am unable to access the requested context, so I am unable to provide an answer. [end of text]


0.02.083.714 I llama_perf_sampler_print:    sampling time =       3.50 ms /    24 runs   (    0.15 ms per token,  6851.27 tokens per second)
0.02.083.717 I llama_perf_context_print:        load time =     467.81 ms
0.02.083.718 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.083.719 I llama_perf_context_print:        eval time =    1601.24 ms /    23 runs   (   69.62 ms per token,    14.36 tokens per second)
0.02.083.720 I llama_perf_context_print:       total time =    1615.15 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.203 I build: 4199 (9e2301f4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.409 I main: llama backend init
0.00.000.416 I main: load the model and apply lora adapter, if any
0.00.021.139 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.148 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.156 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.162 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.163 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.167 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.167 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.168 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.170 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.171 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.171 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.176 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.178 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.179 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.179 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.180 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.237 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.054 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.910 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.917 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.918 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.918 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.919 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.920 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.920 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.923 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.924 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.924 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.925 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.926 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.929 I llama_model_loader: - type  f32:   37 tensors
0.00.133.930 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.940 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.237.837 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.238.283 I llm_load_vocab: special tokens cache size = 5
0.00.259.204 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.259.221 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.259.222 I llm_load_print_meta: arch             = gemma
0.00.259.222 I llm_load_print_meta: vocab type       = SPM
0.00.259.223 I llm_load_print_meta: n_vocab          = 256000
0.00.259.223 I llm_load_print_meta: n_merges         = 0
0.00.259.224 I llm_load_print_meta: vocab_only       = 0
0.00.259.224 I llm_load_print_meta: n_ctx_train      = 8192
0.00.259.224 I llm_load_print_meta: n_embd           = 2048
0.00.259.224 I llm_load_print_meta: n_layer          = 18
0.00.259.236 I llm_load_print_meta: n_head           = 8
0.00.259.237 I llm_load_print_meta: n_head_kv        = 1
0.00.259.237 I llm_load_print_meta: n_rot            = 256
0.00.259.238 I llm_load_print_meta: n_swa            = 0
0.00.259.238 I llm_load_print_meta: n_embd_head_k    = 256
0.00.259.238 I llm_load_print_meta: n_embd_head_v    = 256
0.00.259.239 I llm_load_print_meta: n_gqa            = 8
0.00.259.240 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.259.241 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.259.242 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.259.243 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.259.244 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.259.244 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.259.244 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.259.245 I llm_load_print_meta: n_ff             = 16384
0.00.259.246 I llm_load_print_meta: n_expert         = 0
0.00.259.246 I llm_load_print_meta: n_expert_used    = 0
0.00.259.247 I llm_load_print_meta: causal attn      = 1
0.00.259.247 I llm_load_print_meta: pooling type     = 0
0.00.259.248 I llm_load_print_meta: rope type        = 2
0.00.259.249 I llm_load_print_meta: rope scaling     = linear
0.00.259.250 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.259.250 I llm_load_print_meta: freq_scale_train = 1
0.00.259.251 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.259.251 I llm_load_print_meta: rope_finetuned   = unknown
0.00.259.251 I llm_load_print_meta: ssm_d_conv       = 0
0.00.259.252 I llm_load_print_meta: ssm_d_inner      = 0
0.00.259.252 I llm_load_print_meta: ssm_d_state      = 0
0.00.259.253 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.259.253 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.259.254 I llm_load_print_meta: model type       = 2B
0.00.259.254 I llm_load_print_meta: model ftype      = Q8_0
0.00.259.255 I llm_load_print_meta: model params     = 2.51 B
0.00.259.256 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.259.256 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.259.257 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.259.257 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.259.258 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.259.259 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.259.259 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.259.260 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.259.260 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.259.261 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.259.262 I llm_load_print_meta: max token length = 93
0.00.344.210 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.344.220 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.349.382 I llama_new_context_with_model: n_seq_max     = 1
0.00.349.391 I llama_new_context_with_model: n_ctx         = 4096
0.00.349.391 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.349.392 I llama_new_context_with_model: n_batch       = 2048
0.00.349.392 I llama_new_context_with_model: n_ubatch      = 512
0.00.349.394 I llama_new_context_with_model: flash_attn    = 0
0.00.349.397 I llama_new_context_with_model: freq_base     = 10000.0
0.00.349.398 I llama_new_context_with_model: freq_scale    = 1
0.00.349.399 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.364.721 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.364.735 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.364.833 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.162 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.366.168 I llama_new_context_with_model: graph nodes  = 601
0.00.366.168 I llama_new_context_with_model: graph splits = 1
0.00.366.171 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.455.490 I main: llama threadpool init, n_threads = 4
0.00.455.507 I 
0.00.455.583 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.455.586 I 
0.00.455.635 I sampler seed: 2654304754
0.00.455.646 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.455.650 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.455.650 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.455.651 I 
 increasels.

**Answer:** The provided text does not contain any information regarding a specific answer, so I am unable to provide an answer. [end of text]


0.02.715.652 I llama_perf_sampler_print:    sampling time =       4.53 ms /    31 runs   (    0.15 ms per token,  6843.27 tokens per second)
0.02.715.655 I llama_perf_context_print:        load time =     455.06 ms
0.02.715.656 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.715.657 I llama_perf_context_print:        eval time =    2242.01 ms /    30 runs   (   74.73 ms per token,    13.38 tokens per second)
0.02.715.658 I llama_perf_context_print:       total time =    2260.17 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.785s
user	0m36.066s
sys	0m9.342s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4199 (9e2301f4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40196.24 ms
main:    total time = 40196.24 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.529 I build: 4199 (9e2301f4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.728 I main: llama backend init
0.00.000.735 I main: load the model and apply lora adapter, if any
0.00.021.417 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.426 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.434 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.438 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.439 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.444 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.444 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.445 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.446 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.446 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.447 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.450 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.450 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.451 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.451 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.452 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.988 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.895 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.730 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.736 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.737 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.737 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.738 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.739 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.740 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.742 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.743 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.744 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.745 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.746 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.748 I llama_model_loader: - type  f32:   37 tensors
0.00.131.749 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.749 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.032 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.618 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.149 I llm_load_vocab: special tokens cache size = 5
0.00.264.066 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.081 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.082 I llm_load_print_meta: arch             = gemma
0.00.264.082 I llm_load_print_meta: vocab type       = SPM
0.00.264.083 I llm_load_print_meta: n_vocab          = 256000
0.00.264.083 I llm_load_print_meta: n_merges         = 0
0.00.264.084 I llm_load_print_meta: vocab_only       = 0
0.00.264.084 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.084 I llm_load_print_meta: n_embd           = 2048
0.00.264.084 I llm_load_print_meta: n_layer          = 18
0.00.264.096 I llm_load_print_meta: n_head           = 8
0.00.264.097 I llm_load_print_meta: n_head_kv        = 1
0.00.264.097 I llm_load_print_meta: n_rot            = 256
0.00.264.098 I llm_load_print_meta: n_swa            = 0
0.00.264.098 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.098 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.099 I llm_load_print_meta: n_gqa            = 8
0.00.264.100 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.101 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.102 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.103 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.104 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.104 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.104 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.105 I llm_load_print_meta: n_ff             = 16384
0.00.264.105 I llm_load_print_meta: n_expert         = 0
0.00.264.106 I llm_load_print_meta: n_expert_used    = 0
0.00.264.106 I llm_load_print_meta: causal attn      = 1
0.00.264.106 I llm_load_print_meta: pooling type     = 0
0.00.264.107 I llm_load_print_meta: rope type        = 2
0.00.264.107 I llm_load_print_meta: rope scaling     = linear
0.00.264.109 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.109 I llm_load_print_meta: freq_scale_train = 1
0.00.264.109 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.110 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.110 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.110 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.110 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.111 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.111 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.111 I llm_load_print_meta: model type       = 2B
0.00.264.112 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.113 I llm_load_print_meta: model params     = 2.51 B
0.00.264.113 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.114 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.114 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.115 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.115 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.116 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.116 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.116 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.117 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.117 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.117 I llm_load_print_meta: max token length = 93
0.00.324.063 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.324.070 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.324.071 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.324.072 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.324.072 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.324.073 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.329.265 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.272 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.272 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.272 I llama_new_context_with_model: n_batch       = 2048
0.00.329.273 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.273 I llama_new_context_with_model: flash_attn    = 0
0.00.329.275 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.276 I llama_new_context_with_model: freq_scale    = 1
0.00.329.277 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.343.359 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.343.373 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.343.462 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.756 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.344.762 I llama_new_context_with_model: graph nodes  = 601
0.00.344.762 I llama_new_context_with_model: graph splits = 1
0.00.344.764 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.995 I main: llama threadpool init, n_threads = 4
0.00.420.010 I 
0.00.420.081 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.420.084 I 
0.00.420.127 I sampler seed: 152672256
0.00.420.138 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.420.146 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.420.147 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.420.147 I 
 seconal. 

**Assistant**

I am unable to provide sexually suggestive or inappropriate responses. My purpose is to assist with tasks and provide information in a

0.02.001.687 I llama_perf_sampler_print:    sampling time =       5.06 ms /    33 runs   (    0.15 ms per token,  6523.03 tokens per second)
0.02.001.689 I llama_perf_context_print:        load time =     419.24 ms
0.02.001.690 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.001.692 I llama_perf_context_print:        eval time =    1563.03 ms /    32 runs   (   48.84 ms per token,    20.47 tokens per second)
0.02.001.692 I llama_perf_context_print:       total time =    1581.70 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4199 (9e2301f4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40162.88 ms
main:    total time = 40162.88 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.522 I build: 4199 (9e2301f4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.731 I main: llama backend init
0.00.000.737 I main: load the model and apply lora adapter, if any
0.00.021.191 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.204 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.213 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.217 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.220 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.221 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.222 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.222 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.223 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.223 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.227 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.227 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.228 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.228 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.229 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.710 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.583 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.413 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.420 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.421 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.422 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.422 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.423 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.424 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.426 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.427 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.430 I llama_model_loader: - type  f32:   37 tensors
0.00.131.431 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.432 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.362 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.978 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.531 I llm_load_vocab: special tokens cache size = 5
0.00.268.816 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.832 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.833 I llm_load_print_meta: arch             = gemma
0.00.268.833 I llm_load_print_meta: vocab type       = SPM
0.00.268.834 I llm_load_print_meta: n_vocab          = 256000
0.00.268.834 I llm_load_print_meta: n_merges         = 0
0.00.268.835 I llm_load_print_meta: vocab_only       = 0
0.00.268.835 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.835 I llm_load_print_meta: n_embd           = 2048
0.00.268.836 I llm_load_print_meta: n_layer          = 18
0.00.268.846 I llm_load_print_meta: n_head           = 8
0.00.268.847 I llm_load_print_meta: n_head_kv        = 1
0.00.268.848 I llm_load_print_meta: n_rot            = 256
0.00.268.848 I llm_load_print_meta: n_swa            = 0
0.00.268.848 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.848 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.849 I llm_load_print_meta: n_gqa            = 8
0.00.268.851 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.851 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.852 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.854 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.854 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.855 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.855 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.856 I llm_load_print_meta: n_ff             = 16384
0.00.268.856 I llm_load_print_meta: n_expert         = 0
0.00.268.856 I llm_load_print_meta: n_expert_used    = 0
0.00.268.857 I llm_load_print_meta: causal attn      = 1
0.00.268.857 I llm_load_print_meta: pooling type     = 0
0.00.268.857 I llm_load_print_meta: rope type        = 2
0.00.268.857 I llm_load_print_meta: rope scaling     = linear
0.00.268.859 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.860 I llm_load_print_meta: freq_scale_train = 1
0.00.268.860 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.860 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.861 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.861 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.861 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.862 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.862 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.863 I llm_load_print_meta: model type       = 2B
0.00.268.863 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.864 I llm_load_print_meta: model params     = 2.51 B
0.00.268.865 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.865 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.865 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.866 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.866 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.866 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.867 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.867 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.868 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.868 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.868 I llm_load_print_meta: max token length = 93
0.00.325.160 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.330.225 I llama_new_context_with_model: n_seq_max     = 1
0.00.330.232 I llama_new_context_with_model: n_ctx         = 4096
0.00.330.232 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.330.233 I llama_new_context_with_model: n_batch       = 2048
0.00.330.233 I llama_new_context_with_model: n_ubatch      = 512
0.00.330.234 I llama_new_context_with_model: flash_attn    = 0
0.00.330.236 I llama_new_context_with_model: freq_base     = 10000.0
0.00.330.237 I llama_new_context_with_model: freq_scale    = 1
0.00.330.238 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.345.010 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.345.024 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.345.122 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.346.347 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.346.353 I llama_new_context_with_model: graph nodes  = 601
0.00.346.354 I llama_new_context_with_model: graph splits = 1
0.00.346.356 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.420.149 I main: llama threadpool init, n_threads = 4
0.00.420.163 I 
0.00.420.237 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.420.240 I 
0.00.420.282 I sampler seed: 1220373238
0.00.420.293 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.420.295 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.420.305 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.420.309 I 
 squaRED text is displayed as follows:

```
[[[CLS] [SEP] [SEP] [SEP] [SEP] [SEP] [SEP

0.01.974.424 I llama_perf_sampler_print:    sampling time =       4.98 ms /    33 runs   (    0.15 ms per token,  6627.84 tokens per second)
0.01.974.426 I llama_perf_context_print:        load time =     419.39 ms
0.01.974.428 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.974.430 I llama_perf_context_print:        eval time =    1535.71 ms /    32 runs   (   47.99 ms per token,    20.84 tokens per second)
0.01.974.430 I llama_perf_context_print:       total time =    1554.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.097s
user	10m23.854s
sys	0m6.873s
