+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.647 I build: 3758 (e1ad8fdd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.879 I main: llama backend init
0.00.002.850 I main: load the model and apply lora adapter, if any
0.00.025.170 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.385 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.483 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.496 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.498 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.502 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.505 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.506 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.507 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.508 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.509 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.516 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.517 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.518 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.519 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.520 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.906 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.930 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.323 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.332 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.333 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.334 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.335 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.336 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.337 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.340 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.341 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.342 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.342 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.343 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.352 I llama_model_loader: - type  f32:   37 tensors
0.00.197.355 I llama_model_loader: - type q8_0:  127 tensors
0.00.505.524 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.574 I llm_load_vocab: special tokens cache size = 5
0.00.565.133 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.565.194 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.565.195 I llm_load_print_meta: arch             = gemma
0.00.565.196 I llm_load_print_meta: vocab type       = SPM
0.00.565.197 I llm_load_print_meta: n_vocab          = 256000
0.00.565.200 I llm_load_print_meta: n_merges         = 0
0.00.565.200 I llm_load_print_meta: vocab_only       = 0
0.00.565.201 I llm_load_print_meta: n_ctx_train      = 8192
0.00.565.201 I llm_load_print_meta: n_embd           = 2048
0.00.565.201 I llm_load_print_meta: n_layer          = 18
0.00.565.235 I llm_load_print_meta: n_head           = 8
0.00.565.243 I llm_load_print_meta: n_head_kv        = 1
0.00.565.243 I llm_load_print_meta: n_rot            = 256
0.00.565.243 I llm_load_print_meta: n_swa            = 0
0.00.565.244 I llm_load_print_meta: n_embd_head_k    = 256
0.00.565.244 I llm_load_print_meta: n_embd_head_v    = 256
0.00.565.249 I llm_load_print_meta: n_gqa            = 8
0.00.565.253 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.565.267 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.565.268 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.565.269 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.565.270 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.565.270 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.565.271 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.565.275 I llm_load_print_meta: n_ff             = 16384
0.00.565.276 I llm_load_print_meta: n_expert         = 0
0.00.565.276 I llm_load_print_meta: n_expert_used    = 0
0.00.565.277 I llm_load_print_meta: causal attn      = 1
0.00.565.277 I llm_load_print_meta: pooling type     = 0
0.00.565.277 I llm_load_print_meta: rope type        = 2
0.00.565.278 I llm_load_print_meta: rope scaling     = linear
0.00.565.279 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.565.279 I llm_load_print_meta: freq_scale_train = 1
0.00.565.280 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.565.280 I llm_load_print_meta: rope_finetuned   = unknown
0.00.565.280 I llm_load_print_meta: ssm_d_conv       = 0
0.00.565.281 I llm_load_print_meta: ssm_d_inner      = 0
0.00.565.281 I llm_load_print_meta: ssm_d_state      = 0
0.00.565.282 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.565.283 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.565.297 I llm_load_print_meta: model type       = 2B
0.00.565.298 I llm_load_print_meta: model ftype      = Q8_0
0.00.565.299 I llm_load_print_meta: model params     = 2.51 B
0.00.565.300 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.565.300 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.565.300 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.565.301 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.565.301 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.565.302 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.565.302 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.565.303 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.565.303 I llm_load_print_meta: max token length = 93
0.00.565.483 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.663.951 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.663.963 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.663.964 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.663.965 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.663.965 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.663.966 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.669.833 I llama_new_context_with_model: n_ctx      = 8192
0.00.669.842 I llama_new_context_with_model: n_batch    = 2048
0.00.669.843 I llama_new_context_with_model: n_ubatch   = 512
0.00.669.843 I llama_new_context_with_model: flash_attn = 0
0.00.669.847 I llama_new_context_with_model: freq_base  = 10000.0
0.00.669.848 I llama_new_context_with_model: freq_scale = 1
0.00.700.389 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.700.434 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.700.547 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.701.924 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.701.930 I llama_new_context_with_model: graph nodes  = 601
0.00.701.930 I llama_new_context_with_model: graph splits = 1
0.00.701.948 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.316.008 I main: llama threadpool init, n_threads = 4
0.01.316.020 I 
0.01.316.114 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.316.118 I 
0.01.316.272 I sampler seed: 3898319694
0.01.316.284 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.316.289 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.316.290 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities with a blend of modern and traditional styling. [end of text]


0.06.383.148 I llama_perf_sampler_print:    sampling time =      18.59 ms /    13 runs   (    1.43 ms per token,   699.30 tokens per second)
0.06.383.152 I llama_perf_context_print:        load time =    1313.07 ms
0.06.383.153 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.383.154 I llama_perf_context_print:        eval time =    5034.90 ms /    12 runs   (  419.57 ms per token,     2.38 tokens per second)
0.06.383.155 I llama_perf_context_print:       total time =    5067.15 ms /    13 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.700 I build: 3758 (e1ad8fdd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.931 I main: llama backend init
0.00.002.896 I main: load the model and apply lora adapter, if any
0.00.025.183 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.285 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.302 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.304 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.309 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.310 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.311 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.312 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.314 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.315 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.323 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.327 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.328 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.328 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.329 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.430 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.159 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.246 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.253 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.254 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.255 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.256 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.257 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.257 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.260 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.261 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.262 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.263 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.197.264 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.272 I llama_model_loader: - type  f32:   37 tensors
0.00.197.276 I llama_model_loader: - type q8_0:  127 tensors
0.00.497.392 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.449 I llm_load_vocab: special tokens cache size = 5
0.00.562.500 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.562.561 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.562.562 I llm_load_print_meta: arch             = gemma
0.00.562.563 I llm_load_print_meta: vocab type       = SPM
0.00.562.564 I llm_load_print_meta: n_vocab          = 256000
0.00.562.566 I llm_load_print_meta: n_merges         = 0
0.00.562.567 I llm_load_print_meta: vocab_only       = 0
0.00.562.568 I llm_load_print_meta: n_ctx_train      = 8192
0.00.562.568 I llm_load_print_meta: n_embd           = 2048
0.00.562.568 I llm_load_print_meta: n_layer          = 18
0.00.562.603 I llm_load_print_meta: n_head           = 8
0.00.562.610 I llm_load_print_meta: n_head_kv        = 1
0.00.562.610 I llm_load_print_meta: n_rot            = 256
0.00.562.610 I llm_load_print_meta: n_swa            = 0
0.00.562.611 I llm_load_print_meta: n_embd_head_k    = 256
0.00.562.611 I llm_load_print_meta: n_embd_head_v    = 256
0.00.562.616 I llm_load_print_meta: n_gqa            = 8
0.00.562.620 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.562.647 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.562.649 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.562.651 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.562.651 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.562.652 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.562.652 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.562.665 I llm_load_print_meta: n_ff             = 16384
0.00.562.666 I llm_load_print_meta: n_expert         = 0
0.00.562.666 I llm_load_print_meta: n_expert_used    = 0
0.00.562.667 I llm_load_print_meta: causal attn      = 1
0.00.562.667 I llm_load_print_meta: pooling type     = 0
0.00.562.667 I llm_load_print_meta: rope type        = 2
0.00.562.668 I llm_load_print_meta: rope scaling     = linear
0.00.562.670 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.562.671 I llm_load_print_meta: freq_scale_train = 1
0.00.562.671 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.562.672 I llm_load_print_meta: rope_finetuned   = unknown
0.00.562.672 I llm_load_print_meta: ssm_d_conv       = 0
0.00.562.672 I llm_load_print_meta: ssm_d_inner      = 0
0.00.562.673 I llm_load_print_meta: ssm_d_state      = 0
0.00.562.674 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.562.674 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.562.675 I llm_load_print_meta: model type       = 2B
0.00.562.676 I llm_load_print_meta: model ftype      = Q8_0
0.00.562.677 I llm_load_print_meta: model params     = 2.51 B
0.00.562.678 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.562.679 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.562.679 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.562.680 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.562.681 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.562.682 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.562.682 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.562.683 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.562.688 I llm_load_print_meta: max token length = 93
0.00.562.863 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.656.564 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.662.173 I llama_new_context_with_model: n_ctx      = 8192
0.00.662.181 I llama_new_context_with_model: n_batch    = 2048
0.00.662.182 I llama_new_context_with_model: n_ubatch   = 512
0.00.662.183 I llama_new_context_with_model: flash_attn = 0
0.00.662.186 I llama_new_context_with_model: freq_base  = 10000.0
0.00.662.187 I llama_new_context_with_model: freq_scale = 1
0.00.692.935 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.692.981 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.693.095 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.694.556 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.694.563 I llama_new_context_with_model: graph nodes  = 601
0.00.694.564 I llama_new_context_with_model: graph splits = 1
0.00.694.580 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.314.900 I main: llama threadpool init, n_threads = 4
0.01.314.911 I 
0.01.315.005 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.315.009 I 
0.01.315.170 I sampler seed: 475898966
0.01.315.182 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.315.190 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.315.191 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably.

I am unable to access the provided text. Therefore, I am unable to extract the requested information. [end of text]


0.11.947.885 I llama_perf_sampler_print:    sampling time =      38.41 ms /    26 runs   (    1.48 ms per token,   676.94 tokens per second)
0.11.947.888 I llama_perf_context_print:        load time =    1311.91 ms
0.11.947.890 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.947.893 I llama_perf_context_print:        eval time =   10568.25 ms /    25 runs   (  422.73 ms per token,     2.37 tokens per second)
0.11.947.905 I llama_perf_context_print:       total time =   10632.99 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.660 I build: 3758 (e1ad8fdd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.885 I main: llama backend init
0.00.002.825 I main: load the model and apply lora adapter, if any
0.00.024.941 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.132 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.220 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.231 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.232 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.236 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.238 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.239 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.239 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.240 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.241 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.248 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.249 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.250 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.251 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.252 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.668 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.214 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.668 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.677 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.678 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.679 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.680 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.681 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.682 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.685 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.686 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.687 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.688 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.196.689 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.697 I llama_model_loader: - type  f32:   37 tensors
0.00.196.702 I llama_model_loader: - type q8_0:  127 tensors
0.00.486.648 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.487.666 I llm_load_vocab: special tokens cache size = 5
0.00.551.853 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.551.914 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.551.914 I llm_load_print_meta: arch             = gemma
0.00.551.915 I llm_load_print_meta: vocab type       = SPM
0.00.551.916 I llm_load_print_meta: n_vocab          = 256000
0.00.551.927 I llm_load_print_meta: n_merges         = 0
0.00.551.927 I llm_load_print_meta: vocab_only       = 0
0.00.551.928 I llm_load_print_meta: n_ctx_train      = 8192
0.00.551.928 I llm_load_print_meta: n_embd           = 2048
0.00.551.929 I llm_load_print_meta: n_layer          = 18
0.00.551.966 I llm_load_print_meta: n_head           = 8
0.00.551.973 I llm_load_print_meta: n_head_kv        = 1
0.00.551.973 I llm_load_print_meta: n_rot            = 256
0.00.551.974 I llm_load_print_meta: n_swa            = 0
0.00.551.974 I llm_load_print_meta: n_embd_head_k    = 256
0.00.551.975 I llm_load_print_meta: n_embd_head_v    = 256
0.00.551.979 I llm_load_print_meta: n_gqa            = 8
0.00.551.984 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.551.990 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.551.991 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.551.993 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.551.993 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.551.994 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.551.994 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.551.999 I llm_load_print_meta: n_ff             = 16384
0.00.551.999 I llm_load_print_meta: n_expert         = 0
0.00.552.000 I llm_load_print_meta: n_expert_used    = 0
0.00.552.000 I llm_load_print_meta: causal attn      = 1
0.00.552.000 I llm_load_print_meta: pooling type     = 0
0.00.552.001 I llm_load_print_meta: rope type        = 2
0.00.552.001 I llm_load_print_meta: rope scaling     = linear
0.00.552.003 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.552.004 I llm_load_print_meta: freq_scale_train = 1
0.00.552.004 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.552.004 I llm_load_print_meta: rope_finetuned   = unknown
0.00.552.005 I llm_load_print_meta: ssm_d_conv       = 0
0.00.552.005 I llm_load_print_meta: ssm_d_inner      = 0
0.00.552.005 I llm_load_print_meta: ssm_d_state      = 0
0.00.552.005 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.552.006 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.552.006 I llm_load_print_meta: model type       = 2B
0.00.552.007 I llm_load_print_meta: model ftype      = Q8_0
0.00.552.008 I llm_load_print_meta: model params     = 2.51 B
0.00.552.009 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.552.009 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.552.010 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.552.010 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.552.010 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.552.011 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.552.012 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.552.013 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.552.013 I llm_load_print_meta: max token length = 93
0.00.552.195 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.629.250 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.629.261 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.629.262 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.629.263 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.629.264 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.629.264 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.634.926 I llama_new_context_with_model: n_ctx      = 8192
0.00.634.933 I llama_new_context_with_model: n_batch    = 2048
0.00.634.934 I llama_new_context_with_model: n_ubatch   = 512
0.00.634.934 I llama_new_context_with_model: flash_attn = 0
0.00.634.936 I llama_new_context_with_model: freq_base  = 10000.0
0.00.634.937 I llama_new_context_with_model: freq_scale = 1
0.00.664.120 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.664.163 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.664.276 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.665.641 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.665.648 I llama_new_context_with_model: graph nodes  = 601
0.00.665.648 I llama_new_context_with_model: graph splits = 1
0.00.665.664 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.278.188 I main: llama threadpool init, n_threads = 4
0.01.278.199 I 
0.01.278.295 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.278.300 I 
0.01.278.461 I sampler seed: 906643972
0.01.278.472 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.278.477 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.278.478 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increadibly, with the intensity of a supernova exploding star. [end of text]


0.06.734.924 I llama_perf_sampler_print:    sampling time =      20.07 ms /    14 runs   (    1.43 ms per token,   697.38 tokens per second)
0.06.734.927 I llama_perf_context_print:        load time =    1275.28 ms
0.06.734.929 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.734.930 I llama_perf_context_print:        eval time =    5422.05 ms /    13 runs   (  417.08 ms per token,     2.40 tokens per second)
0.06.734.931 I llama_perf_context_print:       total time =    5456.75 ms /    14 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.694 I build: 3758 (e1ad8fdd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.898 I main: llama backend init
0.00.002.839 I main: load the model and apply lora adapter, if any
0.00.024.909 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.109 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.202 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.215 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.216 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.220 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.224 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.225 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.226 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.227 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.228 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.235 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.236 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.238 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.239 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.240 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.558 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.483 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.646 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.655 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.656 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.657 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.657 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.659 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.659 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.663 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.664 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.665 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.665 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.196.666 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.675 I llama_model_loader: - type  f32:   37 tensors
0.00.196.679 I llama_model_loader: - type q8_0:  127 tensors
0.00.517.076 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.518.117 I llm_load_vocab: special tokens cache size = 5
0.00.580.846 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.580.909 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.580.910 I llm_load_print_meta: arch             = gemma
0.00.580.911 I llm_load_print_meta: vocab type       = SPM
0.00.580.912 I llm_load_print_meta: n_vocab          = 256000
0.00.580.914 I llm_load_print_meta: n_merges         = 0
0.00.580.915 I llm_load_print_meta: vocab_only       = 0
0.00.580.915 I llm_load_print_meta: n_ctx_train      = 8192
0.00.580.916 I llm_load_print_meta: n_embd           = 2048
0.00.580.916 I llm_load_print_meta: n_layer          = 18
0.00.580.952 I llm_load_print_meta: n_head           = 8
0.00.580.959 I llm_load_print_meta: n_head_kv        = 1
0.00.580.960 I llm_load_print_meta: n_rot            = 256
0.00.580.960 I llm_load_print_meta: n_swa            = 0
0.00.580.961 I llm_load_print_meta: n_embd_head_k    = 256
0.00.580.961 I llm_load_print_meta: n_embd_head_v    = 256
0.00.580.966 I llm_load_print_meta: n_gqa            = 8
0.00.580.970 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.580.975 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.580.976 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.580.977 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.580.978 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.580.978 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.580.979 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.580.984 I llm_load_print_meta: n_ff             = 16384
0.00.580.984 I llm_load_print_meta: n_expert         = 0
0.00.580.984 I llm_load_print_meta: n_expert_used    = 0
0.00.580.985 I llm_load_print_meta: causal attn      = 1
0.00.580.985 I llm_load_print_meta: pooling type     = 0
0.00.580.986 I llm_load_print_meta: rope type        = 2
0.00.580.987 I llm_load_print_meta: rope scaling     = linear
0.00.580.988 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.580.989 I llm_load_print_meta: freq_scale_train = 1
0.00.580.989 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.580.989 I llm_load_print_meta: rope_finetuned   = unknown
0.00.580.990 I llm_load_print_meta: ssm_d_conv       = 0
0.00.580.990 I llm_load_print_meta: ssm_d_inner      = 0
0.00.580.990 I llm_load_print_meta: ssm_d_state      = 0
0.00.580.991 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.580.991 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.580.991 I llm_load_print_meta: model type       = 2B
0.00.580.992 I llm_load_print_meta: model ftype      = Q8_0
0.00.580.993 I llm_load_print_meta: model params     = 2.51 B
0.00.580.994 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.580.994 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.580.995 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.580.995 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.580.996 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.580.996 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.580.997 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.580.997 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.580.998 I llm_load_print_meta: max token length = 93
0.00.581.170 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.652.283 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.652.291 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.658.032 I llama_new_context_with_model: n_ctx      = 8192
0.00.658.040 I llama_new_context_with_model: n_batch    = 2048
0.00.658.041 I llama_new_context_with_model: n_ubatch   = 512
0.00.658.042 I llama_new_context_with_model: flash_attn = 0
0.00.658.045 I llama_new_context_with_model: freq_base  = 10000.0
0.00.658.046 I llama_new_context_with_model: freq_scale = 1
0.00.688.622 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.688.671 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.688.786 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.690.156 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.690.163 I llama_new_context_with_model: graph nodes  = 601
0.00.690.163 I llama_new_context_with_model: graph splits = 1
0.00.690.179 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.301.836 I main: llama threadpool init, n_threads = 4
0.01.301.848 I 
0.01.301.934 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.301.937 I 
0.01.302.085 I sampler seed: 1102179679
0.01.302.095 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.302.100 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.302.100 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities. [end of text]


0.02.985.025 I llama_perf_sampler_print:    sampling time =       6.27 ms /     5 runs   (    1.25 ms per token,   797.96 tokens per second)
0.02.985.029 I llama_perf_context_print:        load time =    1298.91 ms
0.02.985.030 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.985.032 I llama_perf_context_print:        eval time =    1670.22 ms /     4 runs   (  417.56 ms per token,     2.39 tokens per second)
0.02.985.032 I llama_perf_context_print:       total time =    1683.20 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m37.868s
user	1m43.900s
sys	0m9.568s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3758 (e1ad8fdd)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199859.68 ms
main:    total time = 199859.68 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.563 I build: 3758 (e1ad8fdd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.758 I main: llama backend init
0.00.002.718 I main: load the model and apply lora adapter, if any
0.00.024.548 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.743 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.839 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.852 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.853 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.858 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.861 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.862 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.863 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.864 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.864 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.872 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.872 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.873 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.874 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.875 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.551 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.408 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.642 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.650 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.651 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.652 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.653 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.654 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.655 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.658 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.659 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.659 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.660 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.661 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.671 I llama_model_loader: - type  f32:   37 tensors
0.00.196.675 I llama_model_loader: - type q4_K:  108 tensors
0.00.196.675 I llama_model_loader: - type q6_K:   19 tensors
0.00.499.654 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.500.716 I llm_load_vocab: special tokens cache size = 5
0.00.559.508 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.559.567 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.559.568 I llm_load_print_meta: arch             = gemma
0.00.559.569 I llm_load_print_meta: vocab type       = SPM
0.00.559.570 I llm_load_print_meta: n_vocab          = 256000
0.00.559.572 I llm_load_print_meta: n_merges         = 0
0.00.559.573 I llm_load_print_meta: vocab_only       = 0
0.00.559.573 I llm_load_print_meta: n_ctx_train      = 8192
0.00.559.574 I llm_load_print_meta: n_embd           = 2048
0.00.559.574 I llm_load_print_meta: n_layer          = 18
0.00.559.609 I llm_load_print_meta: n_head           = 8
0.00.559.616 I llm_load_print_meta: n_head_kv        = 1
0.00.559.617 I llm_load_print_meta: n_rot            = 256
0.00.559.617 I llm_load_print_meta: n_swa            = 0
0.00.559.618 I llm_load_print_meta: n_embd_head_k    = 256
0.00.559.618 I llm_load_print_meta: n_embd_head_v    = 256
0.00.559.623 I llm_load_print_meta: n_gqa            = 8
0.00.559.628 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.559.633 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.559.634 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.559.635 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.559.636 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.559.636 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.559.636 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.559.641 I llm_load_print_meta: n_ff             = 16384
0.00.559.641 I llm_load_print_meta: n_expert         = 0
0.00.559.642 I llm_load_print_meta: n_expert_used    = 0
0.00.559.642 I llm_load_print_meta: causal attn      = 1
0.00.559.642 I llm_load_print_meta: pooling type     = 0
0.00.559.643 I llm_load_print_meta: rope type        = 2
0.00.559.643 I llm_load_print_meta: rope scaling     = linear
0.00.559.645 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.559.645 I llm_load_print_meta: freq_scale_train = 1
0.00.559.646 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.559.646 I llm_load_print_meta: rope_finetuned   = unknown
0.00.559.646 I llm_load_print_meta: ssm_d_conv       = 0
0.00.559.647 I llm_load_print_meta: ssm_d_inner      = 0
0.00.559.647 I llm_load_print_meta: ssm_d_state      = 0
0.00.559.647 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.559.648 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.559.648 I llm_load_print_meta: model type       = 2B
0.00.559.649 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.559.650 I llm_load_print_meta: model params     = 2.51 B
0.00.559.651 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.559.651 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.559.652 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.559.652 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.559.653 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.559.653 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.559.654 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.559.654 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.559.654 I llm_load_print_meta: max token length = 93
0.00.559.828 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.619.789 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.619.799 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.619.800 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.619.801 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.619.802 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.619.802 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.625.496 I llama_new_context_with_model: n_ctx      = 8192
0.00.625.506 I llama_new_context_with_model: n_batch    = 2048
0.00.625.506 I llama_new_context_with_model: n_ubatch   = 512
0.00.625.507 I llama_new_context_with_model: flash_attn = 0
0.00.625.511 I llama_new_context_with_model: freq_base  = 10000.0
0.00.625.512 I llama_new_context_with_model: freq_scale = 1
0.00.656.208 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.656.250 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.656.364 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.657.776 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.657.782 I llama_new_context_with_model: graph nodes  = 601
0.00.657.783 I llama_new_context_with_model: graph splits = 1
0.00.657.799 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.234.900 I main: llama threadpool init, n_threads = 4
0.01.234.912 I 
0.01.235.002 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.235.006 I 
0.01.235.157 I sampler seed: 1616134345
0.01.235.168 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.235.173 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.235.174 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconded.

**Assistant**

I understand. I will ensure to follow your instructions and provide the best possible assistance. Please provide me with more information about

0.12.189.917 I llama_perf_sampler_print:    sampling time =      49.15 ms /    33 runs   (    1.49 ms per token,   671.47 tokens per second)
0.12.189.921 I llama_perf_context_print:        load time =    1232.11 ms
0.12.189.933 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.189.935 I llama_perf_context_print:        eval time =   10872.42 ms /    32 runs   (  339.76 ms per token,     2.94 tokens per second)
0.12.189.936 I llama_perf_context_print:       total time =   10955.03 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3758 (e1ad8fdd)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200158.87 ms
main:    total time = 200158.87 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.706 I build: 3758 (e1ad8fdd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.934 I main: llama backend init
0.00.002.883 I main: load the model and apply lora adapter, if any
0.00.025.292 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.395 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.412 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.416 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.420 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.421 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.422 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.423 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.424 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.424 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.432 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.434 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.434 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.444 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.454 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.225 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.970 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.078 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.089 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.090 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.091 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.092 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.093 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.094 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.097 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.098 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.107 I llama_model_loader: - type  f32:   37 tensors
0.00.197.112 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.112 I llama_model_loader: - type q6_K:   19 tensors
0.00.505.539 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.614 I llm_load_vocab: special tokens cache size = 5
0.00.565.337 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.565.399 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.565.400 I llm_load_print_meta: arch             = gemma
0.00.565.402 I llm_load_print_meta: vocab type       = SPM
0.00.565.403 I llm_load_print_meta: n_vocab          = 256000
0.00.565.405 I llm_load_print_meta: n_merges         = 0
0.00.565.406 I llm_load_print_meta: vocab_only       = 0
0.00.565.406 I llm_load_print_meta: n_ctx_train      = 8192
0.00.565.407 I llm_load_print_meta: n_embd           = 2048
0.00.565.407 I llm_load_print_meta: n_layer          = 18
0.00.565.447 I llm_load_print_meta: n_head           = 8
0.00.565.455 I llm_load_print_meta: n_head_kv        = 1
0.00.565.455 I llm_load_print_meta: n_rot            = 256
0.00.565.456 I llm_load_print_meta: n_swa            = 0
0.00.565.456 I llm_load_print_meta: n_embd_head_k    = 256
0.00.565.456 I llm_load_print_meta: n_embd_head_v    = 256
0.00.565.461 I llm_load_print_meta: n_gqa            = 8
0.00.565.465 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.565.470 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.565.472 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.565.473 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.565.473 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.565.474 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.565.474 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.565.497 I llm_load_print_meta: n_ff             = 16384
0.00.565.498 I llm_load_print_meta: n_expert         = 0
0.00.565.498 I llm_load_print_meta: n_expert_used    = 0
0.00.565.499 I llm_load_print_meta: causal attn      = 1
0.00.565.499 I llm_load_print_meta: pooling type     = 0
0.00.565.499 I llm_load_print_meta: rope type        = 2
0.00.565.500 I llm_load_print_meta: rope scaling     = linear
0.00.565.502 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.565.502 I llm_load_print_meta: freq_scale_train = 1
0.00.565.503 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.565.503 I llm_load_print_meta: rope_finetuned   = unknown
0.00.565.504 I llm_load_print_meta: ssm_d_conv       = 0
0.00.565.504 I llm_load_print_meta: ssm_d_inner      = 0
0.00.565.505 I llm_load_print_meta: ssm_d_state      = 0
0.00.565.505 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.565.505 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.565.506 I llm_load_print_meta: model type       = 2B
0.00.565.507 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.565.507 I llm_load_print_meta: model params     = 2.51 B
0.00.565.508 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.565.508 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.565.509 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.565.510 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.565.510 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.565.511 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.565.511 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.565.512 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.565.512 I llm_load_print_meta: max token length = 93
0.00.565.707 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.622.075 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.627.703 I llama_new_context_with_model: n_ctx      = 8192
0.00.627.712 I llama_new_context_with_model: n_batch    = 2048
0.00.627.712 I llama_new_context_with_model: n_ubatch   = 512
0.00.627.713 I llama_new_context_with_model: flash_attn = 0
0.00.627.717 I llama_new_context_with_model: freq_base  = 10000.0
0.00.627.718 I llama_new_context_with_model: freq_scale = 1
0.00.658.659 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.658.707 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.658.823 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.660.222 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.660.229 I llama_new_context_with_model: graph nodes  = 601
0.00.660.229 I llama_new_context_with_model: graph splits = 1
0.00.660.246 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.235.790 I main: llama threadpool init, n_threads = 4
0.01.235.802 I 
0.01.235.896 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.235.899 I 
0.01.236.050 I sampler seed: 2580810462
0.01.236.061 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.236.067 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.236.067 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 strickchen:

**In the beginning was the Word, and the Word was with God, and the Word was God.**

This statement suggests a divine relationship

0.12.074.435 I llama_perf_sampler_print:    sampling time =      49.20 ms /    33 runs   (    1.49 ms per token,   670.76 tokens per second)
0.12.074.439 I llama_perf_context_print:        load time =    1232.82 ms
0.12.074.452 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.074.454 I llama_perf_context_print:        eval time =   10756.46 ms /    32 runs   (  336.14 ms per token,     2.97 tokens per second)
0.12.074.456 I llama_perf_context_print:       total time =   10838.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m7.104s
user	50m22.105s
sys	0m6.529s
