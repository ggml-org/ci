+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.533 I build: 4369 (e1fc07a9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.704 I main: llama backend init
0.00.000.712 I main: load the model and apply lora adapter, if any
0.00.021.007 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.016 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.023 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.028 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.030 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.034 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.035 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.037 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.038 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.038 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.039 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.044 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.044 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.045 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.045 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.046 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.345 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.853 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.719 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.725 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.726 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.727 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.727 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.728 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.729 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.731 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.731 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.732 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.734 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.734 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.738 I llama_model_loader: - type  f32:   37 tensors
0.00.130.740 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.225 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.266.674 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.267.408 I llm_load_vocab: special tokens cache size = 5
0.00.288.755 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.288.776 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.288.777 I llm_load_print_meta: arch             = gemma
0.00.288.778 I llm_load_print_meta: vocab type       = SPM
0.00.288.779 I llm_load_print_meta: n_vocab          = 256000
0.00.288.779 I llm_load_print_meta: n_merges         = 0
0.00.288.780 I llm_load_print_meta: vocab_only       = 0
0.00.288.780 I llm_load_print_meta: n_ctx_train      = 8192
0.00.288.780 I llm_load_print_meta: n_embd           = 2048
0.00.288.780 I llm_load_print_meta: n_layer          = 18
0.00.288.791 I llm_load_print_meta: n_head           = 8
0.00.288.792 I llm_load_print_meta: n_head_kv        = 1
0.00.288.792 I llm_load_print_meta: n_rot            = 256
0.00.288.792 I llm_load_print_meta: n_swa            = 0
0.00.288.793 I llm_load_print_meta: n_embd_head_k    = 256
0.00.288.793 I llm_load_print_meta: n_embd_head_v    = 256
0.00.288.794 I llm_load_print_meta: n_gqa            = 8
0.00.288.795 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.288.796 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.288.796 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.288.798 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.288.798 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.288.799 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.288.799 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.288.800 I llm_load_print_meta: n_ff             = 16384
0.00.288.800 I llm_load_print_meta: n_expert         = 0
0.00.288.801 I llm_load_print_meta: n_expert_used    = 0
0.00.288.801 I llm_load_print_meta: causal attn      = 1
0.00.288.801 I llm_load_print_meta: pooling type     = 0
0.00.288.802 I llm_load_print_meta: rope type        = 2
0.00.288.802 I llm_load_print_meta: rope scaling     = linear
0.00.288.804 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.288.804 I llm_load_print_meta: freq_scale_train = 1
0.00.288.804 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.288.805 I llm_load_print_meta: rope_finetuned   = unknown
0.00.288.805 I llm_load_print_meta: ssm_d_conv       = 0
0.00.288.805 I llm_load_print_meta: ssm_d_inner      = 0
0.00.288.806 I llm_load_print_meta: ssm_d_state      = 0
0.00.288.806 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.288.806 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.288.807 I llm_load_print_meta: model type       = 2B
0.00.288.808 I llm_load_print_meta: model ftype      = Q8_0
0.00.288.809 I llm_load_print_meta: model params     = 2.51 B
0.00.288.810 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.288.810 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.288.811 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.288.811 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.288.812 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.288.812 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.288.812 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.288.813 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.288.813 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.288.813 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.288.814 I llm_load_print_meta: max token length = 93
0.00.390.055 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.390.063 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.390.063 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.390.064 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.390.065 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.390.065 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.395.246 I llama_new_context_with_model: n_seq_max     = 1
0.00.395.253 I llama_new_context_with_model: n_ctx         = 4096
0.00.395.253 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.395.254 I llama_new_context_with_model: n_batch       = 2048
0.00.395.254 I llama_new_context_with_model: n_ubatch      = 512
0.00.395.255 I llama_new_context_with_model: flash_attn    = 0
0.00.395.257 I llama_new_context_with_model: freq_base     = 10000.0
0.00.395.258 I llama_new_context_with_model: freq_scale    = 1
0.00.395.259 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.395.279 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.409.569 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.409.584 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.409.674 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.410.930 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.410.935 I llama_new_context_with_model: graph nodes  = 601
0.00.410.935 I llama_new_context_with_model: graph splits = 1
0.00.410.939 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.410.939 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.496.881 I main: llama threadpool init, n_threads = 4
0.00.496.898 I 
0.00.496.976 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.496.980 I 
0.00.497.013 I sampler seed: 449458222
0.00.497.025 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.497.037 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.497.040 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.497.040 I 
 maneuvring.

I have a large dataset with a large number of features and I want to explore the relationships between features and target variables. However, dealing

0.02.759.881 I llama_perf_sampler_print:    sampling time =       5.03 ms /    33 runs   (    0.15 ms per token,  6565.86 tokens per second)
0.02.759.884 I llama_perf_context_print:        load time =     496.15 ms
0.02.759.885 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.759.886 I llama_perf_context_print:        eval time =    2243.31 ms /    32 runs   (   70.10 ms per token,    14.26 tokens per second)
0.02.759.887 I llama_perf_context_print:       total time =    2263.01 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.538 I build: 4369 (e1fc07a9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.741 I main: llama backend init
0.00.000.747 I main: load the model and apply lora adapter, if any
0.00.021.250 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.268 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.275 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.276 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.280 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.280 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.281 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.282 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.282 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.283 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.287 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.287 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.288 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.288 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.289 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.664 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.955 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.812 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.818 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.819 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.820 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.820 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.821 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.821 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.824 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.824 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.825 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.827 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.828 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.832 I llama_model_loader: - type  f32:   37 tensors
0.00.131.833 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.893 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.640 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.287 I llm_load_vocab: special tokens cache size = 5
0.00.281.320 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.337 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.339 I llm_load_print_meta: arch             = gemma
0.00.281.339 I llm_load_print_meta: vocab type       = SPM
0.00.281.340 I llm_load_print_meta: n_vocab          = 256000
0.00.281.340 I llm_load_print_meta: n_merges         = 0
0.00.281.341 I llm_load_print_meta: vocab_only       = 0
0.00.281.341 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.341 I llm_load_print_meta: n_embd           = 2048
0.00.281.342 I llm_load_print_meta: n_layer          = 18
0.00.281.354 I llm_load_print_meta: n_head           = 8
0.00.281.355 I llm_load_print_meta: n_head_kv        = 1
0.00.281.355 I llm_load_print_meta: n_rot            = 256
0.00.281.356 I llm_load_print_meta: n_swa            = 0
0.00.281.356 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.356 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.357 I llm_load_print_meta: n_gqa            = 8
0.00.281.358 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.359 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.360 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.361 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.361 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.362 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.362 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.363 I llm_load_print_meta: n_ff             = 16384
0.00.281.363 I llm_load_print_meta: n_expert         = 0
0.00.281.364 I llm_load_print_meta: n_expert_used    = 0
0.00.281.364 I llm_load_print_meta: causal attn      = 1
0.00.281.364 I llm_load_print_meta: pooling type     = 0
0.00.281.365 I llm_load_print_meta: rope type        = 2
0.00.281.365 I llm_load_print_meta: rope scaling     = linear
0.00.281.366 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.367 I llm_load_print_meta: freq_scale_train = 1
0.00.281.367 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.368 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.368 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.368 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.368 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.368 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.369 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.370 I llm_load_print_meta: model type       = 2B
0.00.281.371 I llm_load_print_meta: model ftype      = Q8_0
0.00.281.372 I llm_load_print_meta: model params     = 2.51 B
0.00.281.373 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.281.373 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.373 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.374 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.374 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.374 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.375 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.375 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.375 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.376 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.376 I llm_load_print_meta: max token length = 93
0.00.376.478 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.381.825 I llama_new_context_with_model: n_seq_max     = 1
0.00.381.833 I llama_new_context_with_model: n_ctx         = 4096
0.00.381.834 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.381.834 I llama_new_context_with_model: n_batch       = 2048
0.00.381.835 I llama_new_context_with_model: n_ubatch      = 512
0.00.381.835 I llama_new_context_with_model: flash_attn    = 0
0.00.381.838 I llama_new_context_with_model: freq_base     = 10000.0
0.00.381.840 I llama_new_context_with_model: freq_scale    = 1
0.00.381.841 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.381.866 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.398.078 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.398.095 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.398.192 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.399.488 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.399.495 I llama_new_context_with_model: graph nodes  = 601
0.00.399.495 I llama_new_context_with_model: graph splits = 1
0.00.399.498 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.399.499 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.484.423 I main: llama threadpool init, n_threads = 4
0.00.484.439 I 
0.00.484.514 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.484.517 I 
0.00.484.550 I sampler seed: 4019545209
0.00.484.561 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.484.564 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.484.565 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.484.565 I 
 increasities. 

The underlined words are incorrect.

The correct sentence is:

The underlined words are incorrect.

The correct version of the sentence is

0.02.693.804 I llama_perf_sampler_print:    sampling time =       4.91 ms /    33 runs   (    0.15 ms per token,  6723.72 tokens per second)
0.02.693.807 I llama_perf_context_print:        load time =     483.66 ms
0.02.693.808 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.693.809 I llama_perf_context_print:        eval time =    2189.91 ms /    32 runs   (   68.43 ms per token,    14.61 tokens per second)
0.02.693.810 I llama_perf_context_print:       total time =    2209.39 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.556 I build: 4369 (e1fc07a9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.754 I main: llama backend init
0.00.000.760 I main: load the model and apply lora adapter, if any
0.00.021.358 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.368 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.375 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.380 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.381 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.385 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.385 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.386 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.387 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.387 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.387 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.391 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.392 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.392 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.393 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.393 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.059 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.221 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.096 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.102 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.103 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.104 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.104 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.105 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.106 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.108 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.109 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.110 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.110 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.111 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.115 I llama_model_loader: - type  f32:   37 tensors
0.00.132.116 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.395 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.323 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.858 I llm_load_vocab: special tokens cache size = 5
0.00.278.713 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.729 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.730 I llm_load_print_meta: arch             = gemma
0.00.278.731 I llm_load_print_meta: vocab type       = SPM
0.00.278.731 I llm_load_print_meta: n_vocab          = 256000
0.00.278.732 I llm_load_print_meta: n_merges         = 0
0.00.278.732 I llm_load_print_meta: vocab_only       = 0
0.00.278.732 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.733 I llm_load_print_meta: n_embd           = 2048
0.00.278.733 I llm_load_print_meta: n_layer          = 18
0.00.278.745 I llm_load_print_meta: n_head           = 8
0.00.278.745 I llm_load_print_meta: n_head_kv        = 1
0.00.278.746 I llm_load_print_meta: n_rot            = 256
0.00.278.746 I llm_load_print_meta: n_swa            = 0
0.00.278.746 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.746 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.747 I llm_load_print_meta: n_gqa            = 8
0.00.278.749 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.749 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.750 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.752 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.752 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.753 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.753 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.754 I llm_load_print_meta: n_ff             = 16384
0.00.278.754 I llm_load_print_meta: n_expert         = 0
0.00.278.755 I llm_load_print_meta: n_expert_used    = 0
0.00.278.755 I llm_load_print_meta: causal attn      = 1
0.00.278.755 I llm_load_print_meta: pooling type     = 0
0.00.278.755 I llm_load_print_meta: rope type        = 2
0.00.278.756 I llm_load_print_meta: rope scaling     = linear
0.00.278.757 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.758 I llm_load_print_meta: freq_scale_train = 1
0.00.278.758 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.758 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.758 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.759 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.759 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.759 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.759 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.760 I llm_load_print_meta: model type       = 2B
0.00.278.762 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.763 I llm_load_print_meta: model params     = 2.51 B
0.00.278.763 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.764 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.764 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.764 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.765 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.765 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.765 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.766 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.766 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.767 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.767 I llm_load_print_meta: max token length = 93
0.00.356.858 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.356.864 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.356.865 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.356.866 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.356.866 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.356.867 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.362.141 I llama_new_context_with_model: n_seq_max     = 1
0.00.362.147 I llama_new_context_with_model: n_ctx         = 4096
0.00.362.148 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.362.148 I llama_new_context_with_model: n_batch       = 2048
0.00.362.149 I llama_new_context_with_model: n_ubatch      = 512
0.00.362.149 I llama_new_context_with_model: flash_attn    = 0
0.00.362.152 I llama_new_context_with_model: freq_base     = 10000.0
0.00.362.153 I llama_new_context_with_model: freq_scale    = 1
0.00.362.154 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.175 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.376.801 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.376.813 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.376.902 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.378.091 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.378.096 I llama_new_context_with_model: graph nodes  = 601
0.00.378.097 I llama_new_context_with_model: graph splits = 1
0.00.378.099 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.378.099 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.947 I main: llama threadpool init, n_threads = 4
0.00.463.961 I 
0.00.464.034 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.464.037 I 
0.00.464.069 I sampler seed: 3163798018
0.00.464.079 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.082 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.082 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.083 I 
 increadibly.

I am unable to determine the cause of your error as I do not have access to your code and environment.

**Possible Causes of Error

0.02.735.166 I llama_perf_sampler_print:    sampling time =       4.78 ms /    33 runs   (    0.14 ms per token,  6910.99 tokens per second)
0.02.735.169 I llama_perf_context_print:        load time =     463.17 ms
0.02.735.170 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.735.172 I llama_perf_context_print:        eval time =    2252.32 ms /    32 runs   (   70.39 ms per token,    14.21 tokens per second)
0.02.735.173 I llama_perf_context_print:       total time =    2271.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.574 I build: 4369 (e1fc07a9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.769 I main: llama backend init
0.00.000.777 I main: load the model and apply lora adapter, if any
0.00.021.056 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.067 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.074 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.080 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.081 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.085 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.085 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.086 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.087 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.088 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.088 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.093 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.093 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.094 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.095 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.095 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.487 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.925 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.763 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.769 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.770 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.771 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.771 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.773 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.773 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.776 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.776 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.777 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.778 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.779 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.783 I llama_model_loader: - type  f32:   37 tensors
0.00.131.784 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.903 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.741 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.292 I llm_load_vocab: special tokens cache size = 5
0.00.279.466 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.484 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.486 I llm_load_print_meta: arch             = gemma
0.00.279.486 I llm_load_print_meta: vocab type       = SPM
0.00.279.487 I llm_load_print_meta: n_vocab          = 256000
0.00.279.487 I llm_load_print_meta: n_merges         = 0
0.00.279.488 I llm_load_print_meta: vocab_only       = 0
0.00.279.488 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.488 I llm_load_print_meta: n_embd           = 2048
0.00.279.489 I llm_load_print_meta: n_layer          = 18
0.00.279.502 I llm_load_print_meta: n_head           = 8
0.00.279.503 I llm_load_print_meta: n_head_kv        = 1
0.00.279.504 I llm_load_print_meta: n_rot            = 256
0.00.279.505 I llm_load_print_meta: n_swa            = 0
0.00.279.505 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.506 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.507 I llm_load_print_meta: n_gqa            = 8
0.00.279.508 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.509 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.510 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.511 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.512 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.512 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.513 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.515 I llm_load_print_meta: n_ff             = 16384
0.00.279.516 I llm_load_print_meta: n_expert         = 0
0.00.279.516 I llm_load_print_meta: n_expert_used    = 0
0.00.279.516 I llm_load_print_meta: causal attn      = 1
0.00.279.517 I llm_load_print_meta: pooling type     = 0
0.00.279.517 I llm_load_print_meta: rope type        = 2
0.00.279.517 I llm_load_print_meta: rope scaling     = linear
0.00.279.519 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.520 I llm_load_print_meta: freq_scale_train = 1
0.00.279.520 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.521 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.521 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.522 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.522 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.522 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.523 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.523 I llm_load_print_meta: model type       = 2B
0.00.279.525 I llm_load_print_meta: model ftype      = Q8_0
0.00.279.526 I llm_load_print_meta: model params     = 2.51 B
0.00.279.527 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.279.528 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.528 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.529 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.529 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.529 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.530 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.530 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.531 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.531 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.532 I llm_load_print_meta: max token length = 93
0.00.350.414 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.350.423 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.355.755 I llama_new_context_with_model: n_seq_max     = 1
0.00.355.762 I llama_new_context_with_model: n_ctx         = 4096
0.00.355.762 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.355.763 I llama_new_context_with_model: n_batch       = 2048
0.00.355.763 I llama_new_context_with_model: n_ubatch      = 512
0.00.355.764 I llama_new_context_with_model: flash_attn    = 0
0.00.355.767 I llama_new_context_with_model: freq_base     = 10000.0
0.00.355.768 I llama_new_context_with_model: freq_scale    = 1
0.00.355.771 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.795 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.371.498 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.371.512 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.371.611 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.372.889 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.372.895 I llama_new_context_with_model: graph nodes  = 601
0.00.372.896 I llama_new_context_with_model: graph splits = 1
0.00.372.898 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.372.898 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.462.497 I main: llama threadpool init, n_threads = 4
0.00.462.513 I 
0.00.462.587 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.462.591 I 
0.00.462.624 I sampler seed: 2494414642
0.00.462.636 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.647 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.462.651 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.651 I 
 increasities in the following context:

**1. A man who is a habitual gambler, loses all his money in a single day due to unforeseen circumstances.**

0.02.897.110 I llama_perf_sampler_print:    sampling time =       4.94 ms /    33 runs   (    0.15 ms per token,  6677.46 tokens per second)
0.02.897.112 I llama_perf_context_print:        load time =     461.70 ms
0.02.897.114 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.897.116 I llama_perf_context_print:        eval time =    2414.54 ms /    32 runs   (   75.45 ms per token,    13.25 tokens per second)
0.02.897.116 I llama_perf_context_print:       total time =    2434.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.677s
user	0m39.623s
sys	0m9.483s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4369 (e1fc07a9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40269.92 ms
main:    total time = 40269.92 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.543 I build: 4369 (e1fc07a9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.754 I main: llama backend init
0.00.000.760 I main: load the model and apply lora adapter, if any
0.00.021.315 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.326 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.335 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.340 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.341 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.345 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.346 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.347 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.347 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.348 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.349 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.354 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.354 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.355 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.356 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.356 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.118 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.015 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.874 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.880 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.881 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.882 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.882 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.883 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.884 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.887 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.887 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.888 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.890 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.890 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.893 I llama_model_loader: - type  f32:   37 tensors
0.00.131.894 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.895 I llama_model_loader: - type q6_K:   19 tensors
0.00.209.920 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.866 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.491 I llm_load_vocab: special tokens cache size = 5
0.00.276.410 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.427 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.428 I llm_load_print_meta: arch             = gemma
0.00.276.429 I llm_load_print_meta: vocab type       = SPM
0.00.276.429 I llm_load_print_meta: n_vocab          = 256000
0.00.276.430 I llm_load_print_meta: n_merges         = 0
0.00.276.430 I llm_load_print_meta: vocab_only       = 0
0.00.276.431 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.431 I llm_load_print_meta: n_embd           = 2048
0.00.276.431 I llm_load_print_meta: n_layer          = 18
0.00.276.443 I llm_load_print_meta: n_head           = 8
0.00.276.444 I llm_load_print_meta: n_head_kv        = 1
0.00.276.444 I llm_load_print_meta: n_rot            = 256
0.00.276.444 I llm_load_print_meta: n_swa            = 0
0.00.276.445 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.445 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.446 I llm_load_print_meta: n_gqa            = 8
0.00.276.447 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.447 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.448 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.449 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.450 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.450 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.451 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.451 I llm_load_print_meta: n_ff             = 16384
0.00.276.452 I llm_load_print_meta: n_expert         = 0
0.00.276.452 I llm_load_print_meta: n_expert_used    = 0
0.00.276.452 I llm_load_print_meta: causal attn      = 1
0.00.276.452 I llm_load_print_meta: pooling type     = 0
0.00.276.453 I llm_load_print_meta: rope type        = 2
0.00.276.453 I llm_load_print_meta: rope scaling     = linear
0.00.276.454 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.455 I llm_load_print_meta: freq_scale_train = 1
0.00.276.455 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.455 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.455 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.456 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.456 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.456 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.457 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.457 I llm_load_print_meta: model type       = 2B
0.00.276.459 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.276.460 I llm_load_print_meta: model params     = 2.51 B
0.00.276.461 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.276.461 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.462 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.462 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.462 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.462 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.462 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.463 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.463 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.464 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.464 I llm_load_print_meta: max token length = 93
0.00.336.653 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.336.661 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.336.662 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.336.663 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.336.663 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.336.664 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.341.949 I llama_new_context_with_model: n_seq_max     = 1
0.00.341.956 I llama_new_context_with_model: n_ctx         = 4096
0.00.341.957 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.341.957 I llama_new_context_with_model: n_batch       = 2048
0.00.341.958 I llama_new_context_with_model: n_ubatch      = 512
0.00.341.959 I llama_new_context_with_model: flash_attn    = 0
0.00.341.961 I llama_new_context_with_model: freq_base     = 10000.0
0.00.341.962 I llama_new_context_with_model: freq_scale    = 1
0.00.341.964 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.341.984 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.356.525 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.539 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.630 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.879 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.885 I llama_new_context_with_model: graph nodes  = 601
0.00.357.886 I llama_new_context_with_model: graph splits = 1
0.00.357.888 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.357.888 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.433.679 I main: llama threadpool init, n_threads = 4
0.00.433.697 I 
0.00.433.776 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.433.779 I 
0.00.433.813 I sampler seed: 740370530
0.00.433.823 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.433.833 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.433.837 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.433.837 I 
 squaRED, a renowned law firm, has faced accusations of systemic bias and discrimination. The firm has implemented diversity and inclusion initiatives but has failed to meaningfully address the

0.02.055.408 I llama_perf_sampler_print:    sampling time =       5.25 ms /    33 runs   (    0.16 ms per token,  6290.51 tokens per second)
0.02.055.410 I llama_perf_context_print:        load time =     432.90 ms
0.02.055.411 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.055.413 I llama_perf_context_print:        eval time =    1602.48 ms /    32 runs   (   50.08 ms per token,    19.97 tokens per second)
0.02.055.413 I llama_perf_context_print:       total time =    1621.74 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4369 (e1fc07a9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40223.42 ms
main:    total time = 40223.42 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.528 I build: 4369 (e1fc07a9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.709 I main: llama backend init
0.00.000.716 I main: load the model and apply lora adapter, if any
0.00.020.969 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.984 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.990 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.992 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.995 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.998 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.999 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.999 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.000 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.001 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.005 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.005 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.006 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.009 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.009 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.183 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.810 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.664 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.670 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.671 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.672 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.672 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.673 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.674 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.676 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.677 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.681 I llama_model_loader: - type  f32:   37 tensors
0.00.130.682 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.682 I llama_model_loader: - type q6_K:   19 tensors
0.00.208.404 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.594 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.159 I llm_load_vocab: special tokens cache size = 5
0.00.272.159 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.176 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.177 I llm_load_print_meta: arch             = gemma
0.00.272.178 I llm_load_print_meta: vocab type       = SPM
0.00.272.179 I llm_load_print_meta: n_vocab          = 256000
0.00.272.179 I llm_load_print_meta: n_merges         = 0
0.00.272.179 I llm_load_print_meta: vocab_only       = 0
0.00.272.180 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.180 I llm_load_print_meta: n_embd           = 2048
0.00.272.180 I llm_load_print_meta: n_layer          = 18
0.00.272.192 I llm_load_print_meta: n_head           = 8
0.00.272.193 I llm_load_print_meta: n_head_kv        = 1
0.00.272.193 I llm_load_print_meta: n_rot            = 256
0.00.272.193 I llm_load_print_meta: n_swa            = 0
0.00.272.194 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.194 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.195 I llm_load_print_meta: n_gqa            = 8
0.00.272.196 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.197 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.198 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.199 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.200 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.200 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.200 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.201 I llm_load_print_meta: n_ff             = 16384
0.00.272.202 I llm_load_print_meta: n_expert         = 0
0.00.272.202 I llm_load_print_meta: n_expert_used    = 0
0.00.272.203 I llm_load_print_meta: causal attn      = 1
0.00.272.203 I llm_load_print_meta: pooling type     = 0
0.00.272.203 I llm_load_print_meta: rope type        = 2
0.00.272.203 I llm_load_print_meta: rope scaling     = linear
0.00.272.205 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.206 I llm_load_print_meta: freq_scale_train = 1
0.00.272.206 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.206 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.207 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.207 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.207 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.207 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.207 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.209 I llm_load_print_meta: model type       = 2B
0.00.272.210 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.272.211 I llm_load_print_meta: model params     = 2.51 B
0.00.272.212 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.272.212 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.213 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.213 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.213 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.214 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.214 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.214 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.214 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.215 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.215 I llm_load_print_meta: max token length = 93
0.00.331.277 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.336.440 I llama_new_context_with_model: n_seq_max     = 1
0.00.336.446 I llama_new_context_with_model: n_ctx         = 4096
0.00.336.447 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.336.447 I llama_new_context_with_model: n_batch       = 2048
0.00.336.448 I llama_new_context_with_model: n_ubatch      = 512
0.00.336.449 I llama_new_context_with_model: flash_attn    = 0
0.00.336.451 I llama_new_context_with_model: freq_base     = 10000.0
0.00.336.452 I llama_new_context_with_model: freq_scale    = 1
0.00.336.453 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.336.473 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.351.540 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.351.553 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.644 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.890 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.896 I llama_new_context_with_model: graph nodes  = 601
0.00.352.896 I llama_new_context_with_model: graph splits = 1
0.00.352.898 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.352.899 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.428.130 I main: llama threadpool init, n_threads = 4
0.00.428.145 I 
0.00.428.221 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.428.224 I 
0.00.428.256 I sampler seed: 470293953
0.00.428.267 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.428.272 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.428.273 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.428.273 I 
 increasities, the human body produces a variety of chemicals that can affect mood, energy, and cognitive function. One of these chemicals is cortisol, which is often

0.01.992.584 I llama_perf_sampler_print:    sampling time =       4.93 ms /    33 runs   (    0.15 ms per token,  6688.29 tokens per second)
0.01.992.586 I llama_perf_context_print:        load time =     427.40 ms
0.01.992.587 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.992.588 I llama_perf_context_print:        eval time =    1545.47 ms /    32 runs   (   48.30 ms per token,    20.71 tokens per second)
0.01.992.589 I llama_perf_context_print:       total time =    1564.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.373s
user	10m24.217s
sys	0m6.972s
