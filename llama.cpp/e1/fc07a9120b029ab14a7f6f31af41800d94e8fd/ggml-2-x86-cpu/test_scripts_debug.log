+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 4369 (e1fc07a9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.849 I main: llama backend init
0.00.000.857 I main: load the model and apply lora adapter, if any
0.00.023.369 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.379 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.464 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.476 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.478 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.484 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.487 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.488 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.490 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.491 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.493 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.498 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.500 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.501 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.503 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.505 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.896 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.887 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.166 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.177 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.179 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.180 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.181 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.183 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.184 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.189 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.190 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.191 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.192 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.352.194 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.204 I llama_model_loader: - type  f32:   37 tensors
0.00.352.206 I llama_model_loader: - type q8_0:  127 tensors
0.00.589.467 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.651.073 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.651.987 I llm_load_vocab: special tokens cache size = 5
0.00.842.735 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.842.808 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.842.815 I llm_load_print_meta: arch             = gemma
0.00.842.816 I llm_load_print_meta: vocab type       = SPM
0.00.842.817 I llm_load_print_meta: n_vocab          = 256000
0.00.842.819 I llm_load_print_meta: n_merges         = 0
0.00.842.820 I llm_load_print_meta: vocab_only       = 0
0.00.842.820 I llm_load_print_meta: n_ctx_train      = 8192
0.00.842.821 I llm_load_print_meta: n_embd           = 2048
0.00.842.821 I llm_load_print_meta: n_layer          = 18
0.00.842.884 I llm_load_print_meta: n_head           = 8
0.00.842.895 I llm_load_print_meta: n_head_kv        = 1
0.00.842.896 I llm_load_print_meta: n_rot            = 256
0.00.842.896 I llm_load_print_meta: n_swa            = 0
0.00.842.907 I llm_load_print_meta: n_embd_head_k    = 256
0.00.842.909 I llm_load_print_meta: n_embd_head_v    = 256
0.00.842.915 I llm_load_print_meta: n_gqa            = 8
0.00.842.921 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.842.926 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.842.930 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.842.931 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.842.931 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.842.932 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.842.932 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.842.937 I llm_load_print_meta: n_ff             = 16384
0.00.842.938 I llm_load_print_meta: n_expert         = 0
0.00.842.939 I llm_load_print_meta: n_expert_used    = 0
0.00.842.940 I llm_load_print_meta: causal attn      = 1
0.00.842.940 I llm_load_print_meta: pooling type     = 0
0.00.842.952 I llm_load_print_meta: rope type        = 2
0.00.842.953 I llm_load_print_meta: rope scaling     = linear
0.00.842.955 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.842.955 I llm_load_print_meta: freq_scale_train = 1
0.00.842.956 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.842.956 I llm_load_print_meta: rope_finetuned   = unknown
0.00.842.957 I llm_load_print_meta: ssm_d_conv       = 0
0.00.842.957 I llm_load_print_meta: ssm_d_inner      = 0
0.00.842.957 I llm_load_print_meta: ssm_d_state      = 0
0.00.842.958 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.842.959 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.842.959 I llm_load_print_meta: model type       = 2B
0.00.842.962 I llm_load_print_meta: model ftype      = Q8_0
0.00.842.963 I llm_load_print_meta: model params     = 2.51 B
0.00.842.964 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.842.964 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.842.965 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.842.966 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.842.966 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.842.967 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.842.967 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.842.968 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.842.974 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.842.975 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.842.976 I llm_load_print_meta: max token length = 93
0.00.945.143 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.945.152 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.945.153 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.945.153 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.945.154 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.945.155 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.951.062 I llama_new_context_with_model: n_seq_max     = 1
0.00.951.069 I llama_new_context_with_model: n_ctx         = 4096
0.00.951.069 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.951.070 I llama_new_context_with_model: n_batch       = 2048
0.00.951.070 I llama_new_context_with_model: n_ubatch      = 512
0.00.951.071 I llama_new_context_with_model: flash_attn    = 0
0.00.951.073 I llama_new_context_with_model: freq_base     = 10000.0
0.00.951.074 I llama_new_context_with_model: freq_scale    = 1
0.00.951.074 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.951.161 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.965.842 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.965.881 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.965.998 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.968.618 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.968.622 I llama_new_context_with_model: graph nodes  = 601
0.00.968.623 I llama_new_context_with_model: graph splits = 1
0.00.968.649 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.968.652 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.585.499 I main: llama threadpool init, n_threads = 4
0.01.585.516 I 
0.01.585.636 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.585.640 I 
0.01.585.874 I sampler seed: 3206339855
0.01.585.889 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.585.909 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.585.912 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.585.913 I 
 increasively.

I'm trying to understand the concept of factoring polynomials and its application in various fields.

**Understanding Factoring Polynomials:**

Fact

0.15.129.714 I llama_perf_sampler_print:    sampling time =      49.68 ms /    33 runs   (    1.51 ms per token,   664.24 tokens per second)
0.15.129.730 I llama_perf_context_print:        load time =    1584.54 ms
0.15.129.731 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.129.733 I llama_perf_context_print:        eval time =   13454.18 ms /    32 runs   (  420.44 ms per token,     2.38 tokens per second)
0.15.129.734 I llama_perf_context_print:       total time =   13544.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.674 I build: 4369 (e1fc07a9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.917 I main: llama backend init
0.00.000.926 I main: load the model and apply lora adapter, if any
0.00.023.618 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.742 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.760 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.765 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.776 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.782 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.784 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.786 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.789 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.791 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.801 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.806 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.809 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.811 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.813 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.219 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.735 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.188 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.201 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.203 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.204 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.205 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.207 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.208 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.212 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.213 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.215 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.216 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.354.218 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.227 I llama_model_loader: - type  f32:   37 tensors
0.00.354.230 I llama_model_loader: - type q8_0:  127 tensors
0.00.588.209 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.658.331 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.659.290 I llm_load_vocab: special tokens cache size = 5
0.00.851.154 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.851.236 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.851.240 I llm_load_print_meta: arch             = gemma
0.00.851.241 I llm_load_print_meta: vocab type       = SPM
0.00.851.242 I llm_load_print_meta: n_vocab          = 256000
0.00.851.244 I llm_load_print_meta: n_merges         = 0
0.00.851.245 I llm_load_print_meta: vocab_only       = 0
0.00.851.245 I llm_load_print_meta: n_ctx_train      = 8192
0.00.851.246 I llm_load_print_meta: n_embd           = 2048
0.00.851.246 I llm_load_print_meta: n_layer          = 18
0.00.851.314 I llm_load_print_meta: n_head           = 8
0.00.851.322 I llm_load_print_meta: n_head_kv        = 1
0.00.851.323 I llm_load_print_meta: n_rot            = 256
0.00.851.324 I llm_load_print_meta: n_swa            = 0
0.00.851.324 I llm_load_print_meta: n_embd_head_k    = 256
0.00.851.324 I llm_load_print_meta: n_embd_head_v    = 256
0.00.851.329 I llm_load_print_meta: n_gqa            = 8
0.00.851.334 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.851.338 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.851.340 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.851.341 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.851.342 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.851.342 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.851.348 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.851.354 I llm_load_print_meta: n_ff             = 16384
0.00.851.355 I llm_load_print_meta: n_expert         = 0
0.00.851.355 I llm_load_print_meta: n_expert_used    = 0
0.00.851.356 I llm_load_print_meta: causal attn      = 1
0.00.851.357 I llm_load_print_meta: pooling type     = 0
0.00.851.357 I llm_load_print_meta: rope type        = 2
0.00.851.358 I llm_load_print_meta: rope scaling     = linear
0.00.851.359 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.851.360 I llm_load_print_meta: freq_scale_train = 1
0.00.851.360 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.851.361 I llm_load_print_meta: rope_finetuned   = unknown
0.00.851.373 I llm_load_print_meta: ssm_d_conv       = 0
0.00.851.375 I llm_load_print_meta: ssm_d_inner      = 0
0.00.851.375 I llm_load_print_meta: ssm_d_state      = 0
0.00.851.375 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.851.376 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.851.377 I llm_load_print_meta: model type       = 2B
0.00.851.379 I llm_load_print_meta: model ftype      = Q8_0
0.00.851.381 I llm_load_print_meta: model params     = 2.51 B
0.00.851.382 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.851.382 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.851.383 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.851.384 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.851.388 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.851.388 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.851.389 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.851.390 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.851.396 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.851.398 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.851.398 I llm_load_print_meta: max token length = 93
0.00.946.630 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.952.649 I llama_new_context_with_model: n_seq_max     = 1
0.00.952.656 I llama_new_context_with_model: n_ctx         = 4096
0.00.952.656 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.952.656 I llama_new_context_with_model: n_batch       = 2048
0.00.952.657 I llama_new_context_with_model: n_ubatch      = 512
0.00.952.657 I llama_new_context_with_model: flash_attn    = 0
0.00.952.660 I llama_new_context_with_model: freq_base     = 10000.0
0.00.952.660 I llama_new_context_with_model: freq_scale    = 1
0.00.952.661 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.952.757 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.967.760 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.967.803 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.967.922 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.970.532 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.970.536 I llama_new_context_with_model: graph nodes  = 601
0.00.970.536 I llama_new_context_with_model: graph splits = 1
0.00.970.560 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.970.564 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.583.024 I main: llama threadpool init, n_threads = 4
0.01.583.041 I 
0.01.583.174 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.583.179 I 
0.01.583.415 I sampler seed: 4111094784
0.01.583.429 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.583.441 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.583.441 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.583.441 I 
 increasities in the 19th century.

**Answer:**

I cannot find any information that suggests that there were any increasities in the 1

0.15.197.644 I llama_perf_sampler_print:    sampling time =      49.98 ms /    33 runs   (    1.51 ms per token,   660.22 tokens per second)
0.15.197.648 I llama_perf_context_print:        load time =    1581.98 ms
0.15.197.650 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.197.652 I llama_perf_context_print:        eval time =   13523.56 ms /    32 runs   (  422.61 ms per token,     2.37 tokens per second)
0.15.197.653 I llama_perf_context_print:       total time =   13614.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.643 I build: 4369 (e1fc07a9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.000.850 I main: load the model and apply lora adapter, if any
0.00.026.432 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.026.443 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.026.539 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.553 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.556 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.562 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.564 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.566 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.568 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.570 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.571 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.577 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.579 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.581 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.594 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.598 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.794 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.332.494 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.356.994 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.357.005 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.357.006 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.357.008 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.357.009 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.357.023 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.357.027 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.357.032 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.357.034 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.357.036 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.357.038 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.357.040 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.357.049 I llama_model_loader: - type  f32:   37 tensors
0.00.357.052 I llama_model_loader: - type q8_0:  127 tensors
0.00.580.367 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.645.058 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.646.031 I llm_load_vocab: special tokens cache size = 5
0.00.838.059 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.838.136 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.838.143 I llm_load_print_meta: arch             = gemma
0.00.838.144 I llm_load_print_meta: vocab type       = SPM
0.00.838.145 I llm_load_print_meta: n_vocab          = 256000
0.00.838.147 I llm_load_print_meta: n_merges         = 0
0.00.838.149 I llm_load_print_meta: vocab_only       = 0
0.00.838.149 I llm_load_print_meta: n_ctx_train      = 8192
0.00.838.150 I llm_load_print_meta: n_embd           = 2048
0.00.838.150 I llm_load_print_meta: n_layer          = 18
0.00.838.215 I llm_load_print_meta: n_head           = 8
0.00.838.224 I llm_load_print_meta: n_head_kv        = 1
0.00.838.225 I llm_load_print_meta: n_rot            = 256
0.00.838.235 I llm_load_print_meta: n_swa            = 0
0.00.838.236 I llm_load_print_meta: n_embd_head_k    = 256
0.00.838.236 I llm_load_print_meta: n_embd_head_v    = 256
0.00.838.241 I llm_load_print_meta: n_gqa            = 8
0.00.838.247 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.838.253 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.838.256 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.838.258 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.838.258 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.838.259 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.838.259 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.838.265 I llm_load_print_meta: n_ff             = 16384
0.00.838.266 I llm_load_print_meta: n_expert         = 0
0.00.838.267 I llm_load_print_meta: n_expert_used    = 0
0.00.838.268 I llm_load_print_meta: causal attn      = 1
0.00.838.268 I llm_load_print_meta: pooling type     = 0
0.00.838.269 I llm_load_print_meta: rope type        = 2
0.00.838.269 I llm_load_print_meta: rope scaling     = linear
0.00.838.271 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.838.272 I llm_load_print_meta: freq_scale_train = 1
0.00.838.272 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.838.273 I llm_load_print_meta: rope_finetuned   = unknown
0.00.838.273 I llm_load_print_meta: ssm_d_conv       = 0
0.00.838.276 I llm_load_print_meta: ssm_d_inner      = 0
0.00.838.277 I llm_load_print_meta: ssm_d_state      = 0
0.00.838.277 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.838.277 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.838.278 I llm_load_print_meta: model type       = 2B
0.00.838.280 I llm_load_print_meta: model ftype      = Q8_0
0.00.838.280 I llm_load_print_meta: model params     = 2.51 B
0.00.838.281 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.838.282 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.838.282 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.838.283 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.838.283 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.838.295 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.838.295 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.838.296 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.838.302 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.838.304 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.838.304 I llm_load_print_meta: max token length = 93
0.00.916.517 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.916.529 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.916.530 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.916.531 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.916.532 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.916.533 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.922.508 I llama_new_context_with_model: n_seq_max     = 1
0.00.922.516 I llama_new_context_with_model: n_ctx         = 4096
0.00.922.517 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.922.517 I llama_new_context_with_model: n_batch       = 2048
0.00.922.518 I llama_new_context_with_model: n_ubatch      = 512
0.00.922.519 I llama_new_context_with_model: flash_attn    = 0
0.00.922.522 I llama_new_context_with_model: freq_base     = 10000.0
0.00.922.523 I llama_new_context_with_model: freq_scale    = 1
0.00.922.523 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.922.615 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.937.808 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.937.853 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.937.972 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.940.576 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.940.580 I llama_new_context_with_model: graph nodes  = 601
0.00.940.581 I llama_new_context_with_model: graph splits = 1
0.00.940.605 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.940.608 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.551.693 I main: llama threadpool init, n_threads = 4
0.01.551.711 I 
0.01.551.838 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.551.842 I 
0.01.552.073 I sampler seed: 2129312849
0.01.552.087 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.552.096 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.552.100 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.552.100 I 
 increasities and explore their broader implications.

**Answer:**

**The Intersection of Sexual Assault and Psychological Trauma**

**Definition:**

Sexual assault and psychological

0.15.046.486 I llama_perf_sampler_print:    sampling time =      49.55 ms /    33 runs   (    1.50 ms per token,   666.01 tokens per second)
0.15.046.499 I llama_perf_context_print:        load time =    1550.74 ms
0.15.046.501 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.046.503 I llama_perf_context_print:        eval time =   13405.22 ms /    32 runs   (  418.91 ms per token,     2.39 tokens per second)
0.15.046.504 I llama_perf_context_print:       total time =   13494.80 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.619 I build: 4369 (e1fc07a9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.826 I main: llama backend init
0.00.000.834 I main: load the model and apply lora adapter, if any
0.00.023.396 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.405 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.496 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.508 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.511 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.517 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.521 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.523 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.524 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.525 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.526 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.541 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.543 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.544 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.546 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.547 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.255.341 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.357.787 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.382.140 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.382.151 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.382.153 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.382.154 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.382.155 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.382.157 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.382.169 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.382.176 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.382.178 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.382.180 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.382.181 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.382.183 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.382.192 I llama_model_loader: - type  f32:   37 tensors
0.00.382.206 I llama_model_loader: - type q8_0:  127 tensors
0.00.606.764 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.672.692 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.673.654 I llm_load_vocab: special tokens cache size = 5
0.00.874.727 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.874.798 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.874.803 I llm_load_print_meta: arch             = gemma
0.00.874.804 I llm_load_print_meta: vocab type       = SPM
0.00.874.805 I llm_load_print_meta: n_vocab          = 256000
0.00.874.808 I llm_load_print_meta: n_merges         = 0
0.00.874.809 I llm_load_print_meta: vocab_only       = 0
0.00.874.809 I llm_load_print_meta: n_ctx_train      = 8192
0.00.874.810 I llm_load_print_meta: n_embd           = 2048
0.00.874.810 I llm_load_print_meta: n_layer          = 18
0.00.874.875 I llm_load_print_meta: n_head           = 8
0.00.874.883 I llm_load_print_meta: n_head_kv        = 1
0.00.874.883 I llm_load_print_meta: n_rot            = 256
0.00.874.884 I llm_load_print_meta: n_swa            = 0
0.00.874.884 I llm_load_print_meta: n_embd_head_k    = 256
0.00.874.884 I llm_load_print_meta: n_embd_head_v    = 256
0.00.874.889 I llm_load_print_meta: n_gqa            = 8
0.00.874.893 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.874.898 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.874.899 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.874.901 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.874.901 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.874.902 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.874.902 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.874.915 I llm_load_print_meta: n_ff             = 16384
0.00.874.916 I llm_load_print_meta: n_expert         = 0
0.00.874.916 I llm_load_print_meta: n_expert_used    = 0
0.00.874.916 I llm_load_print_meta: causal attn      = 1
0.00.874.917 I llm_load_print_meta: pooling type     = 0
0.00.874.917 I llm_load_print_meta: rope type        = 2
0.00.874.918 I llm_load_print_meta: rope scaling     = linear
0.00.874.919 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.874.920 I llm_load_print_meta: freq_scale_train = 1
0.00.874.920 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.874.920 I llm_load_print_meta: rope_finetuned   = unknown
0.00.874.921 I llm_load_print_meta: ssm_d_conv       = 0
0.00.874.921 I llm_load_print_meta: ssm_d_inner      = 0
0.00.874.921 I llm_load_print_meta: ssm_d_state      = 0
0.00.874.922 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.874.922 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.874.923 I llm_load_print_meta: model type       = 2B
0.00.874.925 I llm_load_print_meta: model ftype      = Q8_0
0.00.874.926 I llm_load_print_meta: model params     = 2.51 B
0.00.874.927 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.874.927 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.874.928 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.874.928 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.874.929 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.874.929 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.874.929 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.874.930 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.874.936 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.874.938 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.874.938 I llm_load_print_meta: max token length = 93
0.00.948.167 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.948.178 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.954.056 I llama_new_context_with_model: n_seq_max     = 1
0.00.954.064 I llama_new_context_with_model: n_ctx         = 4096
0.00.954.065 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.954.065 I llama_new_context_with_model: n_batch       = 2048
0.00.954.066 I llama_new_context_with_model: n_ubatch      = 512
0.00.954.066 I llama_new_context_with_model: flash_attn    = 0
0.00.954.070 I llama_new_context_with_model: freq_base     = 10000.0
0.00.954.071 I llama_new_context_with_model: freq_scale    = 1
0.00.954.072 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.954.167 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.969.590 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.969.630 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.969.755 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.972.437 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.972.441 I llama_new_context_with_model: graph nodes  = 601
0.00.972.442 I llama_new_context_with_model: graph splits = 1
0.00.972.468 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.972.471 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.583.908 I main: llama threadpool init, n_threads = 4
0.01.583.922 I 
0.01.584.045 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.584.049 I 
0.01.584.280 I sampler seed: 2159041068
0.01.584.294 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.584.307 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.584.307 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.584.308 I 
 increasities is a beautiful thing.

I understand that the word "incredibilities" is misspelled. It should be "impressions".

**Reply:**

0.15.075.301 I llama_perf_sampler_print:    sampling time =      49.76 ms /    33 runs   (    1.51 ms per token,   663.25 tokens per second)
0.15.075.317 I llama_perf_context_print:        load time =    1582.98 ms
0.15.075.319 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.075.321 I llama_perf_context_print:        eval time =   13401.05 ms /    32 runs   (  418.78 ms per token,     2.39 tokens per second)
0.15.075.326 I llama_perf_context_print:       total time =   13491.40 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m11.273s
user	3m50.205s
sys	0m9.540s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4369 (e1fc07a9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186490.95 ms
main:    total time = 186490.96 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.619 I build: 4369 (e1fc07a9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.813 I main: llama backend init
0.00.000.821 I main: load the model and apply lora adapter, if any
0.00.023.422 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.431 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.519 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.531 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.532 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.538 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.542 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.544 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.545 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.546 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.547 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.553 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.555 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.556 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.558 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.560 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.936 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.911 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.252 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.261 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.262 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.263 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.264 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.266 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.267 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.271 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.273 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.274 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.275 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.352.277 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.284 I llama_model_loader: - type  f32:   37 tensors
0.00.352.287 I llama_model_loader: - type q4_K:  108 tensors
0.00.352.287 I llama_model_loader: - type q6_K:   19 tensors
0.00.590.618 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.655.651 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.656.572 I llm_load_vocab: special tokens cache size = 5
0.00.842.229 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.842.304 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.842.308 I llm_load_print_meta: arch             = gemma
0.00.842.309 I llm_load_print_meta: vocab type       = SPM
0.00.842.310 I llm_load_print_meta: n_vocab          = 256000
0.00.842.312 I llm_load_print_meta: n_merges         = 0
0.00.842.313 I llm_load_print_meta: vocab_only       = 0
0.00.842.313 I llm_load_print_meta: n_ctx_train      = 8192
0.00.842.313 I llm_load_print_meta: n_embd           = 2048
0.00.842.314 I llm_load_print_meta: n_layer          = 18
0.00.842.378 I llm_load_print_meta: n_head           = 8
0.00.842.385 I llm_load_print_meta: n_head_kv        = 1
0.00.842.386 I llm_load_print_meta: n_rot            = 256
0.00.842.386 I llm_load_print_meta: n_swa            = 0
0.00.842.386 I llm_load_print_meta: n_embd_head_k    = 256
0.00.842.387 I llm_load_print_meta: n_embd_head_v    = 256
0.00.842.391 I llm_load_print_meta: n_gqa            = 8
0.00.842.396 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.842.401 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.842.402 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.842.404 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.842.404 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.842.405 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.842.405 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.842.410 I llm_load_print_meta: n_ff             = 16384
0.00.842.411 I llm_load_print_meta: n_expert         = 0
0.00.842.412 I llm_load_print_meta: n_expert_used    = 0
0.00.842.412 I llm_load_print_meta: causal attn      = 1
0.00.842.412 I llm_load_print_meta: pooling type     = 0
0.00.842.413 I llm_load_print_meta: rope type        = 2
0.00.842.413 I llm_load_print_meta: rope scaling     = linear
0.00.842.415 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.842.416 I llm_load_print_meta: freq_scale_train = 1
0.00.842.417 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.842.417 I llm_load_print_meta: rope_finetuned   = unknown
0.00.842.418 I llm_load_print_meta: ssm_d_conv       = 0
0.00.842.419 I llm_load_print_meta: ssm_d_inner      = 0
0.00.842.419 I llm_load_print_meta: ssm_d_state      = 0
0.00.842.420 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.842.421 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.842.422 I llm_load_print_meta: model type       = 2B
0.00.842.424 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.842.425 I llm_load_print_meta: model params     = 2.51 B
0.00.842.426 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.842.427 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.842.427 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.842.428 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.842.429 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.842.429 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.842.429 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.842.441 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.842.449 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.842.451 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.842.451 I llm_load_print_meta: max token length = 93
0.00.905.680 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.905.691 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.905.692 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.905.692 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.905.693 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.905.694 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.911.702 I llama_new_context_with_model: n_seq_max     = 1
0.00.911.710 I llama_new_context_with_model: n_ctx         = 4096
0.00.911.710 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.911.710 I llama_new_context_with_model: n_batch       = 2048
0.00.911.711 I llama_new_context_with_model: n_ubatch      = 512
0.00.911.711 I llama_new_context_with_model: flash_attn    = 0
0.00.911.713 I llama_new_context_with_model: freq_base     = 10000.0
0.00.911.714 I llama_new_context_with_model: freq_scale    = 1
0.00.911.715 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.911.802 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.925.973 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.926.013 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.926.131 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.928.744 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.928.748 I llama_new_context_with_model: graph nodes  = 601
0.00.928.749 I llama_new_context_with_model: graph splits = 1
0.00.928.771 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.928.774 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.508.375 I main: llama threadpool init, n_threads = 4
0.01.508.392 I 
0.01.508.516 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.508.520 I 
0.01.508.753 I sampler seed: 2135556906
0.01.508.768 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.508.778 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.508.780 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.508.781 I 
 seconally.

**Assistant**

I am unable to generate responses that are sexually suggestive in nature. My purpose is to assist with tasks and questions within the

0.12.603.821 I llama_perf_sampler_print:    sampling time =      49.66 ms /    33 runs   (    1.50 ms per token,   664.45 tokens per second)
0.12.603.825 I llama_perf_context_print:        load time =    1507.46 ms
0.12.603.838 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.603.840 I llama_perf_context_print:        eval time =   11005.56 ms /    32 runs   (  343.92 ms per token,     2.91 tokens per second)
0.12.603.842 I llama_perf_context_print:       total time =   11095.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4369 (e1fc07a9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186416.65 ms
main:    total time = 186416.65 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 4369 (e1fc07a9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.889 I main: llama backend init
0.00.000.898 I main: load the model and apply lora adapter, if any
0.00.023.304 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.409 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.423 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.426 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.432 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.437 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.439 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.442 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.445 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.446 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.454 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.457 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.460 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.462 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.465 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.254.075 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.356.556 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.380.988 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.380.998 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.380.999 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.381.001 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.381.002 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.381.004 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.381.006 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.381.010 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.381.012 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.381.021 I llama_model_loader: - type  f32:   37 tensors
0.00.381.024 I llama_model_loader: - type q4_K:  108 tensors
0.00.381.024 I llama_model_loader: - type q6_K:   19 tensors
0.00.602.944 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.661.201 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.662.190 I llm_load_vocab: special tokens cache size = 5
0.00.863.317 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.863.392 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.863.397 I llm_load_print_meta: arch             = gemma
0.00.863.397 I llm_load_print_meta: vocab type       = SPM
0.00.863.398 I llm_load_print_meta: n_vocab          = 256000
0.00.863.401 I llm_load_print_meta: n_merges         = 0
0.00.863.401 I llm_load_print_meta: vocab_only       = 0
0.00.863.402 I llm_load_print_meta: n_ctx_train      = 8192
0.00.863.402 I llm_load_print_meta: n_embd           = 2048
0.00.863.403 I llm_load_print_meta: n_layer          = 18
0.00.863.470 I llm_load_print_meta: n_head           = 8
0.00.863.477 I llm_load_print_meta: n_head_kv        = 1
0.00.863.478 I llm_load_print_meta: n_rot            = 256
0.00.863.479 I llm_load_print_meta: n_swa            = 0
0.00.863.480 I llm_load_print_meta: n_embd_head_k    = 256
0.00.863.480 I llm_load_print_meta: n_embd_head_v    = 256
0.00.863.486 I llm_load_print_meta: n_gqa            = 8
0.00.863.491 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.863.496 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.863.497 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.863.498 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.863.499 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.863.499 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.863.500 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.863.505 I llm_load_print_meta: n_ff             = 16384
0.00.863.506 I llm_load_print_meta: n_expert         = 0
0.00.863.507 I llm_load_print_meta: n_expert_used    = 0
0.00.863.507 I llm_load_print_meta: causal attn      = 1
0.00.863.508 I llm_load_print_meta: pooling type     = 0
0.00.863.508 I llm_load_print_meta: rope type        = 2
0.00.863.529 I llm_load_print_meta: rope scaling     = linear
0.00.863.531 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.863.532 I llm_load_print_meta: freq_scale_train = 1
0.00.863.533 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.863.533 I llm_load_print_meta: rope_finetuned   = unknown
0.00.863.534 I llm_load_print_meta: ssm_d_conv       = 0
0.00.863.534 I llm_load_print_meta: ssm_d_inner      = 0
0.00.863.535 I llm_load_print_meta: ssm_d_state      = 0
0.00.863.536 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.863.536 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.863.537 I llm_load_print_meta: model type       = 2B
0.00.863.541 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.863.542 I llm_load_print_meta: model params     = 2.51 B
0.00.863.544 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.863.545 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.863.546 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.863.547 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.863.552 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.863.552 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.863.553 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.863.554 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.863.567 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.863.570 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.863.571 I llm_load_print_meta: max token length = 93
0.00.923.895 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.929.938 I llama_new_context_with_model: n_seq_max     = 1
0.00.929.946 I llama_new_context_with_model: n_ctx         = 4096
0.00.929.946 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.929.946 I llama_new_context_with_model: n_batch       = 2048
0.00.929.947 I llama_new_context_with_model: n_ubatch      = 512
0.00.929.947 I llama_new_context_with_model: flash_attn    = 0
0.00.929.950 I llama_new_context_with_model: freq_base     = 10000.0
0.00.929.951 I llama_new_context_with_model: freq_scale    = 1
0.00.929.951 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.930.051 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.944.914 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.944.957 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.945.078 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.947.701 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.947.704 I llama_new_context_with_model: graph nodes  = 601
0.00.947.705 I llama_new_context_with_model: graph splits = 1
0.00.947.730 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.947.734 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.529.803 I main: llama threadpool init, n_threads = 4
0.01.529.820 I 
0.01.529.960 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.529.965 I 
0.01.530.202 I sampler seed: 4239777983
0.01.530.218 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.530.228 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.530.232 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.530.232 I 
 squaRED, the AI-powered platform for digital twins and metaverse experiences.

## SquaraRED: The AI-Powered Platform for Digital Twins and Metaverse Experiences

0.12.679.222 I llama_perf_sampler_print:    sampling time =      49.79 ms /    33 runs   (    1.51 ms per token,   662.84 tokens per second)
0.12.679.225 I llama_perf_context_print:        load time =    1528.80 ms
0.12.679.226 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.679.241 I llama_perf_context_print:        eval time =   11059.55 ms /    32 runs   (  345.61 ms per token,     2.89 tokens per second)
0.12.679.243 I llama_perf_context_print:       total time =   11149.43 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m41.143s
user	46m44.282s
sys	0m6.356s
