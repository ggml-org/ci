+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.566 I build: 4216 (f4898e16) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.756 I main: llama backend init
0.00.000.763 I main: load the model and apply lora adapter, if any
0.00.021.628 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.640 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.648 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.654 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.655 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.661 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.662 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.662 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.663 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.664 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.665 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.669 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.670 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.671 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.671 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.672 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.008 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.359 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.196 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.203 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.204 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.205 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.206 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.207 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.208 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.211 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.212 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.213 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.214 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.215 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.219 I llama_model_loader: - type  f32:   37 tensors
0.00.132.220 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.765 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.252 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.736 I llm_load_vocab: special tokens cache size = 5
0.00.262.729 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.751 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.752 I llm_load_print_meta: arch             = gemma
0.00.262.752 I llm_load_print_meta: vocab type       = SPM
0.00.262.753 I llm_load_print_meta: n_vocab          = 256000
0.00.262.753 I llm_load_print_meta: n_merges         = 0
0.00.262.753 I llm_load_print_meta: vocab_only       = 0
0.00.262.754 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.754 I llm_load_print_meta: n_embd           = 2048
0.00.262.754 I llm_load_print_meta: n_layer          = 18
0.00.262.766 I llm_load_print_meta: n_head           = 8
0.00.262.767 I llm_load_print_meta: n_head_kv        = 1
0.00.262.767 I llm_load_print_meta: n_rot            = 256
0.00.262.768 I llm_load_print_meta: n_swa            = 0
0.00.262.768 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.768 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.769 I llm_load_print_meta: n_gqa            = 8
0.00.262.770 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.771 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.771 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.773 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.773 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.774 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.774 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.775 I llm_load_print_meta: n_ff             = 16384
0.00.262.775 I llm_load_print_meta: n_expert         = 0
0.00.262.775 I llm_load_print_meta: n_expert_used    = 0
0.00.262.776 I llm_load_print_meta: causal attn      = 1
0.00.262.776 I llm_load_print_meta: pooling type     = 0
0.00.262.776 I llm_load_print_meta: rope type        = 2
0.00.262.776 I llm_load_print_meta: rope scaling     = linear
0.00.262.778 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.779 I llm_load_print_meta: freq_scale_train = 1
0.00.262.779 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.779 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.780 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.780 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.781 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.781 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.781 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.782 I llm_load_print_meta: model type       = 2B
0.00.262.782 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.783 I llm_load_print_meta: model params     = 2.51 B
0.00.262.784 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.784 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.785 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.785 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.786 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.786 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.786 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.787 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.787 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.787 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.788 I llm_load_print_meta: max token length = 93
0.00.364.237 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.364.243 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.364.244 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.364.245 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.364.245 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.364.246 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.369.489 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.495 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.496 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.496 I llama_new_context_with_model: n_batch       = 2048
0.00.369.497 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.497 I llama_new_context_with_model: flash_attn    = 0
0.00.369.500 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.500 I llama_new_context_with_model: freq_scale    = 1
0.00.369.501 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.384.338 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.351 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.441 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.726 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.733 I llama_new_context_with_model: graph nodes  = 601
0.00.385.733 I llama_new_context_with_model: graph splits = 1
0.00.385.735 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.581 I main: llama threadpool init, n_threads = 4
0.00.470.596 I 
0.00.470.666 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.470.669 I 
0.00.470.711 I sampler seed: 2054984392
0.00.470.722 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.736 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.739 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.740 I 
 increasities, the allure of forbidden knowledge, and the promise of power.

**Answer:** The allure of knowledge and its potential to grant power. [end of text]


0.02.645.812 I llama_perf_sampler_print:    sampling time =       4.88 ms /    32 runs   (    0.15 ms per token,  6557.38 tokens per second)
0.02.645.814 I llama_perf_context_print:        load time =     469.80 ms
0.02.645.815 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.645.816 I llama_perf_context_print:        eval time =    2157.07 ms /    31 runs   (   69.58 ms per token,    14.37 tokens per second)
0.02.645.817 I llama_perf_context_print:       total time =    2175.24 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.539 I build: 4216 (f4898e16) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.760 I main: llama backend init
0.00.000.767 I main: load the model and apply lora adapter, if any
0.00.021.166 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.178 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.184 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.185 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.192 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.195 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.196 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.197 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.197 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.198 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.203 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.203 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.204 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.204 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.205 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.526 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.156 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.931 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.937 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.937 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.938 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.938 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.939 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.940 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.942 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.943 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.943 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.945 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.129.946 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.949 I llama_model_loader: - type  f32:   37 tensors
0.00.129.950 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.605 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.566 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.032 I llm_load_vocab: special tokens cache size = 5
0.00.264.220 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.250 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.251 I llm_load_print_meta: arch             = gemma
0.00.264.252 I llm_load_print_meta: vocab type       = SPM
0.00.264.253 I llm_load_print_meta: n_vocab          = 256000
0.00.264.253 I llm_load_print_meta: n_merges         = 0
0.00.264.254 I llm_load_print_meta: vocab_only       = 0
0.00.264.254 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.254 I llm_load_print_meta: n_embd           = 2048
0.00.264.254 I llm_load_print_meta: n_layer          = 18
0.00.264.266 I llm_load_print_meta: n_head           = 8
0.00.264.267 I llm_load_print_meta: n_head_kv        = 1
0.00.264.267 I llm_load_print_meta: n_rot            = 256
0.00.264.268 I llm_load_print_meta: n_swa            = 0
0.00.264.268 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.268 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.269 I llm_load_print_meta: n_gqa            = 8
0.00.264.270 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.271 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.272 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.274 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.274 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.274 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.275 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.276 I llm_load_print_meta: n_ff             = 16384
0.00.264.276 I llm_load_print_meta: n_expert         = 0
0.00.264.276 I llm_load_print_meta: n_expert_used    = 0
0.00.264.276 I llm_load_print_meta: causal attn      = 1
0.00.264.277 I llm_load_print_meta: pooling type     = 0
0.00.264.277 I llm_load_print_meta: rope type        = 2
0.00.264.277 I llm_load_print_meta: rope scaling     = linear
0.00.264.279 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.279 I llm_load_print_meta: freq_scale_train = 1
0.00.264.279 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.280 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.280 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.280 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.281 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.281 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.281 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.282 I llm_load_print_meta: model type       = 2B
0.00.264.283 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.284 I llm_load_print_meta: model params     = 2.51 B
0.00.264.284 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.285 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.285 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.286 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.286 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.286 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.287 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.287 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.287 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.288 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.288 I llm_load_print_meta: max token length = 93
0.00.357.587 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.362.791 I llama_new_context_with_model: n_seq_max     = 1
0.00.362.797 I llama_new_context_with_model: n_ctx         = 4096
0.00.362.798 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.362.798 I llama_new_context_with_model: n_batch       = 2048
0.00.362.799 I llama_new_context_with_model: n_ubatch      = 512
0.00.362.799 I llama_new_context_with_model: flash_attn    = 0
0.00.362.801 I llama_new_context_with_model: freq_base     = 10000.0
0.00.362.802 I llama_new_context_with_model: freq_scale    = 1
0.00.362.803 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.377.357 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.377.372 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.377.461 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.378.686 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.378.692 I llama_new_context_with_model: graph nodes  = 601
0.00.378.692 I llama_new_context_with_model: graph splits = 1
0.00.378.694 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.459.712 I main: llama threadpool init, n_threads = 4
0.00.459.728 I 
0.00.459.798 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.459.801 I 
0.00.459.842 I sampler seed: 1573537946
0.00.459.852 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.459.857 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.459.858 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.459.858 I 
 increasities and the consequences of engaging in such relationships.

**1. Understanding the Nature of Incest:**

* Incest is a sexual relationship between close

0.02.641.954 I llama_perf_sampler_print:    sampling time =       4.66 ms /    33 runs   (    0.14 ms per token,  7087.63 tokens per second)
0.02.641.956 I llama_perf_context_print:        load time =     458.93 ms
0.02.641.957 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.641.959 I llama_perf_context_print:        eval time =    2163.04 ms /    32 runs   (   67.59 ms per token,    14.79 tokens per second)
0.02.641.960 I llama_perf_context_print:       total time =    2182.25 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.615 I build: 4216 (f4898e16) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.820 I main: llama backend init
0.00.000.827 I main: load the model and apply lora adapter, if any
0.00.023.414 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.426 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.434 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.439 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.439 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.444 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.444 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.446 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.447 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.447 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.448 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.454 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.455 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.455 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.456 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.456 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.414 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.510 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.449 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.457 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.458 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.458 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.459 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.460 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.461 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.464 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.464 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.465 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.466 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.137.467 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.137.470 I llama_model_loader: - type  f32:   37 tensors
0.00.137.471 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.996 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.876 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.368 I llm_load_vocab: special tokens cache size = 5
0.00.275.882 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.897 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.898 I llm_load_print_meta: arch             = gemma
0.00.275.898 I llm_load_print_meta: vocab type       = SPM
0.00.275.900 I llm_load_print_meta: n_vocab          = 256000
0.00.275.901 I llm_load_print_meta: n_merges         = 0
0.00.275.901 I llm_load_print_meta: vocab_only       = 0
0.00.275.902 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.902 I llm_load_print_meta: n_embd           = 2048
0.00.275.902 I llm_load_print_meta: n_layer          = 18
0.00.275.913 I llm_load_print_meta: n_head           = 8
0.00.275.914 I llm_load_print_meta: n_head_kv        = 1
0.00.275.915 I llm_load_print_meta: n_rot            = 256
0.00.275.916 I llm_load_print_meta: n_swa            = 0
0.00.275.916 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.916 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.917 I llm_load_print_meta: n_gqa            = 8
0.00.275.918 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.920 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.921 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.922 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.923 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.923 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.924 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.925 I llm_load_print_meta: n_ff             = 16384
0.00.275.925 I llm_load_print_meta: n_expert         = 0
0.00.275.925 I llm_load_print_meta: n_expert_used    = 0
0.00.275.926 I llm_load_print_meta: causal attn      = 1
0.00.275.926 I llm_load_print_meta: pooling type     = 0
0.00.275.927 I llm_load_print_meta: rope type        = 2
0.00.275.936 I llm_load_print_meta: rope scaling     = linear
0.00.275.938 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.938 I llm_load_print_meta: freq_scale_train = 1
0.00.275.939 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.940 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.940 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.940 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.940 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.940 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.941 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.942 I llm_load_print_meta: model type       = 2B
0.00.275.942 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.943 I llm_load_print_meta: model params     = 2.51 B
0.00.275.944 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.945 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.946 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.946 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.946 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.946 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.947 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.948 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.948 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.949 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.949 I llm_load_print_meta: max token length = 93
0.00.351.408 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.351.415 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.351.416 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.351.416 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.351.417 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.351.417 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.356.655 I llama_new_context_with_model: n_seq_max     = 1
0.00.356.662 I llama_new_context_with_model: n_ctx         = 4096
0.00.356.662 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.356.663 I llama_new_context_with_model: n_batch       = 2048
0.00.356.663 I llama_new_context_with_model: n_ubatch      = 512
0.00.356.664 I llama_new_context_with_model: flash_attn    = 0
0.00.356.666 I llama_new_context_with_model: freq_base     = 10000.0
0.00.356.666 I llama_new_context_with_model: freq_scale    = 1
0.00.356.668 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.372.534 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.372.549 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.372.659 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.374.045 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.374.051 I llama_new_context_with_model: graph nodes  = 601
0.00.374.052 I llama_new_context_with_model: graph splits = 1
0.00.374.053 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.458.415 I main: llama threadpool init, n_threads = 4
0.00.458.431 I 
0.00.458.507 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.458.510 I 
0.00.458.556 I sampler seed: 2612215730
0.00.458.568 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.458.571 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.458.572 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.458.575 I 
 increasities. [end of text]


0.00.752.735 I llama_perf_sampler_print:    sampling time =       0.60 ms /     5 runs   (    0.12 ms per token,  8361.20 tokens per second)
0.00.752.737 I llama_perf_context_print:        load time =     457.57 ms
0.00.752.739 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.752.740 I llama_perf_context_print:        eval time =     291.24 ms /     4 runs   (   72.81 ms per token,    13.73 tokens per second)
0.00.752.741 I llama_perf_context_print:       total time =     294.33 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.532 I build: 4216 (f4898e16) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.000.744 I main: load the model and apply lora adapter, if any
0.00.020.979 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.987 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.995 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.002 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.003 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.007 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.007 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.008 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.009 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.010 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.010 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.015 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.016 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.016 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.017 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.017 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.120 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.211 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.983 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.989 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.989 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.990 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.990 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.991 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.992 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.994 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.995 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.997 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.998 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.999 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.002 I llama_model_loader: - type  f32:   37 tensors
0.00.131.003 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.418 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.500 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.024 I llm_load_vocab: special tokens cache size = 5
0.00.265.032 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.050 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.051 I llm_load_print_meta: arch             = gemma
0.00.265.051 I llm_load_print_meta: vocab type       = SPM
0.00.265.052 I llm_load_print_meta: n_vocab          = 256000
0.00.265.052 I llm_load_print_meta: n_merges         = 0
0.00.265.053 I llm_load_print_meta: vocab_only       = 0
0.00.265.053 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.053 I llm_load_print_meta: n_embd           = 2048
0.00.265.054 I llm_load_print_meta: n_layer          = 18
0.00.265.064 I llm_load_print_meta: n_head           = 8
0.00.265.065 I llm_load_print_meta: n_head_kv        = 1
0.00.265.065 I llm_load_print_meta: n_rot            = 256
0.00.265.065 I llm_load_print_meta: n_swa            = 0
0.00.265.066 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.066 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.067 I llm_load_print_meta: n_gqa            = 8
0.00.265.068 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.069 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.070 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.072 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.072 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.072 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.073 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.074 I llm_load_print_meta: n_ff             = 16384
0.00.265.074 I llm_load_print_meta: n_expert         = 0
0.00.265.074 I llm_load_print_meta: n_expert_used    = 0
0.00.265.075 I llm_load_print_meta: causal attn      = 1
0.00.265.075 I llm_load_print_meta: pooling type     = 0
0.00.265.076 I llm_load_print_meta: rope type        = 2
0.00.265.077 I llm_load_print_meta: rope scaling     = linear
0.00.265.078 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.079 I llm_load_print_meta: freq_scale_train = 1
0.00.265.079 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.079 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.079 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.080 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.080 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.081 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.082 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.083 I llm_load_print_meta: model type       = 2B
0.00.265.084 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.085 I llm_load_print_meta: model params     = 2.51 B
0.00.265.086 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.086 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.087 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.087 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.088 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.088 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.088 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.089 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.090 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.091 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.091 I llm_load_print_meta: max token length = 93
0.00.336.343 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.336.349 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.341.485 I llama_new_context_with_model: n_seq_max     = 1
0.00.341.491 I llama_new_context_with_model: n_ctx         = 4096
0.00.341.492 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.341.492 I llama_new_context_with_model: n_batch       = 2048
0.00.341.493 I llama_new_context_with_model: n_ubatch      = 512
0.00.341.493 I llama_new_context_with_model: flash_attn    = 0
0.00.341.495 I llama_new_context_with_model: freq_base     = 10000.0
0.00.341.496 I llama_new_context_with_model: freq_scale    = 1
0.00.341.497 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.841 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.855 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.355.960 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.227 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.233 I llama_new_context_with_model: graph nodes  = 601
0.00.357.234 I llama_new_context_with_model: graph splits = 1
0.00.357.236 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.444.100 I main: llama threadpool init, n_threads = 4
0.00.444.115 I 
0.00.444.189 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.444.193 I 
0.00.444.239 I sampler seed: 2135076622
0.00.444.250 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.444.262 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.444.266 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.444.266 I 
 increasels, the playful spirit of the universe, and the eternal dance of creation. [end of text]


0.01.805.565 I llama_perf_sampler_print:    sampling time =       3.03 ms /    19 runs   (    0.16 ms per token,  6264.42 tokens per second)
0.01.805.568 I llama_perf_context_print:        load time =     443.34 ms
0.01.805.569 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.805.570 I llama_perf_context_print:        eval time =    1349.86 ms /    18 runs   (   74.99 ms per token,    13.33 tokens per second)
0.01.805.571 I llama_perf_context_print:       total time =    1361.47 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.651s
user	0m26.837s
sys	0m9.413s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4216 (f4898e16)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40198.89 ms
main:    total time = 40198.89 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.537 I build: 4216 (f4898e16) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.730 I main: llama backend init
0.00.000.737 I main: load the model and apply lora adapter, if any
0.00.021.330 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.339 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.348 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.352 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.353 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.357 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.357 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.358 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.358 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.359 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.360 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.364 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.365 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.365 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.366 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.366 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.873 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.359 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.258 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.264 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.264 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.265 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.266 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.267 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.267 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.269 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.269 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.270 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.271 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.272 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.274 I llama_model_loader: - type  f32:   37 tensors
0.00.130.275 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.275 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.603 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.851 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.353 I llm_load_vocab: special tokens cache size = 5
0.00.262.316 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.331 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.331 I llm_load_print_meta: arch             = gemma
0.00.262.332 I llm_load_print_meta: vocab type       = SPM
0.00.262.332 I llm_load_print_meta: n_vocab          = 256000
0.00.262.333 I llm_load_print_meta: n_merges         = 0
0.00.262.333 I llm_load_print_meta: vocab_only       = 0
0.00.262.333 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.334 I llm_load_print_meta: n_embd           = 2048
0.00.262.334 I llm_load_print_meta: n_layer          = 18
0.00.262.344 I llm_load_print_meta: n_head           = 8
0.00.262.345 I llm_load_print_meta: n_head_kv        = 1
0.00.262.346 I llm_load_print_meta: n_rot            = 256
0.00.262.346 I llm_load_print_meta: n_swa            = 0
0.00.262.346 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.347 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.347 I llm_load_print_meta: n_gqa            = 8
0.00.262.349 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.349 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.350 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.352 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.353 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.353 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.353 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.354 I llm_load_print_meta: n_ff             = 16384
0.00.262.355 I llm_load_print_meta: n_expert         = 0
0.00.262.355 I llm_load_print_meta: n_expert_used    = 0
0.00.262.355 I llm_load_print_meta: causal attn      = 1
0.00.262.356 I llm_load_print_meta: pooling type     = 0
0.00.262.356 I llm_load_print_meta: rope type        = 2
0.00.262.356 I llm_load_print_meta: rope scaling     = linear
0.00.262.358 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.358 I llm_load_print_meta: freq_scale_train = 1
0.00.262.359 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.359 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.359 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.359 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.360 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.360 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.360 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.361 I llm_load_print_meta: model type       = 2B
0.00.262.361 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.262.362 I llm_load_print_meta: model params     = 2.51 B
0.00.262.363 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.262.363 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.363 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.364 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.364 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.364 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.364 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.365 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.365 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.365 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.366 I llm_load_print_meta: max token length = 93
0.00.323.177 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.323.183 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.323.183 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.323.184 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.323.184 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.323.185 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.328.322 I llama_new_context_with_model: n_seq_max     = 1
0.00.328.328 I llama_new_context_with_model: n_ctx         = 4096
0.00.328.329 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.328.330 I llama_new_context_with_model: n_batch       = 2048
0.00.328.330 I llama_new_context_with_model: n_ubatch      = 512
0.00.328.331 I llama_new_context_with_model: flash_attn    = 0
0.00.328.333 I llama_new_context_with_model: freq_base     = 10000.0
0.00.328.334 I llama_new_context_with_model: freq_scale    = 1
0.00.328.335 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.342.689 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.342.702 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.342.790 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.035 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.344.041 I llama_new_context_with_model: graph nodes  = 601
0.00.344.042 I llama_new_context_with_model: graph splits = 1
0.00.344.044 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.973 I main: llama threadpool init, n_threads = 4
0.00.418.988 I 
0.00.419.062 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.419.065 I 
0.00.419.109 I sampler seed: 732273057
0.00.419.122 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.125 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.125 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.126 I 
 seconally.

I understand that the question is asking for a synonym for "secondaily," but I am unable to find any suitable synonym in the context

0.02.000.525 I llama_perf_sampler_print:    sampling time =       5.07 ms /    33 runs   (    0.15 ms per token,  6512.73 tokens per second)
0.02.000.528 I llama_perf_context_print:        load time =     418.22 ms
0.02.000.530 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.000.532 I llama_perf_context_print:        eval time =    1562.32 ms /    32 runs   (   48.82 ms per token,    20.48 tokens per second)
0.02.000.532 I llama_perf_context_print:       total time =    1581.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4216 (f4898e16)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40170.33 ms
main:    total time = 40170.33 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.167 I build: 4216 (f4898e16) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.365 I main: llama backend init
0.00.000.371 I main: load the model and apply lora adapter, if any
0.00.020.386 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.399 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.405 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.407 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.410 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.411 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.412 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.412 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.413 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.414 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.417 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.417 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.418 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.418 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.419 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.788 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.121.966 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.128.832 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.128.840 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.128.840 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.128.841 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.128.841 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.128.842 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.128.843 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.128.844 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.128.845 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.128.848 I llama_model_loader: - type  f32:   37 tensors
0.00.128.849 I llama_model_loader: - type q4_K:  108 tensors
0.00.128.850 I llama_model_loader: - type q6_K:   19 tensors
0.00.199.742 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.175 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.679 I llm_load_vocab: special tokens cache size = 5
0.00.262.460 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.476 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.477 I llm_load_print_meta: arch             = gemma
0.00.262.478 I llm_load_print_meta: vocab type       = SPM
0.00.262.478 I llm_load_print_meta: n_vocab          = 256000
0.00.262.479 I llm_load_print_meta: n_merges         = 0
0.00.262.479 I llm_load_print_meta: vocab_only       = 0
0.00.262.479 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.480 I llm_load_print_meta: n_embd           = 2048
0.00.262.480 I llm_load_print_meta: n_layer          = 18
0.00.262.492 I llm_load_print_meta: n_head           = 8
0.00.262.493 I llm_load_print_meta: n_head_kv        = 1
0.00.262.493 I llm_load_print_meta: n_rot            = 256
0.00.262.494 I llm_load_print_meta: n_swa            = 0
0.00.262.494 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.494 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.495 I llm_load_print_meta: n_gqa            = 8
0.00.262.496 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.497 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.498 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.499 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.500 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.500 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.500 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.501 I llm_load_print_meta: n_ff             = 16384
0.00.262.502 I llm_load_print_meta: n_expert         = 0
0.00.262.502 I llm_load_print_meta: n_expert_used    = 0
0.00.262.503 I llm_load_print_meta: causal attn      = 1
0.00.262.503 I llm_load_print_meta: pooling type     = 0
0.00.262.503 I llm_load_print_meta: rope type        = 2
0.00.262.504 I llm_load_print_meta: rope scaling     = linear
0.00.262.505 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.505 I llm_load_print_meta: freq_scale_train = 1
0.00.262.506 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.506 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.506 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.507 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.507 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.507 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.507 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.508 I llm_load_print_meta: model type       = 2B
0.00.262.508 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.262.509 I llm_load_print_meta: model params     = 2.51 B
0.00.262.510 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.262.510 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.511 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.511 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.511 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.512 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.512 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.512 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.512 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.513 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.513 I llm_load_print_meta: max token length = 93
0.00.317.735 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.322.692 I llama_new_context_with_model: n_seq_max     = 1
0.00.322.699 I llama_new_context_with_model: n_ctx         = 4096
0.00.322.699 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.322.699 I llama_new_context_with_model: n_batch       = 2048
0.00.322.700 I llama_new_context_with_model: n_ubatch      = 512
0.00.322.700 I llama_new_context_with_model: flash_attn    = 0
0.00.322.702 I llama_new_context_with_model: freq_base     = 10000.0
0.00.322.703 I llama_new_context_with_model: freq_scale    = 1
0.00.322.704 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.337.400 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.337.415 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.337.506 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.338.714 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.338.721 I llama_new_context_with_model: graph nodes  = 601
0.00.338.721 I llama_new_context_with_model: graph splits = 1
0.00.338.724 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.413.312 I main: llama threadpool init, n_threads = 4
0.00.413.329 I 
0.00.413.405 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.413.408 I 
0.00.413.452 I sampler seed: 1610517096
0.00.413.463 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.413.470 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.413.472 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.413.472 I 
 squaRED

The question is about a wordplay.

What is the wordplay in the following sentence:

"The judge ruled that the defendant's

0.01.965.607 I llama_perf_sampler_print:    sampling time =       4.80 ms /    33 runs   (    0.15 ms per token,  6870.71 tokens per second)
0.01.965.610 I llama_perf_context_print:        load time =     412.92 ms
0.01.965.611 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.965.613 I llama_perf_context_print:        eval time =    1534.29 ms /    32 runs   (   47.95 ms per token,    20.86 tokens per second)
0.01.965.613 I llama_perf_context_print:       total time =    1552.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.115s
user	10m23.970s
sys	0m6.778s
