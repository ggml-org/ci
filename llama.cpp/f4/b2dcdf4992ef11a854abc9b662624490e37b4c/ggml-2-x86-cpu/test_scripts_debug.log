+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.709 I build: 3890 (f4b2dcdf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.907 I main: llama backend init
0.00.002.843 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.837 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.046 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.132 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.143 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.145 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.149 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.153 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.154 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.155 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.157 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.158 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.165 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.166 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.167 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.167 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.168 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.688 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.269.040 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.287.137 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.287.145 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.287.146 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.287.147 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.287.148 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.287.150 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.287.151 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.287.155 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.287.156 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.287.157 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.287.158 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.287.159 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.287.167 I llama_model_loader: - type  f32:   37 tensors
0.00.287.172 I llama_model_loader: - type q8_0:  127 tensors
0.00.451.981 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.481.209 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.482.280 I llm_load_vocab: special tokens cache size = 5
0.00.591.637 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.591.697 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.591.699 I llm_load_print_meta: arch             = gemma
0.00.591.699 I llm_load_print_meta: vocab type       = SPM
0.00.591.700 I llm_load_print_meta: n_vocab          = 256000
0.00.591.702 I llm_load_print_meta: n_merges         = 0
0.00.591.703 I llm_load_print_meta: vocab_only       = 0
0.00.591.703 I llm_load_print_meta: n_ctx_train      = 8192
0.00.591.704 I llm_load_print_meta: n_embd           = 2048
0.00.591.704 I llm_load_print_meta: n_layer          = 18
0.00.591.768 I llm_load_print_meta: n_head           = 8
0.00.591.775 I llm_load_print_meta: n_head_kv        = 1
0.00.591.776 I llm_load_print_meta: n_rot            = 256
0.00.591.776 I llm_load_print_meta: n_swa            = 0
0.00.591.777 I llm_load_print_meta: n_embd_head_k    = 256
0.00.591.777 I llm_load_print_meta: n_embd_head_v    = 256
0.00.591.782 I llm_load_print_meta: n_gqa            = 8
0.00.591.786 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.591.791 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.591.792 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.591.794 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.591.795 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.591.796 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.591.796 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.591.801 I llm_load_print_meta: n_ff             = 16384
0.00.591.802 I llm_load_print_meta: n_expert         = 0
0.00.591.802 I llm_load_print_meta: n_expert_used    = 0
0.00.591.803 I llm_load_print_meta: causal attn      = 1
0.00.591.803 I llm_load_print_meta: pooling type     = 0
0.00.591.803 I llm_load_print_meta: rope type        = 2
0.00.591.804 I llm_load_print_meta: rope scaling     = linear
0.00.591.806 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.591.806 I llm_load_print_meta: freq_scale_train = 1
0.00.591.807 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.591.807 I llm_load_print_meta: rope_finetuned   = unknown
0.00.591.809 I llm_load_print_meta: ssm_d_conv       = 0
0.00.591.809 I llm_load_print_meta: ssm_d_inner      = 0
0.00.591.810 I llm_load_print_meta: ssm_d_state      = 0
0.00.591.820 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.591.821 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.591.822 I llm_load_print_meta: model type       = 2B
0.00.591.830 I llm_load_print_meta: model ftype      = Q8_0
0.00.591.843 I llm_load_print_meta: model params     = 2.51 B
0.00.591.844 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.591.848 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.591.849 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.591.849 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.591.850 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.591.859 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.591.860 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.591.861 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.591.867 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.591.869 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.591.869 I llm_load_print_meta: max token length = 93
0.00.592.032 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.693.757 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.693.766 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.693.767 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.693.767 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.693.768 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.693.769 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.699.419 I llama_new_context_with_model: n_ctx      = 8192
0.00.699.426 I llama_new_context_with_model: n_batch    = 2048
0.00.699.426 I llama_new_context_with_model: n_ubatch   = 512
0.00.699.427 I llama_new_context_with_model: flash_attn = 0
0.00.699.429 I llama_new_context_with_model: freq_base  = 10000.0
0.00.699.430 I llama_new_context_with_model: freq_scale = 1
0.00.727.633 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.727.674 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.727.783 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.729.196 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.729.203 I llama_new_context_with_model: graph nodes  = 601
0.00.729.203 I llama_new_context_with_model: graph splits = 1
0.00.729.219 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.339.122 I main: llama threadpool init, n_threads = 4
0.01.339.133 I 
0.01.339.239 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.339.243 I 
0.01.339.398 I sampler seed: 2431315429
0.01.339.408 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.339.414 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.339.414 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.339.415 I 
 increadibly complex problem and offer a clear and concise solution.

**Problem:**

A company has 100 employees, and 50 of them

0.14.896.339 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   670.99 tokens per second)
0.14.896.345 I llama_perf_context_print:        load time =    1336.10 ms
0.14.896.347 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.896.348 I llama_perf_context_print:        eval time =   13475.43 ms /    32 runs   (  421.11 ms per token,     2.37 tokens per second)
0.14.896.350 I llama_perf_context_print:       total time =   13557.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.666 I build: 3890 (f4b2dcdf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.870 I main: llama backend init
0.00.002.812 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.819 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.916 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.930 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.931 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.935 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.936 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.937 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.939 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.940 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.941 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.948 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.949 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.950 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.950 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.952 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.080 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.060 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.170 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.177 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.178 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.179 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.180 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.181 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.182 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.186 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.187 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.189 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.190 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.191 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.199 I llama_model_loader: - type  f32:   37 tensors
0.00.268.202 I llama_model_loader: - type q8_0:  127 tensors
0.00.432.879 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.457.054 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.458.092 I llm_load_vocab: special tokens cache size = 5
0.00.555.962 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.556.025 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.556.026 I llm_load_print_meta: arch             = gemma
0.00.556.027 I llm_load_print_meta: vocab type       = SPM
0.00.556.028 I llm_load_print_meta: n_vocab          = 256000
0.00.556.030 I llm_load_print_meta: n_merges         = 0
0.00.556.031 I llm_load_print_meta: vocab_only       = 0
0.00.556.031 I llm_load_print_meta: n_ctx_train      = 8192
0.00.556.032 I llm_load_print_meta: n_embd           = 2048
0.00.556.032 I llm_load_print_meta: n_layer          = 18
0.00.556.099 I llm_load_print_meta: n_head           = 8
0.00.556.105 I llm_load_print_meta: n_head_kv        = 1
0.00.556.106 I llm_load_print_meta: n_rot            = 256
0.00.556.106 I llm_load_print_meta: n_swa            = 0
0.00.556.106 I llm_load_print_meta: n_embd_head_k    = 256
0.00.556.107 I llm_load_print_meta: n_embd_head_v    = 256
0.00.556.111 I llm_load_print_meta: n_gqa            = 8
0.00.556.116 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.556.122 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.556.123 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.556.125 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.556.126 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.556.127 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.556.132 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.556.137 I llm_load_print_meta: n_ff             = 16384
0.00.556.137 I llm_load_print_meta: n_expert         = 0
0.00.556.137 I llm_load_print_meta: n_expert_used    = 0
0.00.556.138 I llm_load_print_meta: causal attn      = 1
0.00.556.138 I llm_load_print_meta: pooling type     = 0
0.00.556.150 I llm_load_print_meta: rope type        = 2
0.00.556.151 I llm_load_print_meta: rope scaling     = linear
0.00.556.163 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.556.164 I llm_load_print_meta: freq_scale_train = 1
0.00.556.164 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.556.165 I llm_load_print_meta: rope_finetuned   = unknown
0.00.556.165 I llm_load_print_meta: ssm_d_conv       = 0
0.00.556.165 I llm_load_print_meta: ssm_d_inner      = 0
0.00.556.165 I llm_load_print_meta: ssm_d_state      = 0
0.00.556.166 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.556.166 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.556.167 I llm_load_print_meta: model type       = 2B
0.00.556.175 I llm_load_print_meta: model ftype      = Q8_0
0.00.556.176 I llm_load_print_meta: model params     = 2.51 B
0.00.556.177 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.556.177 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.556.179 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.556.179 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.556.179 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.556.180 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.556.180 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.556.181 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.556.188 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.556.189 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.556.190 I llm_load_print_meta: max token length = 93
0.00.556.356 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.651.705 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.657.386 I llama_new_context_with_model: n_ctx      = 8192
0.00.657.393 I llama_new_context_with_model: n_batch    = 2048
0.00.657.394 I llama_new_context_with_model: n_ubatch   = 512
0.00.657.395 I llama_new_context_with_model: flash_attn = 0
0.00.657.397 I llama_new_context_with_model: freq_base  = 10000.0
0.00.657.398 I llama_new_context_with_model: freq_scale = 1
0.00.686.350 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.686.392 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.686.503 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.687.879 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.687.885 I llama_new_context_with_model: graph nodes  = 601
0.00.687.886 I llama_new_context_with_model: graph splits = 1
0.00.687.902 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.299.108 I main: llama threadpool init, n_threads = 4
0.01.299.121 I 
0.01.299.221 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.299.225 I 
0.01.299.383 I sampler seed: 3993119214
0.01.299.394 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.299.400 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.299.401 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.299.401 I 
 increasements
I am unable to access the requested page because it has been removed. [end of text]


0.08.936.014 I llama_perf_sampler_print:    sampling time =      28.00 ms /    19 runs   (    1.47 ms per token,   678.50 tokens per second)
0.08.936.017 I llama_perf_context_print:        load time =    1296.12 ms
0.08.936.042 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.936.044 I llama_perf_context_print:        eval time =    7589.78 ms /    18 runs   (  421.65 ms per token,     2.37 tokens per second)
0.08.936.045 I llama_perf_context_print:       total time =    7636.92 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.649 I build: 3890 (f4b2dcdf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.817 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.654 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.866 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.952 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.963 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.964 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.968 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.969 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.971 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.973 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.974 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.975 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.982 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.986 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.987 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.988 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.989 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.274 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.269.462 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.287.628 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.287.636 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.287.637 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.287.638 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.287.640 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.287.641 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.287.642 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.287.646 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.287.647 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.287.649 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.287.650 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.287.651 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.287.659 I llama_model_loader: - type  f32:   37 tensors
0.00.287.664 I llama_model_loader: - type q8_0:  127 tensors
0.00.455.461 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.480.348 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.481.427 I llm_load_vocab: special tokens cache size = 5
0.00.590.050 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.590.112 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.590.113 I llm_load_print_meta: arch             = gemma
0.00.590.114 I llm_load_print_meta: vocab type       = SPM
0.00.590.114 I llm_load_print_meta: n_vocab          = 256000
0.00.590.117 I llm_load_print_meta: n_merges         = 0
0.00.590.117 I llm_load_print_meta: vocab_only       = 0
0.00.590.118 I llm_load_print_meta: n_ctx_train      = 8192
0.00.590.118 I llm_load_print_meta: n_embd           = 2048
0.00.590.118 I llm_load_print_meta: n_layer          = 18
0.00.590.184 I llm_load_print_meta: n_head           = 8
0.00.590.191 I llm_load_print_meta: n_head_kv        = 1
0.00.590.192 I llm_load_print_meta: n_rot            = 256
0.00.590.192 I llm_load_print_meta: n_swa            = 0
0.00.590.193 I llm_load_print_meta: n_embd_head_k    = 256
0.00.590.193 I llm_load_print_meta: n_embd_head_v    = 256
0.00.590.198 I llm_load_print_meta: n_gqa            = 8
0.00.590.202 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.590.208 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.590.209 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.590.210 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.590.211 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.590.211 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.590.212 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.590.217 I llm_load_print_meta: n_ff             = 16384
0.00.590.219 I llm_load_print_meta: n_expert         = 0
0.00.590.219 I llm_load_print_meta: n_expert_used    = 0
0.00.590.219 I llm_load_print_meta: causal attn      = 1
0.00.590.220 I llm_load_print_meta: pooling type     = 0
0.00.590.220 I llm_load_print_meta: rope type        = 2
0.00.590.225 I llm_load_print_meta: rope scaling     = linear
0.00.590.226 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.590.228 I llm_load_print_meta: freq_scale_train = 1
0.00.590.229 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.590.229 I llm_load_print_meta: rope_finetuned   = unknown
0.00.590.229 I llm_load_print_meta: ssm_d_conv       = 0
0.00.590.241 I llm_load_print_meta: ssm_d_inner      = 0
0.00.590.242 I llm_load_print_meta: ssm_d_state      = 0
0.00.590.252 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.590.253 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.590.262 I llm_load_print_meta: model type       = 2B
0.00.590.280 I llm_load_print_meta: model ftype      = Q8_0
0.00.590.281 I llm_load_print_meta: model params     = 2.51 B
0.00.590.282 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.590.283 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.590.284 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.590.284 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.590.285 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.590.285 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.590.286 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.590.286 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.590.294 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.590.296 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.590.296 I llm_load_print_meta: max token length = 93
0.00.590.467 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.666.910 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.666.922 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.666.923 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.666.924 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.666.924 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.666.925 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.672.640 I llama_new_context_with_model: n_ctx      = 8192
0.00.672.648 I llama_new_context_with_model: n_batch    = 2048
0.00.672.649 I llama_new_context_with_model: n_ubatch   = 512
0.00.672.649 I llama_new_context_with_model: flash_attn = 0
0.00.672.651 I llama_new_context_with_model: freq_base  = 10000.0
0.00.672.652 I llama_new_context_with_model: freq_scale = 1
0.00.701.091 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.701.145 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.701.254 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.702.605 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.702.611 I llama_new_context_with_model: graph nodes  = 601
0.00.702.612 I llama_new_context_with_model: graph splits = 1
0.00.702.628 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.347.299 I main: llama threadpool init, n_threads = 4
0.01.347.311 I 
0.01.347.414 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.347.418 I 
0.01.347.582 I sampler seed: 12311487
0.01.347.593 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.347.601 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.347.602 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.347.602 I 
 increasively.

I am not sure how to make a video game.

It sounds like a fun and challenging project! Making a video game requires a lot

0.14.884.051 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.05 tokens per second)
0.14.884.055 I llama_perf_context_print:        load time =    1344.31 ms
0.14.884.071 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.884.073 I llama_perf_context_print:        eval time =   13455.02 ms /    32 runs   (  420.47 ms per token,     2.38 tokens per second)
0.14.884.074 I llama_perf_context_print:       total time =   13536.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.654 I build: 3890 (f4b2dcdf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.002.782 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.630 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.829 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.915 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.925 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.926 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.930 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.932 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.933 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.934 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.935 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.936 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.943 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.944 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.945 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.946 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.948 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.487 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.438 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.522 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.529 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.531 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.532 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.533 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.534 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.535 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.539 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.540 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.542 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.543 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.268.544 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.552 I llama_model_loader: - type  f32:   37 tensors
0.00.268.556 I llama_model_loader: - type q8_0:  127 tensors
0.00.425.666 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.448.425 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.449.424 I llm_load_vocab: special tokens cache size = 5
0.00.546.086 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.546.146 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.546.147 I llm_load_print_meta: arch             = gemma
0.00.546.148 I llm_load_print_meta: vocab type       = SPM
0.00.546.149 I llm_load_print_meta: n_vocab          = 256000
0.00.546.151 I llm_load_print_meta: n_merges         = 0
0.00.546.152 I llm_load_print_meta: vocab_only       = 0
0.00.546.152 I llm_load_print_meta: n_ctx_train      = 8192
0.00.546.153 I llm_load_print_meta: n_embd           = 2048
0.00.546.153 I llm_load_print_meta: n_layer          = 18
0.00.546.215 I llm_load_print_meta: n_head           = 8
0.00.546.222 I llm_load_print_meta: n_head_kv        = 1
0.00.546.222 I llm_load_print_meta: n_rot            = 256
0.00.546.223 I llm_load_print_meta: n_swa            = 0
0.00.546.223 I llm_load_print_meta: n_embd_head_k    = 256
0.00.546.223 I llm_load_print_meta: n_embd_head_v    = 256
0.00.546.227 I llm_load_print_meta: n_gqa            = 8
0.00.546.232 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.546.237 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.546.238 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.546.254 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.546.256 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.546.256 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.546.257 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.546.263 I llm_load_print_meta: n_ff             = 16384
0.00.546.264 I llm_load_print_meta: n_expert         = 0
0.00.546.264 I llm_load_print_meta: n_expert_used    = 0
0.00.546.265 I llm_load_print_meta: causal attn      = 1
0.00.546.265 I llm_load_print_meta: pooling type     = 0
0.00.546.265 I llm_load_print_meta: rope type        = 2
0.00.546.272 I llm_load_print_meta: rope scaling     = linear
0.00.546.273 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.546.274 I llm_load_print_meta: freq_scale_train = 1
0.00.546.279 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.546.280 I llm_load_print_meta: rope_finetuned   = unknown
0.00.546.280 I llm_load_print_meta: ssm_d_conv       = 0
0.00.546.281 I llm_load_print_meta: ssm_d_inner      = 0
0.00.546.285 I llm_load_print_meta: ssm_d_state      = 0
0.00.546.286 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.546.286 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.546.287 I llm_load_print_meta: model type       = 2B
0.00.546.296 I llm_load_print_meta: model ftype      = Q8_0
0.00.546.297 I llm_load_print_meta: model params     = 2.51 B
0.00.546.298 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.546.298 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.546.299 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.546.300 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.546.301 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.546.302 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.546.303 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.546.304 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.546.311 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.546.312 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.546.313 I llm_load_print_meta: max token length = 93
0.00.546.480 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.617.349 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.617.358 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.622.934 I llama_new_context_with_model: n_ctx      = 8192
0.00.622.941 I llama_new_context_with_model: n_batch    = 2048
0.00.622.941 I llama_new_context_with_model: n_ubatch   = 512
0.00.622.942 I llama_new_context_with_model: flash_attn = 0
0.00.622.944 I llama_new_context_with_model: freq_base  = 10000.0
0.00.622.945 I llama_new_context_with_model: freq_scale = 1
0.00.651.396 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.651.438 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.651.552 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.652.922 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.652.928 I llama_new_context_with_model: graph nodes  = 601
0.00.652.929 I llama_new_context_with_model: graph splits = 1
0.00.652.944 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.265.146 I main: llama threadpool init, n_threads = 4
0.01.265.157 I 
0.01.265.260 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.265.264 I 
0.01.265.427 I sampler seed: 273979416
0.01.265.438 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.265.445 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.265.445 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.265.446 I 
 increasels,
And whisper secrets through the rustling leaves.

Who am I? [end of text]


0.08.895.866 I llama_perf_sampler_print:    sampling time =      27.69 ms /    19 runs   (    1.46 ms per token,   686.14 tokens per second)
0.08.895.869 I llama_perf_context_print:        load time =    1262.18 ms
0.08.895.870 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.895.871 I llama_perf_context_print:        eval time =    7583.48 ms /    18 runs   (  421.30 ms per token,     2.37 tokens per second)
0.08.895.872 I llama_perf_context_print:       total time =    7630.73 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m57.153s
user	3m2.057s
sys	0m9.405s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3890 (f4b2dcdf)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199076.91 ms
main:    total time = 199076.91 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.649 I build: 3890 (f4b2dcdf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.002.813 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.165 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.365 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.455 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.467 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.469 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.474 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.477 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.478 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.479 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.480 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.481 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.489 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.490 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.492 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.494 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.495 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.019 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.272.905 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.290.959 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.290.966 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.290.967 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.290.968 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.290.969 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.290.971 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.290.972 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.290.976 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.290.977 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.290.978 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.290.979 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.290.980 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.290.987 I llama_model_loader: - type  f32:   37 tensors
0.00.290.991 I llama_model_loader: - type q4_K:  108 tensors
0.00.290.992 I llama_model_loader: - type q6_K:   19 tensors
0.00.441.229 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.462.653 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.463.632 I llm_load_vocab: special tokens cache size = 5
0.00.577.599 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.577.661 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.577.662 I llm_load_print_meta: arch             = gemma
0.00.577.663 I llm_load_print_meta: vocab type       = SPM
0.00.577.664 I llm_load_print_meta: n_vocab          = 256000
0.00.577.666 I llm_load_print_meta: n_merges         = 0
0.00.577.666 I llm_load_print_meta: vocab_only       = 0
0.00.577.667 I llm_load_print_meta: n_ctx_train      = 8192
0.00.577.667 I llm_load_print_meta: n_embd           = 2048
0.00.577.667 I llm_load_print_meta: n_layer          = 18
0.00.577.734 I llm_load_print_meta: n_head           = 8
0.00.577.743 I llm_load_print_meta: n_head_kv        = 1
0.00.577.743 I llm_load_print_meta: n_rot            = 256
0.00.577.744 I llm_load_print_meta: n_swa            = 0
0.00.577.744 I llm_load_print_meta: n_embd_head_k    = 256
0.00.577.744 I llm_load_print_meta: n_embd_head_v    = 256
0.00.577.749 I llm_load_print_meta: n_gqa            = 8
0.00.577.753 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.577.758 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.577.760 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.577.761 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.577.761 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.577.762 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.577.762 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.577.781 I llm_load_print_meta: n_ff             = 16384
0.00.577.785 I llm_load_print_meta: n_expert         = 0
0.00.577.786 I llm_load_print_meta: n_expert_used    = 0
0.00.577.786 I llm_load_print_meta: causal attn      = 1
0.00.577.786 I llm_load_print_meta: pooling type     = 0
0.00.577.787 I llm_load_print_meta: rope type        = 2
0.00.577.788 I llm_load_print_meta: rope scaling     = linear
0.00.577.790 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.577.791 I llm_load_print_meta: freq_scale_train = 1
0.00.577.791 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.577.792 I llm_load_print_meta: rope_finetuned   = unknown
0.00.577.792 I llm_load_print_meta: ssm_d_conv       = 0
0.00.577.792 I llm_load_print_meta: ssm_d_inner      = 0
0.00.577.796 I llm_load_print_meta: ssm_d_state      = 0
0.00.577.796 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.577.797 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.577.797 I llm_load_print_meta: model type       = 2B
0.00.577.808 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.577.810 I llm_load_print_meta: model params     = 2.51 B
0.00.577.811 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.577.811 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.577.812 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.577.812 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.577.813 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.577.813 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.577.814 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.577.815 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.577.821 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.577.823 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.577.823 I llm_load_print_meta: max token length = 93
0.00.577.996 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.636.678 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.636.689 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.636.690 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.636.691 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.636.691 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.636.692 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.642.294 I llama_new_context_with_model: n_ctx      = 8192
0.00.642.301 I llama_new_context_with_model: n_batch    = 2048
0.00.642.302 I llama_new_context_with_model: n_ubatch   = 512
0.00.642.302 I llama_new_context_with_model: flash_attn = 0
0.00.642.305 I llama_new_context_with_model: freq_base  = 10000.0
0.00.642.306 I llama_new_context_with_model: freq_scale = 1
0.00.671.151 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.671.193 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.671.302 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.672.718 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.672.724 I llama_new_context_with_model: graph nodes  = 601
0.00.672.724 I llama_new_context_with_model: graph splits = 1
0.00.672.740 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.250.335 I main: llama threadpool init, n_threads = 4
0.01.250.348 I 
0.01.250.457 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.250.461 I 
0.01.250.627 I sampler seed: 3925194951
0.01.250.637 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.250.645 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.250.647 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.250.647 I 
 seconally.

I. The girl smiled at the boy.
II. The boy smiled back.

**What do these sentences reveal about the characters?

0.12.249.891 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.72 tokens per second)
0.12.249.894 I llama_perf_context_print:        load time =    1247.33 ms
0.12.249.896 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.249.910 I llama_perf_context_print:        eval time =   10918.11 ms /    32 runs   (  341.19 ms per token,     2.93 tokens per second)
0.12.249.911 I llama_perf_context_print:       total time =   10999.57 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3890 (f4b2dcdf)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198944.02 ms
main:    total time = 198944.02 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.642 I build: 3890 (f4b2dcdf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.808 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.869 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.967 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.982 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.983 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.988 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.989 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.991 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.992 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.994 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.003 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.010 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.013 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.014 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.015 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.016 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.357 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.633 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.798 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.807 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.809 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.810 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.811 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.812 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.814 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.818 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.819 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.828 I llama_model_loader: - type  f32:   37 tensors
0.00.268.832 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.833 I llama_model_loader: - type q6_K:   19 tensors
0.00.432.785 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.455.374 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.456.449 I llm_load_vocab: special tokens cache size = 5
0.00.558.715 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.558.779 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.558.780 I llm_load_print_meta: arch             = gemma
0.00.558.780 I llm_load_print_meta: vocab type       = SPM
0.00.558.781 I llm_load_print_meta: n_vocab          = 256000
0.00.558.784 I llm_load_print_meta: n_merges         = 0
0.00.558.785 I llm_load_print_meta: vocab_only       = 0
0.00.558.785 I llm_load_print_meta: n_ctx_train      = 8192
0.00.558.785 I llm_load_print_meta: n_embd           = 2048
0.00.558.786 I llm_load_print_meta: n_layer          = 18
0.00.558.850 I llm_load_print_meta: n_head           = 8
0.00.558.857 I llm_load_print_meta: n_head_kv        = 1
0.00.558.858 I llm_load_print_meta: n_rot            = 256
0.00.558.858 I llm_load_print_meta: n_swa            = 0
0.00.558.858 I llm_load_print_meta: n_embd_head_k    = 256
0.00.558.859 I llm_load_print_meta: n_embd_head_v    = 256
0.00.558.864 I llm_load_print_meta: n_gqa            = 8
0.00.558.891 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.558.904 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.558.907 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.558.908 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.558.908 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.558.909 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.558.917 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.558.926 I llm_load_print_meta: n_ff             = 16384
0.00.558.926 I llm_load_print_meta: n_expert         = 0
0.00.558.927 I llm_load_print_meta: n_expert_used    = 0
0.00.558.927 I llm_load_print_meta: causal attn      = 1
0.00.558.927 I llm_load_print_meta: pooling type     = 0
0.00.558.927 I llm_load_print_meta: rope type        = 2
0.00.558.928 I llm_load_print_meta: rope scaling     = linear
0.00.558.929 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.558.930 I llm_load_print_meta: freq_scale_train = 1
0.00.558.930 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.558.930 I llm_load_print_meta: rope_finetuned   = unknown
0.00.558.930 I llm_load_print_meta: ssm_d_conv       = 0
0.00.558.938 I llm_load_print_meta: ssm_d_inner      = 0
0.00.558.939 I llm_load_print_meta: ssm_d_state      = 0
0.00.558.941 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.558.942 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.558.942 I llm_load_print_meta: model type       = 2B
0.00.558.953 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.558.954 I llm_load_print_meta: model params     = 2.51 B
0.00.558.954 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.558.955 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.558.955 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.558.956 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.558.956 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.558.957 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.558.957 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.558.958 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.558.965 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.558.967 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.558.968 I llm_load_print_meta: max token length = 93
0.00.559.135 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.616.813 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.622.391 I llama_new_context_with_model: n_ctx      = 8192
0.00.622.398 I llama_new_context_with_model: n_batch    = 2048
0.00.622.398 I llama_new_context_with_model: n_ubatch   = 512
0.00.622.399 I llama_new_context_with_model: flash_attn = 0
0.00.622.401 I llama_new_context_with_model: freq_base  = 10000.0
0.00.622.402 I llama_new_context_with_model: freq_scale = 1
0.00.653.573 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.653.615 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.653.728 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.655.086 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.655.092 I llama_new_context_with_model: graph nodes  = 601
0.00.655.092 I llama_new_context_with_model: graph splits = 1
0.00.655.107 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.232.708 I main: llama threadpool init, n_threads = 4
0.01.232.722 I 
0.01.232.832 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.232.836 I 
0.01.232.997 I sampler seed: 3467541611
0.01.233.008 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.233.014 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.233.015 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.233.015 I 
 encompates a range of topics that intersect with the theme of artificial intelligence, including:

**Artificial Intelligence Applications:**

* Facial recognition systems
* Predictive analytics

0.12.156.564 I llama_perf_sampler_print:    sampling time =      49.39 ms /    33 runs   (    1.50 ms per token,   668.14 tokens per second)
0.12.156.567 I llama_perf_context_print:        load time =    1229.72 ms
0.12.156.568 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.156.581 I llama_perf_context_print:        eval time =   10842.09 ms /    32 runs   (  338.82 ms per token,     2.95 tokens per second)
0.12.156.582 I llama_perf_context_print:       total time =   10923.86 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.314s
user	50m17.740s
sys	0m6.510s
