+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.543 I build: 4157 (f4f2a889) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.735 I main: llama backend init
0.00.000.744 I main: load the model and apply lora adapter, if any
0.00.021.355 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.365 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.372 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.377 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.381 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.385 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.386 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.386 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.387 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.387 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.388 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.392 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.392 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.393 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.393 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.394 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.573 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.041 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.905 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.913 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.914 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.915 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.915 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.916 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.917 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.919 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.920 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.921 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.922 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.923 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.927 I llama_model_loader: - type  f32:   37 tensors
0.00.130.928 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.929 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.558 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.096 I llm_load_vocab: special tokens cache size = 5
0.00.267.926 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.941 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.942 I llm_load_print_meta: arch             = gemma
0.00.267.942 I llm_load_print_meta: vocab type       = SPM
0.00.267.943 I llm_load_print_meta: n_vocab          = 256000
0.00.267.943 I llm_load_print_meta: n_merges         = 0
0.00.267.944 I llm_load_print_meta: vocab_only       = 0
0.00.267.944 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.944 I llm_load_print_meta: n_embd           = 2048
0.00.267.945 I llm_load_print_meta: n_layer          = 18
0.00.267.956 I llm_load_print_meta: n_head           = 8
0.00.267.957 I llm_load_print_meta: n_head_kv        = 1
0.00.267.957 I llm_load_print_meta: n_rot            = 256
0.00.267.958 I llm_load_print_meta: n_swa            = 0
0.00.267.958 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.958 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.959 I llm_load_print_meta: n_gqa            = 8
0.00.267.960 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.961 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.962 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.964 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.964 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.964 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.965 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.966 I llm_load_print_meta: n_ff             = 16384
0.00.267.966 I llm_load_print_meta: n_expert         = 0
0.00.267.966 I llm_load_print_meta: n_expert_used    = 0
0.00.267.967 I llm_load_print_meta: causal attn      = 1
0.00.267.968 I llm_load_print_meta: pooling type     = 0
0.00.267.968 I llm_load_print_meta: rope type        = 2
0.00.267.968 I llm_load_print_meta: rope scaling     = linear
0.00.267.969 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.970 I llm_load_print_meta: freq_scale_train = 1
0.00.267.970 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.971 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.971 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.971 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.972 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.972 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.972 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.973 I llm_load_print_meta: model type       = 2B
0.00.267.973 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.974 I llm_load_print_meta: model params     = 2.51 B
0.00.267.975 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.976 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.976 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.977 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.977 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.977 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.977 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.977 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.978 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.978 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.979 I llm_load_print_meta: max token length = 93
0.00.368.911 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.368.918 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.368.919 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.368.919 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.368.920 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.368.921 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.374.192 I llama_new_context_with_model: n_seq_max     = 1
0.00.374.199 I llama_new_context_with_model: n_ctx         = 4096
0.00.374.199 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.374.200 I llama_new_context_with_model: n_batch       = 2048
0.00.374.200 I llama_new_context_with_model: n_ubatch      = 512
0.00.374.201 I llama_new_context_with_model: flash_attn    = 0
0.00.374.203 I llama_new_context_with_model: freq_base     = 10000.0
0.00.374.204 I llama_new_context_with_model: freq_scale    = 1
0.00.374.205 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.388.535 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.388.548 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.388.635 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.894 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.901 I llama_new_context_with_model: graph nodes  = 601
0.00.389.902 I llama_new_context_with_model: graph splits = 1
0.00.389.903 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.890 I main: llama threadpool init, n_threads = 4
0.00.474.908 I 
0.00.474.993 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.474.998 I 
0.00.475.056 I sampler seed: 222594599
0.00.475.072 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.078 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.080 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.080 I 
 increably.

I am unable to understand the provided text. Please provide additional context or clarification so I can better assist you. [end of text]


0.02.365.576 I llama_perf_sampler_print:    sampling time =       4.00 ms /    28 runs   (    0.14 ms per token,  6996.50 tokens per second)
0.02.365.578 I llama_perf_context_print:        load time =     474.13 ms
0.02.365.580 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.365.581 I llama_perf_context_print:        eval time =    1874.92 ms /    27 runs   (   69.44 ms per token,    14.40 tokens per second)
0.02.365.582 I llama_perf_context_print:       total time =    1890.69 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.541 I build: 4157 (f4f2a889) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.000.757 I main: load the model and apply lora adapter, if any
0.00.021.306 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.320 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.327 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.328 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.333 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.337 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.338 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.339 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.341 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.342 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.347 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.348 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.349 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.350 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.351 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.735 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.744 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.569 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.576 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.577 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.577 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.578 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.579 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.580 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.582 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.582 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.583 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.584 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.585 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.589 I llama_model_loader: - type  f32:   37 tensors
0.00.130.591 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.887 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.764 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.307 I llm_load_vocab: special tokens cache size = 5
0.00.260.163 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.177 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.178 I llm_load_print_meta: arch             = gemma
0.00.260.178 I llm_load_print_meta: vocab type       = SPM
0.00.260.179 I llm_load_print_meta: n_vocab          = 256000
0.00.260.180 I llm_load_print_meta: n_merges         = 0
0.00.260.180 I llm_load_print_meta: vocab_only       = 0
0.00.260.180 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.181 I llm_load_print_meta: n_embd           = 2048
0.00.260.181 I llm_load_print_meta: n_layer          = 18
0.00.260.191 I llm_load_print_meta: n_head           = 8
0.00.260.192 I llm_load_print_meta: n_head_kv        = 1
0.00.260.193 I llm_load_print_meta: n_rot            = 256
0.00.260.193 I llm_load_print_meta: n_swa            = 0
0.00.260.193 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.194 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.194 I llm_load_print_meta: n_gqa            = 8
0.00.260.195 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.196 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.197 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.198 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.199 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.199 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.199 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.200 I llm_load_print_meta: n_ff             = 16384
0.00.260.201 I llm_load_print_meta: n_expert         = 0
0.00.260.201 I llm_load_print_meta: n_expert_used    = 0
0.00.260.201 I llm_load_print_meta: causal attn      = 1
0.00.260.202 I llm_load_print_meta: pooling type     = 0
0.00.260.202 I llm_load_print_meta: rope type        = 2
0.00.260.202 I llm_load_print_meta: rope scaling     = linear
0.00.260.204 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.204 I llm_load_print_meta: freq_scale_train = 1
0.00.260.204 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.205 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.205 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.205 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.205 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.206 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.206 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.207 I llm_load_print_meta: model type       = 2B
0.00.260.207 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.208 I llm_load_print_meta: model params     = 2.51 B
0.00.260.209 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.209 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.210 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.210 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.211 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.211 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.211 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.211 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.212 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.212 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.212 I llm_load_print_meta: max token length = 93
0.00.355.605 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.360.908 I llama_new_context_with_model: n_seq_max     = 1
0.00.360.915 I llama_new_context_with_model: n_ctx         = 4096
0.00.360.915 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.360.916 I llama_new_context_with_model: n_batch       = 2048
0.00.360.916 I llama_new_context_with_model: n_ubatch      = 512
0.00.360.916 I llama_new_context_with_model: flash_attn    = 0
0.00.360.919 I llama_new_context_with_model: freq_base     = 10000.0
0.00.360.920 I llama_new_context_with_model: freq_scale    = 1
0.00.360.921 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.375.464 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.375.479 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.375.566 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.798 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.376.804 I llama_new_context_with_model: graph nodes  = 601
0.00.376.805 I llama_new_context_with_model: graph splits = 1
0.00.376.807 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.456.942 I main: llama threadpool init, n_threads = 4
0.00.456.955 I 
0.00.457.043 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.457.047 I 
0.00.457.094 I sampler seed: 373050639
0.00.457.107 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.457.111 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.457.112 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.457.113 I 
 increasements of the past, it is important to remember the following:

**1. Context matters.** Understanding the historical context of a situation is crucial for appreciating

0.02.625.297 I llama_perf_sampler_print:    sampling time =       4.88 ms /    33 runs   (    0.15 ms per token,  6769.23 tokens per second)
0.02.625.300 I llama_perf_context_print:        load time =     456.17 ms
0.02.625.302 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.625.304 I llama_perf_context_print:        eval time =    2149.30 ms /    32 runs   (   67.17 ms per token,    14.89 tokens per second)
0.02.625.305 I llama_perf_context_print:       total time =    2168.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.567 I build: 4157 (f4f2a889) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.769 I main: llama backend init
0.00.000.776 I main: load the model and apply lora adapter, if any
0.00.021.615 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.626 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.633 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.639 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.640 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.644 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.645 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.646 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.646 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.646 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.647 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.652 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.652 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.653 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.653 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.654 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.047 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.183 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.006 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.012 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.013 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.014 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.014 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.016 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.017 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.020 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.021 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.022 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.023 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.024 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.030 I llama_model_loader: - type  f32:   37 tensors
0.00.132.031 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.200 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.170 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.711 I llm_load_vocab: special tokens cache size = 5
0.00.262.453 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.469 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.469 I llm_load_print_meta: arch             = gemma
0.00.262.469 I llm_load_print_meta: vocab type       = SPM
0.00.262.470 I llm_load_print_meta: n_vocab          = 256000
0.00.262.471 I llm_load_print_meta: n_merges         = 0
0.00.262.471 I llm_load_print_meta: vocab_only       = 0
0.00.262.472 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.472 I llm_load_print_meta: n_embd           = 2048
0.00.262.472 I llm_load_print_meta: n_layer          = 18
0.00.262.483 I llm_load_print_meta: n_head           = 8
0.00.262.484 I llm_load_print_meta: n_head_kv        = 1
0.00.262.484 I llm_load_print_meta: n_rot            = 256
0.00.262.484 I llm_load_print_meta: n_swa            = 0
0.00.262.485 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.485 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.486 I llm_load_print_meta: n_gqa            = 8
0.00.262.487 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.488 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.489 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.491 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.491 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.491 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.492 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.493 I llm_load_print_meta: n_ff             = 16384
0.00.262.493 I llm_load_print_meta: n_expert         = 0
0.00.262.494 I llm_load_print_meta: n_expert_used    = 0
0.00.262.494 I llm_load_print_meta: causal attn      = 1
0.00.262.494 I llm_load_print_meta: pooling type     = 0
0.00.262.494 I llm_load_print_meta: rope type        = 2
0.00.262.495 I llm_load_print_meta: rope scaling     = linear
0.00.262.496 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.497 I llm_load_print_meta: freq_scale_train = 1
0.00.262.497 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.498 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.498 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.498 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.498 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.499 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.499 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.499 I llm_load_print_meta: model type       = 2B
0.00.262.500 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.501 I llm_load_print_meta: model params     = 2.51 B
0.00.262.502 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.502 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.503 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.503 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.503 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.503 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.504 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.504 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.505 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.505 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.505 I llm_load_print_meta: max token length = 93
0.00.335.818 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.335.824 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.335.825 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.335.826 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.335.826 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.335.827 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.340.971 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.977 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.977 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.978 I llama_new_context_with_model: n_batch       = 2048
0.00.340.978 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.979 I llama_new_context_with_model: flash_attn    = 0
0.00.340.980 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.981 I llama_new_context_with_model: freq_scale    = 1
0.00.340.982 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.655 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.670 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.355.767 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.356.987 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.356.994 I llama_new_context_with_model: graph nodes  = 601
0.00.356.995 I llama_new_context_with_model: graph splits = 1
0.00.356.997 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.442.999 I main: llama threadpool init, n_threads = 4
0.00.443.014 I 
0.00.443.092 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.443.095 I 
0.00.443.138 I sampler seed: 2110226778
0.00.443.150 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.443.153 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.443.156 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.443.156 I 
 increasities.

I am unable to generate the requested response as it contains sexually suggestive content. [end of text]


0.01.859.557 I llama_perf_sampler_print:    sampling time =       3.03 ms /    21 runs   (    0.14 ms per token,  6930.69 tokens per second)
0.01.859.560 I llama_perf_context_print:        load time =     442.20 ms
0.01.859.561 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.859.562 I llama_perf_context_print:        eval time =    1404.82 ms /    20 runs   (   70.24 ms per token,    14.24 tokens per second)
0.01.859.563 I llama_perf_context_print:       total time =    1416.57 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.591 I build: 4157 (f4f2a889) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.796 I main: llama backend init
0.00.000.804 I main: load the model and apply lora adapter, if any
0.00.021.391 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.402 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.410 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.414 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.415 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.420 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.421 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.421 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.422 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.422 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.422 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.427 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.428 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.429 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.430 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.430 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.770 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.748 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.648 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.655 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.656 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.657 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.657 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.658 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.659 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.661 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.662 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.663 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.664 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.664 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.668 I llama_model_loader: - type  f32:   37 tensors
0.00.131.670 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.374 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.291 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.771 I llm_load_vocab: special tokens cache size = 5
0.00.263.663 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.678 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.679 I llm_load_print_meta: arch             = gemma
0.00.263.679 I llm_load_print_meta: vocab type       = SPM
0.00.263.680 I llm_load_print_meta: n_vocab          = 256000
0.00.263.681 I llm_load_print_meta: n_merges         = 0
0.00.263.681 I llm_load_print_meta: vocab_only       = 0
0.00.263.681 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.698 I llm_load_print_meta: n_embd           = 2048
0.00.263.699 I llm_load_print_meta: n_layer          = 18
0.00.263.711 I llm_load_print_meta: n_head           = 8
0.00.263.712 I llm_load_print_meta: n_head_kv        = 1
0.00.263.714 I llm_load_print_meta: n_rot            = 256
0.00.263.714 I llm_load_print_meta: n_swa            = 0
0.00.263.714 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.715 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.716 I llm_load_print_meta: n_gqa            = 8
0.00.263.717 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.718 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.719 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.720 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.721 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.722 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.722 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.723 I llm_load_print_meta: n_ff             = 16384
0.00.263.724 I llm_load_print_meta: n_expert         = 0
0.00.263.725 I llm_load_print_meta: n_expert_used    = 0
0.00.263.725 I llm_load_print_meta: causal attn      = 1
0.00.263.725 I llm_load_print_meta: pooling type     = 0
0.00.263.726 I llm_load_print_meta: rope type        = 2
0.00.263.726 I llm_load_print_meta: rope scaling     = linear
0.00.263.728 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.729 I llm_load_print_meta: freq_scale_train = 1
0.00.263.729 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.730 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.731 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.732 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.732 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.733 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.734 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.735 I llm_load_print_meta: model type       = 2B
0.00.263.736 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.737 I llm_load_print_meta: model params     = 2.51 B
0.00.263.738 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.739 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.740 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.741 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.741 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.742 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.742 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.743 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.744 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.744 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.745 I llm_load_print_meta: max token length = 93
0.00.335.054 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.335.060 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.340.194 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.200 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.201 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.201 I llama_new_context_with_model: n_batch       = 2048
0.00.340.202 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.202 I llama_new_context_with_model: flash_attn    = 0
0.00.340.204 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.205 I llama_new_context_with_model: freq_scale    = 1
0.00.340.206 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.764 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.777 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.355.874 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.164 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.171 I llama_new_context_with_model: graph nodes  = 601
0.00.357.171 I llama_new_context_with_model: graph splits = 1
0.00.357.173 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.443.545 I main: llama threadpool init, n_threads = 4
0.00.443.557 I 
0.00.443.643 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.443.647 I 
0.00.443.698 I sampler seed: 450419473
0.00.443.709 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.443.714 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.443.715 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.443.715 I 
 increasities, and other forms of deception can negatively impact the integrity of a research study.

**Identify and discuss the ethical implications of deception in research.**



0.02.861.216 I llama_perf_sampler_print:    sampling time =       4.95 ms /    33 runs   (    0.15 ms per token,  6666.67 tokens per second)
0.02.861.219 I llama_perf_context_print:        load time =     442.72 ms
0.02.861.220 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.861.222 I llama_perf_context_print:        eval time =    2398.48 ms /    32 runs   (   74.95 ms per token,    13.34 tokens per second)
0.02.861.224 I llama_perf_context_print:       total time =    2417.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.230s
user	0m34.313s
sys	0m9.324s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4157 (f4f2a889)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40193.78 ms
main:    total time = 40193.78 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.579 I build: 4157 (f4f2a889) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.772 I main: llama backend init
0.00.000.778 I main: load the model and apply lora adapter, if any
0.00.021.593 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.603 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.612 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.617 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.618 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.624 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.624 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.625 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.625 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.626 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.627 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.630 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.631 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.631 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.632 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.633 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.391 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.647 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.542 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.549 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.550 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.550 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.551 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.552 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.553 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.556 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.556 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.557 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.557 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.558 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.562 I llama_model_loader: - type  f32:   37 tensors
0.00.131.563 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.563 I llama_model_loader: - type q6_K:   19 tensors
0.00.208.455 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.815 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.366 I llm_load_vocab: special tokens cache size = 5
0.00.269.082 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.097 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.098 I llm_load_print_meta: arch             = gemma
0.00.269.099 I llm_load_print_meta: vocab type       = SPM
0.00.269.099 I llm_load_print_meta: n_vocab          = 256000
0.00.269.100 I llm_load_print_meta: n_merges         = 0
0.00.269.100 I llm_load_print_meta: vocab_only       = 0
0.00.269.101 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.101 I llm_load_print_meta: n_embd           = 2048
0.00.269.101 I llm_load_print_meta: n_layer          = 18
0.00.269.112 I llm_load_print_meta: n_head           = 8
0.00.269.113 I llm_load_print_meta: n_head_kv        = 1
0.00.269.113 I llm_load_print_meta: n_rot            = 256
0.00.269.113 I llm_load_print_meta: n_swa            = 0
0.00.269.114 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.114 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.115 I llm_load_print_meta: n_gqa            = 8
0.00.269.116 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.117 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.118 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.119 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.119 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.119 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.120 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.121 I llm_load_print_meta: n_ff             = 16384
0.00.269.121 I llm_load_print_meta: n_expert         = 0
0.00.269.121 I llm_load_print_meta: n_expert_used    = 0
0.00.269.122 I llm_load_print_meta: causal attn      = 1
0.00.269.122 I llm_load_print_meta: pooling type     = 0
0.00.269.122 I llm_load_print_meta: rope type        = 2
0.00.269.123 I llm_load_print_meta: rope scaling     = linear
0.00.269.124 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.125 I llm_load_print_meta: freq_scale_train = 1
0.00.269.125 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.125 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.126 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.127 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.127 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.127 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.127 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.128 I llm_load_print_meta: model type       = 2B
0.00.269.129 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.269.129 I llm_load_print_meta: model params     = 2.51 B
0.00.269.130 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.269.131 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.131 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.131 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.132 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.132 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.132 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.133 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.134 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.134 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.135 I llm_load_print_meta: max token length = 93
0.00.328.573 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.328.580 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.328.581 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.328.581 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.328.582 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.328.582 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.333.697 I llama_new_context_with_model: n_seq_max     = 1
0.00.333.705 I llama_new_context_with_model: n_ctx         = 4096
0.00.333.705 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.333.706 I llama_new_context_with_model: n_batch       = 2048
0.00.333.706 I llama_new_context_with_model: n_ubatch      = 512
0.00.333.707 I llama_new_context_with_model: flash_attn    = 0
0.00.333.709 I llama_new_context_with_model: freq_base     = 10000.0
0.00.333.710 I llama_new_context_with_model: freq_scale    = 1
0.00.333.711 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.348.009 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.348.022 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.348.112 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.365 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.349.371 I llama_new_context_with_model: graph nodes  = 601
0.00.349.372 I llama_new_context_with_model: graph splits = 1
0.00.349.374 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.423.807 I main: llama threadpool init, n_threads = 4
0.00.423.819 I 
0.00.423.892 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.423.896 I 
0.00.423.942 I sampler seed: 2430298117
0.00.423.953 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.423.958 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.423.959 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.423.959 I 
 seconally.

I'm not sure if I should write "Hello world!" or "Hello, world!"

Both options are grammatically correct, but

0.01.974.941 I llama_perf_sampler_print:    sampling time =       5.05 ms /    33 runs   (    0.15 ms per token,  6537.24 tokens per second)
0.01.974.944 I llama_perf_context_print:        load time =     423.01 ms
0.01.974.946 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.974.948 I llama_perf_context_print:        eval time =    1532.69 ms /    32 runs   (   47.90 ms per token,    20.88 tokens per second)
0.01.974.950 I llama_perf_context_print:       total time =    1551.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4157 (f4f2a889)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40141.19 ms
main:    total time = 40141.19 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.546 I build: 4157 (f4f2a889) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.774 I main: llama backend init
0.00.000.781 I main: load the model and apply lora adapter, if any
0.00.020.999 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.015 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.021 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.022 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.026 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.031 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.031 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.032 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.033 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.035 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.039 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.040 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.041 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.042 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.043 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.566 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.162 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.050 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.057 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.058 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.059 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.060 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.061 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.062 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.065 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.066 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.069 I llama_model_loader: - type  f32:   37 tensors
0.00.130.071 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.072 I llama_model_loader: - type q6_K:   19 tensors
0.00.199.832 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.236.823 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.237.323 I llm_load_vocab: special tokens cache size = 5
0.00.258.009 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.258.028 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.258.029 I llm_load_print_meta: arch             = gemma
0.00.258.029 I llm_load_print_meta: vocab type       = SPM
0.00.258.031 I llm_load_print_meta: n_vocab          = 256000
0.00.258.031 I llm_load_print_meta: n_merges         = 0
0.00.258.041 I llm_load_print_meta: vocab_only       = 0
0.00.258.042 I llm_load_print_meta: n_ctx_train      = 8192
0.00.258.042 I llm_load_print_meta: n_embd           = 2048
0.00.258.043 I llm_load_print_meta: n_layer          = 18
0.00.258.059 I llm_load_print_meta: n_head           = 8
0.00.258.060 I llm_load_print_meta: n_head_kv        = 1
0.00.258.061 I llm_load_print_meta: n_rot            = 256
0.00.258.061 I llm_load_print_meta: n_swa            = 0
0.00.258.062 I llm_load_print_meta: n_embd_head_k    = 256
0.00.258.062 I llm_load_print_meta: n_embd_head_v    = 256
0.00.258.064 I llm_load_print_meta: n_gqa            = 8
0.00.258.065 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.258.066 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.258.068 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.258.069 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.258.069 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.258.070 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.258.070 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.258.072 I llm_load_print_meta: n_ff             = 16384
0.00.258.072 I llm_load_print_meta: n_expert         = 0
0.00.258.073 I llm_load_print_meta: n_expert_used    = 0
0.00.258.073 I llm_load_print_meta: causal attn      = 1
0.00.258.074 I llm_load_print_meta: pooling type     = 0
0.00.258.075 I llm_load_print_meta: rope type        = 2
0.00.258.075 I llm_load_print_meta: rope scaling     = linear
0.00.258.078 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.258.082 I llm_load_print_meta: freq_scale_train = 1
0.00.258.082 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.258.083 I llm_load_print_meta: rope_finetuned   = unknown
0.00.258.083 I llm_load_print_meta: ssm_d_conv       = 0
0.00.258.084 I llm_load_print_meta: ssm_d_inner      = 0
0.00.258.084 I llm_load_print_meta: ssm_d_state      = 0
0.00.258.084 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.258.085 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.258.086 I llm_load_print_meta: model type       = 2B
0.00.258.087 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.258.088 I llm_load_print_meta: model params     = 2.51 B
0.00.258.089 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.258.089 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.258.090 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.258.090 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.258.091 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.258.092 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.258.092 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.258.093 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.258.093 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.258.094 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.258.094 I llm_load_print_meta: max token length = 93
0.00.311.129 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.316.499 I llama_new_context_with_model: n_seq_max     = 1
0.00.316.507 I llama_new_context_with_model: n_ctx         = 4096
0.00.316.507 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.316.507 I llama_new_context_with_model: n_batch       = 2048
0.00.316.508 I llama_new_context_with_model: n_ubatch      = 512
0.00.316.508 I llama_new_context_with_model: flash_attn    = 0
0.00.316.511 I llama_new_context_with_model: freq_base     = 10000.0
0.00.316.512 I llama_new_context_with_model: freq_scale    = 1
0.00.316.513 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.331.568 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.331.583 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.331.685 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.332.962 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.332.970 I llama_new_context_with_model: graph nodes  = 601
0.00.332.970 I llama_new_context_with_model: graph splits = 1
0.00.332.972 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.406.073 I main: llama threadpool init, n_threads = 4
0.00.406.088 I 
0.00.406.183 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.406.186 I 
0.00.406.237 I sampler seed: 2058339973
0.00.406.248 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.406.251 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.406.253 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.406.255 I 
 seconded with a wave of her hand, causing the sand beneath her feet to shift and churn. The ripples in the sand were like miniature waves that danced across

0.01.936.649 I llama_perf_sampler_print:    sampling time =       5.07 ms /    33 runs   (    0.15 ms per token,  6507.59 tokens per second)
0.01.936.652 I llama_perf_context_print:        load time =     405.27 ms
0.01.936.653 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.936.654 I llama_perf_context_print:        eval time =    1512.19 ms /    32 runs   (   47.26 ms per token,    21.16 tokens per second)
0.01.936.655 I llama_perf_context_print:       total time =    1530.58 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.965s
user	10m23.660s
sys	0m6.703s
