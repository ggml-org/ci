+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.605 I build: 3838 (f4d2b884) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.807 I main: llama backend init
0.00.002.748 I main: load the model and apply lora adapter, if any
0.00.025.620 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.807 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.899 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.911 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.913 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.917 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.919 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.920 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.922 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.922 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.923 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.930 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.938 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.939 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.940 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.941 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.038 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.180.792 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.192.824 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.192.831 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.192.832 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.192.833 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.192.833 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.192.834 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.192.835 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.192.839 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.192.839 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.192.840 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.192.841 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.192.842 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.192.850 I llama_model_loader: - type  f32:   37 tensors
0.00.192.854 I llama_model_loader: - type q8_0:  127 tensors
0.00.333.651 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.355.548 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.356.559 I llm_load_vocab: special tokens cache size = 5
0.00.413.993 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.414.048 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.414.049 I llm_load_print_meta: arch             = gemma
0.00.414.050 I llm_load_print_meta: vocab type       = SPM
0.00.414.051 I llm_load_print_meta: n_vocab          = 256000
0.00.414.053 I llm_load_print_meta: n_merges         = 0
0.00.414.053 I llm_load_print_meta: vocab_only       = 0
0.00.414.054 I llm_load_print_meta: n_ctx_train      = 8192
0.00.414.054 I llm_load_print_meta: n_embd           = 2048
0.00.414.055 I llm_load_print_meta: n_layer          = 18
0.00.414.114 I llm_load_print_meta: n_head           = 8
0.00.414.120 I llm_load_print_meta: n_head_kv        = 1
0.00.414.121 I llm_load_print_meta: n_rot            = 256
0.00.414.121 I llm_load_print_meta: n_swa            = 0
0.00.414.122 I llm_load_print_meta: n_embd_head_k    = 256
0.00.414.122 I llm_load_print_meta: n_embd_head_v    = 256
0.00.414.127 I llm_load_print_meta: n_gqa            = 8
0.00.414.131 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.414.136 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.414.137 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.414.139 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.414.140 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.414.140 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.414.141 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.414.146 I llm_load_print_meta: n_ff             = 16384
0.00.414.146 I llm_load_print_meta: n_expert         = 0
0.00.414.147 I llm_load_print_meta: n_expert_used    = 0
0.00.414.147 I llm_load_print_meta: causal attn      = 1
0.00.414.148 I llm_load_print_meta: pooling type     = 0
0.00.414.149 I llm_load_print_meta: rope type        = 2
0.00.414.149 I llm_load_print_meta: rope scaling     = linear
0.00.414.150 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.414.152 I llm_load_print_meta: freq_scale_train = 1
0.00.414.152 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.414.152 I llm_load_print_meta: rope_finetuned   = unknown
0.00.414.153 I llm_load_print_meta: ssm_d_conv       = 0
0.00.414.153 I llm_load_print_meta: ssm_d_inner      = 0
0.00.414.153 I llm_load_print_meta: ssm_d_state      = 0
0.00.414.154 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.414.158 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.414.159 I llm_load_print_meta: model type       = 2B
0.00.414.160 I llm_load_print_meta: model ftype      = Q8_0
0.00.414.160 I llm_load_print_meta: model params     = 2.51 B
0.00.414.161 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.414.162 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.414.162 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.414.162 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.414.163 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.414.163 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.414.164 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.414.164 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.414.170 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.414.171 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.414.171 I llm_load_print_meta: max token length = 93
0.00.414.337 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.515.422 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.515.432 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.515.432 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.515.433 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.515.434 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.515.434 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.521.203 I llama_new_context_with_model: n_ctx      = 8192
0.00.521.212 I llama_new_context_with_model: n_batch    = 2048
0.00.521.212 I llama_new_context_with_model: n_ubatch   = 512
0.00.521.213 I llama_new_context_with_model: flash_attn = 0
0.00.521.216 I llama_new_context_with_model: freq_base  = 10000.0
0.00.521.216 I llama_new_context_with_model: freq_scale = 1
0.00.550.344 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.550.390 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.550.501 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.551.949 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.551.955 I llama_new_context_with_model: graph nodes  = 601
0.00.551.955 I llama_new_context_with_model: graph splits = 1
0.00.551.973 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.164.773 I main: llama threadpool init, n_threads = 4
0.01.164.785 I 
0.01.164.882 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.164.886 I 
0.01.165.057 I sampler seed: 3845915698
0.01.165.067 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.165.072 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.165.073 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.165.073 I 
 increasities.  I am unable to answer this question as it contains sexually suggestive content. [end of text]


0.09.171.904 I llama_perf_sampler_print:    sampling time =      29.22 ms /    20 runs   (    1.46 ms per token,   684.37 tokens per second)
0.09.171.928 I llama_perf_context_print:        load time =    1161.95 ms
0.09.171.930 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.171.938 I llama_perf_context_print:        eval time =    7957.72 ms /    19 runs   (  418.83 ms per token,     2.39 tokens per second)
0.09.171.940 I llama_perf_context_print:       total time =    8007.14 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.628 I build: 3838 (f4d2b884) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.002.820 I main: load the model and apply lora adapter, if any
0.00.024.619 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.706 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.720 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.724 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.727 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.728 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.729 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.731 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.732 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.733 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.739 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.740 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.741 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.742 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.743 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.092.929 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.180.658 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.192.737 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.192.745 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.192.746 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.192.747 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.192.748 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.192.748 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.192.749 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.192.753 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.192.753 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.192.754 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.192.755 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.192.755 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.192.764 I llama_model_loader: - type  f32:   37 tensors
0.00.192.767 I llama_model_loader: - type q8_0:  127 tensors
0.00.330.724 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.353.550 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.354.577 I llm_load_vocab: special tokens cache size = 5
0.00.411.990 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.412.048 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.412.049 I llm_load_print_meta: arch             = gemma
0.00.412.050 I llm_load_print_meta: vocab type       = SPM
0.00.412.051 I llm_load_print_meta: n_vocab          = 256000
0.00.412.053 I llm_load_print_meta: n_merges         = 0
0.00.412.054 I llm_load_print_meta: vocab_only       = 0
0.00.412.054 I llm_load_print_meta: n_ctx_train      = 8192
0.00.412.054 I llm_load_print_meta: n_embd           = 2048
0.00.412.055 I llm_load_print_meta: n_layer          = 18
0.00.412.116 I llm_load_print_meta: n_head           = 8
0.00.412.143 I llm_load_print_meta: n_head_kv        = 1
0.00.412.144 I llm_load_print_meta: n_rot            = 256
0.00.412.144 I llm_load_print_meta: n_swa            = 0
0.00.412.144 I llm_load_print_meta: n_embd_head_k    = 256
0.00.412.145 I llm_load_print_meta: n_embd_head_v    = 256
0.00.412.150 I llm_load_print_meta: n_gqa            = 8
0.00.412.154 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.412.159 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.412.160 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.412.162 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.412.162 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.412.163 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.412.164 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.412.169 I llm_load_print_meta: n_ff             = 16384
0.00.412.170 I llm_load_print_meta: n_expert         = 0
0.00.412.170 I llm_load_print_meta: n_expert_used    = 0
0.00.412.170 I llm_load_print_meta: causal attn      = 1
0.00.412.170 I llm_load_print_meta: pooling type     = 0
0.00.412.171 I llm_load_print_meta: rope type        = 2
0.00.412.171 I llm_load_print_meta: rope scaling     = linear
0.00.412.173 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.412.174 I llm_load_print_meta: freq_scale_train = 1
0.00.412.175 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.412.183 I llm_load_print_meta: rope_finetuned   = unknown
0.00.412.184 I llm_load_print_meta: ssm_d_conv       = 0
0.00.412.185 I llm_load_print_meta: ssm_d_inner      = 0
0.00.412.185 I llm_load_print_meta: ssm_d_state      = 0
0.00.412.185 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.412.185 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.412.186 I llm_load_print_meta: model type       = 2B
0.00.412.187 I llm_load_print_meta: model ftype      = Q8_0
0.00.412.188 I llm_load_print_meta: model params     = 2.51 B
0.00.412.189 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.412.190 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.412.190 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.412.191 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.412.191 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.412.191 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.412.200 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.412.204 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.412.210 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.412.211 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.412.212 I llm_load_print_meta: max token length = 93
0.00.412.396 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.506.462 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.512.083 I llama_new_context_with_model: n_ctx      = 8192
0.00.512.090 I llama_new_context_with_model: n_batch    = 2048
0.00.512.091 I llama_new_context_with_model: n_ubatch   = 512
0.00.512.091 I llama_new_context_with_model: flash_attn = 0
0.00.512.094 I llama_new_context_with_model: freq_base  = 10000.0
0.00.512.095 I llama_new_context_with_model: freq_scale = 1
0.00.540.838 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.540.883 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.540.995 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.542.435 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.542.443 I llama_new_context_with_model: graph nodes  = 601
0.00.542.444 I llama_new_context_with_model: graph splits = 1
0.00.542.461 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.156.970 I main: llama threadpool init, n_threads = 4
0.01.156.980 I 
0.01.157.079 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.157.084 I 
0.01.157.256 I sampler seed: 1576083071
0.01.157.267 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.157.272 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.157.273 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.157.280 I 
 increadibly complex problems by combining readily available techniques and tools.

**Problem:**

A company produces widgets that require specific raw materials to function properly. The company

0.14.987.052 I llama_perf_sampler_print:    sampling time =      49.21 ms /    33 runs   (    1.49 ms per token,   670.64 tokens per second)
0.14.987.055 I llama_perf_context_print:        load time =    1154.07 ms
0.14.987.056 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.987.080 I llama_perf_context_print:        eval time =   13747.22 ms /    32 runs   (  429.60 ms per token,     2.33 tokens per second)
0.14.987.081 I llama_perf_context_print:       total time =   13830.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.630 I build: 3838 (f4d2b884) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.826 I main: llama backend init
0.00.002.758 I main: load the model and apply lora adapter, if any
0.00.024.541 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.721 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.804 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.815 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.817 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.820 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.821 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.822 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.824 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.825 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.825 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.831 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.832 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.833 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.833 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.835 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.092.571 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.179.769 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.191.857 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.191.864 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.191.865 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.191.866 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.191.867 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.191.868 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.191.869 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.191.872 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.191.872 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.191.873 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.191.874 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.191.875 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.191.881 I llama_model_loader: - type  f32:   37 tensors
0.00.191.885 I llama_model_loader: - type q8_0:  127 tensors
0.00.329.905 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.352.405 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.353.435 I llm_load_vocab: special tokens cache size = 5
0.00.420.988 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.421.045 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.421.046 I llm_load_print_meta: arch             = gemma
0.00.421.047 I llm_load_print_meta: vocab type       = SPM
0.00.421.048 I llm_load_print_meta: n_vocab          = 256000
0.00.421.051 I llm_load_print_meta: n_merges         = 0
0.00.421.051 I llm_load_print_meta: vocab_only       = 0
0.00.421.052 I llm_load_print_meta: n_ctx_train      = 8192
0.00.421.052 I llm_load_print_meta: n_embd           = 2048
0.00.421.052 I llm_load_print_meta: n_layer          = 18
0.00.421.116 I llm_load_print_meta: n_head           = 8
0.00.421.123 I llm_load_print_meta: n_head_kv        = 1
0.00.421.123 I llm_load_print_meta: n_rot            = 256
0.00.421.123 I llm_load_print_meta: n_swa            = 0
0.00.421.124 I llm_load_print_meta: n_embd_head_k    = 256
0.00.421.124 I llm_load_print_meta: n_embd_head_v    = 256
0.00.421.129 I llm_load_print_meta: n_gqa            = 8
0.00.421.133 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.421.138 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.421.139 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.421.141 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.421.141 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.421.143 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.421.144 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.421.149 I llm_load_print_meta: n_ff             = 16384
0.00.421.149 I llm_load_print_meta: n_expert         = 0
0.00.421.150 I llm_load_print_meta: n_expert_used    = 0
0.00.421.163 I llm_load_print_meta: causal attn      = 1
0.00.421.163 I llm_load_print_meta: pooling type     = 0
0.00.421.164 I llm_load_print_meta: rope type        = 2
0.00.421.177 I llm_load_print_meta: rope scaling     = linear
0.00.421.179 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.421.180 I llm_load_print_meta: freq_scale_train = 1
0.00.421.180 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.421.181 I llm_load_print_meta: rope_finetuned   = unknown
0.00.421.182 I llm_load_print_meta: ssm_d_conv       = 0
0.00.421.183 I llm_load_print_meta: ssm_d_inner      = 0
0.00.421.183 I llm_load_print_meta: ssm_d_state      = 0
0.00.421.183 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.421.183 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.421.184 I llm_load_print_meta: model type       = 2B
0.00.421.190 I llm_load_print_meta: model ftype      = Q8_0
0.00.421.190 I llm_load_print_meta: model params     = 2.51 B
0.00.421.191 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.421.191 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.421.200 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.421.201 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.421.202 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.421.202 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.421.209 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.421.209 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.421.217 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.421.218 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.421.218 I llm_load_print_meta: max token length = 93
0.00.421.394 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.499.454 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.499.461 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.499.462 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.499.463 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.499.463 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.499.464 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.505.055 I llama_new_context_with_model: n_ctx      = 8192
0.00.505.062 I llama_new_context_with_model: n_batch    = 2048
0.00.505.063 I llama_new_context_with_model: n_ubatch   = 512
0.00.505.064 I llama_new_context_with_model: flash_attn = 0
0.00.505.067 I llama_new_context_with_model: freq_base  = 10000.0
0.00.505.068 I llama_new_context_with_model: freq_scale = 1
0.00.534.788 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.534.828 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.534.938 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.536.319 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.536.325 I llama_new_context_with_model: graph nodes  = 601
0.00.536.326 I llama_new_context_with_model: graph splits = 1
0.00.536.342 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.150.397 I main: llama threadpool init, n_threads = 4
0.01.150.410 I 
0.01.150.502 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.150.503 I 
0.01.150.671 I sampler seed: 2744611959
0.01.150.683 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.150.687 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.150.688 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.150.688 I 
 increasively to the following year.

Can you provide me with a brief summary of the key events in the history of the company during this period?

**

0.14.665.094 I llama_perf_sampler_print:    sampling time =      49.14 ms /    33 runs   (    1.49 ms per token,   671.59 tokens per second)
0.14.665.109 I llama_perf_context_print:        load time =    1147.56 ms
0.14.665.111 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.665.113 I llama_perf_context_print:        eval time =   13432.82 ms /    32 runs   (  419.78 ms per token,     2.38 tokens per second)
0.14.665.115 I llama_perf_context_print:       total time =   13514.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.637 I build: 3838 (f4d2b884) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.002.780 I main: load the model and apply lora adapter, if any
0.00.024.369 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.548 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.629 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.640 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.641 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.646 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.647 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.649 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.650 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.651 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.654 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.661 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.670 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.671 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.671 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.672 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.092.571 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.179.907 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.191.959 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.191.966 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.191.967 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.191.968 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.191.968 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.191.969 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.191.970 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.191.973 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.191.974 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.191.975 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.191.976 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.191.977 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.191.985 I llama_model_loader: - type  f32:   37 tensors
0.00.191.989 I llama_model_loader: - type q8_0:  127 tensors
0.00.341.820 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.365.284 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.366.319 I llm_load_vocab: special tokens cache size = 5
0.00.424.640 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.424.695 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.424.696 I llm_load_print_meta: arch             = gemma
0.00.424.696 I llm_load_print_meta: vocab type       = SPM
0.00.424.697 I llm_load_print_meta: n_vocab          = 256000
0.00.424.700 I llm_load_print_meta: n_merges         = 0
0.00.424.700 I llm_load_print_meta: vocab_only       = 0
0.00.424.701 I llm_load_print_meta: n_ctx_train      = 8192
0.00.424.701 I llm_load_print_meta: n_embd           = 2048
0.00.424.701 I llm_load_print_meta: n_layer          = 18
0.00.424.763 I llm_load_print_meta: n_head           = 8
0.00.424.770 I llm_load_print_meta: n_head_kv        = 1
0.00.424.770 I llm_load_print_meta: n_rot            = 256
0.00.424.771 I llm_load_print_meta: n_swa            = 0
0.00.424.771 I llm_load_print_meta: n_embd_head_k    = 256
0.00.424.771 I llm_load_print_meta: n_embd_head_v    = 256
0.00.424.776 I llm_load_print_meta: n_gqa            = 8
0.00.424.780 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.424.785 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.424.786 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.424.788 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.424.790 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.424.791 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.424.791 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.424.796 I llm_load_print_meta: n_ff             = 16384
0.00.424.796 I llm_load_print_meta: n_expert         = 0
0.00.424.810 I llm_load_print_meta: n_expert_used    = 0
0.00.424.810 I llm_load_print_meta: causal attn      = 1
0.00.424.810 I llm_load_print_meta: pooling type     = 0
0.00.424.811 I llm_load_print_meta: rope type        = 2
0.00.424.811 I llm_load_print_meta: rope scaling     = linear
0.00.424.813 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.424.814 I llm_load_print_meta: freq_scale_train = 1
0.00.424.814 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.424.814 I llm_load_print_meta: rope_finetuned   = unknown
0.00.424.815 I llm_load_print_meta: ssm_d_conv       = 0
0.00.424.822 I llm_load_print_meta: ssm_d_inner      = 0
0.00.424.822 I llm_load_print_meta: ssm_d_state      = 0
0.00.424.822 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.424.823 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.424.823 I llm_load_print_meta: model type       = 2B
0.00.424.825 I llm_load_print_meta: model ftype      = Q8_0
0.00.424.825 I llm_load_print_meta: model params     = 2.51 B
0.00.424.826 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.424.826 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.424.827 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.424.827 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.424.828 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.424.828 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.424.829 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.424.829 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.424.835 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.424.836 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.424.836 I llm_load_print_meta: max token length = 93
0.00.425.011 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.496.302 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.496.313 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.501.952 I llama_new_context_with_model: n_ctx      = 8192
0.00.501.958 I llama_new_context_with_model: n_batch    = 2048
0.00.501.958 I llama_new_context_with_model: n_ubatch   = 512
0.00.501.959 I llama_new_context_with_model: flash_attn = 0
0.00.501.961 I llama_new_context_with_model: freq_base  = 10000.0
0.00.501.962 I llama_new_context_with_model: freq_scale = 1
0.00.530.415 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.530.456 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.530.565 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.531.951 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.531.956 I llama_new_context_with_model: graph nodes  = 601
0.00.531.957 I llama_new_context_with_model: graph splits = 1
0.00.531.972 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.145.015 I main: llama threadpool init, n_threads = 4
0.01.145.027 I 
0.01.145.121 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.145.124 I 
0.01.145.301 I sampler seed: 3403789678
0.01.145.313 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.145.319 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.145.319 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.145.320 I 
 increasels, the enigmatic entity with a swirling vortex of energy at its center.

The vortex pulsed with a sickly luminescence, casting grotesque shadows that danced on

0.14.581.735 I llama_perf_sampler_print:    sampling time =      49.28 ms /    33 runs   (    1.49 ms per token,   669.64 tokens per second)
0.14.581.759 I llama_perf_context_print:        load time =    1142.16 ms
0.14.581.762 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.581.765 I llama_perf_context_print:        eval time =   13354.90 ms /    32 runs   (  417.34 ms per token,     2.40 tokens per second)
0.14.581.766 I llama_perf_context_print:       total time =   13436.73 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m4.344s
user	3m26.983s
sys	0m9.458s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3838 (f4d2b884)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200068.18 ms
main:    total time = 200068.18 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.663 I build: 3838 (f4d2b884) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.002.801 I main: load the model and apply lora adapter, if any
0.00.028.080 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.028.257 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.028.346 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.028.357 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.028.358 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.028.362 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.028.365 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.028.366 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.028.367 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.028.368 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.028.369 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.028.375 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.028.376 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.028.377 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.028.377 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.028.378 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.201 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.478 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.457 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.464 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.465 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.465 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.466 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.467 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.468 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.471 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.471 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.472 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.473 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.195.474 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.481 I llama_model_loader: - type  f32:   37 tensors
0.00.195.484 I llama_model_loader: - type q4_K:  108 tensors
0.00.195.485 I llama_model_loader: - type q6_K:   19 tensors
0.00.338.678 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.360.431 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.361.409 I llm_load_vocab: special tokens cache size = 5
0.00.430.610 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.430.664 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.430.665 I llm_load_print_meta: arch             = gemma
0.00.430.666 I llm_load_print_meta: vocab type       = SPM
0.00.430.667 I llm_load_print_meta: n_vocab          = 256000
0.00.430.669 I llm_load_print_meta: n_merges         = 0
0.00.430.669 I llm_load_print_meta: vocab_only       = 0
0.00.430.670 I llm_load_print_meta: n_ctx_train      = 8192
0.00.430.670 I llm_load_print_meta: n_embd           = 2048
0.00.430.670 I llm_load_print_meta: n_layer          = 18
0.00.430.731 I llm_load_print_meta: n_head           = 8
0.00.430.738 I llm_load_print_meta: n_head_kv        = 1
0.00.430.739 I llm_load_print_meta: n_rot            = 256
0.00.430.739 I llm_load_print_meta: n_swa            = 0
0.00.430.740 I llm_load_print_meta: n_embd_head_k    = 256
0.00.430.740 I llm_load_print_meta: n_embd_head_v    = 256
0.00.430.745 I llm_load_print_meta: n_gqa            = 8
0.00.430.749 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.430.753 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.430.755 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.430.756 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.430.756 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.430.757 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.430.757 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.430.762 I llm_load_print_meta: n_ff             = 16384
0.00.430.762 I llm_load_print_meta: n_expert         = 0
0.00.430.763 I llm_load_print_meta: n_expert_used    = 0
0.00.430.765 I llm_load_print_meta: causal attn      = 1
0.00.430.765 I llm_load_print_meta: pooling type     = 0
0.00.430.765 I llm_load_print_meta: rope type        = 2
0.00.430.766 I llm_load_print_meta: rope scaling     = linear
0.00.430.773 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.430.774 I llm_load_print_meta: freq_scale_train = 1
0.00.430.774 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.430.774 I llm_load_print_meta: rope_finetuned   = unknown
0.00.430.775 I llm_load_print_meta: ssm_d_conv       = 0
0.00.430.775 I llm_load_print_meta: ssm_d_inner      = 0
0.00.430.775 I llm_load_print_meta: ssm_d_state      = 0
0.00.430.776 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.430.776 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.430.777 I llm_load_print_meta: model type       = 2B
0.00.430.777 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.430.778 I llm_load_print_meta: model params     = 2.51 B
0.00.430.778 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.430.780 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.430.780 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.430.781 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.430.781 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.430.782 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.430.782 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.430.783 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.430.788 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.430.790 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.430.790 I llm_load_print_meta: max token length = 93
0.00.430.961 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.490.334 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.490.342 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.490.344 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.490.344 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.490.345 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.490.345 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.495.887 I llama_new_context_with_model: n_ctx      = 8192
0.00.495.894 I llama_new_context_with_model: n_batch    = 2048
0.00.495.895 I llama_new_context_with_model: n_ubatch   = 512
0.00.495.895 I llama_new_context_with_model: flash_attn = 0
0.00.495.898 I llama_new_context_with_model: freq_base  = 10000.0
0.00.495.899 I llama_new_context_with_model: freq_scale = 1
0.00.525.289 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.525.331 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.525.441 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.526.836 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.526.843 I llama_new_context_with_model: graph nodes  = 601
0.00.526.843 I llama_new_context_with_model: graph splits = 1
0.00.526.860 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.108.102 I main: llama threadpool init, n_threads = 4
0.01.108.113 I 
0.01.108.208 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.108.212 I 
0.01.108.384 I sampler seed: 4060172819
0.01.108.395 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.108.401 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.108.402 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.108.403 I 
 squaRED the text to remove any unnecessary information or redundancy.

**Original Text:**

"The cat sat on the mat. The cat sat on the ground

0.12.040.150 I llama_perf_sampler_print:    sampling time =      49.09 ms /    33 runs   (    1.49 ms per token,   672.17 tokens per second)
0.12.040.154 I llama_perf_context_print:        load time =    1105.22 ms
0.12.040.155 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.040.156 I llama_perf_context_print:        eval time =   10849.67 ms /    32 runs   (  339.05 ms per token,     2.95 tokens per second)
0.12.040.157 I llama_perf_context_print:       total time =   10932.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3838 (f4d2b884)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199975.55 ms
main:    total time = 199975.55 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.619 I build: 3838 (f4d2b884) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.826 I main: llama backend init
0.00.002.770 I main: load the model and apply lora adapter, if any
0.00.024.672 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.776 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.791 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.793 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.797 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.799 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.800 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.802 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.803 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.812 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.819 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.821 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.822 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.824 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.827 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.093.343 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.181.006 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.193.134 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.193.142 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.193.143 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.193.144 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.193.144 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.193.145 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.193.146 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.193.159 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.193.162 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.193.170 I llama_model_loader: - type  f32:   37 tensors
0.00.193.174 I llama_model_loader: - type q4_K:  108 tensors
0.00.193.175 I llama_model_loader: - type q6_K:   19 tensors
0.00.339.585 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.361.804 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.362.834 I llm_load_vocab: special tokens cache size = 5
0.00.420.752 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.420.812 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.420.812 I llm_load_print_meta: arch             = gemma
0.00.420.813 I llm_load_print_meta: vocab type       = SPM
0.00.420.814 I llm_load_print_meta: n_vocab          = 256000
0.00.420.817 I llm_load_print_meta: n_merges         = 0
0.00.420.817 I llm_load_print_meta: vocab_only       = 0
0.00.420.818 I llm_load_print_meta: n_ctx_train      = 8192
0.00.420.818 I llm_load_print_meta: n_embd           = 2048
0.00.420.819 I llm_load_print_meta: n_layer          = 18
0.00.420.879 I llm_load_print_meta: n_head           = 8
0.00.420.885 I llm_load_print_meta: n_head_kv        = 1
0.00.420.886 I llm_load_print_meta: n_rot            = 256
0.00.420.886 I llm_load_print_meta: n_swa            = 0
0.00.420.887 I llm_load_print_meta: n_embd_head_k    = 256
0.00.420.887 I llm_load_print_meta: n_embd_head_v    = 256
0.00.420.891 I llm_load_print_meta: n_gqa            = 8
0.00.420.896 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.420.900 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.420.901 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.420.903 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.420.903 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.420.904 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.420.904 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.420.909 I llm_load_print_meta: n_ff             = 16384
0.00.420.909 I llm_load_print_meta: n_expert         = 0
0.00.420.910 I llm_load_print_meta: n_expert_used    = 0
0.00.420.910 I llm_load_print_meta: causal attn      = 1
0.00.420.910 I llm_load_print_meta: pooling type     = 0
0.00.420.911 I llm_load_print_meta: rope type        = 2
0.00.420.911 I llm_load_print_meta: rope scaling     = linear
0.00.420.912 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.420.913 I llm_load_print_meta: freq_scale_train = 1
0.00.420.914 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.420.914 I llm_load_print_meta: rope_finetuned   = unknown
0.00.420.915 I llm_load_print_meta: ssm_d_conv       = 0
0.00.420.915 I llm_load_print_meta: ssm_d_inner      = 0
0.00.420.933 I llm_load_print_meta: ssm_d_state      = 0
0.00.420.934 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.420.935 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.420.935 I llm_load_print_meta: model type       = 2B
0.00.420.936 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.420.937 I llm_load_print_meta: model params     = 2.51 B
0.00.420.938 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.420.938 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.420.939 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.420.939 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.420.939 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.420.940 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.420.940 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.420.941 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.420.947 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.420.948 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.420.949 I llm_load_print_meta: max token length = 93
0.00.421.135 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.479.894 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.485.594 I llama_new_context_with_model: n_ctx      = 8192
0.00.485.601 I llama_new_context_with_model: n_batch    = 2048
0.00.485.601 I llama_new_context_with_model: n_ubatch   = 512
0.00.485.602 I llama_new_context_with_model: flash_attn = 0
0.00.485.604 I llama_new_context_with_model: freq_base  = 10000.0
0.00.485.604 I llama_new_context_with_model: freq_scale = 1
0.00.514.436 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.514.492 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.514.607 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.515.979 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.515.987 I llama_new_context_with_model: graph nodes  = 601
0.00.515.988 I llama_new_context_with_model: graph splits = 1
0.00.516.006 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.098.161 I main: llama threadpool init, n_threads = 4
0.01.098.174 I 
0.01.098.278 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.098.281 I 
0.01.098.467 I sampler seed: 600434046
0.01.098.482 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.098.488 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.098.489 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.098.490 I 
 increamically.

I am unable to provide assistance with this request as it involves potentially harmful or unsafe activities. [end of text]


0.08.998.068 I llama_perf_sampler_print:    sampling time =      35.44 ms /    24 runs   (    1.48 ms per token,   677.12 tokens per second)
0.08.998.071 I llama_perf_context_print:        load time =    1095.31 ms
0.08.998.072 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.998.088 I llama_perf_context_print:        eval time =    7840.72 ms /    23 runs   (  340.90 ms per token,     2.93 tokens per second)
0.08.998.089 I llama_perf_context_print:       total time =    7899.92 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m3.992s
user	50m3.994s
sys	0m6.380s
