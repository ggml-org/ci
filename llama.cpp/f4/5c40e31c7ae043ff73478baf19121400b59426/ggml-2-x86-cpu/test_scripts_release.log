+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.529 I build: 4240 (f45c40e3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.758 I main: llama backend init
0.00.000.765 I main: load the model and apply lora adapter, if any
0.00.021.467 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.479 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.487 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.493 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.497 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.501 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.502 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.503 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.504 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.505 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.506 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.511 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.513 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.514 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.515 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.517 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.214 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.055 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.902 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.908 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.909 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.910 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.910 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.911 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.912 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.914 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.915 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.918 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.919 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.919 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.923 I llama_model_loader: - type  f32:   37 tensors
0.00.131.924 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.621 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.911 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.532 I llm_load_vocab: special tokens cache size = 5
0.00.272.584 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.602 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.603 I llm_load_print_meta: arch             = gemma
0.00.272.603 I llm_load_print_meta: vocab type       = SPM
0.00.272.604 I llm_load_print_meta: n_vocab          = 256000
0.00.272.605 I llm_load_print_meta: n_merges         = 0
0.00.272.605 I llm_load_print_meta: vocab_only       = 0
0.00.272.605 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.606 I llm_load_print_meta: n_embd           = 2048
0.00.272.606 I llm_load_print_meta: n_layer          = 18
0.00.272.618 I llm_load_print_meta: n_head           = 8
0.00.272.619 I llm_load_print_meta: n_head_kv        = 1
0.00.272.619 I llm_load_print_meta: n_rot            = 256
0.00.272.620 I llm_load_print_meta: n_swa            = 0
0.00.272.620 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.620 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.621 I llm_load_print_meta: n_gqa            = 8
0.00.272.622 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.623 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.624 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.625 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.626 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.626 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.626 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.627 I llm_load_print_meta: n_ff             = 16384
0.00.272.628 I llm_load_print_meta: n_expert         = 0
0.00.272.628 I llm_load_print_meta: n_expert_used    = 0
0.00.272.628 I llm_load_print_meta: causal attn      = 1
0.00.272.628 I llm_load_print_meta: pooling type     = 0
0.00.272.629 I llm_load_print_meta: rope type        = 2
0.00.272.629 I llm_load_print_meta: rope scaling     = linear
0.00.272.631 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.631 I llm_load_print_meta: freq_scale_train = 1
0.00.272.632 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.632 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.633 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.633 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.633 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.633 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.634 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.634 I llm_load_print_meta: model type       = 2B
0.00.272.635 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.636 I llm_load_print_meta: model params     = 2.51 B
0.00.272.636 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.637 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.637 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.637 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.638 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.638 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.638 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.639 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.639 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.640 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.640 I llm_load_print_meta: max token length = 93
0.00.374.773 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.374.779 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.374.780 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.374.780 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.374.781 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.374.782 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.380.144 I llama_new_context_with_model: n_seq_max     = 1
0.00.380.150 I llama_new_context_with_model: n_ctx         = 4096
0.00.380.151 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.380.151 I llama_new_context_with_model: n_batch       = 2048
0.00.380.152 I llama_new_context_with_model: n_ubatch      = 512
0.00.380.152 I llama_new_context_with_model: flash_attn    = 0
0.00.380.155 I llama_new_context_with_model: freq_base     = 10000.0
0.00.380.156 I llama_new_context_with_model: freq_scale    = 1
0.00.380.157 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.394.920 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.394.935 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.395.046 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.396.292 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.396.299 I llama_new_context_with_model: graph nodes  = 601
0.00.396.300 I llama_new_context_with_model: graph splits = 1
0.00.396.302 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.482.221 I main: llama threadpool init, n_threads = 4
0.00.482.237 I 
0.00.482.321 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.482.324 I 
0.00.482.377 I sampler seed: 1070662304
0.00.482.388 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.482.392 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.482.393 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.482.394 I 
 increably, 
But the sun and moon, forever veiled in night's embrace,
Their secrets veiled, their beauty veiled in eternal black.



0.02.731.037 I llama_perf_sampler_print:    sampling time =       5.10 ms /    33 runs   (    0.15 ms per token,  6475.67 tokens per second)
0.02.731.039 I llama_perf_context_print:        load time =     481.43 ms
0.02.731.040 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.731.041 I llama_perf_context_print:        eval time =    2228.84 ms /    32 runs   (   69.65 ms per token,    14.36 tokens per second)
0.02.731.042 I llama_perf_context_print:       total time =    2248.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.171 I build: 4240 (f45c40e3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.404 I main: llama backend init
0.00.000.411 I main: load the model and apply lora adapter, if any
0.00.020.651 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.664 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.674 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.677 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.681 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.682 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.683 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.684 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.685 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.686 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.691 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.693 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.694 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.695 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.696 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.444 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.950 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.787 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.793 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.793 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.794 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.794 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.796 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.796 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.798 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.799 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.799 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.800 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.802 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.805 I llama_model_loader: - type  f32:   37 tensors
0.00.130.806 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.394 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.141 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.765 I llm_load_vocab: special tokens cache size = 5
0.00.264.606 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.624 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.625 I llm_load_print_meta: arch             = gemma
0.00.264.625 I llm_load_print_meta: vocab type       = SPM
0.00.264.626 I llm_load_print_meta: n_vocab          = 256000
0.00.264.627 I llm_load_print_meta: n_merges         = 0
0.00.264.627 I llm_load_print_meta: vocab_only       = 0
0.00.264.627 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.628 I llm_load_print_meta: n_embd           = 2048
0.00.264.628 I llm_load_print_meta: n_layer          = 18
0.00.264.641 I llm_load_print_meta: n_head           = 8
0.00.264.642 I llm_load_print_meta: n_head_kv        = 1
0.00.264.642 I llm_load_print_meta: n_rot            = 256
0.00.264.642 I llm_load_print_meta: n_swa            = 0
0.00.264.643 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.643 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.644 I llm_load_print_meta: n_gqa            = 8
0.00.264.645 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.646 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.647 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.648 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.648 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.649 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.649 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.650 I llm_load_print_meta: n_ff             = 16384
0.00.264.651 I llm_load_print_meta: n_expert         = 0
0.00.264.651 I llm_load_print_meta: n_expert_used    = 0
0.00.264.651 I llm_load_print_meta: causal attn      = 1
0.00.264.651 I llm_load_print_meta: pooling type     = 0
0.00.264.651 I llm_load_print_meta: rope type        = 2
0.00.264.652 I llm_load_print_meta: rope scaling     = linear
0.00.264.653 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.654 I llm_load_print_meta: freq_scale_train = 1
0.00.264.654 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.655 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.655 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.655 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.656 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.657 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.657 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.658 I llm_load_print_meta: model type       = 2B
0.00.264.658 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.659 I llm_load_print_meta: model params     = 2.51 B
0.00.264.660 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.660 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.661 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.661 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.661 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.661 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.662 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.663 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.663 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.664 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.664 I llm_load_print_meta: max token length = 93
0.00.358.685 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.364.086 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.093 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.094 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.094 I llama_new_context_with_model: n_batch       = 2048
0.00.364.094 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.095 I llama_new_context_with_model: flash_attn    = 0
0.00.364.097 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.098 I llama_new_context_with_model: freq_scale    = 1
0.00.364.099 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.379.021 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.379.037 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.379.130 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.383 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.391 I llama_new_context_with_model: graph nodes  = 601
0.00.380.392 I llama_new_context_with_model: graph splits = 1
0.00.380.393 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.458 I main: llama threadpool init, n_threads = 4
0.00.461.473 I 
0.00.461.551 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.461.555 I 
0.00.461.605 I sampler seed: 884860025
0.00.461.616 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.631 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.461.636 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.636 I 
 increasities. The first part of this question contains an error. It should read "The first part of this question contains an error." [end of text]


0.02.370.151 I llama_perf_sampler_print:    sampling time =       4.30 ms /    29 runs   (    0.15 ms per token,  6750.47 tokens per second)
0.02.370.153 I llama_perf_context_print:        load time =     461.03 ms
0.02.370.154 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.370.156 I llama_perf_context_print:        eval time =    1892.04 ms /    28 runs   (   67.57 ms per token,    14.80 tokens per second)
0.02.370.156 I llama_perf_context_print:       total time =    1908.70 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.549 I build: 4240 (f45c40e3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.781 I main: llama backend init
0.00.000.789 I main: load the model and apply lora adapter, if any
0.00.021.354 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.363 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.370 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.378 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.382 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.386 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.387 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.388 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.389 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.390 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.391 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.397 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.398 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.398 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.399 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.400 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.407 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.129.563 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.136.382 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.136.388 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.136.389 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.136.390 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.136.390 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.136.391 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.136.392 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.136.394 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.136.395 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.136.396 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.136.397 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.136.398 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.136.401 I llama_model_loader: - type  f32:   37 tensors
0.00.136.402 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.189 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.913 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.373 I llm_load_vocab: special tokens cache size = 5
0.00.267.998 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.016 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.018 I llm_load_print_meta: arch             = gemma
0.00.268.019 I llm_load_print_meta: vocab type       = SPM
0.00.268.028 I llm_load_print_meta: n_vocab          = 256000
0.00.268.028 I llm_load_print_meta: n_merges         = 0
0.00.268.029 I llm_load_print_meta: vocab_only       = 0
0.00.268.029 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.030 I llm_load_print_meta: n_embd           = 2048
0.00.268.030 I llm_load_print_meta: n_layer          = 18
0.00.268.044 I llm_load_print_meta: n_head           = 8
0.00.268.045 I llm_load_print_meta: n_head_kv        = 1
0.00.268.045 I llm_load_print_meta: n_rot            = 256
0.00.268.045 I llm_load_print_meta: n_swa            = 0
0.00.268.045 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.046 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.047 I llm_load_print_meta: n_gqa            = 8
0.00.268.048 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.049 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.050 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.051 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.051 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.052 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.052 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.053 I llm_load_print_meta: n_ff             = 16384
0.00.268.053 I llm_load_print_meta: n_expert         = 0
0.00.268.054 I llm_load_print_meta: n_expert_used    = 0
0.00.268.054 I llm_load_print_meta: causal attn      = 1
0.00.268.055 I llm_load_print_meta: pooling type     = 0
0.00.268.055 I llm_load_print_meta: rope type        = 2
0.00.268.056 I llm_load_print_meta: rope scaling     = linear
0.00.268.057 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.057 I llm_load_print_meta: freq_scale_train = 1
0.00.268.058 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.059 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.059 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.059 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.060 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.060 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.060 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.061 I llm_load_print_meta: model type       = 2B
0.00.268.062 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.062 I llm_load_print_meta: model params     = 2.51 B
0.00.268.063 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.063 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.064 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.065 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.065 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.065 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.066 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.066 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.067 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.067 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.068 I llm_load_print_meta: max token length = 93
0.00.342.395 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.342.401 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.342.402 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.342.402 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.342.403 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.342.404 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.347.671 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.678 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.679 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.680 I llama_new_context_with_model: n_batch       = 2048
0.00.347.680 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.681 I llama_new_context_with_model: flash_attn    = 0
0.00.347.684 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.685 I llama_new_context_with_model: freq_scale    = 1
0.00.347.686 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.949 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.964 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.363.058 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.370 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.364.378 I llama_new_context_with_model: graph nodes  = 601
0.00.364.378 I llama_new_context_with_model: graph splits = 1
0.00.364.381 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.454.017 I main: llama threadpool init, n_threads = 4
0.00.454.033 I 
0.00.454.107 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.454.110 I 
0.00.454.153 I sampler seed: 1688970835
0.00.454.163 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.454.166 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.454.167 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.454.167 I 
 increamically, not chronologically. [end of text]


0.00.957.578 I llama_perf_sampler_print:    sampling time =       1.08 ms /     8 runs   (    0.13 ms per token,  7434.94 tokens per second)
0.00.957.580 I llama_perf_context_print:        load time =     453.21 ms
0.00.957.582 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.957.583 I llama_perf_context_print:        eval time =     498.40 ms /     7 runs   (   71.20 ms per token,    14.04 tokens per second)
0.00.957.584 I llama_perf_context_print:       total time =     503.57 ms /     8 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.537 I build: 4240 (f45c40e3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.736 I main: llama backend init
0.00.000.742 I main: load the model and apply lora adapter, if any
0.00.021.097 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.110 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.118 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.123 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.125 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.128 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.129 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.130 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.131 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.131 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.131 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.136 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.136 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.138 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.138 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.139 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.528 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.252 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.113 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.120 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.121 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.122 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.123 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.124 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.125 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.128 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.129 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.130 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.131 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.132 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.135 I llama_model_loader: - type  f32:   37 tensors
0.00.131.136 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.541 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.074 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.687 I llm_load_vocab: special tokens cache size = 5
0.00.271.578 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.594 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.594 I llm_load_print_meta: arch             = gemma
0.00.271.595 I llm_load_print_meta: vocab type       = SPM
0.00.271.596 I llm_load_print_meta: n_vocab          = 256000
0.00.271.596 I llm_load_print_meta: n_merges         = 0
0.00.271.597 I llm_load_print_meta: vocab_only       = 0
0.00.271.597 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.597 I llm_load_print_meta: n_embd           = 2048
0.00.271.598 I llm_load_print_meta: n_layer          = 18
0.00.271.608 I llm_load_print_meta: n_head           = 8
0.00.271.610 I llm_load_print_meta: n_head_kv        = 1
0.00.271.610 I llm_load_print_meta: n_rot            = 256
0.00.271.611 I llm_load_print_meta: n_swa            = 0
0.00.271.611 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.611 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.612 I llm_load_print_meta: n_gqa            = 8
0.00.271.613 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.614 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.615 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.617 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.617 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.618 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.618 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.619 I llm_load_print_meta: n_ff             = 16384
0.00.271.619 I llm_load_print_meta: n_expert         = 0
0.00.271.619 I llm_load_print_meta: n_expert_used    = 0
0.00.271.620 I llm_load_print_meta: causal attn      = 1
0.00.271.620 I llm_load_print_meta: pooling type     = 0
0.00.271.620 I llm_load_print_meta: rope type        = 2
0.00.271.620 I llm_load_print_meta: rope scaling     = linear
0.00.271.622 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.623 I llm_load_print_meta: freq_scale_train = 1
0.00.271.623 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.624 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.624 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.624 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.625 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.625 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.626 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.626 I llm_load_print_meta: model type       = 2B
0.00.271.627 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.628 I llm_load_print_meta: model params     = 2.51 B
0.00.271.629 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.629 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.629 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.629 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.630 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.630 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.637 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.638 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.638 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.639 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.639 I llm_load_print_meta: max token length = 93
0.00.343.163 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.343.169 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.348.309 I llama_new_context_with_model: n_seq_max     = 1
0.00.348.315 I llama_new_context_with_model: n_ctx         = 4096
0.00.348.316 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.348.316 I llama_new_context_with_model: n_batch       = 2048
0.00.348.317 I llama_new_context_with_model: n_ubatch      = 512
0.00.348.317 I llama_new_context_with_model: flash_attn    = 0
0.00.348.319 I llama_new_context_with_model: freq_base     = 10000.0
0.00.348.320 I llama_new_context_with_model: freq_scale    = 1
0.00.348.321 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.363.125 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.363.139 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.363.234 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.548 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.364.554 I llama_new_context_with_model: graph nodes  = 601
0.00.364.554 I llama_new_context_with_model: graph splits = 1
0.00.364.556 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.455.828 I main: llama threadpool init, n_threads = 4
0.00.455.844 I 
0.00.455.916 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.455.920 I 
0.00.455.960 I sampler seed: 4200184737
0.00.455.971 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.455.979 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.455.979 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.455.979 I 
 increasities? [end of text]


0.00.757.080 I llama_perf_sampler_print:    sampling time =       0.62 ms /     5 runs   (    0.12 ms per token,  8025.68 tokens per second)
0.00.757.083 I llama_perf_context_print:        load time =     455.07 ms
0.00.757.084 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.757.085 I llama_perf_context_print:        eval time =     297.96 ms /     4 runs   (   74.49 ms per token,    13.42 tokens per second)
0.00.757.086 I llama_perf_context_print:       total time =     301.26 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.119s
user	0m22.724s
sys	0m9.369s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4240 (f45c40e3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40255.82 ms
main:    total time = 40255.82 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.551 I build: 4240 (f45c40e3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.764 I main: llama backend init
0.00.000.770 I main: load the model and apply lora adapter, if any
0.00.021.634 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.644 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.652 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.658 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.658 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.663 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.664 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.664 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.665 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.666 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.666 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.670 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.670 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.671 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.671 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.672 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.263 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.752 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.559 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.565 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.566 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.566 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.567 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.567 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.568 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.571 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.571 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.572 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.573 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.573 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.576 I llama_model_loader: - type  f32:   37 tensors
0.00.131.577 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.578 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.907 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.349 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.842 I llm_load_vocab: special tokens cache size = 5
0.00.261.471 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.487 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.488 I llm_load_print_meta: arch             = gemma
0.00.261.488 I llm_load_print_meta: vocab type       = SPM
0.00.261.489 I llm_load_print_meta: n_vocab          = 256000
0.00.261.489 I llm_load_print_meta: n_merges         = 0
0.00.261.490 I llm_load_print_meta: vocab_only       = 0
0.00.261.490 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.490 I llm_load_print_meta: n_embd           = 2048
0.00.261.491 I llm_load_print_meta: n_layer          = 18
0.00.261.502 I llm_load_print_meta: n_head           = 8
0.00.261.503 I llm_load_print_meta: n_head_kv        = 1
0.00.261.504 I llm_load_print_meta: n_rot            = 256
0.00.261.504 I llm_load_print_meta: n_swa            = 0
0.00.261.504 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.505 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.506 I llm_load_print_meta: n_gqa            = 8
0.00.261.507 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.508 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.509 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.511 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.512 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.512 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.513 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.513 I llm_load_print_meta: n_ff             = 16384
0.00.261.514 I llm_load_print_meta: n_expert         = 0
0.00.261.514 I llm_load_print_meta: n_expert_used    = 0
0.00.261.514 I llm_load_print_meta: causal attn      = 1
0.00.261.516 I llm_load_print_meta: pooling type     = 0
0.00.261.516 I llm_load_print_meta: rope type        = 2
0.00.261.516 I llm_load_print_meta: rope scaling     = linear
0.00.261.518 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.519 I llm_load_print_meta: freq_scale_train = 1
0.00.261.519 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.520 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.520 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.520 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.521 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.521 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.522 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.522 I llm_load_print_meta: model type       = 2B
0.00.261.523 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.261.524 I llm_load_print_meta: model params     = 2.51 B
0.00.261.525 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.261.526 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.526 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.527 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.528 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.528 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.528 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.529 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.530 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.530 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.531 I llm_load_print_meta: max token length = 93
0.00.321.325 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.321.332 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.321.333 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.321.333 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.321.334 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.321.334 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.326.587 I llama_new_context_with_model: n_seq_max     = 1
0.00.326.594 I llama_new_context_with_model: n_ctx         = 4096
0.00.326.594 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.326.594 I llama_new_context_with_model: n_batch       = 2048
0.00.326.595 I llama_new_context_with_model: n_ubatch      = 512
0.00.326.596 I llama_new_context_with_model: flash_attn    = 0
0.00.326.598 I llama_new_context_with_model: freq_base     = 10000.0
0.00.326.598 I llama_new_context_with_model: freq_scale    = 1
0.00.326.600 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.340.851 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.340.866 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.340.955 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.342.177 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.342.183 I llama_new_context_with_model: graph nodes  = 601
0.00.342.184 I llama_new_context_with_model: graph splits = 1
0.00.342.186 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.416.555 I main: llama threadpool init, n_threads = 4
0.00.416.570 I 
0.00.416.643 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.416.646 I 
0.00.416.686 I sampler seed: 2200471896
0.00.416.697 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.416.708 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.416.712 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.416.712 I 
 increasively.

I have a feeling that there is a deeper meaning to my existence. A profound mystery that awaits to be uncovered.

I am determined to

0.02.018.296 I llama_perf_sampler_print:    sampling time =       5.18 ms /    33 runs   (    0.16 ms per token,  6369.43 tokens per second)
0.02.018.299 I llama_perf_context_print:        load time =     415.76 ms
0.02.018.300 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.018.302 I llama_perf_context_print:        eval time =    1582.22 ms /    32 runs   (   49.44 ms per token,    20.22 tokens per second)
0.02.018.304 I llama_perf_context_print:       total time =    1601.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4240 (f45c40e3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40193.07 ms
main:    total time = 40193.07 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.180 I build: 4240 (f45c40e3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.408 I main: llama backend init
0.00.000.414 I main: load the model and apply lora adapter, if any
0.00.020.666 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.681 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.688 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.689 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.693 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.694 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.695 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.696 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.696 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.697 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.701 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.701 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.702 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.703 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.704 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.583 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.344 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.208 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.214 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.215 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.216 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.217 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.218 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.219 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.222 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.223 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.226 I llama_model_loader: - type  f32:   37 tensors
0.00.131.227 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.228 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.913 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.403 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.963 I llm_load_vocab: special tokens cache size = 5
0.00.266.711 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.729 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.729 I llm_load_print_meta: arch             = gemma
0.00.266.730 I llm_load_print_meta: vocab type       = SPM
0.00.266.731 I llm_load_print_meta: n_vocab          = 256000
0.00.266.731 I llm_load_print_meta: n_merges         = 0
0.00.266.732 I llm_load_print_meta: vocab_only       = 0
0.00.266.732 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.732 I llm_load_print_meta: n_embd           = 2048
0.00.266.732 I llm_load_print_meta: n_layer          = 18
0.00.266.743 I llm_load_print_meta: n_head           = 8
0.00.266.744 I llm_load_print_meta: n_head_kv        = 1
0.00.266.744 I llm_load_print_meta: n_rot            = 256
0.00.266.745 I llm_load_print_meta: n_swa            = 0
0.00.266.745 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.745 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.746 I llm_load_print_meta: n_gqa            = 8
0.00.266.747 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.748 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.749 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.751 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.751 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.751 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.752 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.753 I llm_load_print_meta: n_ff             = 16384
0.00.266.753 I llm_load_print_meta: n_expert         = 0
0.00.266.753 I llm_load_print_meta: n_expert_used    = 0
0.00.266.754 I llm_load_print_meta: causal attn      = 1
0.00.266.754 I llm_load_print_meta: pooling type     = 0
0.00.266.754 I llm_load_print_meta: rope type        = 2
0.00.266.754 I llm_load_print_meta: rope scaling     = linear
0.00.266.755 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.756 I llm_load_print_meta: freq_scale_train = 1
0.00.266.756 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.757 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.757 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.757 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.757 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.758 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.758 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.759 I llm_load_print_meta: model type       = 2B
0.00.266.759 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.760 I llm_load_print_meta: model params     = 2.51 B
0.00.266.761 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.761 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.762 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.762 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.762 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.763 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.763 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.763 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.764 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.764 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.765 I llm_load_print_meta: max token length = 93
0.00.322.413 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.327.472 I llama_new_context_with_model: n_seq_max     = 1
0.00.327.479 I llama_new_context_with_model: n_ctx         = 4096
0.00.327.479 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.327.479 I llama_new_context_with_model: n_batch       = 2048
0.00.327.480 I llama_new_context_with_model: n_ubatch      = 512
0.00.327.480 I llama_new_context_with_model: flash_attn    = 0
0.00.327.482 I llama_new_context_with_model: freq_base     = 10000.0
0.00.327.483 I llama_new_context_with_model: freq_scale    = 1
0.00.327.484 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.342.021 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.342.036 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.342.127 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.403 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.343.409 I llama_new_context_with_model: graph nodes  = 601
0.00.343.409 I llama_new_context_with_model: graph splits = 1
0.00.343.411 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.416.965 I main: llama threadpool init, n_threads = 4
0.00.416.979 I 
0.00.417.054 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.417.057 I 
0.00.417.100 I sampler seed: 4282695768
0.00.417.111 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.417.124 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.417.127 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.417.127 I 
 squaRE, a new decentralized platform designed to empower the creator economy.

**Key Features:**

* **Decentralized marketplace:** Creators and platforms can create

0.01.980.796 I llama_perf_sampler_print:    sampling time =       5.42 ms /    33 runs   (    0.16 ms per token,  6088.56 tokens per second)
0.01.980.799 I llama_perf_context_print:        load time =     416.53 ms
0.01.980.800 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.980.802 I llama_perf_context_print:        eval time =    1544.68 ms /    32 runs   (   48.27 ms per token,    20.72 tokens per second)
0.01.980.803 I llama_perf_context_print:       total time =    1563.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.241s
user	10m24.016s
sys	0m6.822s
