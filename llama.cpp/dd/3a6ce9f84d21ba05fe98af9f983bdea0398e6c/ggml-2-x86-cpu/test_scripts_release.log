+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.533 I build: 4097 (dd3a6ce9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.707 I main: llama backend init
0.00.000.716 I main: load the model and apply lora adapter, if any
0.00.021.459 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.471 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.478 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.483 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.484 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.487 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.489 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.490 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.491 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.491 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.492 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.496 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.497 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.497 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.498 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.498 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.434 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.434 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.265 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.270 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.271 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.271 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.272 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.273 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.273 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.276 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.276 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.277 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.277 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.278 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.281 I llama_model_loader: - type  f32:   37 tensors
0.00.130.282 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.596 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.257 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.907 I llm_load_vocab: special tokens cache size = 5
0.00.262.983 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.001 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.002 I llm_load_print_meta: arch             = gemma
0.00.263.002 I llm_load_print_meta: vocab type       = SPM
0.00.263.004 I llm_load_print_meta: n_vocab          = 256000
0.00.263.004 I llm_load_print_meta: n_merges         = 0
0.00.263.004 I llm_load_print_meta: vocab_only       = 0
0.00.263.004 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.005 I llm_load_print_meta: n_embd           = 2048
0.00.263.005 I llm_load_print_meta: n_layer          = 18
0.00.263.016 I llm_load_print_meta: n_head           = 8
0.00.263.017 I llm_load_print_meta: n_head_kv        = 1
0.00.263.017 I llm_load_print_meta: n_rot            = 256
0.00.263.018 I llm_load_print_meta: n_swa            = 0
0.00.263.018 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.018 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.019 I llm_load_print_meta: n_gqa            = 8
0.00.263.020 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.021 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.022 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.023 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.023 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.023 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.024 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.025 I llm_load_print_meta: n_ff             = 16384
0.00.263.025 I llm_load_print_meta: n_expert         = 0
0.00.263.025 I llm_load_print_meta: n_expert_used    = 0
0.00.263.025 I llm_load_print_meta: causal attn      = 1
0.00.263.026 I llm_load_print_meta: pooling type     = 0
0.00.263.026 I llm_load_print_meta: rope type        = 2
0.00.263.026 I llm_load_print_meta: rope scaling     = linear
0.00.263.028 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.028 I llm_load_print_meta: freq_scale_train = 1
0.00.263.028 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.029 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.029 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.029 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.029 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.030 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.030 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.030 I llm_load_print_meta: model type       = 2B
0.00.263.031 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.032 I llm_load_print_meta: model params     = 2.51 B
0.00.263.032 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.033 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.033 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.034 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.034 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.034 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.035 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.035 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.035 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.036 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.036 I llm_load_print_meta: max token length = 93
0.00.364.387 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.364.394 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.364.395 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.364.395 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.364.396 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.364.397 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.369.545 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.552 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.552 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.552 I llama_new_context_with_model: n_batch       = 2048
0.00.369.553 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.553 I llama_new_context_with_model: flash_attn    = 0
0.00.369.555 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.556 I llama_new_context_with_model: freq_scale    = 1
0.00.369.557 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.383.741 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.754 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.842 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.169 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.175 I llama_new_context_with_model: graph nodes  = 601
0.00.385.175 I llama_new_context_with_model: graph splits = 1
0.00.385.177 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.885 I main: llama threadpool init, n_threads = 4
0.00.469.900 I 
0.00.469.975 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.469.978 I 
0.00.470.018 I sampler seed: 1931108574
0.00.470.029 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.032 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.032 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.033 I 
 increasities with the following:

- A gentle and calming atmosphere
- Soft lighting and soothing sounds
- Personalized experiences and attention
- A focus on mindfulness

0.02.715.806 I llama_perf_sampler_print:    sampling time =       4.70 ms /    33 runs   (    0.14 ms per token,  7025.76 tokens per second)
0.02.715.808 I llama_perf_context_print:        load time =     469.15 ms
0.02.715.809 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.715.810 I llama_perf_context_print:        eval time =    2226.79 ms /    32 runs   (   69.59 ms per token,    14.37 tokens per second)
0.02.715.811 I llama_perf_context_print:       total time =    2245.93 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.546 I build: 4097 (dd3a6ce9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.738 I main: llama backend init
0.00.000.745 I main: load the model and apply lora adapter, if any
0.00.021.131 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.155 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.162 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.168 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.171 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.172 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.173 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.174 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.175 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.176 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.180 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.181 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.181 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.182 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.183 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.224 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.272 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.078 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.084 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.085 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.086 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.087 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.088 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.089 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.091 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.092 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.093 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.094 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.094 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.098 I llama_model_loader: - type  f32:   37 tensors
0.00.130.100 I llama_model_loader: - type q8_0:  127 tensors
0.00.199.426 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.214 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.238.824 I llm_load_vocab: special tokens cache size = 5
0.00.260.002 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.020 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.020 I llm_load_print_meta: arch             = gemma
0.00.260.021 I llm_load_print_meta: vocab type       = SPM
0.00.260.023 I llm_load_print_meta: n_vocab          = 256000
0.00.260.023 I llm_load_print_meta: n_merges         = 0
0.00.260.023 I llm_load_print_meta: vocab_only       = 0
0.00.260.024 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.024 I llm_load_print_meta: n_embd           = 2048
0.00.260.024 I llm_load_print_meta: n_layer          = 18
0.00.260.036 I llm_load_print_meta: n_head           = 8
0.00.260.037 I llm_load_print_meta: n_head_kv        = 1
0.00.260.037 I llm_load_print_meta: n_rot            = 256
0.00.260.038 I llm_load_print_meta: n_swa            = 0
0.00.260.038 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.038 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.039 I llm_load_print_meta: n_gqa            = 8
0.00.260.040 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.041 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.042 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.043 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.043 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.044 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.044 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.045 I llm_load_print_meta: n_ff             = 16384
0.00.260.045 I llm_load_print_meta: n_expert         = 0
0.00.260.045 I llm_load_print_meta: n_expert_used    = 0
0.00.260.046 I llm_load_print_meta: causal attn      = 1
0.00.260.046 I llm_load_print_meta: pooling type     = 0
0.00.260.046 I llm_load_print_meta: rope type        = 2
0.00.260.047 I llm_load_print_meta: rope scaling     = linear
0.00.260.048 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.049 I llm_load_print_meta: freq_scale_train = 1
0.00.260.049 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.049 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.050 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.050 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.050 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.050 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.050 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.051 I llm_load_print_meta: model type       = 2B
0.00.260.051 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.052 I llm_load_print_meta: model params     = 2.51 B
0.00.260.053 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.054 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.054 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.055 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.055 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.055 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.056 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.056 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.056 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.057 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.057 I llm_load_print_meta: max token length = 93
0.00.355.938 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.361.043 I llama_new_context_with_model: n_seq_max     = 1
0.00.361.048 I llama_new_context_with_model: n_ctx         = 4096
0.00.361.049 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.361.049 I llama_new_context_with_model: n_batch       = 2048
0.00.361.050 I llama_new_context_with_model: n_ubatch      = 512
0.00.361.050 I llama_new_context_with_model: flash_attn    = 0
0.00.361.053 I llama_new_context_with_model: freq_base     = 10000.0
0.00.361.054 I llama_new_context_with_model: freq_scale    = 1
0.00.361.055 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.376.349 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.376.364 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.376.457 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.377.787 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.377.791 I llama_new_context_with_model: graph nodes  = 601
0.00.377.792 I llama_new_context_with_model: graph splits = 1
0.00.377.793 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.458.977 I main: llama threadpool init, n_threads = 4
0.00.458.991 I 
0.00.459.064 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.459.067 I 
0.00.459.108 I sampler seed: 3456370216
0.00.459.119 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.459.123 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.459.124 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.459.124 I 
 increasities that capture the essence of both the tragic and the triumphant.

**Answer:**

**The Dance of Sorrow and Triumph**

The dance of sorrow

0.02.636.908 I llama_perf_sampler_print:    sampling time =       4.85 ms /    33 runs   (    0.15 ms per token,  6799.92 tokens per second)
0.02.636.911 I llama_perf_context_print:        load time =     458.21 ms
0.02.636.912 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.636.913 I llama_perf_context_print:        eval time =    2159.56 ms /    32 runs   (   67.49 ms per token,    14.82 tokens per second)
0.02.636.914 I llama_perf_context_print:       total time =    2177.94 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.587 I build: 4097 (dd3a6ce9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.788 I main: llama backend init
0.00.000.796 I main: load the model and apply lora adapter, if any
0.00.021.290 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.298 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.306 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.311 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.312 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.316 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.316 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.317 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.318 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.318 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.319 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.322 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.323 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.323 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.324 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.324 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.856 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.286 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.061 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.066 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.067 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.068 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.068 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.069 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.070 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.072 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.072 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.073 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.073 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.075 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.079 I llama_model_loader: - type  f32:   37 tensors
0.00.131.080 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.710 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.099 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.783 I llm_load_vocab: special tokens cache size = 5
0.00.275.791 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.811 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.812 I llm_load_print_meta: arch             = gemma
0.00.275.813 I llm_load_print_meta: vocab type       = SPM
0.00.275.814 I llm_load_print_meta: n_vocab          = 256000
0.00.275.815 I llm_load_print_meta: n_merges         = 0
0.00.275.815 I llm_load_print_meta: vocab_only       = 0
0.00.275.815 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.815 I llm_load_print_meta: n_embd           = 2048
0.00.275.816 I llm_load_print_meta: n_layer          = 18
0.00.275.828 I llm_load_print_meta: n_head           = 8
0.00.275.829 I llm_load_print_meta: n_head_kv        = 1
0.00.275.829 I llm_load_print_meta: n_rot            = 256
0.00.275.830 I llm_load_print_meta: n_swa            = 0
0.00.275.830 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.831 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.832 I llm_load_print_meta: n_gqa            = 8
0.00.275.833 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.834 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.835 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.837 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.837 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.838 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.838 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.839 I llm_load_print_meta: n_ff             = 16384
0.00.275.840 I llm_load_print_meta: n_expert         = 0
0.00.275.841 I llm_load_print_meta: n_expert_used    = 0
0.00.275.842 I llm_load_print_meta: causal attn      = 1
0.00.275.842 I llm_load_print_meta: pooling type     = 0
0.00.275.842 I llm_load_print_meta: rope type        = 2
0.00.275.843 I llm_load_print_meta: rope scaling     = linear
0.00.275.845 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.848 I llm_load_print_meta: freq_scale_train = 1
0.00.275.848 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.849 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.849 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.849 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.850 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.850 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.851 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.851 I llm_load_print_meta: model type       = 2B
0.00.275.852 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.853 I llm_load_print_meta: model params     = 2.51 B
0.00.275.854 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.855 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.856 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.856 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.857 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.858 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.858 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.859 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.859 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.860 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.860 I llm_load_print_meta: max token length = 93
0.00.353.710 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.353.716 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.353.717 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.353.718 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.353.718 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.353.719 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.358.864 I llama_new_context_with_model: n_seq_max     = 1
0.00.358.871 I llama_new_context_with_model: n_ctx         = 4096
0.00.358.871 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.358.872 I llama_new_context_with_model: n_batch       = 2048
0.00.358.872 I llama_new_context_with_model: n_ubatch      = 512
0.00.358.872 I llama_new_context_with_model: flash_attn    = 0
0.00.358.874 I llama_new_context_with_model: freq_base     = 10000.0
0.00.358.875 I llama_new_context_with_model: freq_scale    = 1
0.00.358.876 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.372.941 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.372.955 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.373.044 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.374.264 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.374.271 I llama_new_context_with_model: graph nodes  = 601
0.00.374.271 I llama_new_context_with_model: graph splits = 1
0.00.374.273 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.459.388 I main: llama threadpool init, n_threads = 4
0.00.459.402 I 
0.00.459.478 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.459.481 I 
0.00.459.526 I sampler seed: 1729591367
0.00.459.537 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.459.540 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.459.541 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.459.541 I 
 increasities on a daily basis. I am not able to provide any personal information or personally identifiable information as I am a chatbot assistant and am unable to access or

0.02.676.760 I llama_perf_sampler_print:    sampling time =       4.87 ms /    33 runs   (    0.15 ms per token,  6772.01 tokens per second)
0.02.676.763 I llama_perf_context_print:        load time =     458.57 ms
0.02.676.764 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.676.765 I llama_perf_context_print:        eval time =    2199.33 ms /    32 runs   (   68.73 ms per token,    14.55 tokens per second)
0.02.676.766 I llama_perf_context_print:       total time =    2217.38 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.573 I build: 4097 (dd3a6ce9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.772 I main: llama backend init
0.00.000.779 I main: load the model and apply lora adapter, if any
0.00.020.923 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.931 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.938 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.947 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.949 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.953 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.954 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.955 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.956 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.957 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.957 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.961 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.961 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.962 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.963 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.963 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.456 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.707 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.528 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.535 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.535 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.536 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.537 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.538 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.539 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.542 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.543 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.544 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.545 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.546 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.550 I llama_model_loader: - type  f32:   37 tensors
0.00.130.552 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.325 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.218 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.743 I llm_load_vocab: special tokens cache size = 5
0.00.261.462 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.477 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.477 I llm_load_print_meta: arch             = gemma
0.00.261.478 I llm_load_print_meta: vocab type       = SPM
0.00.261.478 I llm_load_print_meta: n_vocab          = 256000
0.00.261.479 I llm_load_print_meta: n_merges         = 0
0.00.261.479 I llm_load_print_meta: vocab_only       = 0
0.00.261.479 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.480 I llm_load_print_meta: n_embd           = 2048
0.00.261.480 I llm_load_print_meta: n_layer          = 18
0.00.261.490 I llm_load_print_meta: n_head           = 8
0.00.261.491 I llm_load_print_meta: n_head_kv        = 1
0.00.261.492 I llm_load_print_meta: n_rot            = 256
0.00.261.492 I llm_load_print_meta: n_swa            = 0
0.00.261.492 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.492 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.493 I llm_load_print_meta: n_gqa            = 8
0.00.261.494 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.495 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.496 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.497 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.498 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.498 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.498 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.499 I llm_load_print_meta: n_ff             = 16384
0.00.261.500 I llm_load_print_meta: n_expert         = 0
0.00.261.500 I llm_load_print_meta: n_expert_used    = 0
0.00.261.500 I llm_load_print_meta: causal attn      = 1
0.00.261.501 I llm_load_print_meta: pooling type     = 0
0.00.261.501 I llm_load_print_meta: rope type        = 2
0.00.261.501 I llm_load_print_meta: rope scaling     = linear
0.00.261.503 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.503 I llm_load_print_meta: freq_scale_train = 1
0.00.261.504 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.504 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.504 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.504 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.505 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.505 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.505 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.506 I llm_load_print_meta: model type       = 2B
0.00.261.506 I llm_load_print_meta: model ftype      = Q8_0
0.00.261.507 I llm_load_print_meta: model params     = 2.51 B
0.00.261.508 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.261.508 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.509 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.509 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.509 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.510 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.510 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.510 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.511 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.511 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.511 I llm_load_print_meta: max token length = 93
0.00.332.848 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.332.854 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.337.994 I llama_new_context_with_model: n_seq_max     = 1
0.00.338.000 I llama_new_context_with_model: n_ctx         = 4096
0.00.338.000 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.338.001 I llama_new_context_with_model: n_batch       = 2048
0.00.338.001 I llama_new_context_with_model: n_ubatch      = 512
0.00.338.002 I llama_new_context_with_model: flash_attn    = 0
0.00.338.004 I llama_new_context_with_model: freq_base     = 10000.0
0.00.338.005 I llama_new_context_with_model: freq_scale    = 1
0.00.338.006 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.352.342 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.352.356 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.352.453 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.353.701 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.353.708 I llama_new_context_with_model: graph nodes  = 601
0.00.353.708 I llama_new_context_with_model: graph splits = 1
0.00.353.709 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.442.106 I main: llama threadpool init, n_threads = 4
0.00.442.119 I 
0.00.442.190 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.442.193 I 
0.00.442.235 I sampler seed: 956373190
0.00.442.246 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.442.249 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.442.250 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.442.259 I 
 increably,
To encompass the vastness of the universe.

What is the meaning of the passage?

The passage is a metaphor for the ever-

0.02.865.884 I llama_perf_sampler_print:    sampling time =       5.06 ms /    33 runs   (    0.15 ms per token,  6526.90 tokens per second)
0.02.865.887 I llama_perf_context_print:        load time =     441.31 ms
0.02.865.888 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.865.890 I llama_perf_context_print:        eval time =    2403.20 ms /    32 runs   (   75.10 ms per token,    13.32 tokens per second)
0.02.865.890 I llama_perf_context_print:       total time =    2423.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.303s
user	0m39.097s
sys	0m9.278s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4097 (dd3a6ce9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40181.90 ms
main:    total time = 40181.90 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.548 I build: 4097 (dd3a6ce9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.744 I main: llama backend init
0.00.000.751 I main: load the model and apply lora adapter, if any
0.00.021.389 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.398 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.406 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.411 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.412 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.416 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.417 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.417 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.418 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.418 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.418 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.422 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.422 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.423 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.423 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.424 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.017 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.344 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.194 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.200 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.200 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.201 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.201 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.202 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.203 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.206 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.206 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.206 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.207 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.208 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.212 I llama_model_loader: - type  f32:   37 tensors
0.00.131.213 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.214 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.058 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.686 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.295 I llm_load_vocab: special tokens cache size = 5
0.00.276.326 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.341 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.342 I llm_load_print_meta: arch             = gemma
0.00.276.342 I llm_load_print_meta: vocab type       = SPM
0.00.276.343 I llm_load_print_meta: n_vocab          = 256000
0.00.276.344 I llm_load_print_meta: n_merges         = 0
0.00.276.345 I llm_load_print_meta: vocab_only       = 0
0.00.276.345 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.345 I llm_load_print_meta: n_embd           = 2048
0.00.276.346 I llm_load_print_meta: n_layer          = 18
0.00.276.357 I llm_load_print_meta: n_head           = 8
0.00.276.358 I llm_load_print_meta: n_head_kv        = 1
0.00.276.358 I llm_load_print_meta: n_rot            = 256
0.00.276.359 I llm_load_print_meta: n_swa            = 0
0.00.276.359 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.359 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.360 I llm_load_print_meta: n_gqa            = 8
0.00.276.361 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.362 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.363 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.364 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.365 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.365 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.365 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.366 I llm_load_print_meta: n_ff             = 16384
0.00.276.367 I llm_load_print_meta: n_expert         = 0
0.00.276.367 I llm_load_print_meta: n_expert_used    = 0
0.00.276.367 I llm_load_print_meta: causal attn      = 1
0.00.276.368 I llm_load_print_meta: pooling type     = 0
0.00.276.368 I llm_load_print_meta: rope type        = 2
0.00.276.368 I llm_load_print_meta: rope scaling     = linear
0.00.276.369 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.370 I llm_load_print_meta: freq_scale_train = 1
0.00.276.370 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.371 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.371 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.371 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.371 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.372 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.372 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.373 I llm_load_print_meta: model type       = 2B
0.00.276.373 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.276.374 I llm_load_print_meta: model params     = 2.51 B
0.00.276.375 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.276.375 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.376 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.376 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.376 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.377 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.377 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.377 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.378 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.378 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.378 I llm_load_print_meta: max token length = 93
0.00.337.264 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.337.269 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.337.270 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.337.271 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.337.271 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.337.272 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.342.514 I llama_new_context_with_model: n_seq_max     = 1
0.00.342.521 I llama_new_context_with_model: n_ctx         = 4096
0.00.342.521 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.342.522 I llama_new_context_with_model: n_batch       = 2048
0.00.342.522 I llama_new_context_with_model: n_ubatch      = 512
0.00.342.523 I llama_new_context_with_model: flash_attn    = 0
0.00.342.525 I llama_new_context_with_model: freq_base     = 10000.0
0.00.342.526 I llama_new_context_with_model: freq_scale    = 1
0.00.342.526 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.357.550 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.357.564 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.653 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.973 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.980 I llama_new_context_with_model: graph nodes  = 601
0.00.358.980 I llama_new_context_with_model: graph splits = 1
0.00.358.982 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.438.187 I main: llama threadpool init, n_threads = 4
0.00.438.201 I 
0.00.438.276 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.438.279 I 
0.00.438.320 I sampler seed: 1023646685
0.00.438.331 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.438.335 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.438.336 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.438.336 I 
 seconally.

**Answer:** I am unable to generate responses that are sexually suggestive in nature. My purpose is to provide safe and ethical responses. [end of text]


0.01.984.739 I llama_perf_sampler_print:    sampling time =       4.69 ms /    32 runs   (    0.15 ms per token,  6823.03 tokens per second)
0.01.984.743 I llama_perf_context_print:        load time =     437.42 ms
0.01.984.744 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.984.746 I llama_perf_context_print:        eval time =    1528.47 ms /    31 runs   (   49.31 ms per token,    20.28 tokens per second)
0.01.984.747 I llama_perf_context_print:       total time =    1546.56 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4097 (dd3a6ce9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40157.44 ms
main:    total time = 40157.44 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.573 I build: 4097 (dd3a6ce9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.787 I main: llama backend init
0.00.000.794 I main: load the model and apply lora adapter, if any
0.00.021.256 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.273 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.281 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.282 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.288 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.292 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.293 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.294 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.295 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.296 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.301 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.301 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.302 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.303 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.304 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.423 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.649 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.494 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.500 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.501 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.501 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.502 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.503 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.503 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.506 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.506 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.510 I llama_model_loader: - type  f32:   37 tensors
0.00.130.512 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.513 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.403 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.791 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.318 I llm_load_vocab: special tokens cache size = 5
0.00.261.223 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.240 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.240 I llm_load_print_meta: arch             = gemma
0.00.261.241 I llm_load_print_meta: vocab type       = SPM
0.00.261.241 I llm_load_print_meta: n_vocab          = 256000
0.00.261.242 I llm_load_print_meta: n_merges         = 0
0.00.261.242 I llm_load_print_meta: vocab_only       = 0
0.00.261.243 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.243 I llm_load_print_meta: n_embd           = 2048
0.00.261.243 I llm_load_print_meta: n_layer          = 18
0.00.261.255 I llm_load_print_meta: n_head           = 8
0.00.261.256 I llm_load_print_meta: n_head_kv        = 1
0.00.261.256 I llm_load_print_meta: n_rot            = 256
0.00.261.256 I llm_load_print_meta: n_swa            = 0
0.00.261.257 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.257 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.258 I llm_load_print_meta: n_gqa            = 8
0.00.261.259 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.260 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.261 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.262 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.262 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.263 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.263 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.264 I llm_load_print_meta: n_ff             = 16384
0.00.261.264 I llm_load_print_meta: n_expert         = 0
0.00.261.265 I llm_load_print_meta: n_expert_used    = 0
0.00.261.265 I llm_load_print_meta: causal attn      = 1
0.00.261.265 I llm_load_print_meta: pooling type     = 0
0.00.261.266 I llm_load_print_meta: rope type        = 2
0.00.261.266 I llm_load_print_meta: rope scaling     = linear
0.00.261.267 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.268 I llm_load_print_meta: freq_scale_train = 1
0.00.261.268 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.269 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.269 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.269 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.270 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.270 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.270 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.270 I llm_load_print_meta: model type       = 2B
0.00.261.271 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.261.272 I llm_load_print_meta: model params     = 2.51 B
0.00.261.272 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.261.273 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.273 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.274 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.274 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.274 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.275 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.275 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.275 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.276 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.276 I llm_load_print_meta: max token length = 93
0.00.319.495 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.324.904 I llama_new_context_with_model: n_seq_max     = 1
0.00.324.910 I llama_new_context_with_model: n_ctx         = 4096
0.00.324.910 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.324.911 I llama_new_context_with_model: n_batch       = 2048
0.00.324.911 I llama_new_context_with_model: n_ubatch      = 512
0.00.324.912 I llama_new_context_with_model: flash_attn    = 0
0.00.324.914 I llama_new_context_with_model: freq_base     = 10000.0
0.00.324.915 I llama_new_context_with_model: freq_scale    = 1
0.00.324.916 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.339.806 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.339.820 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.339.924 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.341.122 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.341.128 I llama_new_context_with_model: graph nodes  = 601
0.00.341.129 I llama_new_context_with_model: graph splits = 1
0.00.341.130 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.416.007 I main: llama threadpool init, n_threads = 4
0.00.416.023 I 
0.00.416.113 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.416.117 I 
0.00.416.164 I sampler seed: 2514344606
0.00.416.174 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.416.178 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.416.180 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.416.180 I 
 increasities in the workplace and ways to mitigate them.

**1. Understanding the Causes of Workplace Conflict**

- Lack of clear communication
- Misunderstand

0.01.985.744 I llama_perf_sampler_print:    sampling time =       5.03 ms /    33 runs   (    0.15 ms per token,  6561.94 tokens per second)
0.01.985.747 I llama_perf_context_print:        load time =     415.19 ms
0.01.985.750 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.985.752 I llama_perf_context_print:        eval time =    1551.06 ms /    32 runs   (   48.47 ms per token,    20.63 tokens per second)
0.01.985.752 I llama_perf_context_print:       total time =    1569.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.067s
user	10m23.741s
sys	0m6.857s
