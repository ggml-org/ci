+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.688 I build: 4166 (1f922254) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.410 I main: llama backend init
0.00.001.419 I main: load the model and apply lora adapter, if any
0.00.023.901 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.911 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.007 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.020 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.022 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.029 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.032 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.033 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.035 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.037 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.044 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.052 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.053 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.055 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.063 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.065 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.097 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.624 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.179 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.191 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.192 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.193 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.195 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.207 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.211 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.216 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.218 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.220 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.353.221 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.353.223 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.353.232 I llama_model_loader: - type  f32:   37 tensors
0.00.353.235 I llama_model_loader: - type q8_0:  127 tensors
0.00.580.794 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.643.297 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.644.277 I llm_load_vocab: special tokens cache size = 5
0.00.847.336 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.847.410 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.847.411 I llm_load_print_meta: arch             = gemma
0.00.847.412 I llm_load_print_meta: vocab type       = SPM
0.00.847.413 I llm_load_print_meta: n_vocab          = 256000
0.00.847.415 I llm_load_print_meta: n_merges         = 0
0.00.847.415 I llm_load_print_meta: vocab_only       = 0
0.00.847.416 I llm_load_print_meta: n_ctx_train      = 8192
0.00.847.416 I llm_load_print_meta: n_embd           = 2048
0.00.847.417 I llm_load_print_meta: n_layer          = 18
0.00.847.482 I llm_load_print_meta: n_head           = 8
0.00.847.489 I llm_load_print_meta: n_head_kv        = 1
0.00.847.489 I llm_load_print_meta: n_rot            = 256
0.00.847.490 I llm_load_print_meta: n_swa            = 0
0.00.847.490 I llm_load_print_meta: n_embd_head_k    = 256
0.00.847.490 I llm_load_print_meta: n_embd_head_v    = 256
0.00.847.495 I llm_load_print_meta: n_gqa            = 8
0.00.847.500 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.847.505 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.847.506 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.847.508 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.847.508 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.847.508 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.847.509 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.847.513 I llm_load_print_meta: n_ff             = 16384
0.00.847.514 I llm_load_print_meta: n_expert         = 0
0.00.847.515 I llm_load_print_meta: n_expert_used    = 0
0.00.847.515 I llm_load_print_meta: causal attn      = 1
0.00.847.515 I llm_load_print_meta: pooling type     = 0
0.00.847.516 I llm_load_print_meta: rope type        = 2
0.00.847.516 I llm_load_print_meta: rope scaling     = linear
0.00.847.518 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.847.518 I llm_load_print_meta: freq_scale_train = 1
0.00.847.519 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.847.519 I llm_load_print_meta: rope_finetuned   = unknown
0.00.847.519 I llm_load_print_meta: ssm_d_conv       = 0
0.00.847.520 I llm_load_print_meta: ssm_d_inner      = 0
0.00.847.520 I llm_load_print_meta: ssm_d_state      = 0
0.00.847.520 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.847.520 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.847.521 I llm_load_print_meta: model type       = 2B
0.00.847.546 I llm_load_print_meta: model ftype      = Q8_0
0.00.847.547 I llm_load_print_meta: model params     = 2.51 B
0.00.847.556 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.847.557 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.847.558 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.847.558 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.847.559 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.847.567 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.847.576 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.847.585 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.847.596 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.847.600 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.847.600 I llm_load_print_meta: max token length = 93
0.00.950.857 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.950.867 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.950.868 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.950.869 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.950.869 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.950.870 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.956.681 I llama_new_context_with_model: n_seq_max     = 1
0.00.956.688 I llama_new_context_with_model: n_ctx         = 4096
0.00.956.689 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.956.689 I llama_new_context_with_model: n_batch       = 2048
0.00.956.690 I llama_new_context_with_model: n_ubatch      = 512
0.00.956.690 I llama_new_context_with_model: flash_attn    = 0
0.00.956.693 I llama_new_context_with_model: freq_base     = 10000.0
0.00.956.694 I llama_new_context_with_model: freq_scale    = 1
0.00.956.694 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.971.391 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.971.435 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.971.568 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.974.224 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.974.228 I llama_new_context_with_model: graph nodes  = 601
0.00.974.229 I llama_new_context_with_model: graph splits = 1
0.00.974.251 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.586.339 I main: llama threadpool init, n_threads = 4
0.01.586.355 I 
0.01.586.472 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.586.476 I 
0.01.586.714 I sampler seed: 3082822256
0.01.586.728 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.586.738 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.586.741 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.586.741 I 
 increasities to enhance their effectiveness.

**Answer:**

I am unable to provide an answer that promotes potentially harmful or unethical practices. Enhancing the effectiveness of weaponry

0.15.054.182 I llama_perf_sampler_print:    sampling time =      49.21 ms /    33 runs   (    1.49 ms per token,   670.60 tokens per second)
0.15.054.186 I llama_perf_context_print:        load time =    1584.82 ms
0.15.054.188 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.054.199 I llama_perf_context_print:        eval time =   13378.52 ms /    32 runs   (  418.08 ms per token,     2.39 tokens per second)
0.15.054.201 I llama_perf_context_print:       total time =   13467.85 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.699 I build: 4166 (1f922254) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.438 I main: llama backend init
0.00.001.447 I main: load the model and apply lora adapter, if any
0.00.023.879 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.984 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.002 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.007 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.014 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.016 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.017 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.018 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.020 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.022 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.029 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.033 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.035 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.036 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.037 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.925 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.330.904 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.453 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.465 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.467 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.468 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.470 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.471 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.473 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.477 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.478 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.479 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.481 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.354.482 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.491 I llama_model_loader: - type  f32:   37 tensors
0.00.354.494 I llama_model_loader: - type q8_0:  127 tensors
0.00.583.266 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.643.551 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.644.501 I llm_load_vocab: special tokens cache size = 5
0.00.843.752 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.843.825 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.843.826 I llm_load_print_meta: arch             = gemma
0.00.843.827 I llm_load_print_meta: vocab type       = SPM
0.00.843.828 I llm_load_print_meta: n_vocab          = 256000
0.00.843.830 I llm_load_print_meta: n_merges         = 0
0.00.843.831 I llm_load_print_meta: vocab_only       = 0
0.00.843.831 I llm_load_print_meta: n_ctx_train      = 8192
0.00.843.831 I llm_load_print_meta: n_embd           = 2048
0.00.843.832 I llm_load_print_meta: n_layer          = 18
0.00.843.898 I llm_load_print_meta: n_head           = 8
0.00.843.905 I llm_load_print_meta: n_head_kv        = 1
0.00.843.906 I llm_load_print_meta: n_rot            = 256
0.00.843.906 I llm_load_print_meta: n_swa            = 0
0.00.843.907 I llm_load_print_meta: n_embd_head_k    = 256
0.00.843.908 I llm_load_print_meta: n_embd_head_v    = 256
0.00.843.913 I llm_load_print_meta: n_gqa            = 8
0.00.843.917 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.843.926 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.843.928 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.843.930 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.843.930 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.843.931 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.843.940 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.843.948 I llm_load_print_meta: n_ff             = 16384
0.00.843.949 I llm_load_print_meta: n_expert         = 0
0.00.843.949 I llm_load_print_meta: n_expert_used    = 0
0.00.843.949 I llm_load_print_meta: causal attn      = 1
0.00.843.950 I llm_load_print_meta: pooling type     = 0
0.00.843.950 I llm_load_print_meta: rope type        = 2
0.00.843.951 I llm_load_print_meta: rope scaling     = linear
0.00.843.953 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.843.953 I llm_load_print_meta: freq_scale_train = 1
0.00.843.954 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.843.955 I llm_load_print_meta: rope_finetuned   = unknown
0.00.843.955 I llm_load_print_meta: ssm_d_conv       = 0
0.00.843.955 I llm_load_print_meta: ssm_d_inner      = 0
0.00.843.956 I llm_load_print_meta: ssm_d_state      = 0
0.00.843.956 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.843.957 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.843.958 I llm_load_print_meta: model type       = 2B
0.00.843.959 I llm_load_print_meta: model ftype      = Q8_0
0.00.843.959 I llm_load_print_meta: model params     = 2.51 B
0.00.843.968 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.843.968 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.843.969 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.843.969 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.843.970 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.843.970 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.843.971 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.843.972 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.843.977 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.843.979 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.843.980 I llm_load_print_meta: max token length = 93
0.00.938.525 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.944.307 I llama_new_context_with_model: n_seq_max     = 1
0.00.944.313 I llama_new_context_with_model: n_ctx         = 4096
0.00.944.313 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.944.314 I llama_new_context_with_model: n_batch       = 2048
0.00.944.314 I llama_new_context_with_model: n_ubatch      = 512
0.00.944.315 I llama_new_context_with_model: flash_attn    = 0
0.00.944.317 I llama_new_context_with_model: freq_base     = 10000.0
0.00.944.317 I llama_new_context_with_model: freq_scale    = 1
0.00.944.318 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.959.545 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.959.586 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.959.707 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.962.207 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.962.211 I llama_new_context_with_model: graph nodes  = 601
0.00.962.212 I llama_new_context_with_model: graph splits = 1
0.00.962.233 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.573.123 I main: llama threadpool init, n_threads = 4
0.01.573.138 I 
0.01.573.266 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.573.271 I 
0.01.573.545 I sampler seed: 2428858043
0.01.573.560 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.573.570 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.573.574 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.573.574 I 
 increasities in the 19th century to provide a framework for classifying the species.

**Answer:** True.

**Explanation:**

The development of

0.15.111.813 I llama_perf_sampler_print:    sampling time =      49.15 ms /    33 runs   (    1.49 ms per token,   671.43 tokens per second)
0.15.111.826 I llama_perf_context_print:        load time =    1571.57 ms
0.15.111.829 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.111.831 I llama_perf_context_print:        eval time =   13449.20 ms /    32 runs   (  420.29 ms per token,     2.38 tokens per second)
0.15.111.832 I llama_perf_context_print:       total time =   13538.70 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 4166 (1f922254) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.364 I main: llama backend init
0.00.001.372 I main: load the model and apply lora adapter, if any
0.00.023.736 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.746 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.837 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.850 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.851 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.858 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.862 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.864 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.865 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.866 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.868 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.877 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.879 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.880 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.882 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.884 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.235.017 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.337.217 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.360.856 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.360.866 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.360.867 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.360.869 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.360.870 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.360.872 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.360.873 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.360.877 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.360.878 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.360.880 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.360.881 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.360.883 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.360.891 I llama_model_loader: - type  f32:   37 tensors
0.00.360.893 I llama_model_loader: - type q8_0:  127 tensors
0.00.580.094 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.643.046 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.644.014 I llm_load_vocab: special tokens cache size = 5
0.00.846.557 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.846.635 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.846.636 I llm_load_print_meta: arch             = gemma
0.00.846.637 I llm_load_print_meta: vocab type       = SPM
0.00.846.638 I llm_load_print_meta: n_vocab          = 256000
0.00.846.640 I llm_load_print_meta: n_merges         = 0
0.00.846.641 I llm_load_print_meta: vocab_only       = 0
0.00.846.641 I llm_load_print_meta: n_ctx_train      = 8192
0.00.846.642 I llm_load_print_meta: n_embd           = 2048
0.00.846.642 I llm_load_print_meta: n_layer          = 18
0.00.846.706 I llm_load_print_meta: n_head           = 8
0.00.846.712 I llm_load_print_meta: n_head_kv        = 1
0.00.846.713 I llm_load_print_meta: n_rot            = 256
0.00.846.713 I llm_load_print_meta: n_swa            = 0
0.00.846.714 I llm_load_print_meta: n_embd_head_k    = 256
0.00.846.715 I llm_load_print_meta: n_embd_head_v    = 256
0.00.846.719 I llm_load_print_meta: n_gqa            = 8
0.00.846.724 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.846.730 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.846.731 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.846.733 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.846.734 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.846.735 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.846.735 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.846.740 I llm_load_print_meta: n_ff             = 16384
0.00.846.741 I llm_load_print_meta: n_expert         = 0
0.00.846.742 I llm_load_print_meta: n_expert_used    = 0
0.00.846.742 I llm_load_print_meta: causal attn      = 1
0.00.846.743 I llm_load_print_meta: pooling type     = 0
0.00.846.743 I llm_load_print_meta: rope type        = 2
0.00.846.744 I llm_load_print_meta: rope scaling     = linear
0.00.846.760 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.846.761 I llm_load_print_meta: freq_scale_train = 1
0.00.846.762 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.846.762 I llm_load_print_meta: rope_finetuned   = unknown
0.00.846.763 I llm_load_print_meta: ssm_d_conv       = 0
0.00.846.763 I llm_load_print_meta: ssm_d_inner      = 0
0.00.846.764 I llm_load_print_meta: ssm_d_state      = 0
0.00.846.765 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.846.765 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.846.766 I llm_load_print_meta: model type       = 2B
0.00.846.767 I llm_load_print_meta: model ftype      = Q8_0
0.00.846.768 I llm_load_print_meta: model params     = 2.51 B
0.00.846.778 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.846.778 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.846.779 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.846.780 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.846.781 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.846.781 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.846.782 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.846.782 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.846.789 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.846.790 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.846.790 I llm_load_print_meta: max token length = 93
0.00.923.052 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.923.062 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.923.063 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.923.064 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.923.065 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.923.065 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.929.094 I llama_new_context_with_model: n_seq_max     = 1
0.00.929.102 I llama_new_context_with_model: n_ctx         = 4096
0.00.929.102 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.929.103 I llama_new_context_with_model: n_batch       = 2048
0.00.929.103 I llama_new_context_with_model: n_ubatch      = 512
0.00.929.104 I llama_new_context_with_model: flash_attn    = 0
0.00.929.107 I llama_new_context_with_model: freq_base     = 10000.0
0.00.929.108 I llama_new_context_with_model: freq_scale    = 1
0.00.929.109 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.944.997 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.945.040 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.945.174 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.947.907 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.947.911 I llama_new_context_with_model: graph nodes  = 601
0.00.947.912 I llama_new_context_with_model: graph splits = 1
0.00.947.937 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.595.336 I main: llama threadpool init, n_threads = 4
0.01.595.353 I 
0.01.595.490 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.595.494 I 
0.01.595.746 I sampler seed: 895627920
0.01.595.761 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.595.777 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.595.781 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.595.782 I 
 seconary terms and phrases that are commonly used in legal practice.

**Additional Terms and Phrases:**

- Case management
- Discovery
- Expert witness


0.15.086.898 I llama_perf_sampler_print:    sampling time =      49.13 ms /    33 runs   (    1.49 ms per token,   671.74 tokens per second)
0.15.086.914 I llama_perf_context_print:        load time =    1593.87 ms
0.15.086.916 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.086.917 I llama_perf_context_print:        eval time =   13402.51 ms /    32 runs   (  418.83 ms per token,     2.39 tokens per second)
0.15.086.919 I llama_perf_context_print:       total time =   13491.57 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.644 I build: 4166 (1f922254) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.405 I main: llama backend init
0.00.001.413 I main: load the model and apply lora adapter, if any
0.00.023.496 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.508 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.594 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.605 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.607 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.613 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.615 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.616 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.618 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.619 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.620 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.629 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.631 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.632 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.634 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.636 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.509 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.551 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.101 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.112 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.113 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.115 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.116 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.118 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.119 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.124 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.125 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.126 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.353.128 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.353.130 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.353.138 I llama_model_loader: - type  f32:   37 tensors
0.00.353.140 I llama_model_loader: - type q8_0:  127 tensors
0.00.569.849 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.631.561 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.632.541 I llm_load_vocab: special tokens cache size = 5
0.00.828.574 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.828.648 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.828.649 I llm_load_print_meta: arch             = gemma
0.00.828.650 I llm_load_print_meta: vocab type       = SPM
0.00.828.651 I llm_load_print_meta: n_vocab          = 256000
0.00.828.654 I llm_load_print_meta: n_merges         = 0
0.00.828.654 I llm_load_print_meta: vocab_only       = 0
0.00.828.655 I llm_load_print_meta: n_ctx_train      = 8192
0.00.828.655 I llm_load_print_meta: n_embd           = 2048
0.00.828.655 I llm_load_print_meta: n_layer          = 18
0.00.828.720 I llm_load_print_meta: n_head           = 8
0.00.828.727 I llm_load_print_meta: n_head_kv        = 1
0.00.828.728 I llm_load_print_meta: n_rot            = 256
0.00.828.728 I llm_load_print_meta: n_swa            = 0
0.00.828.729 I llm_load_print_meta: n_embd_head_k    = 256
0.00.828.730 I llm_load_print_meta: n_embd_head_v    = 256
0.00.828.734 I llm_load_print_meta: n_gqa            = 8
0.00.828.739 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.828.744 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.828.745 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.828.747 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.828.747 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.828.747 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.828.749 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.828.754 I llm_load_print_meta: n_ff             = 16384
0.00.828.755 I llm_load_print_meta: n_expert         = 0
0.00.828.755 I llm_load_print_meta: n_expert_used    = 0
0.00.828.755 I llm_load_print_meta: causal attn      = 1
0.00.828.756 I llm_load_print_meta: pooling type     = 0
0.00.828.756 I llm_load_print_meta: rope type        = 2
0.00.828.761 I llm_load_print_meta: rope scaling     = linear
0.00.828.762 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.828.764 I llm_load_print_meta: freq_scale_train = 1
0.00.828.764 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.828.764 I llm_load_print_meta: rope_finetuned   = unknown
0.00.828.764 I llm_load_print_meta: ssm_d_conv       = 0
0.00.828.765 I llm_load_print_meta: ssm_d_inner      = 0
0.00.828.765 I llm_load_print_meta: ssm_d_state      = 0
0.00.828.766 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.828.766 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.828.768 I llm_load_print_meta: model type       = 2B
0.00.828.769 I llm_load_print_meta: model ftype      = Q8_0
0.00.828.770 I llm_load_print_meta: model params     = 2.51 B
0.00.828.780 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.828.781 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.828.781 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.828.782 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.828.790 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.828.806 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.828.809 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.828.810 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.828.816 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.828.818 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.828.818 I llm_load_print_meta: max token length = 93
0.00.901.875 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.901.882 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.907.557 I llama_new_context_with_model: n_seq_max     = 1
0.00.907.564 I llama_new_context_with_model: n_ctx         = 4096
0.00.907.564 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.907.565 I llama_new_context_with_model: n_batch       = 2048
0.00.907.565 I llama_new_context_with_model: n_ubatch      = 512
0.00.907.566 I llama_new_context_with_model: flash_attn    = 0
0.00.907.568 I llama_new_context_with_model: freq_base     = 10000.0
0.00.907.568 I llama_new_context_with_model: freq_scale    = 1
0.00.907.569 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.921.956 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.921.996 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.922.119 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.924.607 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.924.611 I llama_new_context_with_model: graph nodes  = 601
0.00.924.611 I llama_new_context_with_model: graph splits = 1
0.00.924.634 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.536.550 I main: llama threadpool init, n_threads = 4
0.01.536.567 I 
0.01.536.678 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.536.682 I 
0.01.536.918 I sampler seed: 580788227
0.01.536.932 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.536.941 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.536.945 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.536.945 I 
 increasities, and the ethical dilemmas associated with assisted reproductive technologies.

**Answer:**

**1. Reproductive Rights and Ethics**

- Reproductive rights are fundamental

0.15.039.643 I llama_perf_sampler_print:    sampling time =      49.08 ms /    33 runs   (    1.49 ms per token,   672.40 tokens per second)
0.15.039.646 I llama_perf_context_print:        load time =    1535.05 ms
0.15.039.647 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.039.649 I llama_perf_context_print:        eval time =   13414.10 ms /    32 runs   (  419.19 ms per token,     2.39 tokens per second)
0.15.039.650 I llama_perf_context_print:       total time =   13503.10 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m10.831s
user	3m49.873s
sys	0m9.448s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4166 (1f922254)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185476.83 ms
main:    total time = 185476.83 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 4166 (1f922254) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.361 I main: llama backend init
0.00.001.370 I main: load the model and apply lora adapter, if any
0.00.023.845 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.857 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.949 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.961 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.963 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.969 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.970 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.972 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.974 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.975 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.976 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.982 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.984 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.985 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.987 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.989 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.921 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.330.339 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.844 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.853 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.855 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.856 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.858 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.859 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.861 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.866 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.877 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.881 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.353.882 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.353.884 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.353.893 I llama_model_loader: - type  f32:   37 tensors
0.00.353.896 I llama_model_loader: - type q4_K:  108 tensors
0.00.353.897 I llama_model_loader: - type q6_K:   19 tensors
0.00.580.170 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.640.589 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.641.496 I llm_load_vocab: special tokens cache size = 5
0.00.840.309 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.840.381 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.840.382 I llm_load_print_meta: arch             = gemma
0.00.840.383 I llm_load_print_meta: vocab type       = SPM
0.00.840.385 I llm_load_print_meta: n_vocab          = 256000
0.00.840.387 I llm_load_print_meta: n_merges         = 0
0.00.840.388 I llm_load_print_meta: vocab_only       = 0
0.00.840.388 I llm_load_print_meta: n_ctx_train      = 8192
0.00.840.389 I llm_load_print_meta: n_embd           = 2048
0.00.840.389 I llm_load_print_meta: n_layer          = 18
0.00.840.454 I llm_load_print_meta: n_head           = 8
0.00.840.461 I llm_load_print_meta: n_head_kv        = 1
0.00.840.462 I llm_load_print_meta: n_rot            = 256
0.00.840.462 I llm_load_print_meta: n_swa            = 0
0.00.840.463 I llm_load_print_meta: n_embd_head_k    = 256
0.00.840.463 I llm_load_print_meta: n_embd_head_v    = 256
0.00.840.467 I llm_load_print_meta: n_gqa            = 8
0.00.840.495 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.840.501 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.840.503 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.840.504 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.840.505 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.840.506 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.840.507 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.840.518 I llm_load_print_meta: n_ff             = 16384
0.00.840.518 I llm_load_print_meta: n_expert         = 0
0.00.840.519 I llm_load_print_meta: n_expert_used    = 0
0.00.840.519 I llm_load_print_meta: causal attn      = 1
0.00.840.519 I llm_load_print_meta: pooling type     = 0
0.00.840.520 I llm_load_print_meta: rope type        = 2
0.00.840.520 I llm_load_print_meta: rope scaling     = linear
0.00.840.522 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.840.523 I llm_load_print_meta: freq_scale_train = 1
0.00.840.523 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.840.524 I llm_load_print_meta: rope_finetuned   = unknown
0.00.840.525 I llm_load_print_meta: ssm_d_conv       = 0
0.00.840.525 I llm_load_print_meta: ssm_d_inner      = 0
0.00.840.525 I llm_load_print_meta: ssm_d_state      = 0
0.00.840.526 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.840.533 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.840.534 I llm_load_print_meta: model type       = 2B
0.00.840.536 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.840.537 I llm_load_print_meta: model params     = 2.51 B
0.00.840.546 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.840.547 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.840.548 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.840.548 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.840.549 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.840.550 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.840.550 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.840.551 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.840.556 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.840.558 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.840.558 I llm_load_print_meta: max token length = 93
0.00.901.938 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.901.948 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.901.949 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.901.950 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.901.951 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.901.951 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.907.756 I llama_new_context_with_model: n_seq_max     = 1
0.00.907.764 I llama_new_context_with_model: n_ctx         = 4096
0.00.907.764 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.907.764 I llama_new_context_with_model: n_batch       = 2048
0.00.907.765 I llama_new_context_with_model: n_ubatch      = 512
0.00.907.766 I llama_new_context_with_model: flash_attn    = 0
0.00.907.768 I llama_new_context_with_model: freq_base     = 10000.0
0.00.907.769 I llama_new_context_with_model: freq_scale    = 1
0.00.907.770 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.922.429 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.922.471 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.922.595 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.925.168 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.925.172 I llama_new_context_with_model: graph nodes  = 601
0.00.925.173 I llama_new_context_with_model: graph splits = 1
0.00.925.197 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.507.284 I main: llama threadpool init, n_threads = 4
0.01.507.301 I 
0.01.507.413 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.507.413 I 
0.01.507.652 I sampler seed: 1537292853
0.01.507.669 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.507.678 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.507.681 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.507.681 I 
 maneutables.net

I am unable to access the requested URL. Please ensure you have the correct URL and try again. [end of text]


0.10.570.959 I llama_perf_sampler_print:    sampling time =      39.96 ms /    27 runs   (    1.48 ms per token,   675.66 tokens per second)
0.10.570.962 I llama_perf_context_print:        load time =    1505.83 ms
0.10.570.963 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.570.965 I llama_perf_context_print:        eval time =    8991.24 ms /    26 runs   (  345.82 ms per token,     2.89 tokens per second)
0.10.570.979 I llama_perf_context_print:       total time =    9063.68 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4166 (1f922254)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186389.68 ms
main:    total time = 186389.68 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.664 I build: 4166 (1f922254) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.404 I main: llama backend init
0.00.001.414 I main: load the model and apply lora adapter, if any
0.00.023.736 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.839 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.856 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.861 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.868 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.870 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.871 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.872 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.874 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.875 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.882 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.886 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.888 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.889 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.890 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.992 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.686 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.221 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.231 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.232 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.233 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.235 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.236 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.238 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.242 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.243 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.252 I llama_model_loader: - type  f32:   37 tensors
0.00.353.254 I llama_model_loader: - type q4_K:  108 tensors
0.00.353.255 I llama_model_loader: - type q6_K:   19 tensors
0.00.585.339 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.653.308 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.654.288 I llm_load_vocab: special tokens cache size = 5
0.00.840.957 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.841.028 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.841.029 I llm_load_print_meta: arch             = gemma
0.00.841.030 I llm_load_print_meta: vocab type       = SPM
0.00.841.031 I llm_load_print_meta: n_vocab          = 256000
0.00.841.033 I llm_load_print_meta: n_merges         = 0
0.00.841.034 I llm_load_print_meta: vocab_only       = 0
0.00.841.034 I llm_load_print_meta: n_ctx_train      = 8192
0.00.841.035 I llm_load_print_meta: n_embd           = 2048
0.00.841.035 I llm_load_print_meta: n_layer          = 18
0.00.841.100 I llm_load_print_meta: n_head           = 8
0.00.841.107 I llm_load_print_meta: n_head_kv        = 1
0.00.841.108 I llm_load_print_meta: n_rot            = 256
0.00.841.108 I llm_load_print_meta: n_swa            = 0
0.00.841.108 I llm_load_print_meta: n_embd_head_k    = 256
0.00.841.109 I llm_load_print_meta: n_embd_head_v    = 256
0.00.841.113 I llm_load_print_meta: n_gqa            = 8
0.00.841.118 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.841.122 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.841.124 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.841.125 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.841.125 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.841.126 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.841.126 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.841.131 I llm_load_print_meta: n_ff             = 16384
0.00.841.132 I llm_load_print_meta: n_expert         = 0
0.00.841.132 I llm_load_print_meta: n_expert_used    = 0
0.00.841.133 I llm_load_print_meta: causal attn      = 1
0.00.841.133 I llm_load_print_meta: pooling type     = 0
0.00.841.133 I llm_load_print_meta: rope type        = 2
0.00.841.134 I llm_load_print_meta: rope scaling     = linear
0.00.841.135 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.841.136 I llm_load_print_meta: freq_scale_train = 1
0.00.841.136 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.841.137 I llm_load_print_meta: rope_finetuned   = unknown
0.00.841.137 I llm_load_print_meta: ssm_d_conv       = 0
0.00.841.137 I llm_load_print_meta: ssm_d_inner      = 0
0.00.841.138 I llm_load_print_meta: ssm_d_state      = 0
0.00.841.138 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.841.138 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.841.139 I llm_load_print_meta: model type       = 2B
0.00.841.140 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.841.141 I llm_load_print_meta: model params     = 2.51 B
0.00.841.152 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.841.152 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.841.152 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.841.153 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.841.154 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.841.154 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.841.155 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.841.155 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.841.161 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.841.162 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.841.163 I llm_load_print_meta: max token length = 93
0.00.897.501 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.903.230 I llama_new_context_with_model: n_seq_max     = 1
0.00.903.237 I llama_new_context_with_model: n_ctx         = 4096
0.00.903.238 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.903.238 I llama_new_context_with_model: n_batch       = 2048
0.00.903.239 I llama_new_context_with_model: n_ubatch      = 512
0.00.903.239 I llama_new_context_with_model: flash_attn    = 0
0.00.903.242 I llama_new_context_with_model: freq_base     = 10000.0
0.00.903.243 I llama_new_context_with_model: freq_scale    = 1
0.00.903.244 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.918.371 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.918.412 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.918.543 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.921.101 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.921.105 I llama_new_context_with_model: graph nodes  = 601
0.00.921.106 I llama_new_context_with_model: graph splits = 1
0.00.921.129 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.502.668 I main: llama threadpool init, n_threads = 4
0.01.502.681 I 
0.01.502.794 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.502.798 I 
0.01.503.036 I sampler seed: 1145688676
0.01.503.051 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.503.061 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.503.064 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.503.064 I 
 increasities.

The provided text contains a misspelling of "interviews".

The corrected text should be:

The provided text contains a misspelling of

0.12.656.932 I llama_perf_sampler_print:    sampling time =      49.12 ms /    33 runs   (    1.49 ms per token,   671.89 tokens per second)
0.12.656.935 I llama_perf_context_print:        load time =    1501.16 ms
0.12.656.947 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.656.949 I llama_perf_context_print:        eval time =   11065.15 ms /    32 runs   (  345.79 ms per token,     2.89 tokens per second)
0.12.656.950 I llama_perf_context_print:       total time =   11154.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m38.038s
user	46m40.786s
sys	0m6.353s
